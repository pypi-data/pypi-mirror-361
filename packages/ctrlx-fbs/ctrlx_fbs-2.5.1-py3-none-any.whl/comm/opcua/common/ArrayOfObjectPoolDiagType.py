# automatically generated by the FlatBuffers compiler, do not modify

# namespace: common

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArrayOfObjectPoolDiagType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArrayOfObjectPoolDiagType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArrayOfObjectPoolDiagType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ArrayOfObjectPoolDiagType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArrayOfObjectPoolDiagType
    def ObjectPoolDiagArray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.common.ObjectPoolDiagType import ObjectPoolDiagType
            obj = ObjectPoolDiagType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ArrayOfObjectPoolDiagType
    def ObjectPoolDiagArrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArrayOfObjectPoolDiagType
    def ObjectPoolDiagArrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ArrayOfObjectPoolDiagTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return ArrayOfObjectPoolDiagTypeStart(builder)
def ArrayOfObjectPoolDiagTypeAddObjectPoolDiagArray(builder, objectPoolDiagArray): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objectPoolDiagArray), 0)
def AddObjectPoolDiagArray(builder, objectPoolDiagArray):
    return ArrayOfObjectPoolDiagTypeAddObjectPoolDiagArray(builder, objectPoolDiagArray)
def ArrayOfObjectPoolDiagTypeStartObjectPoolDiagArrayVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartObjectPoolDiagArrayVector(builder, numElems):
    return ArrayOfObjectPoolDiagTypeStartObjectPoolDiagArrayVector(builder, numElems)
def ArrayOfObjectPoolDiagTypeEnd(builder): return builder.EndObject()
def End(builder):
    return ArrayOfObjectPoolDiagTypeEnd(builder)
import comm.opcua.common.ObjectPoolDiagType
try:
    from typing import List
except:
    pass

class ArrayOfObjectPoolDiagTypeT(object):

    # ArrayOfObjectPoolDiagTypeT
    def __init__(self):
        self.objectPoolDiagArray = None  # type: List[comm.opcua.common.ObjectPoolDiagType.ObjectPoolDiagTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        arrayOfObjectPoolDiagType = ArrayOfObjectPoolDiagType()
        arrayOfObjectPoolDiagType.Init(buf, pos)
        return cls.InitFromObj(arrayOfObjectPoolDiagType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, arrayOfObjectPoolDiagType):
        x = ArrayOfObjectPoolDiagTypeT()
        x._UnPack(arrayOfObjectPoolDiagType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.objectPoolDiagArray == other.objectPoolDiagArray

    # ArrayOfObjectPoolDiagTypeT
    def _UnPack(self, arrayOfObjectPoolDiagType):
        if arrayOfObjectPoolDiagType is None:
            return
        if not arrayOfObjectPoolDiagType.ObjectPoolDiagArrayIsNone():
            self.objectPoolDiagArray = []
            for i in range(arrayOfObjectPoolDiagType.ObjectPoolDiagArrayLength()):
                if arrayOfObjectPoolDiagType.ObjectPoolDiagArray(i) is None:
                    self.objectPoolDiagArray.append(None)
                else:
                    objectPoolDiagType_ = comm.opcua.common.ObjectPoolDiagType.ObjectPoolDiagTypeT.InitFromObj(arrayOfObjectPoolDiagType.ObjectPoolDiagArray(i))
                    self.objectPoolDiagArray.append(objectPoolDiagType_)

    # ArrayOfObjectPoolDiagTypeT
    def Pack(self, builder):
        if self.objectPoolDiagArray is not None:
            objectPoolDiagArraylist = []
            for i in range(len(self.objectPoolDiagArray)):
                objectPoolDiagArraylist.append(self.objectPoolDiagArray[i].Pack(builder))
            ArrayOfObjectPoolDiagTypeStartObjectPoolDiagArrayVector(builder, len(self.objectPoolDiagArray))
            for i in reversed(range(len(self.objectPoolDiagArray))):
                builder.PrependUOffsetTRelative(objectPoolDiagArraylist[i])
            objectPoolDiagArray = builder.EndVector()
        ArrayOfObjectPoolDiagTypeStart(builder)
        if self.objectPoolDiagArray is not None:
            ArrayOfObjectPoolDiagTypeAddObjectPoolDiagArray(builder, objectPoolDiagArray)
        arrayOfObjectPoolDiagType = ArrayOfObjectPoolDiagTypeEnd(builder)
        return arrayOfObjectPoolDiagType
