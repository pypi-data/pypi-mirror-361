# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_AxsStop(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_AxsStop()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_AxsStop(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_AxsStop
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_AxsStop
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_AxsStop
    def DoStop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Cmd_AxsStop
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_AxsStop
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def Cmd_AxsStopStart(builder): builder.StartObject(4)
def Start(builder):
    return Cmd_AxsStopStart(builder)
def Cmd_AxsStopAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Cmd_AxsStopAddBase(builder, base)
def Cmd_AxsStopAddDoStop(builder, doStop): builder.PrependBoolSlot(1, doStop, 0)
def AddDoStop(builder, doStop):
    return Cmd_AxsStopAddDoStop(builder, doStop)
def Cmd_AxsStopAddDec(builder, dec): builder.PrependFloat64Slot(2, dec, 0.0)
def AddDec(builder, dec):
    return Cmd_AxsStopAddDec(builder, dec)
def Cmd_AxsStopAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(3, jrkDec, 0.0)
def AddJrkDec(builder, jrkDec):
    return Cmd_AxsStopAddJrkDec(builder, jrkDec)
def Cmd_AxsStopEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_AxsStopEnd(builder)
import script.manager.fbtypes.Cmd_Base
try:
    from typing import Optional
except:
    pass

class Cmd_AxsStopT(object):

    # Cmd_AxsStopT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.doStop = False  # type: bool
        self.dec = 0.0  # type: float
        self.jrkDec = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdAxsStop = Cmd_AxsStop()
        cmdAxsStop.Init(buf, pos)
        return cls.InitFromObj(cmdAxsStop)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdAxsStop):
        x = Cmd_AxsStopT()
        x._UnPack(cmdAxsStop)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.doStop == other.doStop and \
            self.dec == other.dec and \
            self.jrkDec == other.jrkDec

    # Cmd_AxsStopT
    def _UnPack(self, cmdAxsStop):
        if cmdAxsStop is None:
            return
        if cmdAxsStop.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdAxsStop.Base())
        self.doStop = cmdAxsStop.DoStop()
        self.dec = cmdAxsStop.Dec()
        self.jrkDec = cmdAxsStop.JrkDec()

    # Cmd_AxsStopT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        Cmd_AxsStopStart(builder)
        if self.base is not None:
            Cmd_AxsStopAddBase(builder, base)
        Cmd_AxsStopAddDoStop(builder, self.doStop)
        Cmd_AxsStopAddDec(builder, self.dec)
        Cmd_AxsStopAddJrkDec(builder, self.jrkDec)
        cmdAxsStop = Cmd_AxsStopEnd(builder)
        return cmdAxsStop
