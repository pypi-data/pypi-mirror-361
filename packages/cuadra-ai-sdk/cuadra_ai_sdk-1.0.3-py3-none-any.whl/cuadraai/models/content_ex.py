# -*- coding: utf-8 -*-

"""
cuadraai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from cuadraai.api_helper import APIHelper
from cuadraai.models.inline_data_ex import InlineDataEx


class ContentEx(object):

    """Implementation of the 'ContentEx' model.

    Request content

    Attributes:
        text (str): Text is the task you want the AI to solve.
        inline_data (InlineDataEx): Input Reference is the name of the file,
            if you're request is from a type other than text, and it's
            required for most types. It has to contain the same name as the
            file attached in the request.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "text": 'text',
        "inline_data": 'inlineData'
    }

    _optionals = [
        'inline_data',
    ]

    def __init__(self,
                 text=None,
                 inline_data=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the ContentEx class"""

        # Initialize members of the class
        self.text = text 
        if inline_data is not APIHelper.SKIP:
            self.inline_data = inline_data 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        text = dictionary.get("text") if dictionary.get("text") else None
        inline_data = InlineDataEx.from_dictionary(dictionary.get('inlineData')) if 'inlineData' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(text,
                   inline_data,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'text={self.text!r}, '
                f'inline_data={(self.inline_data if hasattr(self, "inline_data") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'text={self.text!s}, '
                f'inline_data={(self.inline_data if hasattr(self, "inline_data") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
