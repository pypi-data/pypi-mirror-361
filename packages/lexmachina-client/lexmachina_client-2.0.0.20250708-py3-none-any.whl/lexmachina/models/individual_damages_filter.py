# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20250708
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from lexmachina.models.judgment_source_filter import JudgmentSourceFilter
from lexmachina.models.minimumamount import Minimumamount
from lexmachina.models.name_type_filter import NameTypeFilter
from lexmachina.models.timing_filter import TimingFilter
from typing import Optional, Set
from typing_extensions import Self

class IndividualDamagesFilter(BaseModel):
    """
    IndividualDamagesFilter
    """ # noqa: E501
    judgment_source: Optional[JudgmentSourceFilter] = Field(default=None, alias="judgmentSource")
    name_type: Optional[NameTypeFilter] = Field(default=None, alias="nameType")
    var_date: Optional[TimingFilter] = Field(default=None, alias="date")
    awarded_to_parties: Optional[List[StrictInt]] = Field(default=None, alias="awardedToParties")
    awarded_against_parties: Optional[List[StrictInt]] = Field(default=None, alias="awardedAgainstParties")
    minimum_amount: Optional[Minimumamount] = Field(default=None, alias="minimumAmount")
    __properties: ClassVar[List[str]] = ["judgmentSource", "nameType", "date", "awardedToParties", "awardedAgainstParties", "minimumAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndividualDamagesFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of judgment_source
        if self.judgment_source:
            _dict['judgmentSource'] = self.judgment_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name_type
        if self.name_type:
            _dict['nameType'] = self.name_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_date
        if self.var_date:
            _dict['date'] = self.var_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of minimum_amount
        if self.minimum_amount:
            _dict['minimumAmount'] = self.minimum_amount.to_dict()
        # set to None if judgment_source (nullable) is None
        # and model_fields_set contains the field
        if self.judgment_source is None and "judgment_source" in self.model_fields_set:
            _dict['judgmentSource'] = None

        # set to None if name_type (nullable) is None
        # and model_fields_set contains the field
        if self.name_type is None and "name_type" in self.model_fields_set:
            _dict['nameType'] = None

        # set to None if var_date (nullable) is None
        # and model_fields_set contains the field
        if self.var_date is None and "var_date" in self.model_fields_set:
            _dict['date'] = None

        # set to None if awarded_to_parties (nullable) is None
        # and model_fields_set contains the field
        if self.awarded_to_parties is None and "awarded_to_parties" in self.model_fields_set:
            _dict['awardedToParties'] = None

        # set to None if awarded_against_parties (nullable) is None
        # and model_fields_set contains the field
        if self.awarded_against_parties is None and "awarded_against_parties" in self.model_fields_set:
            _dict['awardedAgainstParties'] = None

        # set to None if minimum_amount (nullable) is None
        # and model_fields_set contains the field
        if self.minimum_amount is None and "minimum_amount" in self.model_fields_set:
            _dict['minimumAmount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndividualDamagesFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "judgmentSource": JudgmentSourceFilter.from_dict(obj["judgmentSource"]) if obj.get("judgmentSource") is not None else None,
            "nameType": NameTypeFilter.from_dict(obj["nameType"]) if obj.get("nameType") is not None else None,
            "date": TimingFilter.from_dict(obj["date"]) if obj.get("date") is not None else None,
            "awardedToParties": obj.get("awardedToParties"),
            "awardedAgainstParties": obj.get("awardedAgainstParties"),
            "minimumAmount": Minimumamount.from_dict(obj["minimumAmount"]) if obj.get("minimumAmount") is not None else None
        })
        return _obj


