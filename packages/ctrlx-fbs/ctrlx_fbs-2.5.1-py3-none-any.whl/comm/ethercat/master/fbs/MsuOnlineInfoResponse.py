# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Master syc unit online response
class MsuOnlineInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MsuOnlineInfoResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMsuOnlineInfoResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MsuOnlineInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Msu Id
    # MsuOnlineInfoResponse
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Memory information of input process data.
    # MsuOnlineInfoResponse
    def ProcessDataIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.EthercatMemoryInfo import EthercatMemoryInfo
            obj = EthercatMemoryInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #Memory information of output process data.
    # MsuOnlineInfoResponse
    def ProcessDataOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.EthercatMemoryInfo import EthercatMemoryInfo
            obj = EthercatMemoryInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #(internal - do not use)
    # MsuOnlineInfoResponse
    def WkcStateDiagOffsIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #(internal - do not use)
    # MsuOnlineInfoResponse
    def WkcStateDiagOffsOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Wkc valid offset for inputs in data layer rt input image.
    # MsuOnlineInfoResponse
    def WkcValidOffsetIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Wkc valid offset for outputs in data layer rt input image.
    # MsuOnlineInfoResponse
    def WkcValidOffsetOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Indication if input process data are valid.
    # MsuOnlineInfoResponse
    def WkcValidIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Indication if output process data are valid.
    # MsuOnlineInfoResponse
    def WkcValidOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def MsuOnlineInfoResponseStart(builder): builder.StartObject(9)
def Start(builder):
    return MsuOnlineInfoResponseStart(builder)
def MsuOnlineInfoResponseAddId(builder, id): builder.PrependUint16Slot(0, id, 0)
def AddId(builder, id):
    return MsuOnlineInfoResponseAddId(builder, id)
def MsuOnlineInfoResponseAddProcessDataIn(builder, processDataIn): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(processDataIn), 0)
def AddProcessDataIn(builder, processDataIn):
    return MsuOnlineInfoResponseAddProcessDataIn(builder, processDataIn)
def MsuOnlineInfoResponseAddProcessDataOut(builder, processDataOut): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(processDataOut), 0)
def AddProcessDataOut(builder, processDataOut):
    return MsuOnlineInfoResponseAddProcessDataOut(builder, processDataOut)
def MsuOnlineInfoResponseAddWkcStateDiagOffsIn(builder, wkcStateDiagOffsIn): builder.PrependUint16Slot(3, wkcStateDiagOffsIn, 0)
def AddWkcStateDiagOffsIn(builder, wkcStateDiagOffsIn):
    return MsuOnlineInfoResponseAddWkcStateDiagOffsIn(builder, wkcStateDiagOffsIn)
def MsuOnlineInfoResponseAddWkcStateDiagOffsOut(builder, wkcStateDiagOffsOut): builder.PrependUint16Slot(4, wkcStateDiagOffsOut, 0)
def AddWkcStateDiagOffsOut(builder, wkcStateDiagOffsOut):
    return MsuOnlineInfoResponseAddWkcStateDiagOffsOut(builder, wkcStateDiagOffsOut)
def MsuOnlineInfoResponseAddWkcValidOffsetIn(builder, wkcValidOffsetIn): builder.PrependUint32Slot(5, wkcValidOffsetIn, 0)
def AddWkcValidOffsetIn(builder, wkcValidOffsetIn):
    return MsuOnlineInfoResponseAddWkcValidOffsetIn(builder, wkcValidOffsetIn)
def MsuOnlineInfoResponseAddWkcValidOffsetOut(builder, wkcValidOffsetOut): builder.PrependUint32Slot(6, wkcValidOffsetOut, 0)
def AddWkcValidOffsetOut(builder, wkcValidOffsetOut):
    return MsuOnlineInfoResponseAddWkcValidOffsetOut(builder, wkcValidOffsetOut)
def MsuOnlineInfoResponseAddWkcValidIn(builder, wkcValidIn): builder.PrependBoolSlot(7, wkcValidIn, 0)
def AddWkcValidIn(builder, wkcValidIn):
    return MsuOnlineInfoResponseAddWkcValidIn(builder, wkcValidIn)
def MsuOnlineInfoResponseAddWkcValidOut(builder, wkcValidOut): builder.PrependBoolSlot(8, wkcValidOut, 0)
def AddWkcValidOut(builder, wkcValidOut):
    return MsuOnlineInfoResponseAddWkcValidOut(builder, wkcValidOut)
def MsuOnlineInfoResponseEnd(builder): return builder.EndObject()
def End(builder):
    return MsuOnlineInfoResponseEnd(builder)
import comm.ethercat.master.fbs.EthercatMemoryInfo
try:
    from typing import Optional
except:
    pass

class MsuOnlineInfoResponseT(object):

    # MsuOnlineInfoResponseT
    def __init__(self):
        self.id = 0  # type: int
        self.processDataIn = None  # type: Optional[comm.ethercat.master.fbs.EthercatMemoryInfo.EthercatMemoryInfoT]
        self.processDataOut = None  # type: Optional[comm.ethercat.master.fbs.EthercatMemoryInfo.EthercatMemoryInfoT]
        self.wkcStateDiagOffsIn = 0  # type: int
        self.wkcStateDiagOffsOut = 0  # type: int
        self.wkcValidOffsetIn = 0  # type: int
        self.wkcValidOffsetOut = 0  # type: int
        self.wkcValidIn = False  # type: bool
        self.wkcValidOut = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        msuOnlineInfoResponse = MsuOnlineInfoResponse()
        msuOnlineInfoResponse.Init(buf, pos)
        return cls.InitFromObj(msuOnlineInfoResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, msuOnlineInfoResponse):
        x = MsuOnlineInfoResponseT()
        x._UnPack(msuOnlineInfoResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.id == other.id and \
            self.processDataIn == other.processDataIn and \
            self.processDataOut == other.processDataOut and \
            self.wkcStateDiagOffsIn == other.wkcStateDiagOffsIn and \
            self.wkcStateDiagOffsOut == other.wkcStateDiagOffsOut and \
            self.wkcValidOffsetIn == other.wkcValidOffsetIn and \
            self.wkcValidOffsetOut == other.wkcValidOffsetOut and \
            self.wkcValidIn == other.wkcValidIn and \
            self.wkcValidOut == other.wkcValidOut

    # MsuOnlineInfoResponseT
    def _UnPack(self, msuOnlineInfoResponse):
        if msuOnlineInfoResponse is None:
            return
        self.id = msuOnlineInfoResponse.Id()
        if msuOnlineInfoResponse.ProcessDataIn() is not None:
            self.processDataIn = comm.ethercat.master.fbs.EthercatMemoryInfo.EthercatMemoryInfoT.InitFromObj(msuOnlineInfoResponse.ProcessDataIn())
        if msuOnlineInfoResponse.ProcessDataOut() is not None:
            self.processDataOut = comm.ethercat.master.fbs.EthercatMemoryInfo.EthercatMemoryInfoT.InitFromObj(msuOnlineInfoResponse.ProcessDataOut())
        self.wkcStateDiagOffsIn = msuOnlineInfoResponse.WkcStateDiagOffsIn()
        self.wkcStateDiagOffsOut = msuOnlineInfoResponse.WkcStateDiagOffsOut()
        self.wkcValidOffsetIn = msuOnlineInfoResponse.WkcValidOffsetIn()
        self.wkcValidOffsetOut = msuOnlineInfoResponse.WkcValidOffsetOut()
        self.wkcValidIn = msuOnlineInfoResponse.WkcValidIn()
        self.wkcValidOut = msuOnlineInfoResponse.WkcValidOut()

    # MsuOnlineInfoResponseT
    def Pack(self, builder):
        MsuOnlineInfoResponseStart(builder)
        MsuOnlineInfoResponseAddId(builder, self.id)
        if self.processDataIn is not None:
            processDataIn = self.processDataIn.Pack(builder)
            MsuOnlineInfoResponseAddProcessDataIn(builder, processDataIn)
        if self.processDataOut is not None:
            processDataOut = self.processDataOut.Pack(builder)
            MsuOnlineInfoResponseAddProcessDataOut(builder, processDataOut)
        MsuOnlineInfoResponseAddWkcStateDiagOffsIn(builder, self.wkcStateDiagOffsIn)
        MsuOnlineInfoResponseAddWkcStateDiagOffsOut(builder, self.wkcStateDiagOffsOut)
        MsuOnlineInfoResponseAddWkcValidOffsetIn(builder, self.wkcValidOffsetIn)
        MsuOnlineInfoResponseAddWkcValidOffsetOut(builder, self.wkcValidOffsetOut)
        MsuOnlineInfoResponseAddWkcValidIn(builder, self.wkcValidIn)
        MsuOnlineInfoResponseAddWkcValidOut(builder, self.wkcValidOut)
        msuOnlineInfoResponse = MsuOnlineInfoResponseEnd(builder)
        return msuOnlineInfoResponse
