# automatically generated by the FlatBuffers compiler, do not modify

# namespace: builtin

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FloatVariant(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FloatVariant()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFloatVariant(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FloatVariant
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FloatVariant
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FloatVariantStart(builder): builder.StartObject(1)
def Start(builder):
    return FloatVariantStart(builder)
def FloatVariantAddValue(builder, value): builder.PrependFloat32Slot(0, value, 0.0)
def AddValue(builder, value):
    return FloatVariantAddValue(builder, value)
def FloatVariantEnd(builder): return builder.EndObject()
def End(builder):
    return FloatVariantEnd(builder)

class FloatVariantT(object):

    # FloatVariantT
    def __init__(self):
        self.value = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        floatVariant = FloatVariant()
        floatVariant.Init(buf, pos)
        return cls.InitFromObj(floatVariant)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, floatVariant):
        x = FloatVariantT()
        x._UnPack(floatVariant)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value

    # FloatVariantT
    def _UnPack(self, floatVariant):
        if floatVariant is None:
            return
        self.value = floatVariant.Value()

    # FloatVariantT
    def Pack(self, builder):
        FloatVariantStart(builder)
        FloatVariantAddValue(builder, self.value)
        floatVariant = FloatVariantEnd(builder)
        return floatVariant
