# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of single probe data
class AxsCfgProbeEdgeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgProbeEdgeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgProbeEdgeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgProbeEdgeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # enable positive edge evaluate if TRUE
    # AxsCfgProbeEdgeData
    def PosEdge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # enable negative edge evaluate if TRUE
    # AxsCfgProbeEdgeData
    def NegEdge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # differential type of edge, disable, standard, neg-to-neg, pos-to-neg, neg-to-pos, pos-to-pos
    # AxsCfgProbeEdgeData
    def DiffType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

def AxsCfgProbeEdgeDataStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsCfgProbeEdgeDataStart(builder)
def AxsCfgProbeEdgeDataAddPosEdge(builder, posEdge): builder.PrependBoolSlot(0, posEdge, 0)
def AddPosEdge(builder, posEdge):
    return AxsCfgProbeEdgeDataAddPosEdge(builder, posEdge)
def AxsCfgProbeEdgeDataAddNegEdge(builder, negEdge): builder.PrependBoolSlot(1, negEdge, 0)
def AddNegEdge(builder, negEdge):
    return AxsCfgProbeEdgeDataAddNegEdge(builder, negEdge)
def AxsCfgProbeEdgeDataAddDiffType(builder, diffType): builder.PrependInt8Slot(2, diffType, 1)
def AddDiffType(builder, diffType):
    return AxsCfgProbeEdgeDataAddDiffType(builder, diffType)
def AxsCfgProbeEdgeDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgProbeEdgeDataEnd(builder)

class AxsCfgProbeEdgeDataT(object):

    # AxsCfgProbeEdgeDataT
    def __init__(self):
        self.posEdge = False  # type: bool
        self.negEdge = False  # type: bool
        self.diffType = 1  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgProbeEdgeData = AxsCfgProbeEdgeData()
        axsCfgProbeEdgeData.Init(buf, pos)
        return cls.InitFromObj(axsCfgProbeEdgeData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgProbeEdgeData):
        x = AxsCfgProbeEdgeDataT()
        x._UnPack(axsCfgProbeEdgeData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.posEdge == other.posEdge and \
            self.negEdge == other.negEdge and \
            self.diffType == other.diffType

    # AxsCfgProbeEdgeDataT
    def _UnPack(self, axsCfgProbeEdgeData):
        if axsCfgProbeEdgeData is None:
            return
        self.posEdge = axsCfgProbeEdgeData.PosEdge()
        self.negEdge = axsCfgProbeEdgeData.NegEdge()
        self.diffType = axsCfgProbeEdgeData.DiffType()

    # AxsCfgProbeEdgeDataT
    def Pack(self, builder):
        AxsCfgProbeEdgeDataStart(builder)
        AxsCfgProbeEdgeDataAddPosEdge(builder, self.posEdge)
        AxsCfgProbeEdgeDataAddNegEdge(builder, self.negEdge)
        AxsCfgProbeEdgeDataAddDiffType(builder, self.diffType)
        axsCfgProbeEdgeData = AxsCfgProbeEdgeDataEnd(builder)
        return axsCfgProbeEdgeData
