# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Table for just one single double value (can be used for any floating point numbers)
class ExternalConfigDouble(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExternalConfigDouble()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExternalConfigDouble(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExternalConfigDouble
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # the value
    # ExternalConfigDouble
    def DoubleVal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def ExternalConfigDoubleStart(builder): builder.StartObject(1)
def Start(builder):
    return ExternalConfigDoubleStart(builder)
def ExternalConfigDoubleAddDoubleVal(builder, doubleVal): builder.PrependFloat64Slot(0, doubleVal, 0.0)
def AddDoubleVal(builder, doubleVal):
    return ExternalConfigDoubleAddDoubleVal(builder, doubleVal)
def ExternalConfigDoubleEnd(builder): return builder.EndObject()
def End(builder):
    return ExternalConfigDoubleEnd(builder)

class ExternalConfigDoubleT(object):

    # ExternalConfigDoubleT
    def __init__(self):
        self.doubleVal = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        externalConfigDouble = ExternalConfigDouble()
        externalConfigDouble.Init(buf, pos)
        return cls.InitFromObj(externalConfigDouble)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, externalConfigDouble):
        x = ExternalConfigDoubleT()
        x._UnPack(externalConfigDouble)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.doubleVal == other.doubleVal

    # ExternalConfigDoubleT
    def _UnPack(self, externalConfigDouble):
        if externalConfigDouble is None:
            return
        self.doubleVal = externalConfigDouble.DoubleVal()

    # ExternalConfigDoubleT
    def Pack(self, builder):
        ExternalConfigDoubleStart(builder)
        ExternalConfigDoubleAddDoubleVal(builder, self.doubleVal)
        externalConfigDouble = ExternalConfigDoubleEnd(builder)
        return externalConfigDouble
