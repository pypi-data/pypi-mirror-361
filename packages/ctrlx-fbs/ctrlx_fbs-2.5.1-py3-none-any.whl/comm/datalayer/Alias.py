# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# An Alias gives the possibility to expose a data layer node under another well-defined data layer address.
# The concept of Aliases is similar to symbolic links in a file-system.
# The alias inherits all properties of the target, that it points to.
# There can be multiple aliases for the same data layer node.
# It is possible to have an aliases which points to another alias to configurable number of recursions.
# This configuration takes place in data layer node datalayer/server/settings field maxAliasDepth.
class Alias(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Alias()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAlias(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Alias
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The address of the alias in the data layer.
    # Alias
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Location where address points to in data layer.
    # Alias
    def Target(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AliasStart(builder): builder.StartObject(2)
def Start(builder):
    return AliasStart(builder)
def AliasAddAddress(builder, address): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def AddAddress(builder, address):
    return AliasAddAddress(builder, address)
def AliasAddTarget(builder, target): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(target), 0)
def AddTarget(builder, target):
    return AliasAddTarget(builder, target)
def AliasEnd(builder): return builder.EndObject()
def End(builder):
    return AliasEnd(builder)

class AliasT(object):

    # AliasT
    def __init__(self):
        self.address = None  # type: str
        self.target = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        alias = Alias()
        alias.Init(buf, pos)
        return cls.InitFromObj(alias)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, alias):
        x = AliasT()
        x._UnPack(alias)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.address == other.address and \
            self.target == other.target

    # AliasT
    def _UnPack(self, alias):
        if alias is None:
            return
        self.address = alias.Address()
        self.target = alias.Target()

    # AliasT
    def Pack(self, builder):
        if self.address is not None:
            address = builder.CreateString(self.address)
        if self.target is not None:
            target = builder.CreateString(self.target)
        AliasStart(builder)
        if self.address is not None:
            AliasAddAddress(builder, address)
        if self.target is not None:
            AliasAddTarget(builder, target)
        alias = AliasEnd(builder)
        return alias
