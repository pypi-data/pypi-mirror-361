# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# array of parallel kinematic chains
class PoseParallelChains(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PoseParallelChains()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPoseParallelChains(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PoseParallelChains
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PoseParallelChains
    def JointPosesAllPointOfWork(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.PoseChain import PoseChain
            obj = PoseChain()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PoseParallelChains
    def JointPosesAllPointOfWorkLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PoseParallelChains
    def JointPosesAllPointOfWorkIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def PoseParallelChainsStart(builder): builder.StartObject(1)
def Start(builder):
    return PoseParallelChainsStart(builder)
def PoseParallelChainsAddJointPosesAllPointOfWork(builder, jointPosesAllPointOfWork): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(jointPosesAllPointOfWork), 0)
def AddJointPosesAllPointOfWork(builder, jointPosesAllPointOfWork):
    return PoseParallelChainsAddJointPosesAllPointOfWork(builder, jointPosesAllPointOfWork)
def PoseParallelChainsStartJointPosesAllPointOfWorkVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartJointPosesAllPointOfWorkVector(builder, numElems):
    return PoseParallelChainsStartJointPosesAllPointOfWorkVector(builder, numElems)
def PoseParallelChainsEnd(builder): return builder.EndObject()
def End(builder):
    return PoseParallelChainsEnd(builder)
import motion.core.fbtypes.PoseChain
try:
    from typing import List
except:
    pass

class PoseParallelChainsT(object):

    # PoseParallelChainsT
    def __init__(self):
        self.jointPosesAllPointOfWork = None  # type: List[motion.core.fbtypes.PoseChain.PoseChainT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        poseParallelChains = PoseParallelChains()
        poseParallelChains.Init(buf, pos)
        return cls.InitFromObj(poseParallelChains)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, poseParallelChains):
        x = PoseParallelChainsT()
        x._UnPack(poseParallelChains)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.jointPosesAllPointOfWork == other.jointPosesAllPointOfWork

    # PoseParallelChainsT
    def _UnPack(self, poseParallelChains):
        if poseParallelChains is None:
            return
        if not poseParallelChains.JointPosesAllPointOfWorkIsNone():
            self.jointPosesAllPointOfWork = []
            for i in range(poseParallelChains.JointPosesAllPointOfWorkLength()):
                if poseParallelChains.JointPosesAllPointOfWork(i) is None:
                    self.jointPosesAllPointOfWork.append(None)
                else:
                    poseChain_ = motion.core.fbtypes.PoseChain.PoseChainT.InitFromObj(poseParallelChains.JointPosesAllPointOfWork(i))
                    self.jointPosesAllPointOfWork.append(poseChain_)

    # PoseParallelChainsT
    def Pack(self, builder):
        if self.jointPosesAllPointOfWork is not None:
            jointPosesAllPointOfWorklist = []
            for i in range(len(self.jointPosesAllPointOfWork)):
                jointPosesAllPointOfWorklist.append(self.jointPosesAllPointOfWork[i].Pack(builder))
            PoseParallelChainsStartJointPosesAllPointOfWorkVector(builder, len(self.jointPosesAllPointOfWork))
            for i in reversed(range(len(self.jointPosesAllPointOfWork))):
                builder.PrependUOffsetTRelative(jointPosesAllPointOfWorklist[i])
            jointPosesAllPointOfWork = builder.EndVector()
        PoseParallelChainsStart(builder)
        if self.jointPosesAllPointOfWork is not None:
            PoseParallelChainsAddJointPosesAllPointOfWork(builder, jointPosesAllPointOfWork)
        poseParallelChains = PoseParallelChainsEnd(builder)
        return poseParallelChains
