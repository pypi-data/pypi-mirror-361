# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldTargetDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldTargetDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFieldTargetDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FieldTargetDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldTargetDataType
    def DataSetFieldId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.Guid import Guid
            obj = Guid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FieldTargetDataType
    def ReceiverIndexRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldTargetDataType
    def TargetNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.NodeId import NodeId
            obj = NodeId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FieldTargetDataType
    def AttributeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FieldTargetDataType
    def WriteIndexRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldTargetDataType
    def OverrideValueHandling(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldTargetDataType
    def OverrideValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.Variant import Variant
            obj = Variant()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FieldTargetDataTypeStart(builder): builder.StartObject(7)
def Start(builder):
    return FieldTargetDataTypeStart(builder)
def FieldTargetDataTypeAddDataSetFieldId(builder, dataSetFieldId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetFieldId), 0)
def AddDataSetFieldId(builder, dataSetFieldId):
    return FieldTargetDataTypeAddDataSetFieldId(builder, dataSetFieldId)
def FieldTargetDataTypeAddReceiverIndexRange(builder, receiverIndexRange): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(receiverIndexRange), 0)
def AddReceiverIndexRange(builder, receiverIndexRange):
    return FieldTargetDataTypeAddReceiverIndexRange(builder, receiverIndexRange)
def FieldTargetDataTypeAddTargetNodeId(builder, targetNodeId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(targetNodeId), 0)
def AddTargetNodeId(builder, targetNodeId):
    return FieldTargetDataTypeAddTargetNodeId(builder, targetNodeId)
def FieldTargetDataTypeAddAttributeId(builder, attributeId): builder.PrependUint32Slot(3, attributeId, 0)
def AddAttributeId(builder, attributeId):
    return FieldTargetDataTypeAddAttributeId(builder, attributeId)
def FieldTargetDataTypeAddWriteIndexRange(builder, writeIndexRange): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(writeIndexRange), 0)
def AddWriteIndexRange(builder, writeIndexRange):
    return FieldTargetDataTypeAddWriteIndexRange(builder, writeIndexRange)
def FieldTargetDataTypeAddOverrideValueHandling(builder, overrideValueHandling): builder.PrependInt32Slot(5, overrideValueHandling, 0)
def AddOverrideValueHandling(builder, overrideValueHandling):
    return FieldTargetDataTypeAddOverrideValueHandling(builder, overrideValueHandling)
def FieldTargetDataTypeAddOverrideValue(builder, overrideValue): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(overrideValue), 0)
def AddOverrideValue(builder, overrideValue):
    return FieldTargetDataTypeAddOverrideValue(builder, overrideValue)
def FieldTargetDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return FieldTargetDataTypeEnd(builder)
import comm.opcua.builtin.Guid
import comm.opcua.builtin.NodeId
import comm.opcua.builtin.Variant
try:
    from typing import Optional
except:
    pass

class FieldTargetDataTypeT(object):

    # FieldTargetDataTypeT
    def __init__(self):
        self.dataSetFieldId = None  # type: Optional[comm.opcua.builtin.Guid.GuidT]
        self.receiverIndexRange = None  # type: str
        self.targetNodeId = None  # type: Optional[comm.opcua.builtin.NodeId.NodeIdT]
        self.attributeId = 0  # type: int
        self.writeIndexRange = None  # type: str
        self.overrideValueHandling = 0  # type: int
        self.overrideValue = None  # type: Optional[comm.opcua.builtin.Variant.VariantT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fieldTargetDataType = FieldTargetDataType()
        fieldTargetDataType.Init(buf, pos)
        return cls.InitFromObj(fieldTargetDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fieldTargetDataType):
        x = FieldTargetDataTypeT()
        x._UnPack(fieldTargetDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dataSetFieldId == other.dataSetFieldId and \
            self.receiverIndexRange == other.receiverIndexRange and \
            self.targetNodeId == other.targetNodeId and \
            self.attributeId == other.attributeId and \
            self.writeIndexRange == other.writeIndexRange and \
            self.overrideValueHandling == other.overrideValueHandling and \
            self.overrideValue == other.overrideValue

    # FieldTargetDataTypeT
    def _UnPack(self, fieldTargetDataType):
        if fieldTargetDataType is None:
            return
        if fieldTargetDataType.DataSetFieldId() is not None:
            self.dataSetFieldId = comm.opcua.builtin.Guid.GuidT.InitFromObj(fieldTargetDataType.DataSetFieldId())
        self.receiverIndexRange = fieldTargetDataType.ReceiverIndexRange()
        if fieldTargetDataType.TargetNodeId() is not None:
            self.targetNodeId = comm.opcua.builtin.NodeId.NodeIdT.InitFromObj(fieldTargetDataType.TargetNodeId())
        self.attributeId = fieldTargetDataType.AttributeId()
        self.writeIndexRange = fieldTargetDataType.WriteIndexRange()
        self.overrideValueHandling = fieldTargetDataType.OverrideValueHandling()
        if fieldTargetDataType.OverrideValue() is not None:
            self.overrideValue = comm.opcua.builtin.Variant.VariantT.InitFromObj(fieldTargetDataType.OverrideValue())

    # FieldTargetDataTypeT
    def Pack(self, builder):
        if self.dataSetFieldId is not None:
            dataSetFieldId = self.dataSetFieldId.Pack(builder)
        if self.receiverIndexRange is not None:
            receiverIndexRange = builder.CreateString(self.receiverIndexRange)
        if self.targetNodeId is not None:
            targetNodeId = self.targetNodeId.Pack(builder)
        if self.writeIndexRange is not None:
            writeIndexRange = builder.CreateString(self.writeIndexRange)
        if self.overrideValue is not None:
            overrideValue = self.overrideValue.Pack(builder)
        FieldTargetDataTypeStart(builder)
        if self.dataSetFieldId is not None:
            FieldTargetDataTypeAddDataSetFieldId(builder, dataSetFieldId)
        if self.receiverIndexRange is not None:
            FieldTargetDataTypeAddReceiverIndexRange(builder, receiverIndexRange)
        if self.targetNodeId is not None:
            FieldTargetDataTypeAddTargetNodeId(builder, targetNodeId)
        FieldTargetDataTypeAddAttributeId(builder, self.attributeId)
        if self.writeIndexRange is not None:
            FieldTargetDataTypeAddWriteIndexRange(builder, writeIndexRange)
        FieldTargetDataTypeAddOverrideValueHandling(builder, self.overrideValueHandling)
        if self.overrideValue is not None:
            FieldTargetDataTypeAddOverrideValue(builder, overrideValue)
        fieldTargetDataType = FieldTargetDataTypeEnd(builder)
        return fieldTargetDataType
