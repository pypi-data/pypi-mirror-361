# coding: utf-8

"""
    spamapi

    Easily and directly scan and block phishing security threats.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpamDetectionAdvancedResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clean_result': 'bool',
        'contains_spam': 'bool',
        'contains_unsolicited_sales': 'bool',
        'contains_promotional_content': 'bool',
        'contains_phishing_attempt': 'bool'
    }

    attribute_map = {
        'clean_result': 'CleanResult',
        'contains_spam': 'ContainsSpam',
        'contains_unsolicited_sales': 'ContainsUnsolicitedSales',
        'contains_promotional_content': 'ContainsPromotionalContent',
        'contains_phishing_attempt': 'ContainsPhishingAttempt'
    }

    def __init__(self, clean_result=None, contains_spam=None, contains_unsolicited_sales=None, contains_promotional_content=None, contains_phishing_attempt=None):  # noqa: E501
        """SpamDetectionAdvancedResponse - a model defined in Swagger"""  # noqa: E501

        self._clean_result = None
        self._contains_spam = None
        self._contains_unsolicited_sales = None
        self._contains_promotional_content = None
        self._contains_phishing_attempt = None
        self.discriminator = None

        if clean_result is not None:
            self.clean_result = clean_result
        if contains_spam is not None:
            self.contains_spam = contains_spam
        if contains_unsolicited_sales is not None:
            self.contains_unsolicited_sales = contains_unsolicited_sales
        if contains_promotional_content is not None:
            self.contains_promotional_content = contains_promotional_content
        if contains_phishing_attempt is not None:
            self.contains_phishing_attempt = contains_phishing_attempt

    @property
    def clean_result(self):
        """Gets the clean_result of this SpamDetectionAdvancedResponse.  # noqa: E501

        True if the result is not spam (clean), and false otherwise  # noqa: E501

        :return: The clean_result of this SpamDetectionAdvancedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._clean_result

    @clean_result.setter
    def clean_result(self, clean_result):
        """Sets the clean_result of this SpamDetectionAdvancedResponse.

        True if the result is not spam (clean), and false otherwise  # noqa: E501

        :param clean_result: The clean_result of this SpamDetectionAdvancedResponse.  # noqa: E501
        :type: bool
        """

        self._clean_result = clean_result

    @property
    def contains_spam(self):
        """Gets the contains_spam of this SpamDetectionAdvancedResponse.  # noqa: E501

        True if the input text contains spam, false otherwise  # noqa: E501

        :return: The contains_spam of this SpamDetectionAdvancedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._contains_spam

    @contains_spam.setter
    def contains_spam(self, contains_spam):
        """Sets the contains_spam of this SpamDetectionAdvancedResponse.

        True if the input text contains spam, false otherwise  # noqa: E501

        :param contains_spam: The contains_spam of this SpamDetectionAdvancedResponse.  # noqa: E501
        :type: bool
        """

        self._contains_spam = contains_spam

    @property
    def contains_unsolicited_sales(self):
        """Gets the contains_unsolicited_sales of this SpamDetectionAdvancedResponse.  # noqa: E501

        True if the input text contains unsolicited sales, false otherwise  # noqa: E501

        :return: The contains_unsolicited_sales of this SpamDetectionAdvancedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._contains_unsolicited_sales

    @contains_unsolicited_sales.setter
    def contains_unsolicited_sales(self, contains_unsolicited_sales):
        """Sets the contains_unsolicited_sales of this SpamDetectionAdvancedResponse.

        True if the input text contains unsolicited sales, false otherwise  # noqa: E501

        :param contains_unsolicited_sales: The contains_unsolicited_sales of this SpamDetectionAdvancedResponse.  # noqa: E501
        :type: bool
        """

        self._contains_unsolicited_sales = contains_unsolicited_sales

    @property
    def contains_promotional_content(self):
        """Gets the contains_promotional_content of this SpamDetectionAdvancedResponse.  # noqa: E501

        True if the input text contains promotional content, false otherwise  # noqa: E501

        :return: The contains_promotional_content of this SpamDetectionAdvancedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._contains_promotional_content

    @contains_promotional_content.setter
    def contains_promotional_content(self, contains_promotional_content):
        """Sets the contains_promotional_content of this SpamDetectionAdvancedResponse.

        True if the input text contains promotional content, false otherwise  # noqa: E501

        :param contains_promotional_content: The contains_promotional_content of this SpamDetectionAdvancedResponse.  # noqa: E501
        :type: bool
        """

        self._contains_promotional_content = contains_promotional_content

    @property
    def contains_phishing_attempt(self):
        """Gets the contains_phishing_attempt of this SpamDetectionAdvancedResponse.  # noqa: E501

        True if the input text contains a phishing attempt, false otherwise  # noqa: E501

        :return: The contains_phishing_attempt of this SpamDetectionAdvancedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._contains_phishing_attempt

    @contains_phishing_attempt.setter
    def contains_phishing_attempt(self, contains_phishing_attempt):
        """Sets the contains_phishing_attempt of this SpamDetectionAdvancedResponse.

        True if the input text contains a phishing attempt, false otherwise  # noqa: E501

        :param contains_phishing_attempt: The contains_phishing_attempt of this SpamDetectionAdvancedResponse.  # noqa: E501
        :type: bool
        """

        self._contains_phishing_attempt = contains_phishing_attempt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpamDetectionAdvancedResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpamDetectionAdvancedResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
