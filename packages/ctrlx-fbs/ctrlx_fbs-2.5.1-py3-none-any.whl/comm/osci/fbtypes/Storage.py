# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Storage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Storage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStorage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Storage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Storage
    def InfluxDbcfg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.InfluxDB import InfluxDB
            obj = InfluxDB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Storage
    def Local(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def StorageStart(builder): builder.StartObject(2)
def Start(builder):
    return StorageStart(builder)
def StorageAddInfluxDbcfg(builder, influxDbcfg): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(influxDbcfg), 0)
def AddInfluxDbcfg(builder, influxDbcfg):
    return StorageAddInfluxDbcfg(builder, influxDbcfg)
def StorageAddLocal(builder, local): builder.PrependBoolSlot(1, local, 0)
def AddLocal(builder, local):
    return StorageAddLocal(builder, local)
def StorageEnd(builder): return builder.EndObject()
def End(builder):
    return StorageEnd(builder)
import comm.osci.fbtypes.InfluxDB
try:
    from typing import Optional
except:
    pass

class StorageT(object):

    # StorageT
    def __init__(self):
        self.influxDbcfg = None  # type: Optional[comm.osci.fbtypes.InfluxDB.InfluxDBT]
        self.local = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        storage = Storage()
        storage.Init(buf, pos)
        return cls.InitFromObj(storage)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, storage):
        x = StorageT()
        x._UnPack(storage)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.influxDbcfg == other.influxDbcfg and \
            self.local == other.local

    # StorageT
    def _UnPack(self, storage):
        if storage is None:
            return
        if storage.InfluxDbcfg() is not None:
            self.influxDbcfg = comm.osci.fbtypes.InfluxDB.InfluxDBT.InitFromObj(storage.InfluxDbcfg())
        self.local = storage.Local()

    # StorageT
    def Pack(self, builder):
        if self.influxDbcfg is not None:
            influxDbcfg = self.influxDbcfg.Pack(builder)
        StorageStart(builder)
        if self.influxDbcfg is not None:
            StorageAddInfluxDbcfg(builder, influxDbcfg)
        StorageAddLocal(builder, self.local)
        storage = StorageEnd(builder)
        return storage
