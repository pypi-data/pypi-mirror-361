# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class IpSettingsResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IpSettingsResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIpSettingsResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IpSettingsResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IpSettingsResponse
    def Address(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # IpSettingsResponse
    def AddressAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # IpSettingsResponse
    def AddressLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IpSettingsResponse
    def AddressIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # IpSettingsResponse
    def SubnetMask(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # IpSettingsResponse
    def SubnetMaskAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # IpSettingsResponse
    def SubnetMaskLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IpSettingsResponse
    def SubnetMaskIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # IpSettingsResponse
    def GatewayAddress(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # IpSettingsResponse
    def GatewayAddressAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # IpSettingsResponse
    def GatewayAddressLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IpSettingsResponse
    def GatewayAddressIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def IpSettingsResponseStart(builder): builder.StartObject(3)
def Start(builder):
    return IpSettingsResponseStart(builder)
def IpSettingsResponseAddAddress(builder, address): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def AddAddress(builder, address):
    return IpSettingsResponseAddAddress(builder, address)
def IpSettingsResponseStartAddressVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartAddressVector(builder, numElems):
    return IpSettingsResponseStartAddressVector(builder, numElems)
def IpSettingsResponseAddSubnetMask(builder, subnetMask): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(subnetMask), 0)
def AddSubnetMask(builder, subnetMask):
    return IpSettingsResponseAddSubnetMask(builder, subnetMask)
def IpSettingsResponseStartSubnetMaskVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartSubnetMaskVector(builder, numElems):
    return IpSettingsResponseStartSubnetMaskVector(builder, numElems)
def IpSettingsResponseAddGatewayAddress(builder, gatewayAddress): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gatewayAddress), 0)
def AddGatewayAddress(builder, gatewayAddress):
    return IpSettingsResponseAddGatewayAddress(builder, gatewayAddress)
def IpSettingsResponseStartGatewayAddressVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartGatewayAddressVector(builder, numElems):
    return IpSettingsResponseStartGatewayAddressVector(builder, numElems)
def IpSettingsResponseEnd(builder): return builder.EndObject()
def End(builder):
    return IpSettingsResponseEnd(builder)
try:
    from typing import List
except:
    pass

class IpSettingsResponseT(object):

    # IpSettingsResponseT
    def __init__(self):
        self.address = None  # type: List[int]
        self.subnetMask = None  # type: List[int]
        self.gatewayAddress = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ipSettingsResponse = IpSettingsResponse()
        ipSettingsResponse.Init(buf, pos)
        return cls.InitFromObj(ipSettingsResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ipSettingsResponse):
        x = IpSettingsResponseT()
        x._UnPack(ipSettingsResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.address == other.address and \
            self.subnetMask == other.subnetMask and \
            self.gatewayAddress == other.gatewayAddress

    # IpSettingsResponseT
    def _UnPack(self, ipSettingsResponse):
        if ipSettingsResponse is None:
            return
        if not ipSettingsResponse.AddressIsNone():
            if np is None:
                self.address = []
                for i in range(ipSettingsResponse.AddressLength()):
                    self.address.append(ipSettingsResponse.Address(i))
            else:
                self.address = ipSettingsResponse.AddressAsNumpy()
        if not ipSettingsResponse.SubnetMaskIsNone():
            if np is None:
                self.subnetMask = []
                for i in range(ipSettingsResponse.SubnetMaskLength()):
                    self.subnetMask.append(ipSettingsResponse.SubnetMask(i))
            else:
                self.subnetMask = ipSettingsResponse.SubnetMaskAsNumpy()
        if not ipSettingsResponse.GatewayAddressIsNone():
            if np is None:
                self.gatewayAddress = []
                for i in range(ipSettingsResponse.GatewayAddressLength()):
                    self.gatewayAddress.append(ipSettingsResponse.GatewayAddress(i))
            else:
                self.gatewayAddress = ipSettingsResponse.GatewayAddressAsNumpy()

    # IpSettingsResponseT
    def Pack(self, builder):
        if self.address is not None:
            if np is not None and type(self.address) is np.ndarray:
                address = builder.CreateNumpyVector(self.address)
            else:
                IpSettingsResponseStartAddressVector(builder, len(self.address))
                for i in reversed(range(len(self.address))):
                    builder.PrependUint8(self.address[i])
                address = builder.EndVector()
        if self.subnetMask is not None:
            if np is not None and type(self.subnetMask) is np.ndarray:
                subnetMask = builder.CreateNumpyVector(self.subnetMask)
            else:
                IpSettingsResponseStartSubnetMaskVector(builder, len(self.subnetMask))
                for i in reversed(range(len(self.subnetMask))):
                    builder.PrependUint8(self.subnetMask[i])
                subnetMask = builder.EndVector()
        if self.gatewayAddress is not None:
            if np is not None and type(self.gatewayAddress) is np.ndarray:
                gatewayAddress = builder.CreateNumpyVector(self.gatewayAddress)
            else:
                IpSettingsResponseStartGatewayAddressVector(builder, len(self.gatewayAddress))
                for i in reversed(range(len(self.gatewayAddress))):
                    builder.PrependUint8(self.gatewayAddress[i])
                gatewayAddress = builder.EndVector()
        IpSettingsResponseStart(builder)
        if self.address is not None:
            IpSettingsResponseAddAddress(builder, address)
        if self.subnetMask is not None:
            IpSettingsResponseAddSubnetMask(builder, subnetMask)
        if self.gatewayAddress is not None:
            IpSettingsResponseAddGatewayAddress(builder, gatewayAddress)
        ipSettingsResponse = IpSettingsResponseEnd(builder)
        return ipSettingsResponse
