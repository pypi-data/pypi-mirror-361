# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single FlexProfile
class AxsCfgSingleFlexProfile(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgSingleFlexProfile()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgSingleFlexProfile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgSingleFlexProfile
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the single FlexProfile
    # AxsCfgSingleFlexProfile
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlexProfile segment description
    # AxsCfgSingleFlexProfile
    def Segments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.CfgFlexProfileSegment import CfgFlexProfileSegment
            obj = CfgFlexProfileSegment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AxsCfgSingleFlexProfile
    def SegmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsCfgSingleFlexProfile
    def SegmentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # FlexProfile event description
    # AxsCfgSingleFlexProfile
    def Events(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.CfgFlexProfileEvent import CfgFlexProfileEvent
            obj = CfgFlexProfileEvent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AxsCfgSingleFlexProfile
    def EventsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsCfgSingleFlexProfile
    def EventsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # master axis reference velocity. This value is mandatory when segments are written.
    # AxsCfgSingleFlexProfile
    def MasterAxsRefVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # cam builder data (profile specific)
    # AxsCfgSingleFlexProfile
    def CamBuilderProfileData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlexProfile unit configuration
    # AxsCfgSingleFlexProfile
    def Units(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.CfgFlexProfileUnits import CfgFlexProfileUnits
            obj = CfgFlexProfileUnits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCfgSingleFlexProfileStart(builder): builder.StartObject(6)
def Start(builder):
    return AxsCfgSingleFlexProfileStart(builder)
def AxsCfgSingleFlexProfileAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return AxsCfgSingleFlexProfileAddName(builder, name)
def AxsCfgSingleFlexProfileAddSegments(builder, segments): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(segments), 0)
def AddSegments(builder, segments):
    return AxsCfgSingleFlexProfileAddSegments(builder, segments)
def AxsCfgSingleFlexProfileStartSegmentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSegmentsVector(builder, numElems):
    return AxsCfgSingleFlexProfileStartSegmentsVector(builder, numElems)
def AxsCfgSingleFlexProfileAddEvents(builder, events): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(events), 0)
def AddEvents(builder, events):
    return AxsCfgSingleFlexProfileAddEvents(builder, events)
def AxsCfgSingleFlexProfileStartEventsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEventsVector(builder, numElems):
    return AxsCfgSingleFlexProfileStartEventsVector(builder, numElems)
def AxsCfgSingleFlexProfileAddMasterAxsRefVel(builder, masterAxsRefVel): builder.PrependFloat64Slot(3, masterAxsRefVel, 0.0)
def AddMasterAxsRefVel(builder, masterAxsRefVel):
    return AxsCfgSingleFlexProfileAddMasterAxsRefVel(builder, masterAxsRefVel)
def AxsCfgSingleFlexProfileAddCamBuilderProfileData(builder, camBuilderProfileData): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(camBuilderProfileData), 0)
def AddCamBuilderProfileData(builder, camBuilderProfileData):
    return AxsCfgSingleFlexProfileAddCamBuilderProfileData(builder, camBuilderProfileData)
def AxsCfgSingleFlexProfileAddUnits(builder, units): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(units), 0)
def AddUnits(builder, units):
    return AxsCfgSingleFlexProfileAddUnits(builder, units)
def AxsCfgSingleFlexProfileEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgSingleFlexProfileEnd(builder)
import motion.sync.fbtypes.CfgFlexProfileEvent
import motion.sync.fbtypes.CfgFlexProfileSegment
import motion.sync.fbtypes.CfgFlexProfileUnits
try:
    from typing import List, Optional
except:
    pass

class AxsCfgSingleFlexProfileT(object):

    # AxsCfgSingleFlexProfileT
    def __init__(self):
        self.name = None  # type: str
        self.segments = None  # type: List[motion.sync.fbtypes.CfgFlexProfileSegment.CfgFlexProfileSegmentT]
        self.events = None  # type: List[motion.sync.fbtypes.CfgFlexProfileEvent.CfgFlexProfileEventT]
        self.masterAxsRefVel = 0.0  # type: float
        self.camBuilderProfileData = None  # type: str
        self.units = None  # type: Optional[motion.sync.fbtypes.CfgFlexProfileUnits.CfgFlexProfileUnitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgSingleFlexProfile = AxsCfgSingleFlexProfile()
        axsCfgSingleFlexProfile.Init(buf, pos)
        return cls.InitFromObj(axsCfgSingleFlexProfile)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgSingleFlexProfile):
        x = AxsCfgSingleFlexProfileT()
        x._UnPack(axsCfgSingleFlexProfile)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.segments == other.segments and \
            self.events == other.events and \
            self.masterAxsRefVel == other.masterAxsRefVel and \
            self.camBuilderProfileData == other.camBuilderProfileData and \
            self.units == other.units

    # AxsCfgSingleFlexProfileT
    def _UnPack(self, axsCfgSingleFlexProfile):
        if axsCfgSingleFlexProfile is None:
            return
        self.name = axsCfgSingleFlexProfile.Name()
        if not axsCfgSingleFlexProfile.SegmentsIsNone():
            self.segments = []
            for i in range(axsCfgSingleFlexProfile.SegmentsLength()):
                if axsCfgSingleFlexProfile.Segments(i) is None:
                    self.segments.append(None)
                else:
                    cfgFlexProfileSegment_ = motion.sync.fbtypes.CfgFlexProfileSegment.CfgFlexProfileSegmentT.InitFromObj(axsCfgSingleFlexProfile.Segments(i))
                    self.segments.append(cfgFlexProfileSegment_)
        if not axsCfgSingleFlexProfile.EventsIsNone():
            self.events = []
            for i in range(axsCfgSingleFlexProfile.EventsLength()):
                if axsCfgSingleFlexProfile.Events(i) is None:
                    self.events.append(None)
                else:
                    cfgFlexProfileEvent_ = motion.sync.fbtypes.CfgFlexProfileEvent.CfgFlexProfileEventT.InitFromObj(axsCfgSingleFlexProfile.Events(i))
                    self.events.append(cfgFlexProfileEvent_)
        self.masterAxsRefVel = axsCfgSingleFlexProfile.MasterAxsRefVel()
        self.camBuilderProfileData = axsCfgSingleFlexProfile.CamBuilderProfileData()
        if axsCfgSingleFlexProfile.Units() is not None:
            self.units = motion.sync.fbtypes.CfgFlexProfileUnits.CfgFlexProfileUnitsT.InitFromObj(axsCfgSingleFlexProfile.Units())

    # AxsCfgSingleFlexProfileT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.segments is not None:
            segmentslist = []
            for i in range(len(self.segments)):
                segmentslist.append(self.segments[i].Pack(builder))
            AxsCfgSingleFlexProfileStartSegmentsVector(builder, len(self.segments))
            for i in reversed(range(len(self.segments))):
                builder.PrependUOffsetTRelative(segmentslist[i])
            segments = builder.EndVector()
        if self.events is not None:
            eventslist = []
            for i in range(len(self.events)):
                eventslist.append(self.events[i].Pack(builder))
            AxsCfgSingleFlexProfileStartEventsVector(builder, len(self.events))
            for i in reversed(range(len(self.events))):
                builder.PrependUOffsetTRelative(eventslist[i])
            events = builder.EndVector()
        if self.camBuilderProfileData is not None:
            camBuilderProfileData = builder.CreateString(self.camBuilderProfileData)
        if self.units is not None:
            units = self.units.Pack(builder)
        AxsCfgSingleFlexProfileStart(builder)
        if self.name is not None:
            AxsCfgSingleFlexProfileAddName(builder, name)
        if self.segments is not None:
            AxsCfgSingleFlexProfileAddSegments(builder, segments)
        if self.events is not None:
            AxsCfgSingleFlexProfileAddEvents(builder, events)
        AxsCfgSingleFlexProfileAddMasterAxsRefVel(builder, self.masterAxsRefVel)
        if self.camBuilderProfileData is not None:
            AxsCfgSingleFlexProfileAddCamBuilderProfileData(builder, camBuilderProfileData)
        if self.units is not None:
            AxsCfgSingleFlexProfileAddUnits(builder, units)
        axsCfgSingleFlexProfile = AxsCfgSingleFlexProfileEnd(builder)
        return axsCfgSingleFlexProfile
