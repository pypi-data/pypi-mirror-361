# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConfigurationVersionDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConfigurationVersionDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConfigurationVersionDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConfigurationVersionDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConfigurationVersionDataType
    def MajorVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ConfigurationVersionDataType
    def MinorVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ConfigurationVersionDataTypeStart(builder): builder.StartObject(2)
def Start(builder):
    return ConfigurationVersionDataTypeStart(builder)
def ConfigurationVersionDataTypeAddMajorVersion(builder, majorVersion): builder.PrependUint32Slot(0, majorVersion, 0)
def AddMajorVersion(builder, majorVersion):
    return ConfigurationVersionDataTypeAddMajorVersion(builder, majorVersion)
def ConfigurationVersionDataTypeAddMinorVersion(builder, minorVersion): builder.PrependUint32Slot(1, minorVersion, 0)
def AddMinorVersion(builder, minorVersion):
    return ConfigurationVersionDataTypeAddMinorVersion(builder, minorVersion)
def ConfigurationVersionDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return ConfigurationVersionDataTypeEnd(builder)

class ConfigurationVersionDataTypeT(object):

    # ConfigurationVersionDataTypeT
    def __init__(self):
        self.majorVersion = 0  # type: int
        self.minorVersion = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        configurationVersionDataType = ConfigurationVersionDataType()
        configurationVersionDataType.Init(buf, pos)
        return cls.InitFromObj(configurationVersionDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, configurationVersionDataType):
        x = ConfigurationVersionDataTypeT()
        x._UnPack(configurationVersionDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.majorVersion == other.majorVersion and \
            self.minorVersion == other.minorVersion

    # ConfigurationVersionDataTypeT
    def _UnPack(self, configurationVersionDataType):
        if configurationVersionDataType is None:
            return
        self.majorVersion = configurationVersionDataType.MajorVersion()
        self.minorVersion = configurationVersionDataType.MinorVersion()

    # ConfigurationVersionDataTypeT
    def Pack(self, builder):
        ConfigurationVersionDataTypeStart(builder)
        ConfigurationVersionDataTypeAddMajorVersion(builder, self.majorVersion)
        ConfigurationVersionDataTypeAddMinorVersion(builder, self.minorVersion)
        configurationVersionDataType = ConfigurationVersionDataTypeEnd(builder)
        return configurationVersionDataType
