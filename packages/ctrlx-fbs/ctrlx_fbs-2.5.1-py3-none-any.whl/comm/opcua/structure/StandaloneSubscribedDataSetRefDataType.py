# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StandaloneSubscribedDataSetRefDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StandaloneSubscribedDataSetRefDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStandaloneSubscribedDataSetRefDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StandaloneSubscribedDataSetRefDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StandaloneSubscribedDataSetRefDataType
    def DataSetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def StandaloneSubscribedDataSetRefDataTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return StandaloneSubscribedDataSetRefDataTypeStart(builder)
def StandaloneSubscribedDataSetRefDataTypeAddDataSetName(builder, dataSetName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetName), 0)
def AddDataSetName(builder, dataSetName):
    return StandaloneSubscribedDataSetRefDataTypeAddDataSetName(builder, dataSetName)
def StandaloneSubscribedDataSetRefDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return StandaloneSubscribedDataSetRefDataTypeEnd(builder)

class StandaloneSubscribedDataSetRefDataTypeT(object):

    # StandaloneSubscribedDataSetRefDataTypeT
    def __init__(self):
        self.dataSetName = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        standaloneSubscribedDataSetRefDataType = StandaloneSubscribedDataSetRefDataType()
        standaloneSubscribedDataSetRefDataType.Init(buf, pos)
        return cls.InitFromObj(standaloneSubscribedDataSetRefDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, standaloneSubscribedDataSetRefDataType):
        x = StandaloneSubscribedDataSetRefDataTypeT()
        x._UnPack(standaloneSubscribedDataSetRefDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dataSetName == other.dataSetName

    # StandaloneSubscribedDataSetRefDataTypeT
    def _UnPack(self, standaloneSubscribedDataSetRefDataType):
        if standaloneSubscribedDataSetRefDataType is None:
            return
        self.dataSetName = standaloneSubscribedDataSetRefDataType.DataSetName()

    # StandaloneSubscribedDataSetRefDataTypeT
    def Pack(self, builder):
        if self.dataSetName is not None:
            dataSetName = builder.CreateString(self.dataSetName)
        StandaloneSubscribedDataSetRefDataTypeStart(builder)
        if self.dataSetName is not None:
            StandaloneSubscribedDataSetRefDataTypeAddDataSetName(builder, dataSetName)
        standaloneSubscribedDataSetRefDataType = StandaloneSubscribedDataSetRefDataTypeEnd(builder)
        return standaloneSubscribedDataSetRefDataType
