# automatically generated by the FlatBuffers compiler, do not modify

# namespace: client

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SecurityPolicy(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SecurityPolicy()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSecurityPolicy(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SecurityPolicy
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # default is BESTAVAILABLE determines and uses the most secure method automatically
    # SecurityPolicy
    def SecurityPolicy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SecurityPolicyStart(builder): builder.StartObject(1)
def Start(builder):
    return SecurityPolicyStart(builder)
def SecurityPolicyAddSecurityPolicy(builder, securityPolicy): builder.PrependInt8Slot(0, securityPolicy, 0)
def AddSecurityPolicy(builder, securityPolicy):
    return SecurityPolicyAddSecurityPolicy(builder, securityPolicy)
def SecurityPolicyEnd(builder): return builder.EndObject()
def End(builder):
    return SecurityPolicyEnd(builder)

class SecurityPolicyT(object):

    # SecurityPolicyT
    def __init__(self):
        self.securityPolicy = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        securityPolicy = SecurityPolicy()
        securityPolicy.Init(buf, pos)
        return cls.InitFromObj(securityPolicy)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, securityPolicy):
        x = SecurityPolicyT()
        x._UnPack(securityPolicy)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.securityPolicy == other.securityPolicy

    # SecurityPolicyT
    def _UnPack(self, securityPolicy):
        if securityPolicy is None:
            return
        self.securityPolicy = securityPolicy.SecurityPolicy()

    # SecurityPolicyT
    def Pack(self, builder):
        SecurityPolicyStart(builder)
        SecurityPolicyAddSecurityPolicy(builder, self.securityPolicy)
        securityPolicy = SecurityPolicyEnd(builder)
        return securityPolicy
