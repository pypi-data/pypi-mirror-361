# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  package-linux:
    name: Build Linux packages (.deb/.rpm) 📦
    needs:
    - build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    
    - name: Download wheel distribution
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Install FPM dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev rubygems build-essential
        sudo gem install fpm
    
    - name: Extract version from pyproject.toml
      id: version
      run: |
        # Install tomllib backport for Python < 3.11 if needed
        python3 -c "import tomllib" 2>/dev/null || python3 -m pip install tomli
        
        VERSION=$(python3 -c "
        try:
            import tomllib
        except ImportError:
            import tomli as tomllib
        
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
        print(data['project']['version'])
        ")
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"
    
    - name: Extract wheel contents and prepare systemd service
      run: |
        # Create temporary directory for wheel extraction
        mkdir -p wheel-contents
        cd wheel-contents
        
        # Find and extract wheel file
        WHEEL_FILE=$(find ../dist/ -name "*.whl" | head -1)
        
        if [ -z "$WHEEL_FILE" ]; then
          echo "Error: No wheel file found in dist/"
          ls -la ../dist/
          exit 1
        fi
        
        echo "Extracting wheel: $WHEEL_FILE"
        unzip -q "$WHEEL_FILE"
        
        # Copy the original wheel file for installation and get the filename
        mkdir -p usr/lib/python3/dist-packages
        cp "$WHEEL_FILE" usr/lib/python3/dist-packages/
        WHEEL_FILENAME=$(basename "$WHEEL_FILE")
        
        # Create systemd service directory and copy service file
        mkdir -p usr/lib/systemd/system
        cp ../packaging/discord-gameserver-notifier.service usr/lib/systemd/system/
        
        # Create the executable script in /usr/bin/
        mkdir -p usr/bin
        cp ../packaging/discord-gameserver-notifier-exec usr/bin/discord-gameserver-notifier
        chmod +x usr/bin/discord-gameserver-notifier
        
        # Create required directories for package structure
        mkdir -p etc/dgn
        mkdir -p var/lib/dgn
        mkdir -p var/log/dgn
        mkdir -p opt  # For the venv location
        
        # Create .gitkeep files to ensure directories exist (required for RPM)
        touch etc/dgn/.gitkeep
        touch var/lib/dgn/.gitkeep
        touch var/log/dgn/.gitkeep
        touch opt/.gitkeep
        
        # Create config directory and copy example configurations
        mkdir -p usr/lib/python3/dist-packages/config
        
        # Copy example configuration files from the extracted wheel
        if [ -f "config/config.yaml.example" ]; then
            cp config/config.yaml.example usr/lib/python3/dist-packages/config/
            echo "Copied config.yaml.example to package"
        else
            echo "Warning: config.yaml.example not found in wheel"
        fi
        
        if [ -f "config/config.yaml.service-example" ]; then
            cp config/config.yaml.service-example usr/lib/python3/dist-packages/config/
            echo "Copied config.yaml.service-example to package"
        else
            echo "Warning: config.yaml.service-example not found in wheel"
        fi
        
        if [ -f "config/config.yaml.unified" ]; then
            cp config/config.yaml.unified usr/lib/python3/dist-packages/config/
            echo "Copied config.yaml.unified to package"
        else
            echo "Warning: config.yaml.unified not found in wheel"
        fi
        
        cd ..
        echo "Wheel contents extracted to: $(pwd)/wheel-contents"
        echo "Contents:"
        find wheel-contents -type f | head -25
        echo "Executable script created at: wheel-contents/usr/bin/discord-gameserver-notifier"
        echo "Wheel file copied to: wheel-contents/usr/lib/python3/dist-packages/"
        echo "WHEEL_FILENAME=$WHEEL_FILENAME" >> $GITHUB_ENV
    
    - name: Build .deb package
      run: |
        fpm -s dir -t deb \
          --name "discord-gameserver-notifier" \
          --version "${{ steps.version.outputs.VERSION }}" \
          --description "Automated Discord notifications for LAN gameservers" \
          --url "https://github.com/lan-dot-party/Discord-Gameserver-Notifier" \
          --maintainer "LAN.party Team <packaging@lan.party>" \
          --license "GPL-3.0" \
          --architecture "all" \
          --depends "python3 >= 3.8" \
          --depends "python3-pip" \
          --depends "python3-venv" \
          --before-install "packaging/preinstall.sh" \
          --after-install "packaging/postinstall.sh" \
          --before-remove "packaging/preremove.sh" \
          --deb-systemd "packaging/discord-gameserver-notifier.service" \
          --deb-no-default-config-files \
          --directories "/etc/dgn" \
          --directories "/var/lib/dgn" \
          --directories "/var/log/dgn" \
          --directories "/opt" \
          --verbose \
          wheel-contents/discord_gameserver_notifier/=/usr/lib/python3/dist-packages/discord_gameserver_notifier/ \
          wheel-contents/discord_gameserver_notifier-${{ steps.version.outputs.VERSION }}.dist-info/=/usr/lib/python3/dist-packages/discord_gameserver_notifier-${{ steps.version.outputs.VERSION }}.dist-info/ \
          wheel-contents/usr/lib/python3/dist-packages/$WHEEL_FILENAME=/usr/lib/python3/dist-packages/$WHEEL_FILENAME \
          wheel-contents/usr/bin/discord-gameserver-notifier=/usr/bin/discord-gameserver-notifier \
          wheel-contents/etc/dgn/.gitkeep=/etc/dgn/.gitkeep \
          wheel-contents/var/lib/dgn/.gitkeep=/var/lib/dgn/.gitkeep \
          wheel-contents/var/log/dgn/.gitkeep=/var/log/dgn/.gitkeep \
          wheel-contents/opt/.gitkeep=/opt/.gitkeep \
          wheel-contents/usr/lib/python3/dist-packages/config/=/usr/lib/python3/dist-packages/config/
    
    - name: Build .rpm package
      run: |
        fpm -s dir -t rpm \
          --name "discord-gameserver-notifier" \
          --version "${{ steps.version.outputs.VERSION }}" \
          --description "Automated Discord notifications for LAN gameservers" \
          --url "https://github.com/lan-dot-party/Discord-Gameserver-Notifier" \
          --maintainer "LAN.party Team <packaging@lan.party>" \
          --license "GPL-3.0" \
          --architecture "noarch" \
          --depends "python3 >= 3.8" \
          --depends "python3-pip" \
          --before-install "packaging/preinstall.sh" \
          --after-install "packaging/postinstall.sh" \
          --before-remove "packaging/preremove.sh" \
          --verbose \
          wheel-contents/discord_gameserver_notifier/=/usr/lib/python3/dist-packages/discord_gameserver_notifier/ \
          wheel-contents/discord_gameserver_notifier-${{ steps.version.outputs.VERSION }}.dist-info/=/usr/lib/python3/dist-packages/discord_gameserver_notifier-${{ steps.version.outputs.VERSION }}.dist-info/ \
          wheel-contents/usr/lib/python3/dist-packages/$WHEEL_FILENAME=/usr/lib/python3/dist-packages/$WHEEL_FILENAME \
          wheel-contents/usr/bin/discord-gameserver-notifier=/usr/bin/discord-gameserver-notifier \
          wheel-contents/usr/lib/systemd/system/discord-gameserver-notifier.service=/usr/lib/systemd/system/discord-gameserver-notifier.service \
          wheel-contents/etc/dgn/.gitkeep=/etc/dgn/.gitkeep \
          wheel-contents/var/lib/dgn/.gitkeep=/var/lib/dgn/.gitkeep \
          wheel-contents/var/log/dgn/.gitkeep=/var/log/dgn/.gitkeep \
          wheel-contents/opt/.gitkeep=/opt/.gitkeep \
          wheel-contents/usr/lib/python3/dist-packages/config/=/usr/lib/python3/dist-packages/config/
    
    - name: Validate packages
      run: |
        echo "=== Generated packages ==="
        ls -la *.deb *.rpm 2>/dev/null || echo "No packages found"
        
        # Validate .deb package
        if ls *.deb 1> /dev/null 2>&1; then
          echo "=== .deb package info ==="
          dpkg-deb --info *.deb
          echo "=== .deb package contents (first 20 files) ==="
          dpkg-deb --contents *.deb | head -20
        fi
        
        # Validate .rpm package  
        if ls *.rpm 1> /dev/null 2>&1; then
          echo "=== .rpm package info ==="
          rpm -qip *.rpm 2>/dev/null || echo "rpm command not available, skipping rpm validation"
        fi
    
    - name: Upload Linux packages
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          *.deb
          *.rpm

  package-arch:
    name: Build Arch Linux package (.pkg.tar.zst) 📦
    needs:
    - build
    runs-on: ubuntu-latest
    container: archlinux:latest

    steps:
    - name: Update system and install dependencies
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm base-devel git python python-pip python-build python-installer python-wheel python-hatchling python-virtualenv python-yaml
    
    - uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0
    
    - name: Download wheel distribution
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Extract version from pyproject.toml
      id: version
      run: |
        # Install tomllib backport for Python < 3.11 if needed
        python -c "import tomllib" 2>/dev/null || python -m pip install tomli
        
        VERSION=$(python -c "
        try:
            import tomllib
        except ImportError:
            import tomli as tomllib
        
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
        print(data['project']['version'])
        ")
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"
    
    - name: Prepare PKGBUILD and sources
      run: |
        # Create build directory
        mkdir -p build-arch
        cd build-arch
        
        # Find and copy wheel file
        WHEEL_FILE=$(find ../dist/ -name "*.whl" | head -1)
        
        if [ -z "$WHEEL_FILE" ]; then
          echo "Error: No wheel file found in dist/"
          ls -la ../dist/
          exit 1
        fi
        
        echo "Using wheel: $WHEEL_FILE"
        WHEEL_FILENAME=$(basename "$WHEEL_FILE")
        
        # Copy wheel with original filename
        cp "$WHEEL_FILE" .
        
        # Copy packaging files
        cp ../packaging/PKGBUILD .
        cp ../packaging/discord-gameserver-notifier.service .
        cp ../packaging/discord-gameserver-notifier-exec .
        cp ../packaging/discord-gameserver-notifier.install .
        
        # Copy config files directly from source repository (not from wheel)
        if [ -f "../config/config.yaml.example" ]; then
            cp ../config/config.yaml.example .
            echo "Copied config.yaml.example from source"
        else
            echo "Error: config.yaml.example not found in source"
            exit 1
        fi
        
        if [ -f "../config/config.yaml.service-example" ]; then
            cp ../config/config.yaml.service-example .
            echo "Copied config.yaml.service-example from source"
        else
            echo "Error: config.yaml.service-example not found in source"
            exit 1
        fi
        
        if [ -f "../config/config.yaml.unified" ]; then
            cp ../config/config.yaml.unified .
            echo "Copied config.yaml.unified from source"
        else
            echo "Error: config.yaml.unified not found in source"
            exit 1
        fi
        
        # Update PKGBUILD with actual version and wheel filename
        sed -i "s/VERSION_PLACEHOLDER/${{ steps.version.outputs.VERSION }}/g" PKGBUILD
        sed -i "s/WHEEL_FILENAME_PLACEHOLDER/$WHEEL_FILENAME/g" PKGBUILD
        
        echo "PKGBUILD prepared:"
        cat PKGBUILD
        echo "Sources available:"
        ls -la
    
    - name: Build Arch package
      run: |
        cd build-arch
        
        # Create non-root user for makepkg (required)
        useradd -m builder
        echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
        chown -R builder:builder .
        
        # Build package as non-root user
        sudo -u builder makepkg -s --noconfirm
        
        # Move package to parent directory
        mv *.pkg.tar.zst ../
        
        echo "Package built successfully:"
        ls -la ../*.pkg.tar.zst
    
    - name: Validate Arch package
      run: |
        echo "=== Generated Arch package ==="
        ls -la *.pkg.tar.zst
        
        echo "=== Package info ==="
        pacman -Qip *.pkg.tar.zst
        
        echo "=== Package contents (first 30 files) ==="
        pacman -Qlp *.pkg.tar.zst | head -30
    
    - name: Upload Arch package
      uses: actions/upload-artifact@v4
      with:
        name: arch-package
        path: "*.pkg.tar.zst"

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    needs:
    - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  upload-to-release:
    name: >-
      Upload Linux packages 📦 to GitHub Release
    needs:
    - package-linux
    - package-arch
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for uploading release assets

    steps:
    - name: Download Linux packages
      uses: actions/download-artifact@v4
      with:
        name: linux-packages
        path: packages/
    
    - name: Download Arch package
      uses: actions/download-artifact@v4
      with:
        name: arch-package
        path: packages/
    
    - name: Upload .deb, .rpm and .pkg.tar.zst files to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          packages/*.deb
          packages/*.rpm
          packages/*.pkg.tar.zst

  test-deb-package:
    name: Test .deb package installation 🧪
    needs:
    - package-linux
    runs-on: ubuntu-latest

    steps:
    - name: Download Linux packages
      uses: actions/download-artifact@v4
      with:
        name: linux-packages
        path: packages/
    
    - name: Extract version from package filename
      id: version
      run: |
        DEB_FILE=$(find packages/ -name "*.deb" | head -1)
        if [ -z "$DEB_FILE" ]; then
          echo "Error: No .deb file found"
          exit 1
        fi
        
        # Extract version from filename (format: discord-gameserver-notifier_VERSION_all.deb)
        VERSION=$(basename "$DEB_FILE" | sed 's/discord-gameserver-notifier_\(.*\)_all\.deb/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "DEB_FILE=$DEB_FILE" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"
        echo "Package file: $DEB_FILE"
    
    - name: Install .deb package
      run: |
        echo "Installing package: ${{ steps.version.outputs.DEB_FILE }}"
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip python3-venv
        sudo dpkg -i "${{ steps.version.outputs.DEB_FILE }}" || sudo apt-get install -fy
    
    - name: Test installed package
      run: |
        echo "Testing discord-gameserver-notifier --version"
        VERSION_OUTPUT=$(discord-gameserver-notifier --version)
        echo "Command output: $VERSION_OUTPUT"
        
        # Check if the version matches
        EXPECTED_VERSION="${{ steps.version.outputs.VERSION }}"
        if [[ "$VERSION_OUTPUT" == *"$EXPECTED_VERSION"* ]]; then
          echo "✅ Version test passed! Expected: $EXPECTED_VERSION, Got: $VERSION_OUTPUT"
        else
          echo "❌ Version test failed! Expected: $EXPECTED_VERSION, Got: $VERSION_OUTPUT"
          exit 1
        fi
    
    - name: Test systemd service file
      run: |
        # Check if systemd service file exists
        if [ -f "/usr/lib/systemd/system/discord-gameserver-notifier.service" ]; then
          echo "✅ Systemd service file found"
          systemctl cat discord-gameserver-notifier || echo "Service file exists but not loaded"
        else
          echo "❌ Systemd service file not found"
          exit 1
        fi
    
    - name: Test configuration examples
      run: |
        # Check if example configurations exist in /etc/dgn (where they are actually used)
        if [ -f "/etc/dgn/config.yaml" ]; then
          echo "✅ Example config found in /etc/dgn"
          
          # Show content of config file for debugging
          echo "Content of /etc/dgn/config.yaml:"
          cat /etc/dgn/config.yaml 2>/dev/null || echo "Cannot read config file"
          
          # Verify it's actually a valid configuration file
          if grep -q "discord:" /etc/dgn/config.yaml; then
            echo "✅ Configuration file contains expected Discord section"
          else
            echo "❌ Configuration file does not contain expected Discord section"
            echo "CONTINUING FOR DEBUGGING PURPOSES..."
            # exit 1  # Comment out for debugging
          fi
        else
          echo "❌ Example config not found in /etc/dgn"
          
          # Fallback: check if the install script at least found the source files
          if [ -f "/usr/share/doc/discord-gameserver-notifier/config.yaml.example" ] || [ -f "/usr/share/doc/discord-gameserver-notifier/config.yaml.service-example" ]; then
            echo "✅ Source configuration files found in /usr/share/doc/"
          else
            echo "❌ Neither configuration file nor source files found"
            echo "CONTINUING FOR DEBUGGING PURPOSES..."
            # exit 1  # Comment out for debugging
          fi
        fi
        
        # Additional debugging for config files
        echo "=== ADDITIONAL CONFIG DEBUGGING ==="
        echo "Contents of all directories that might contain config files:"
        
        echo "--- /etc/dgn content ---"
        find /etc/dgn -type f -exec ls -la {} \; 2>/dev/null || echo "No files in /etc/dgn"
        
        echo "--- /usr/share/doc content ---"
        find /usr/share/doc -name "*discord*" -type d -exec ls -la {} \; 2>/dev/null || echo "No discord dirs in /usr/share/doc"
        
        echo "--- Looking for .install script ---"
        find /var/lib/pacman -name "*discord*" 2>/dev/null || echo "No install script files found"
        
        echo "--- Check if .install script exists in package ---"
        pacman -Qlp "${{ steps.version.outputs.PKG_FILE }}" 2>/dev/null | grep -i install || echo "No .install script in package"

  test-rpm-package:
    name: Test .rpm package installation 🧪
    needs:
    - package-linux
    runs-on: ubuntu-latest
    container: rockylinux:9

    steps:
    - name: Install dependencies
      run: |
        dnf update -y
        dnf install -y python3 python3-pip findutils
    
    - name: Download Linux packages
      uses: actions/download-artifact@v4
      with:
        name: linux-packages
        path: packages/
    
    - name: Extract version from package filename
      id: version
      run: |
        RPM_FILE=$(find packages/ -name "*.rpm" | head -1)
        if [ -z "$RPM_FILE" ]; then
          echo "Error: No .rpm file found"
          exit 1
        fi
        
        # Extract version from filename (format: discord-gameserver-notifier-VERSION-1.noarch.rpm)
        VERSION=$(basename "$RPM_FILE" | sed 's/discord-gameserver-notifier-\(.*\)-1\.noarch\.rpm/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "RPM_FILE=$RPM_FILE" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"
        echo "Package file: $RPM_FILE"
    
    - name: Install .rpm package
      run: |
        echo "Installing package: ${{ steps.version.outputs.RPM_FILE }}"
        dnf install -y "${{ steps.version.outputs.RPM_FILE }}"
    
    - name: Test installed package
      run: |
        echo "Testing discord-gameserver-notifier --version"
        VERSION_OUTPUT=$(discord-gameserver-notifier --version)
        echo "Command output: $VERSION_OUTPUT"
        
        # Check if the version matches
        EXPECTED_VERSION="${{ steps.version.outputs.VERSION }}"
        if [[ "$VERSION_OUTPUT" == *"$EXPECTED_VERSION"* ]]; then
          echo "✅ Version test passed! Expected: $EXPECTED_VERSION, Got: $VERSION_OUTPUT"
        else
          echo "❌ Version test failed! Expected: $EXPECTED_VERSION, Got: $VERSION_OUTPUT"
          exit 1
        fi
    
    - name: Test systemd service file
      run: |
        # Check if systemd service file exists
        if [ -f "/usr/lib/systemd/system/discord-gameserver-notifier.service" ]; then
          echo "✅ Systemd service file found"
          systemctl cat discord-gameserver-notifier || echo "Service file exists but not loaded"
        else
          echo "❌ Systemd service file not found"
          exit 1
        fi

    - name: Test configuration examples
      run: |
        # Check if example configurations exist in /etc/dgn (where they are actually used)
        if [ -f "/etc/dgn/config.yaml" ]; then
          echo "✅ Example config found in /etc/dgn"
          
          # Verify it's actually a valid configuration file
          if grep -q "discord:" /etc/dgn/config.yaml; then
            echo "✅ Configuration file contains expected Discord section"
          else
            echo "❌ Configuration file does not contain expected Discord section"
            exit 1
          fi
        else
          echo "❌ Example config not found in /etc/dgn"
          
          # Fallback: check if the install script at least found the source files
          if [ -f "/usr/share/doc/discord-gameserver-notifier/config.yaml.example" ] || [ -f "/usr/share/doc/discord-gameserver-notifier/config.yaml.service-example" ]; then
            echo "✅ Source configuration files found in /usr/share/doc/"
          else
            echo "❌ Neither configuration file nor source files found"
            exit 1
          fi
        fi

  test-arch-package:
    name: Test Arch package installation 🧪
    needs:
    - package-arch
    runs-on: ubuntu-latest
    container: archlinux:latest

    steps:
    - name: Update system and install dependencies
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm python python-pip python-virtualenv python-yaml systemd
    
    - name: Download Arch package
      uses: actions/download-artifact@v4
      with:
        name: arch-package
        path: packages/
    
    - name: Extract version from package filename
      id: version
      run: |
        PKG_FILE=$(find packages/ -name "*.pkg.tar.zst" | head -1)
        if [ -z "$PKG_FILE" ]; then
          echo "Error: No .pkg.tar.zst file found"
          exit 1
        fi
        
        # Extract version from filename (format: discord-gameserver-notifier-VERSION-1-any.pkg.tar.zst)
        VERSION=$(basename "$PKG_FILE" | sed 's/discord-gameserver-notifier-\(.*\)-1-any\.pkg\.tar\.zst/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "PKG_FILE=$PKG_FILE" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"
        echo "Package file: $PKG_FILE"
    
    - name: Install Arch package
      run: |
        echo "Installing package: ${{ steps.version.outputs.PKG_FILE }}"
        pacman -U --noconfirm "${{ steps.version.outputs.PKG_FILE }}"
    
    - name: Debug package installation
      run: |
        echo "=== DEBUGGING ARCH PACKAGE INSTALLATION ==="
        
        echo "=== 1. Check file system after installation ==="
        echo "Files in /etc/dgn/:"
        ls -la /etc/dgn/ 2>/dev/null || echo "Directory /etc/dgn/ does not exist"
        
        echo "Files in /usr/share/doc/discord-gameserver-notifier/:"
        ls -la /usr/share/doc/discord-gameserver-notifier/ 2>/dev/null || echo "Directory /usr/share/doc/discord-gameserver-notifier/ does not exist"
        
        echo "Files in /var/lib/dgn/:"
        ls -la /var/lib/dgn/ 2>/dev/null || echo "Directory /var/lib/dgn/ does not exist"
        
        echo "Files in /var/log/dgn/:"
        ls -la /var/log/dgn/ 2>/dev/null || echo "Directory /var/log/dgn/ does not exist"
        
        echo "=== 2. Check virtual environment ==="
        echo "Virtual environment directory:"
        ls -la /opt/discord-gameserver-notifier/ 2>/dev/null || echo "Virtual environment does not exist"
        
        echo "=== 3. Check systemd service ==="
        echo "Systemd service file:"
        ls -la /usr/lib/systemd/system/discord-gameserver-notifier.service 2>/dev/null || echo "Service file does not exist"
        
        echo "=== 4. Check wheel files ==="
        echo "Wheel files in site-packages:"
        find /usr/lib/python*/site-packages/ -name "*discord*" 2>/dev/null || echo "No discord files found in site-packages"
        
        echo "=== 5. Check installed package contents ==="
        echo "All package files (first 50):"
        pacman -Ql discord-gameserver-notifier 2>/dev/null | head -50 || echo "Cannot read installed package contents"
        
        echo "=== 6. Check if files exist in original package ==="
        echo "Config files in package:"
        pacman -Qlp "${{ steps.version.outputs.PKG_FILE }}" 2>/dev/null | grep -E "(config|example)" || echo "No config files found in package"
        
        echo "=== 7. Check user and group ==="
        echo "User dgn:"
        getent passwd dgn 2>/dev/null || echo "User dgn does not exist"
        echo "Group dgn:"
        getent group dgn 2>/dev/null || echo "Group dgn does not exist"
        
        echo "=== 8. Check installation log ==="
        echo "Searching for installation messages in journal:"
        journalctl -n 100 --no-pager 2>/dev/null | grep -i "discord" || echo "No discord messages in journal"
        
        echo "=== 9. Try to find config files anywhere ==="
        echo "Searching for config files anywhere on system:"
        find / -name "*config.yaml*" -type f 2>/dev/null | head -10 || echo "No config files found"
        
        echo "=== 10. Check actual package contents ==="
        echo "Re-extracting package to see what's really in it:"
        mkdir -p /tmp/debug-package
        cd /tmp/debug-package
        tar -tf "${{ steps.version.outputs.PKG_FILE }}" 2>/dev/null | head -30 || echo "Cannot extract package"
        
        echo "=== 11. Check if install script ran ==="
        echo "Looking for install script output in pacman log:"
        grep -i "discord" /var/log/pacman.log 2>/dev/null | tail -10 || echo "No pacman log entries"
        
        echo "=== 12. Check Python paths ==="
        echo "Python version and paths:"
        python --version
        python -c "import sys; print('Python paths:'); [print(p) for p in sys.path]"
        
        echo "=== 13. Manual search for example files ==="
        echo "Looking for example files in common locations:"
        find /usr -name "*example*" -type f 2>/dev/null | grep -i discord || echo "No example files found"
        
        echo "=== END DEBUGGING ==="
    
    - name: Test installed package
      run: |
        echo "Testing discord-gameserver-notifier --version"
        VERSION_OUTPUT=$(discord-gameserver-notifier --version)
        echo "Command output: $VERSION_OUTPUT"
        
        # Check if the version matches
        EXPECTED_VERSION="${{ steps.version.outputs.VERSION }}"
        if [[ "$VERSION_OUTPUT" == *"$EXPECTED_VERSION"* ]]; then
          echo "✅ Version test passed! Expected: $EXPECTED_VERSION, Got: $VERSION_OUTPUT"
        else
          echo "❌ Version test failed! Expected: $EXPECTED_VERSION, Got: $VERSION_OUTPUT"
          exit 1
        fi
    
    - name: Test systemd service file
      run: |
        # Check if systemd service file exists
        if [ -f "/usr/lib/systemd/system/discord-gameserver-notifier.service" ]; then
          echo "✅ Systemd service file found"
          systemctl cat discord-gameserver-notifier || echo "Service file exists but not loaded"
        else
          echo "❌ Systemd service file not found"
          exit 1
        fi
    
    - name: Test configuration examples
      run: |
        # Check if example configurations exist in /etc/dgn (where they are actually used)
        if [ -f "/etc/dgn/config.yaml" ]; then
          echo "✅ Example config found in /etc/dgn"
          
          # Show content of config file for debugging
          echo "Content of /etc/dgn/config.yaml:"
          cat /etc/dgn/config.yaml 2>/dev/null || echo "Cannot read config file"
          
          # Verify it's actually a valid configuration file
          if grep -q "discord:" /etc/dgn/config.yaml; then
            echo "✅ Configuration file contains expected Discord section"
          else
            echo "❌ Configuration file does not contain expected Discord section"
            echo "CONTINUING FOR DEBUGGING PURPOSES..."
            # exit 1  # Comment out for debugging
          fi
        else
          echo "❌ Example config not found in /etc/dgn"
          
          # Fallback: check if the install script at least found the source files
          if [ -f "/usr/share/doc/discord-gameserver-notifier/config.yaml.example" ] || [ -f "/usr/share/doc/discord-gameserver-notifier/config.yaml.service-example" ]; then
            echo "✅ Source configuration files found in /usr/share/doc/"
          else
            echo "❌ Neither configuration file nor source files found"
            echo "CONTINUING FOR DEBUGGING PURPOSES..."
            # exit 1  # Comment out for debugging
          fi
        fi
        
        # Additional debugging for config files
        echo "=== ADDITIONAL CONFIG DEBUGGING ==="
        echo "Contents of all directories that might contain config files:"
        
        echo "--- /etc/dgn content ---"
        find /etc/dgn -type f -exec ls -la {} \; 2>/dev/null || echo "No files in /etc/dgn"
        
        echo "--- /usr/share/doc content ---"
        find /usr/share/doc -name "*discord*" -type d -exec ls -la {} \; 2>/dev/null || echo "No discord dirs in /usr/share/doc"
        
        echo "--- Looking for .install script ---"
        find /var/lib/pacman -name "*discord*" 2>/dev/null || echo "No install script files found"
        
        echo "--- Check if .install script exists in package ---"
        pacman -Qlp "${{ steps.version.outputs.PKG_FILE }}" 2>/dev/null | grep -i install || echo "No .install script in package"