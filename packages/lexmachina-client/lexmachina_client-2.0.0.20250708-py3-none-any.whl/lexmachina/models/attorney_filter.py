# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20250708
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AttorneyFilter(BaseModel):
    """
    AttorneyFilter
    """ # noqa: E501
    include: Optional[List[StrictInt]] = None
    exclude: Optional[List[StrictInt]] = None
    include_plaintiff: Optional[List[StrictInt]] = Field(default=None, alias="includePlaintiff")
    exclude_plaintiff: Optional[List[StrictInt]] = Field(default=None, alias="excludePlaintiff")
    include_defendant: Optional[List[StrictInt]] = Field(default=None, alias="includeDefendant")
    exclude_defendant: Optional[List[StrictInt]] = Field(default=None, alias="excludeDefendant")
    include_third_party: Optional[List[StrictInt]] = Field(default=None, alias="includeThirdParty")
    exclude_third_party: Optional[List[StrictInt]] = Field(default=None, alias="excludeThirdParty")
    __properties: ClassVar[List[str]] = ["include", "exclude", "includePlaintiff", "excludePlaintiff", "includeDefendant", "excludeDefendant", "includeThirdParty", "excludeThirdParty"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttorneyFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if include (nullable) is None
        # and model_fields_set contains the field
        if self.include is None and "include" in self.model_fields_set:
            _dict['include'] = None

        # set to None if exclude (nullable) is None
        # and model_fields_set contains the field
        if self.exclude is None and "exclude" in self.model_fields_set:
            _dict['exclude'] = None

        # set to None if include_plaintiff (nullable) is None
        # and model_fields_set contains the field
        if self.include_plaintiff is None and "include_plaintiff" in self.model_fields_set:
            _dict['includePlaintiff'] = None

        # set to None if exclude_plaintiff (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_plaintiff is None and "exclude_plaintiff" in self.model_fields_set:
            _dict['excludePlaintiff'] = None

        # set to None if include_defendant (nullable) is None
        # and model_fields_set contains the field
        if self.include_defendant is None and "include_defendant" in self.model_fields_set:
            _dict['includeDefendant'] = None

        # set to None if exclude_defendant (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_defendant is None and "exclude_defendant" in self.model_fields_set:
            _dict['excludeDefendant'] = None

        # set to None if include_third_party (nullable) is None
        # and model_fields_set contains the field
        if self.include_third_party is None and "include_third_party" in self.model_fields_set:
            _dict['includeThirdParty'] = None

        # set to None if exclude_third_party (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_third_party is None and "exclude_third_party" in self.model_fields_set:
            _dict['excludeThirdParty'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttorneyFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "include": obj.get("include"),
            "exclude": obj.get("exclude"),
            "includePlaintiff": obj.get("includePlaintiff"),
            "excludePlaintiff": obj.get("excludePlaintiff"),
            "includeDefendant": obj.get("includeDefendant"),
            "excludeDefendant": obj.get("excludeDefendant"),
            "includeThirdParty": obj.get("includeThirdParty"),
            "excludeThirdParty": obj.get("excludeThirdParty")
        })
        return _obj


