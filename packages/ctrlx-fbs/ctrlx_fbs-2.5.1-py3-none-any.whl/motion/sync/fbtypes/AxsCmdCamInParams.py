# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# CamIn calculation pipeline parameters for the axis CamIn command
class AxsCmdCamInParams(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdCamInParams()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdCamInParams(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdCamInParams
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Constant master offset for the command instance.
    # AxsCmdCamInParams
    def MasterOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Constant slave offset for the command instance.
    # AxsCmdCamInParams
    def SlaveOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Numerator of gear ratio.
    # AxsCmdCamInParams
    def RatioNumerator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # Denominator of gear ratio.
    # AxsCmdCamInParams
    def RatioDenominator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # Constant fine adjustment percentage for the gear ratio.
    # AxsCmdCamInParams
    def FineAdjust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Scaling factor for the gain
    # AxsCmdCamInParams
    def GainFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 1.0

    # Constant angle adjust for the command instance
    # AxsCmdCamInParams
    def AngleAdjust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Defines the start behaviour of the point table similar to a FlexProfile
    # AxsCmdCamInParams
    def ProfileEntry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # Specifies how the point table is executed
    # AxsCmdCamInParams
    def ProfileExecutionMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Name of the point table that should be executed.
    # AxsCmdCamInParams
    def PointTable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Master position used to switch to the new point table and/or gear.
    # AxsCmdCamInParams
    def SwitchPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # If false, switch to the selected point table immediately. If true, switch to the selected point table not until the switchPosition is reached.
    # AxsCmdCamInParams
    def SwitchProfileOnPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # If false, switch to the selected gear immediately. If true, switch to the selected gear not until the switchPosition is reached.
    # AxsCmdCamInParams
    def SwitchGearOnPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Master position used to switch to the new gain factor.
    # AxsCmdCamInParams
    def SwitchPositionGainFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # If false, switch to the selected gain factor immediately. If true, switch to the selected gain factor not until the switchPositionGainFactor is reached.
    # AxsCmdCamInParams
    def SwitchGainFactorOnPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AxsCmdCamInParamsStart(builder): builder.StartObject(15)
def Start(builder):
    return AxsCmdCamInParamsStart(builder)
def AxsCmdCamInParamsAddMasterOffset(builder, masterOffset): builder.PrependFloat64Slot(0, masterOffset, 0.0)
def AddMasterOffset(builder, masterOffset):
    return AxsCmdCamInParamsAddMasterOffset(builder, masterOffset)
def AxsCmdCamInParamsAddSlaveOffset(builder, slaveOffset): builder.PrependFloat64Slot(1, slaveOffset, 0.0)
def AddSlaveOffset(builder, slaveOffset):
    return AxsCmdCamInParamsAddSlaveOffset(builder, slaveOffset)
def AxsCmdCamInParamsAddRatioNumerator(builder, ratioNumerator): builder.PrependInt32Slot(2, ratioNumerator, 1)
def AddRatioNumerator(builder, ratioNumerator):
    return AxsCmdCamInParamsAddRatioNumerator(builder, ratioNumerator)
def AxsCmdCamInParamsAddRatioDenominator(builder, ratioDenominator): builder.PrependInt32Slot(3, ratioDenominator, 1)
def AddRatioDenominator(builder, ratioDenominator):
    return AxsCmdCamInParamsAddRatioDenominator(builder, ratioDenominator)
def AxsCmdCamInParamsAddFineAdjust(builder, fineAdjust): builder.PrependFloat64Slot(4, fineAdjust, 0.0)
def AddFineAdjust(builder, fineAdjust):
    return AxsCmdCamInParamsAddFineAdjust(builder, fineAdjust)
def AxsCmdCamInParamsAddGainFactor(builder, gainFactor): builder.PrependFloat64Slot(5, gainFactor, 1.0)
def AddGainFactor(builder, gainFactor):
    return AxsCmdCamInParamsAddGainFactor(builder, gainFactor)
def AxsCmdCamInParamsAddAngleAdjust(builder, angleAdjust): builder.PrependFloat64Slot(6, angleAdjust, 0.0)
def AddAngleAdjust(builder, angleAdjust):
    return AxsCmdCamInParamsAddAngleAdjust(builder, angleAdjust)
def AxsCmdCamInParamsAddProfileEntry(builder, profileEntry): builder.PrependInt8Slot(7, profileEntry, 1)
def AddProfileEntry(builder, profileEntry):
    return AxsCmdCamInParamsAddProfileEntry(builder, profileEntry)
def AxsCmdCamInParamsAddProfileExecutionMode(builder, profileExecutionMode): builder.PrependInt8Slot(8, profileExecutionMode, 0)
def AddProfileExecutionMode(builder, profileExecutionMode):
    return AxsCmdCamInParamsAddProfileExecutionMode(builder, profileExecutionMode)
def AxsCmdCamInParamsAddPointTable(builder, pointTable): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(pointTable), 0)
def AddPointTable(builder, pointTable):
    return AxsCmdCamInParamsAddPointTable(builder, pointTable)
def AxsCmdCamInParamsAddSwitchPosition(builder, switchPosition): builder.PrependFloat64Slot(10, switchPosition, 0.0)
def AddSwitchPosition(builder, switchPosition):
    return AxsCmdCamInParamsAddSwitchPosition(builder, switchPosition)
def AxsCmdCamInParamsAddSwitchProfileOnPos(builder, switchProfileOnPos): builder.PrependBoolSlot(11, switchProfileOnPos, 0)
def AddSwitchProfileOnPos(builder, switchProfileOnPos):
    return AxsCmdCamInParamsAddSwitchProfileOnPos(builder, switchProfileOnPos)
def AxsCmdCamInParamsAddSwitchGearOnPos(builder, switchGearOnPos): builder.PrependBoolSlot(12, switchGearOnPos, 0)
def AddSwitchGearOnPos(builder, switchGearOnPos):
    return AxsCmdCamInParamsAddSwitchGearOnPos(builder, switchGearOnPos)
def AxsCmdCamInParamsAddSwitchPositionGainFactor(builder, switchPositionGainFactor): builder.PrependFloat64Slot(13, switchPositionGainFactor, 0.0)
def AddSwitchPositionGainFactor(builder, switchPositionGainFactor):
    return AxsCmdCamInParamsAddSwitchPositionGainFactor(builder, switchPositionGainFactor)
def AxsCmdCamInParamsAddSwitchGainFactorOnPos(builder, switchGainFactorOnPos): builder.PrependBoolSlot(14, switchGainFactorOnPos, 0)
def AddSwitchGainFactorOnPos(builder, switchGainFactorOnPos):
    return AxsCmdCamInParamsAddSwitchGainFactorOnPos(builder, switchGainFactorOnPos)
def AxsCmdCamInParamsEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdCamInParamsEnd(builder)

class AxsCmdCamInParamsT(object):

    # AxsCmdCamInParamsT
    def __init__(self):
        self.masterOffset = 0.0  # type: float
        self.slaveOffset = 0.0  # type: float
        self.ratioNumerator = 1  # type: int
        self.ratioDenominator = 1  # type: int
        self.fineAdjust = 0.0  # type: float
        self.gainFactor = 1.0  # type: float
        self.angleAdjust = 0.0  # type: float
        self.profileEntry = 1  # type: int
        self.profileExecutionMode = 0  # type: int
        self.pointTable = None  # type: str
        self.switchPosition = 0.0  # type: float
        self.switchProfileOnPos = False  # type: bool
        self.switchGearOnPos = False  # type: bool
        self.switchPositionGainFactor = 0.0  # type: float
        self.switchGainFactorOnPos = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdCamInParams = AxsCmdCamInParams()
        axsCmdCamInParams.Init(buf, pos)
        return cls.InitFromObj(axsCmdCamInParams)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdCamInParams):
        x = AxsCmdCamInParamsT()
        x._UnPack(axsCmdCamInParams)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.masterOffset == other.masterOffset and \
            self.slaveOffset == other.slaveOffset and \
            self.ratioNumerator == other.ratioNumerator and \
            self.ratioDenominator == other.ratioDenominator and \
            self.fineAdjust == other.fineAdjust and \
            self.gainFactor == other.gainFactor and \
            self.angleAdjust == other.angleAdjust and \
            self.profileEntry == other.profileEntry and \
            self.profileExecutionMode == other.profileExecutionMode and \
            self.pointTable == other.pointTable and \
            self.switchPosition == other.switchPosition and \
            self.switchProfileOnPos == other.switchProfileOnPos and \
            self.switchGearOnPos == other.switchGearOnPos and \
            self.switchPositionGainFactor == other.switchPositionGainFactor and \
            self.switchGainFactorOnPos == other.switchGainFactorOnPos

    # AxsCmdCamInParamsT
    def _UnPack(self, axsCmdCamInParams):
        if axsCmdCamInParams is None:
            return
        self.masterOffset = axsCmdCamInParams.MasterOffset()
        self.slaveOffset = axsCmdCamInParams.SlaveOffset()
        self.ratioNumerator = axsCmdCamInParams.RatioNumerator()
        self.ratioDenominator = axsCmdCamInParams.RatioDenominator()
        self.fineAdjust = axsCmdCamInParams.FineAdjust()
        self.gainFactor = axsCmdCamInParams.GainFactor()
        self.angleAdjust = axsCmdCamInParams.AngleAdjust()
        self.profileEntry = axsCmdCamInParams.ProfileEntry()
        self.profileExecutionMode = axsCmdCamInParams.ProfileExecutionMode()
        self.pointTable = axsCmdCamInParams.PointTable()
        self.switchPosition = axsCmdCamInParams.SwitchPosition()
        self.switchProfileOnPos = axsCmdCamInParams.SwitchProfileOnPos()
        self.switchGearOnPos = axsCmdCamInParams.SwitchGearOnPos()
        self.switchPositionGainFactor = axsCmdCamInParams.SwitchPositionGainFactor()
        self.switchGainFactorOnPos = axsCmdCamInParams.SwitchGainFactorOnPos()

    # AxsCmdCamInParamsT
    def Pack(self, builder):
        if self.pointTable is not None:
            pointTable = builder.CreateString(self.pointTable)
        AxsCmdCamInParamsStart(builder)
        AxsCmdCamInParamsAddMasterOffset(builder, self.masterOffset)
        AxsCmdCamInParamsAddSlaveOffset(builder, self.slaveOffset)
        AxsCmdCamInParamsAddRatioNumerator(builder, self.ratioNumerator)
        AxsCmdCamInParamsAddRatioDenominator(builder, self.ratioDenominator)
        AxsCmdCamInParamsAddFineAdjust(builder, self.fineAdjust)
        AxsCmdCamInParamsAddGainFactor(builder, self.gainFactor)
        AxsCmdCamInParamsAddAngleAdjust(builder, self.angleAdjust)
        AxsCmdCamInParamsAddProfileEntry(builder, self.profileEntry)
        AxsCmdCamInParamsAddProfileExecutionMode(builder, self.profileExecutionMode)
        if self.pointTable is not None:
            AxsCmdCamInParamsAddPointTable(builder, pointTable)
        AxsCmdCamInParamsAddSwitchPosition(builder, self.switchPosition)
        AxsCmdCamInParamsAddSwitchProfileOnPos(builder, self.switchProfileOnPos)
        AxsCmdCamInParamsAddSwitchGearOnPos(builder, self.switchGearOnPos)
        AxsCmdCamInParamsAddSwitchPositionGainFactor(builder, self.switchPositionGainFactor)
        AxsCmdCamInParamsAddSwitchGainFactorOnPos(builder, self.switchGainFactorOnPos)
        axsCmdCamInParams = AxsCmdCamInParamsEnd(builder)
        return axsCmdCamInParams
