# automatically generated by the FlatBuffers compiler, do not modify

# namespace: client

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserIdentityToken(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserIdentityToken()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserIdentityToken(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserIdentityToken
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserIdentityToken
    def UserIdentityTokenType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserIdentityToken
    def UserIdentityToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def UserIdentityTokenStart(builder): builder.StartObject(2)
def Start(builder):
    return UserIdentityTokenStart(builder)
def UserIdentityTokenAddUserIdentityTokenType(builder, userIdentityTokenType): builder.PrependUint8Slot(0, userIdentityTokenType, 0)
def AddUserIdentityTokenType(builder, userIdentityTokenType):
    return UserIdentityTokenAddUserIdentityTokenType(builder, userIdentityTokenType)
def UserIdentityTokenAddUserIdentityToken(builder, userIdentityToken): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(userIdentityToken), 0)
def AddUserIdentityToken(builder, userIdentityToken):
    return UserIdentityTokenAddUserIdentityToken(builder, userIdentityToken)
def UserIdentityTokenEnd(builder): return builder.EndObject()
def End(builder):
    return UserIdentityTokenEnd(builder)
import comm.opcua.client.TokenAnonymous
import comm.opcua.client.TokenCert
import comm.opcua.client.TokenUserPassword
import comm.opcua.client.UserIdentityTokenUnion
try:
    from typing import Union
except:
    pass

class UserIdentityTokenT(object):

    # UserIdentityTokenT
    def __init__(self):
        self.userIdentityTokenType = 0  # type: int
        self.userIdentityToken = None  # type: Union[None, comm.opcua.client.TokenAnonymous.TokenAnonymousT, comm.opcua.client.TokenUserPassword.TokenUserPasswordT, comm.opcua.client.TokenCert.TokenCertT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        userIdentityToken = UserIdentityToken()
        userIdentityToken.Init(buf, pos)
        return cls.InitFromObj(userIdentityToken)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, userIdentityToken):
        x = UserIdentityTokenT()
        x._UnPack(userIdentityToken)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.userIdentityTokenType == other.userIdentityTokenType and \
            self.userIdentityToken == other.userIdentityToken

    # UserIdentityTokenT
    def _UnPack(self, userIdentityToken):
        if userIdentityToken is None:
            return
        self.userIdentityTokenType = userIdentityToken.UserIdentityTokenType()
        self.userIdentityToken = comm.opcua.client.UserIdentityTokenUnion.UserIdentityTokenUnionCreator(self.userIdentityTokenType, userIdentityToken.UserIdentityToken())

    # UserIdentityTokenT
    def Pack(self, builder):
        if self.userIdentityToken is not None:
            userIdentityToken = self.userIdentityToken.Pack(builder)
        UserIdentityTokenStart(builder)
        UserIdentityTokenAddUserIdentityTokenType(builder, self.userIdentityTokenType)
        if self.userIdentityToken is not None:
            UserIdentityTokenAddUserIdentityToken(builder, userIdentityToken)
        userIdentityToken = UserIdentityTokenEnd(builder)
        return userIdentityToken
