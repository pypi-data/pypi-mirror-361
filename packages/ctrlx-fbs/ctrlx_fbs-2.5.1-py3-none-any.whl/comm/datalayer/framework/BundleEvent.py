# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BundleEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BundleEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBundleEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BundleEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the bundle
    # BundleEvent
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BundleEvent
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Type of event
    # BundleEvent
    def Event(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # File location of the bundle
    # BundleEvent
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # verison of the bundle
    # BundleEvent
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def BundleEventStart(builder): builder.StartObject(5)
def Start(builder):
    return BundleEventStart(builder)
def BundleEventAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return BundleEventAddName(builder, name)
def BundleEventAddId(builder, id): builder.PrependInt64Slot(1, id, 0)
def AddId(builder, id):
    return BundleEventAddId(builder, id)
def BundleEventAddEvent(builder, event): builder.PrependInt8Slot(2, event, 0)
def AddEvent(builder, event):
    return BundleEventAddEvent(builder, event)
def BundleEventAddLocation(builder, location): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)
def AddLocation(builder, location):
    return BundleEventAddLocation(builder, location)
def BundleEventAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def AddVersion(builder, version):
    return BundleEventAddVersion(builder, version)
def BundleEventEnd(builder): return builder.EndObject()
def End(builder):
    return BundleEventEnd(builder)

class BundleEventT(object):

    # BundleEventT
    def __init__(self):
        self.name = None  # type: str
        self.id = 0  # type: int
        self.event = 0  # type: int
        self.location = None  # type: str
        self.version = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        bundleEvent = BundleEvent()
        bundleEvent.Init(buf, pos)
        return cls.InitFromObj(bundleEvent)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, bundleEvent):
        x = BundleEventT()
        x._UnPack(bundleEvent)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.id == other.id and \
            self.event == other.event and \
            self.location == other.location and \
            self.version == other.version

    # BundleEventT
    def _UnPack(self, bundleEvent):
        if bundleEvent is None:
            return
        self.name = bundleEvent.Name()
        self.id = bundleEvent.Id()
        self.event = bundleEvent.Event()
        self.location = bundleEvent.Location()
        self.version = bundleEvent.Version()

    # BundleEventT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.location is not None:
            location = builder.CreateString(self.location)
        if self.version is not None:
            version = builder.CreateString(self.version)
        BundleEventStart(builder)
        if self.name is not None:
            BundleEventAddName(builder, name)
        BundleEventAddId(builder, self.id)
        BundleEventAddEvent(builder, self.event)
        if self.location is not None:
            BundleEventAddLocation(builder, location)
        if self.version is not None:
            BundleEventAddVersion(builder, version)
        bundleEvent = BundleEventEnd(builder)
        return bundleEvent
