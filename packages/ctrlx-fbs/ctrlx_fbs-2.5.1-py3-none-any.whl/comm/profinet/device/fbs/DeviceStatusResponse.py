# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DeviceStatusResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeviceStatusResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeviceStatusResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DeviceStatusResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DeviceStatusResponse
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def DeviceStatusResponseStart(builder): builder.StartObject(1)
def Start(builder):
    return DeviceStatusResponseStart(builder)
def DeviceStatusResponseAddStatus(builder, status): builder.PrependUint32Slot(0, status, 0)
def AddStatus(builder, status):
    return DeviceStatusResponseAddStatus(builder, status)
def DeviceStatusResponseEnd(builder): return builder.EndObject()
def End(builder):
    return DeviceStatusResponseEnd(builder)

class DeviceStatusResponseT(object):

    # DeviceStatusResponseT
    def __init__(self):
        self.status = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        deviceStatusResponse = DeviceStatusResponse()
        deviceStatusResponse.Init(buf, pos)
        return cls.InitFromObj(deviceStatusResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, deviceStatusResponse):
        x = DeviceStatusResponseT()
        x._UnPack(deviceStatusResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.status == other.status

    # DeviceStatusResponseT
    def _UnPack(self, deviceStatusResponse):
        if deviceStatusResponse is None:
            return
        self.status = deviceStatusResponse.Status()

    # DeviceStatusResponseT
    def Pack(self, builder):
        DeviceStatusResponseStart(builder)
        DeviceStatusResponseAddStatus(builder, self.status)
        deviceStatusResponse = DeviceStatusResponseEnd(builder)
        return deviceStatusResponse
