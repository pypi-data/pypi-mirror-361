# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Master syc unit configuration response
class MsuConfigInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MsuConfigInfoResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMsuConfigInfoResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MsuConfigInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Msu Id
    # MsuConfigInfoResponse
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #configured Msu name
    # MsuConfigInfoResponse
    def MsuName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Memory information of input process data.
    # MsuConfigInfoResponse
    def ProcessDataIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.EthercatMemoryInfo import EthercatMemoryInfo
            obj = EthercatMemoryInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #Memory information of output process data.
    # MsuConfigInfoResponse
    def ProcessDataOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.EthercatMemoryInfo import EthercatMemoryInfo
            obj = EthercatMemoryInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #(internal - do not use)
    # MsuConfigInfoResponse
    def WkcStateDiagOffsIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #(internal - do not use)
    # MsuConfigInfoResponse
    def WkcStateDiagOffsOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Wkc valid offset for inputs in data layer rt input image.
    # MsuConfigInfoResponse
    def WkcValidOffsetIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Wkc valid offset for outputs in data layer rt input image.
    # MsuConfigInfoResponse
    def WkcValidOffsetOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def MsuConfigInfoResponseStart(builder): builder.StartObject(8)
def Start(builder):
    return MsuConfigInfoResponseStart(builder)
def MsuConfigInfoResponseAddId(builder, id): builder.PrependUint16Slot(0, id, 0)
def AddId(builder, id):
    return MsuConfigInfoResponseAddId(builder, id)
def MsuConfigInfoResponseAddMsuName(builder, msuName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(msuName), 0)
def AddMsuName(builder, msuName):
    return MsuConfigInfoResponseAddMsuName(builder, msuName)
def MsuConfigInfoResponseAddProcessDataIn(builder, processDataIn): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(processDataIn), 0)
def AddProcessDataIn(builder, processDataIn):
    return MsuConfigInfoResponseAddProcessDataIn(builder, processDataIn)
def MsuConfigInfoResponseAddProcessDataOut(builder, processDataOut): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(processDataOut), 0)
def AddProcessDataOut(builder, processDataOut):
    return MsuConfigInfoResponseAddProcessDataOut(builder, processDataOut)
def MsuConfigInfoResponseAddWkcStateDiagOffsIn(builder, wkcStateDiagOffsIn): builder.PrependUint16Slot(4, wkcStateDiagOffsIn, 0)
def AddWkcStateDiagOffsIn(builder, wkcStateDiagOffsIn):
    return MsuConfigInfoResponseAddWkcStateDiagOffsIn(builder, wkcStateDiagOffsIn)
def MsuConfigInfoResponseAddWkcStateDiagOffsOut(builder, wkcStateDiagOffsOut): builder.PrependUint16Slot(5, wkcStateDiagOffsOut, 0)
def AddWkcStateDiagOffsOut(builder, wkcStateDiagOffsOut):
    return MsuConfigInfoResponseAddWkcStateDiagOffsOut(builder, wkcStateDiagOffsOut)
def MsuConfigInfoResponseAddWkcValidOffsetIn(builder, wkcValidOffsetIn): builder.PrependUint32Slot(6, wkcValidOffsetIn, 0)
def AddWkcValidOffsetIn(builder, wkcValidOffsetIn):
    return MsuConfigInfoResponseAddWkcValidOffsetIn(builder, wkcValidOffsetIn)
def MsuConfigInfoResponseAddWkcValidOffsetOut(builder, wkcValidOffsetOut): builder.PrependUint32Slot(7, wkcValidOffsetOut, 0)
def AddWkcValidOffsetOut(builder, wkcValidOffsetOut):
    return MsuConfigInfoResponseAddWkcValidOffsetOut(builder, wkcValidOffsetOut)
def MsuConfigInfoResponseEnd(builder): return builder.EndObject()
def End(builder):
    return MsuConfigInfoResponseEnd(builder)
import comm.ethercat.master.fbs.EthercatMemoryInfo
try:
    from typing import Optional
except:
    pass

class MsuConfigInfoResponseT(object):

    # MsuConfigInfoResponseT
    def __init__(self):
        self.id = 0  # type: int
        self.msuName = None  # type: str
        self.processDataIn = None  # type: Optional[comm.ethercat.master.fbs.EthercatMemoryInfo.EthercatMemoryInfoT]
        self.processDataOut = None  # type: Optional[comm.ethercat.master.fbs.EthercatMemoryInfo.EthercatMemoryInfoT]
        self.wkcStateDiagOffsIn = 0  # type: int
        self.wkcStateDiagOffsOut = 0  # type: int
        self.wkcValidOffsetIn = 0  # type: int
        self.wkcValidOffsetOut = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        msuConfigInfoResponse = MsuConfigInfoResponse()
        msuConfigInfoResponse.Init(buf, pos)
        return cls.InitFromObj(msuConfigInfoResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, msuConfigInfoResponse):
        x = MsuConfigInfoResponseT()
        x._UnPack(msuConfigInfoResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.id == other.id and \
            self.msuName == other.msuName and \
            self.processDataIn == other.processDataIn and \
            self.processDataOut == other.processDataOut and \
            self.wkcStateDiagOffsIn == other.wkcStateDiagOffsIn and \
            self.wkcStateDiagOffsOut == other.wkcStateDiagOffsOut and \
            self.wkcValidOffsetIn == other.wkcValidOffsetIn and \
            self.wkcValidOffsetOut == other.wkcValidOffsetOut

    # MsuConfigInfoResponseT
    def _UnPack(self, msuConfigInfoResponse):
        if msuConfigInfoResponse is None:
            return
        self.id = msuConfigInfoResponse.Id()
        self.msuName = msuConfigInfoResponse.MsuName()
        if msuConfigInfoResponse.ProcessDataIn() is not None:
            self.processDataIn = comm.ethercat.master.fbs.EthercatMemoryInfo.EthercatMemoryInfoT.InitFromObj(msuConfigInfoResponse.ProcessDataIn())
        if msuConfigInfoResponse.ProcessDataOut() is not None:
            self.processDataOut = comm.ethercat.master.fbs.EthercatMemoryInfo.EthercatMemoryInfoT.InitFromObj(msuConfigInfoResponse.ProcessDataOut())
        self.wkcStateDiagOffsIn = msuConfigInfoResponse.WkcStateDiagOffsIn()
        self.wkcStateDiagOffsOut = msuConfigInfoResponse.WkcStateDiagOffsOut()
        self.wkcValidOffsetIn = msuConfigInfoResponse.WkcValidOffsetIn()
        self.wkcValidOffsetOut = msuConfigInfoResponse.WkcValidOffsetOut()

    # MsuConfigInfoResponseT
    def Pack(self, builder):
        if self.msuName is not None:
            msuName = builder.CreateString(self.msuName)
        MsuConfigInfoResponseStart(builder)
        MsuConfigInfoResponseAddId(builder, self.id)
        if self.msuName is not None:
            MsuConfigInfoResponseAddMsuName(builder, msuName)
        if self.processDataIn is not None:
            processDataIn = self.processDataIn.Pack(builder)
            MsuConfigInfoResponseAddProcessDataIn(builder, processDataIn)
        if self.processDataOut is not None:
            processDataOut = self.processDataOut.Pack(builder)
            MsuConfigInfoResponseAddProcessDataOut(builder, processDataOut)
        MsuConfigInfoResponseAddWkcStateDiagOffsIn(builder, self.wkcStateDiagOffsIn)
        MsuConfigInfoResponseAddWkcStateDiagOffsOut(builder, self.wkcStateDiagOffsOut)
        MsuConfigInfoResponseAddWkcValidOffsetIn(builder, self.wkcValidOffsetIn)
        MsuConfigInfoResponseAddWkcValidOffsetOut(builder, self.wkcValidOffsetOut)
        msuConfigInfoResponse = MsuConfigInfoResponseEnd(builder)
        return msuConfigInfoResponse
