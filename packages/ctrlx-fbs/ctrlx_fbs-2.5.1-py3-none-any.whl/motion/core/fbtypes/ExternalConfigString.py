# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Table for just one single string (can be used for strings and enums)
class ExternalConfigString(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExternalConfigString()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExternalConfigString(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExternalConfigString
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # the value
    # ExternalConfigString
    def StringVal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ExternalConfigStringStart(builder): builder.StartObject(1)
def Start(builder):
    return ExternalConfigStringStart(builder)
def ExternalConfigStringAddStringVal(builder, stringVal): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stringVal), 0)
def AddStringVal(builder, stringVal):
    return ExternalConfigStringAddStringVal(builder, stringVal)
def ExternalConfigStringEnd(builder): return builder.EndObject()
def End(builder):
    return ExternalConfigStringEnd(builder)

class ExternalConfigStringT(object):

    # ExternalConfigStringT
    def __init__(self):
        self.stringVal = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        externalConfigString = ExternalConfigString()
        externalConfigString.Init(buf, pos)
        return cls.InitFromObj(externalConfigString)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, externalConfigString):
        x = ExternalConfigStringT()
        x._UnPack(externalConfigString)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.stringVal == other.stringVal

    # ExternalConfigStringT
    def _UnPack(self, externalConfigString):
        if externalConfigString is None:
            return
        self.stringVal = externalConfigString.StringVal()

    # ExternalConfigStringT
    def Pack(self, builder):
        if self.stringVal is not None:
            stringVal = builder.CreateString(self.stringVal)
        ExternalConfigStringStart(builder)
        if self.stringVal is not None:
            ExternalConfigStringAddStringVal(builder, stringVal)
        externalConfigString = ExternalConfigStringEnd(builder)
        return externalConfigString
