/// Retrieves the value of an environment variable, optionally sourcing it from a file if not already set.
pub fn env_var_load(var: str, file: str = ".env") -> str

/// Loads the env file in the environment, using `xargs`.
pub fn env_file_load(file: str = ".env") -> void

/// Checks if a variable inside the shell session exists.
pub fn env_var_test(name: str) -> bool

/// Sets a constant inside the shell session.
pub fn env_const_set(name: str, val: Text) -> void

/// Gets a constant inside the shell session.
pub fn env_const_get(name: str) -> str?

/// Sets a constant inside the shell session.
pub fn env_var_set(name: str, val: str) -> void

/// Gets a constant inside the shell session.
pub fn env_var_get(name: str) -> str?

/// Removes a variable inside the shell session.
pub fn env_var_unset(name: str) -> void

/// Checks if a command exists.
pub fn is_command(command: str) -> bool

/// Creates a prompt and returns the value.
pub fn input_prompt(prompt: str) -> str

/// Creates a prompt, hides any user input and returns the value.
pub fn input_hidden(prompt: str) -> str

/// Creates a confirm prompt (Yes/No), and returns true if the choice is Yes.
///
/// "No" is the default choice, set default_yes to true for "Yes" as default choice.
pub fn input_confirm(prompt: str, default_yes: bool = false) -> bool

/// Checks if the command has failed.
pub fn has_failed(command: str) -> bool

/// Checks if the script is running with a user with root permission.
pub fn is_root() -> bool

/// `printf` the text following the arguments.
pub fn printf(format: str, args: str[] = []) -> void

/// Escapes the text to be used with `printf`.
pub fn escaped(text: str) -> str

/// Prepares a text with formatting options for `printf`.
pub fn styled(message: str, style: num, fg: num, bg: num) -> str

/// Returns a text as bold.
pub fn bold(message: str) -> str

/// Returns a text as italic.
pub fn italic(message: str) -> str

/// Returns a text as underlined.
pub fn underlined(message: str) -> str

/// Prints a text with a specified color.
pub fn echo_colored(message: str, color: num) -> void

/// Prints a text as a info message.
pub fn echo_info(message: str) -> void

/// Prints a text as a success message.
pub fn echo_success(message: str) -> void

/// Prints a text as a warning message.
pub fn echo_warning(message: str) -> void

/// Prints a text as a error and exits if the status code is greater than 0.
pub fn echo_error(message: str, exit_code: num = 1) -> void