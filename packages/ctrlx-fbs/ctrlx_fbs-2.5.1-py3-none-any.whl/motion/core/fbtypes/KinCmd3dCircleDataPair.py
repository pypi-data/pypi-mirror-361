# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# One pair with value and meaning for the internal additional circle data (used for commanding)
class KinCmd3dCircleDataPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmd3dCircleDataPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmd3dCircleDataPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmd3dCircleDataPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # one value of a circle data
    # KinCmd3dCircleDataPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # related meaning of the value
    # possible meanings are: "IP_X", "IP_Y", "IP_Z"
    # KinCmd3dCircleDataPair
    def ExtMeaning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.Ext3dCircleMeaning import Ext3dCircleMeaning
            obj = Ext3dCircleMeaning()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCmd3dCircleDataPairStart(builder): builder.StartObject(2)
def Start(builder):
    return KinCmd3dCircleDataPairStart(builder)
def KinCmd3dCircleDataPairAddValue(builder, value): builder.PrependFloat64Slot(0, value, 0.0)
def AddValue(builder, value):
    return KinCmd3dCircleDataPairAddValue(builder, value)
def KinCmd3dCircleDataPairAddExtMeaning(builder, extMeaning): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(extMeaning), 0)
def AddExtMeaning(builder, extMeaning):
    return KinCmd3dCircleDataPairAddExtMeaning(builder, extMeaning)
def KinCmd3dCircleDataPairEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmd3dCircleDataPairEnd(builder)
import motion.core.fbtypes.Ext3dCircleMeaning
try:
    from typing import Optional
except:
    pass

class KinCmd3dCircleDataPairT(object):

    # KinCmd3dCircleDataPairT
    def __init__(self):
        self.value = 0.0  # type: float
        self.extMeaning = None  # type: Optional[motion.core.fbtypes.Ext3dCircleMeaning.Ext3dCircleMeaningT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmd3dCircleDataPair = KinCmd3dCircleDataPair()
        kinCmd3dCircleDataPair.Init(buf, pos)
        return cls.InitFromObj(kinCmd3dCircleDataPair)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmd3dCircleDataPair):
        x = KinCmd3dCircleDataPairT()
        x._UnPack(kinCmd3dCircleDataPair)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value and \
            self.extMeaning == other.extMeaning

    # KinCmd3dCircleDataPairT
    def _UnPack(self, kinCmd3dCircleDataPair):
        if kinCmd3dCircleDataPair is None:
            return
        self.value = kinCmd3dCircleDataPair.Value()
        if kinCmd3dCircleDataPair.ExtMeaning() is not None:
            self.extMeaning = motion.core.fbtypes.Ext3dCircleMeaning.Ext3dCircleMeaningT.InitFromObj(kinCmd3dCircleDataPair.ExtMeaning())

    # KinCmd3dCircleDataPairT
    def Pack(self, builder):
        if self.extMeaning is not None:
            extMeaning = self.extMeaning.Pack(builder)
        KinCmd3dCircleDataPairStart(builder)
        KinCmd3dCircleDataPairAddValue(builder, self.value)
        if self.extMeaning is not None:
            KinCmd3dCircleDataPairAddExtMeaning(builder, extMeaning)
        kinCmd3dCircleDataPair = KinCmd3dCircleDataPairEnd(builder)
        return kinCmd3dCircleDataPair
