# coding: utf-8

"""
    Institution Identifiers

    The Insitution Identifiers API provides a mapping between identifiers used in various University databases. The current known database namespaces are:  * `insts.lookup.cam.ac.uk` - [Lookup](https://www.lookup.cam.ac.uk/) instids. * `institution.v1.human-resources.university.identifiers.cam.ac.uk` -   identifiers used in the Human Resources (HR) database. * `institution.v1.student.university.identifiers.cam.ac.uk` - identifiers used   in the Student Information System (SIS) database.  The API provides a single endpoint which can be used to retrieve the current reports as a JSON document. For example, on a machine with [curl](https://curl.se/) installed:  ``` $ curl -o mapping.json https://api.apps.cam.ac.uk/institutions/mapping/v1 ```  The API is useful if you need to reconcile records drawn from multiple databases and determine which institutions are equivalent between them.

    The version of the OpenAPI document: 1.0.0
    Contact: devops@uis.cam.ac.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class MappingDatum(BaseModel):
    """
    A list of alternate identifiers for a Lookup instid.
    """ # noqa: E501
    identifiers: List[StrictStr] = Field(description="List of identifiers of this institution in various databases. Each identifier is of the form `{identifier}@{namespace}`.")
    instid: StrictStr = Field(description="Lookup instid for this institution.")
    __properties: ClassVar[List[str]] = ["identifiers", "instid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MappingDatum from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MappingDatum from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "identifiers": obj.get("identifiers"),
            "instid": obj.get("instid")
        })
        return _obj


