# automatically generated by the FlatBuffers compiler, do not modify

# namespace: automation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StatsSSEDetail(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StatsSSEDetail()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStatsSSEDetail(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StatsSSEDetail
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StatsSSEDetail
    def Sessions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from web.automation.StatsSSESession import StatsSSESession
            obj = StatsSSESession()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatsSSEDetail
    def SessionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatsSSEDetail
    def SessionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StatsSSEDetail
    def Subscriptions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from web.automation.StatsSSESubscriptions import StatsSSESubscriptions
            obj = StatsSSESubscriptions()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StatsSSEDetail
    def SubscriptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatsSSEDetail
    def SubscriptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def StatsSSEDetailStart(builder): builder.StartObject(2)
def Start(builder):
    return StatsSSEDetailStart(builder)
def StatsSSEDetailAddSessions(builder, sessions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sessions), 0)
def AddSessions(builder, sessions):
    return StatsSSEDetailAddSessions(builder, sessions)
def StatsSSEDetailStartSessionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSessionsVector(builder, numElems):
    return StatsSSEDetailStartSessionsVector(builder, numElems)
def StatsSSEDetailAddSubscriptions(builder, subscriptions): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(subscriptions), 0)
def AddSubscriptions(builder, subscriptions):
    return StatsSSEDetailAddSubscriptions(builder, subscriptions)
def StatsSSEDetailStartSubscriptionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSubscriptionsVector(builder, numElems):
    return StatsSSEDetailStartSubscriptionsVector(builder, numElems)
def StatsSSEDetailEnd(builder): return builder.EndObject()
def End(builder):
    return StatsSSEDetailEnd(builder)
import web.automation.StatsSSESession
import web.automation.StatsSSESubscriptions
try:
    from typing import List
except:
    pass

class StatsSSEDetailT(object):

    # StatsSSEDetailT
    def __init__(self):
        self.sessions = None  # type: List[web.automation.StatsSSESession.StatsSSESessionT]
        self.subscriptions = None  # type: List[web.automation.StatsSSESubscriptions.StatsSSESubscriptionsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        statsSsedetail = StatsSSEDetail()
        statsSsedetail.Init(buf, pos)
        return cls.InitFromObj(statsSsedetail)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, statsSsedetail):
        x = StatsSSEDetailT()
        x._UnPack(statsSsedetail)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.sessions == other.sessions and \
            self.subscriptions == other.subscriptions

    # StatsSSEDetailT
    def _UnPack(self, statsSsedetail):
        if statsSsedetail is None:
            return
        if not statsSsedetail.SessionsIsNone():
            self.sessions = []
            for i in range(statsSsedetail.SessionsLength()):
                if statsSsedetail.Sessions(i) is None:
                    self.sessions.append(None)
                else:
                    statsSSESession_ = web.automation.StatsSSESession.StatsSSESessionT.InitFromObj(statsSsedetail.Sessions(i))
                    self.sessions.append(statsSSESession_)
        if not statsSsedetail.SubscriptionsIsNone():
            self.subscriptions = []
            for i in range(statsSsedetail.SubscriptionsLength()):
                if statsSsedetail.Subscriptions(i) is None:
                    self.subscriptions.append(None)
                else:
                    statsSSESubscriptions_ = web.automation.StatsSSESubscriptions.StatsSSESubscriptionsT.InitFromObj(statsSsedetail.Subscriptions(i))
                    self.subscriptions.append(statsSSESubscriptions_)

    # StatsSSEDetailT
    def Pack(self, builder):
        if self.sessions is not None:
            sessionslist = []
            for i in range(len(self.sessions)):
                sessionslist.append(self.sessions[i].Pack(builder))
            StatsSSEDetailStartSessionsVector(builder, len(self.sessions))
            for i in reversed(range(len(self.sessions))):
                builder.PrependUOffsetTRelative(sessionslist[i])
            sessions = builder.EndVector()
        if self.subscriptions is not None:
            subscriptionslist = []
            for i in range(len(self.subscriptions)):
                subscriptionslist.append(self.subscriptions[i].Pack(builder))
            StatsSSEDetailStartSubscriptionsVector(builder, len(self.subscriptions))
            for i in reversed(range(len(self.subscriptions))):
                builder.PrependUOffsetTRelative(subscriptionslist[i])
            subscriptions = builder.EndVector()
        StatsSSEDetailStart(builder)
        if self.sessions is not None:
            StatsSSEDetailAddSessions(builder, sessions)
        if self.subscriptions is not None:
            StatsSSEDetailAddSubscriptions(builder, subscriptions)
        statsSsedetail = StatsSSEDetailEnd(builder)
        return statsSsedetail
