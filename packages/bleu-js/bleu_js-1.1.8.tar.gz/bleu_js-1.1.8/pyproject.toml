[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bleu-js"
version = "1.1.8"
description = "Advanced AI and Quantum Computing Framework"
authors = [
    {name = "Bleu.js Team", email = "team@bleu.js"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Quantum Computing",
]

dependencies = [
    # Core AI/ML - Fixed versions for compatibility
    "numpy>=1.24.3,<2.0.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.2.2",
    
    # Web Framework - Pinned for stability
    "fastapi==0.109.2",
    "uvicorn==0.27.1",
    "pydantic[email]==2.6.1",

    # Security - Fixed versions
    "urllib3>=2.5.0",
    "requests>=2.32.4",
    "cryptography>=42.0.5",

    # Database - Pinned versions
    "sqlalchemy==2.0.23",
    "alembic==1.13.1",
    "psycopg2-binary==2.9.9",

    # AWS
    "boto3>=1.24.0",
    "aws-lambda-powertools>=2.30.0",

    # Utilities
    "python-dotenv>=0.20.0",
    "httpx>=0.27.0",
    "aiohttp>=3.9.3",
]

[project.optional-dependencies]
# Core ML features
ml = [
    "tensorflow>=2.16.2",
    "torch>=2.2.2",
    "transformers>=4.37.0",
]

# Quantum computing (separate to avoid conflicts)
quantum = [
    "qiskit>=0.44.0,<1.0.0",
    "cirq>=1.2.0,<2.0.0",
    "pennylane>=0.32.0,<1.0.0",
    "qiskit-aer>=0.13.0",
    "optuna>=3.2.0",
]

# Development tools
dev = [
    "pytest>=7.3.1",
    "pytest-cov>=4.1.0",
    "pytest-asyncio==0.21.1",
    "black>=23.3.0",
    "isort>=5.10.1",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "bandit>=1.7.5",
]

# Monitoring and observability
monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.22.0",
    "opentelemetry-sdk>=1.22.0",
    "structlog>=24.1.0",
]

# All features
all = [
    "bleu-js[ml,quantum,dev,monitoring]",
]

[project.scripts]
bleu-js = "src.bleujs.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
