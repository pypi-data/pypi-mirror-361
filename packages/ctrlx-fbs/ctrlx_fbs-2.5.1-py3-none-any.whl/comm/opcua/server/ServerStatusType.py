# automatically generated by the FlatBuffers compiler, do not modify

# namespace: server

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ServerStatusType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ServerStatusType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsServerStatusType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ServerStatusType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Build info of the OPC UA Server
    # ServerStatusType
    def BuildInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.server.BuildInfoType import BuildInfoType
            obj = BuildInfoType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # The current time of the OPC UA Server
    # ServerStatusType
    def CurrentTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # The time until server shutdown if an OPC UA Server shutdown was requested
    # Otherwise, the value is 0
    # ServerStatusType
    def SecondsTillShutdown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # The reason for the server shutdown if an OPC UA Server shutdown was requested
    # Otherwise, an empty string is displayed
    # ServerStatusType
    def ShutdownReason(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The starting point in time of the OPC UA Server
    # ServerStatusType
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # The current state of the OPC UA Server
    # ServerStatusType
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ServerStatusTypeStart(builder): builder.StartObject(6)
def Start(builder):
    return ServerStatusTypeStart(builder)
def ServerStatusTypeAddBuildInfo(builder, buildInfo): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buildInfo), 0)
def AddBuildInfo(builder, buildInfo):
    return ServerStatusTypeAddBuildInfo(builder, buildInfo)
def ServerStatusTypeAddCurrentTime(builder, currentTime): builder.PrependUint32Slot(1, currentTime, 0)
def AddCurrentTime(builder, currentTime):
    return ServerStatusTypeAddCurrentTime(builder, currentTime)
def ServerStatusTypeAddSecondsTillShutdown(builder, secondsTillShutdown): builder.PrependUint32Slot(2, secondsTillShutdown, 0)
def AddSecondsTillShutdown(builder, secondsTillShutdown):
    return ServerStatusTypeAddSecondsTillShutdown(builder, secondsTillShutdown)
def ServerStatusTypeAddShutdownReason(builder, shutdownReason): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(shutdownReason), 0)
def AddShutdownReason(builder, shutdownReason):
    return ServerStatusTypeAddShutdownReason(builder, shutdownReason)
def ServerStatusTypeAddStartTime(builder, startTime): builder.PrependUint32Slot(4, startTime, 0)
def AddStartTime(builder, startTime):
    return ServerStatusTypeAddStartTime(builder, startTime)
def ServerStatusTypeAddState(builder, state): builder.PrependInt32Slot(5, state, 0)
def AddState(builder, state):
    return ServerStatusTypeAddState(builder, state)
def ServerStatusTypeEnd(builder): return builder.EndObject()
def End(builder):
    return ServerStatusTypeEnd(builder)
import comm.opcua.server.BuildInfoType
try:
    from typing import Optional
except:
    pass

class ServerStatusTypeT(object):

    # ServerStatusTypeT
    def __init__(self):
        self.buildInfo = None  # type: Optional[comm.opcua.server.BuildInfoType.BuildInfoTypeT]
        self.currentTime = 0  # type: int
        self.secondsTillShutdown = 0  # type: int
        self.shutdownReason = None  # type: str
        self.startTime = 0  # type: int
        self.state = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        serverStatusType = ServerStatusType()
        serverStatusType.Init(buf, pos)
        return cls.InitFromObj(serverStatusType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, serverStatusType):
        x = ServerStatusTypeT()
        x._UnPack(serverStatusType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.buildInfo == other.buildInfo and \
            self.currentTime == other.currentTime and \
            self.secondsTillShutdown == other.secondsTillShutdown and \
            self.shutdownReason == other.shutdownReason and \
            self.startTime == other.startTime and \
            self.state == other.state

    # ServerStatusTypeT
    def _UnPack(self, serverStatusType):
        if serverStatusType is None:
            return
        if serverStatusType.BuildInfo() is not None:
            self.buildInfo = comm.opcua.server.BuildInfoType.BuildInfoTypeT.InitFromObj(serverStatusType.BuildInfo())
        self.currentTime = serverStatusType.CurrentTime()
        self.secondsTillShutdown = serverStatusType.SecondsTillShutdown()
        self.shutdownReason = serverStatusType.ShutdownReason()
        self.startTime = serverStatusType.StartTime()
        self.state = serverStatusType.State()

    # ServerStatusTypeT
    def Pack(self, builder):
        if self.buildInfo is not None:
            buildInfo = self.buildInfo.Pack(builder)
        if self.shutdownReason is not None:
            shutdownReason = builder.CreateString(self.shutdownReason)
        ServerStatusTypeStart(builder)
        if self.buildInfo is not None:
            ServerStatusTypeAddBuildInfo(builder, buildInfo)
        ServerStatusTypeAddCurrentTime(builder, self.currentTime)
        ServerStatusTypeAddSecondsTillShutdown(builder, self.secondsTillShutdown)
        if self.shutdownReason is not None:
            ServerStatusTypeAddShutdownReason(builder, shutdownReason)
        ServerStatusTypeAddStartTime(builder, self.startTime)
        ServerStatusTypeAddState(builder, self.state)
        serverStatusType = ServerStatusTypeEnd(builder)
        return serverStatusType
