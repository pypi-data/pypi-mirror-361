# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of single probe data
class AxsCfgProbeSignalData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgProbeSignalData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgProbeSignalData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgProbeSignalData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # encoder1, encoder2, fine time, ipo-pos, act-pos, motion-internal-data
    # AxsCfgProbeSignalData
    def Select(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # single shot or continuous running
    # AxsCfgProbeSignalData
    def ShotType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 2

    # null, axis_name, IO
    # AxsCfgProbeSignalData
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # source probe index or url of IO
    # AxsCfgProbeSignalData
    def SourceInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # information for motion-internal-data signal, eg: url
    # AxsCfgProbeSignalData
    def SelectInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgProbeSignalDataStart(builder): builder.StartObject(5)
def Start(builder):
    return AxsCfgProbeSignalDataStart(builder)
def AxsCfgProbeSignalDataAddSelect(builder, select): builder.PrependInt8Slot(0, select, 1)
def AddSelect(builder, select):
    return AxsCfgProbeSignalDataAddSelect(builder, select)
def AxsCfgProbeSignalDataAddShotType(builder, shotType): builder.PrependInt8Slot(1, shotType, 2)
def AddShotType(builder, shotType):
    return AxsCfgProbeSignalDataAddShotType(builder, shotType)
def AxsCfgProbeSignalDataAddSource(builder, source): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)
def AddSource(builder, source):
    return AxsCfgProbeSignalDataAddSource(builder, source)
def AxsCfgProbeSignalDataAddSourceInfo(builder, sourceInfo): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sourceInfo), 0)
def AddSourceInfo(builder, sourceInfo):
    return AxsCfgProbeSignalDataAddSourceInfo(builder, sourceInfo)
def AxsCfgProbeSignalDataAddSelectInfo(builder, selectInfo): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(selectInfo), 0)
def AddSelectInfo(builder, selectInfo):
    return AxsCfgProbeSignalDataAddSelectInfo(builder, selectInfo)
def AxsCfgProbeSignalDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgProbeSignalDataEnd(builder)

class AxsCfgProbeSignalDataT(object):

    # AxsCfgProbeSignalDataT
    def __init__(self):
        self.select = 1  # type: int
        self.shotType = 2  # type: int
        self.source = None  # type: str
        self.sourceInfo = None  # type: str
        self.selectInfo = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgProbeSignalData = AxsCfgProbeSignalData()
        axsCfgProbeSignalData.Init(buf, pos)
        return cls.InitFromObj(axsCfgProbeSignalData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgProbeSignalData):
        x = AxsCfgProbeSignalDataT()
        x._UnPack(axsCfgProbeSignalData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.select == other.select and \
            self.shotType == other.shotType and \
            self.source == other.source and \
            self.sourceInfo == other.sourceInfo and \
            self.selectInfo == other.selectInfo

    # AxsCfgProbeSignalDataT
    def _UnPack(self, axsCfgProbeSignalData):
        if axsCfgProbeSignalData is None:
            return
        self.select = axsCfgProbeSignalData.Select()
        self.shotType = axsCfgProbeSignalData.ShotType()
        self.source = axsCfgProbeSignalData.Source()
        self.sourceInfo = axsCfgProbeSignalData.SourceInfo()
        self.selectInfo = axsCfgProbeSignalData.SelectInfo()

    # AxsCfgProbeSignalDataT
    def Pack(self, builder):
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.sourceInfo is not None:
            sourceInfo = builder.CreateString(self.sourceInfo)
        if self.selectInfo is not None:
            selectInfo = builder.CreateString(self.selectInfo)
        AxsCfgProbeSignalDataStart(builder)
        AxsCfgProbeSignalDataAddSelect(builder, self.select)
        AxsCfgProbeSignalDataAddShotType(builder, self.shotType)
        if self.source is not None:
            AxsCfgProbeSignalDataAddSource(builder, source)
        if self.sourceInfo is not None:
            AxsCfgProbeSignalDataAddSourceInfo(builder, sourceInfo)
        if self.selectInfo is not None:
            AxsCfgProbeSignalDataAddSelectInfo(builder, selectInfo)
        axsCfgProbeSignalData = AxsCfgProbeSignalDataEnd(builder)
        return axsCfgProbeSignalData
