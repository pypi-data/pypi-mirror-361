# automatically generated by the FlatBuffers compiler, do not modify

# namespace: common

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ObjectPoolDiagType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectPoolDiagType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObjectPoolDiagType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ObjectPoolDiagType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObjectPoolDiagType
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ObjectPoolDiagType
    def UsedObjects(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ObjectPoolDiagType
    def MaxUsedObjects(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ObjectPoolDiagType
    def NumObjects(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ObjectPoolDiagTypeStart(builder): builder.StartObject(4)
def Start(builder):
    return ObjectPoolDiagTypeStart(builder)
def ObjectPoolDiagTypeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ObjectPoolDiagTypeAddName(builder, name)
def ObjectPoolDiagTypeAddUsedObjects(builder, usedObjects): builder.PrependUint32Slot(1, usedObjects, 0)
def AddUsedObjects(builder, usedObjects):
    return ObjectPoolDiagTypeAddUsedObjects(builder, usedObjects)
def ObjectPoolDiagTypeAddMaxUsedObjects(builder, maxUsedObjects): builder.PrependUint32Slot(2, maxUsedObjects, 0)
def AddMaxUsedObjects(builder, maxUsedObjects):
    return ObjectPoolDiagTypeAddMaxUsedObjects(builder, maxUsedObjects)
def ObjectPoolDiagTypeAddNumObjects(builder, numObjects): builder.PrependUint32Slot(3, numObjects, 0)
def AddNumObjects(builder, numObjects):
    return ObjectPoolDiagTypeAddNumObjects(builder, numObjects)
def ObjectPoolDiagTypeEnd(builder): return builder.EndObject()
def End(builder):
    return ObjectPoolDiagTypeEnd(builder)

class ObjectPoolDiagTypeT(object):

    # ObjectPoolDiagTypeT
    def __init__(self):
        self.name = None  # type: str
        self.usedObjects = 0  # type: int
        self.maxUsedObjects = 0  # type: int
        self.numObjects = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        objectPoolDiagType = ObjectPoolDiagType()
        objectPoolDiagType.Init(buf, pos)
        return cls.InitFromObj(objectPoolDiagType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, objectPoolDiagType):
        x = ObjectPoolDiagTypeT()
        x._UnPack(objectPoolDiagType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.usedObjects == other.usedObjects and \
            self.maxUsedObjects == other.maxUsedObjects and \
            self.numObjects == other.numObjects

    # ObjectPoolDiagTypeT
    def _UnPack(self, objectPoolDiagType):
        if objectPoolDiagType is None:
            return
        self.name = objectPoolDiagType.Name()
        self.usedObjects = objectPoolDiagType.UsedObjects()
        self.maxUsedObjects = objectPoolDiagType.MaxUsedObjects()
        self.numObjects = objectPoolDiagType.NumObjects()

    # ObjectPoolDiagTypeT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        ObjectPoolDiagTypeStart(builder)
        if self.name is not None:
            ObjectPoolDiagTypeAddName(builder, name)
        ObjectPoolDiagTypeAddUsedObjects(builder, self.usedObjects)
        ObjectPoolDiagTypeAddMaxUsedObjects(builder, self.maxUsedObjects)
        ObjectPoolDiagTypeAddNumObjects(builder, self.numObjects)
        objectPoolDiagType = ObjectPoolDiagTypeEnd(builder)
        return objectPoolDiagType
