# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# a single parameter of a calculation step
class StateCalcStepSingleParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StateCalcStepSingleParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStateCalcStepSingleParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StateCalcStepSingleParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the parameter
    # StateCalcStepSingleParam
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # what the parameter of the calculation step does
    # StateCalcStepSingleParam
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # is this parameter mandatory?
    # StateCalcStepSingleParam
    def Mandatory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # type of the parameter
    # StateCalcStepSingleParam
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # unit value of the parameter
    # StateCalcStepSingleParam
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def StateCalcStepSingleParamStart(builder): builder.StartObject(5)
def Start(builder):
    return StateCalcStepSingleParamStart(builder)
def StateCalcStepSingleParamAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return StateCalcStepSingleParamAddName(builder, name)
def StateCalcStepSingleParamAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return StateCalcStepSingleParamAddDescription(builder, description)
def StateCalcStepSingleParamAddMandatory(builder, mandatory): builder.PrependBoolSlot(2, mandatory, 0)
def AddMandatory(builder, mandatory):
    return StateCalcStepSingleParamAddMandatory(builder, mandatory)
def StateCalcStepSingleParamAddType(builder, type): builder.PrependInt8Slot(3, type, 0)
def AddType(builder, type):
    return StateCalcStepSingleParamAddType(builder, type)
def StateCalcStepSingleParamAddUnit(builder, unit): builder.PrependInt8Slot(4, unit, 0)
def AddUnit(builder, unit):
    return StateCalcStepSingleParamAddUnit(builder, unit)
def StateCalcStepSingleParamEnd(builder): return builder.EndObject()
def End(builder):
    return StateCalcStepSingleParamEnd(builder)

class StateCalcStepSingleParamT(object):

    # StateCalcStepSingleParamT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str
        self.mandatory = False  # type: bool
        self.type = 0  # type: int
        self.unit = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateCalcStepSingleParam = StateCalcStepSingleParam()
        stateCalcStepSingleParam.Init(buf, pos)
        return cls.InitFromObj(stateCalcStepSingleParam)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateCalcStepSingleParam):
        x = StateCalcStepSingleParamT()
        x._UnPack(stateCalcStepSingleParam)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.description == other.description and \
            self.mandatory == other.mandatory and \
            self.type == other.type and \
            self.unit == other.unit

    # StateCalcStepSingleParamT
    def _UnPack(self, stateCalcStepSingleParam):
        if stateCalcStepSingleParam is None:
            return
        self.name = stateCalcStepSingleParam.Name()
        self.description = stateCalcStepSingleParam.Description()
        self.mandatory = stateCalcStepSingleParam.Mandatory()
        self.type = stateCalcStepSingleParam.Type()
        self.unit = stateCalcStepSingleParam.Unit()

    # StateCalcStepSingleParamT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        StateCalcStepSingleParamStart(builder)
        if self.name is not None:
            StateCalcStepSingleParamAddName(builder, name)
        if self.description is not None:
            StateCalcStepSingleParamAddDescription(builder, description)
        StateCalcStepSingleParamAddMandatory(builder, self.mandatory)
        StateCalcStepSingleParamAddType(builder, self.type)
        StateCalcStepSingleParamAddUnit(builder, self.unit)
        stateCalcStepSingleParam = StateCalcStepSingleParamEnd(builder)
        return stateCalcStepSingleParam
