# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis FlexProfileEx command
class AxsCmdFlexProfileExData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdFlexProfileExData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdFlexProfileExData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdFlexProfileExData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the master axis
    # AxsCmdFlexProfileExData
    def Master(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # sync source (Setpoint)
    # AxsCmdFlexProfileExData
    def SyncSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # dynamic sync direction (ShortestWay)
    # AxsCmdFlexProfileExData
    def DynSyncDirection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FlexProfile parameters (master offset, slave offset, ratio numerator, ratio denominator, fine adjust, profileEntry, setSelection)
    # AxsCmdFlexProfileExData
    def Parameters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsCmdFlexProfileParams import AxsCmdFlexProfileParams
            obj = AxsCmdFlexProfileParams()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FlexProfile data layer parameters
    # AxsCmdFlexProfileExData
    def DlParameters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsCmdFlexProfileDlParams import AxsCmdFlexProfileDlParams
            obj = AxsCmdFlexProfileDlParams()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # should this be a buffered command?
    # AxsCmdFlexProfileExData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AxsCmdFlexProfileExDataStart(builder): builder.StartObject(6)
def Start(builder):
    return AxsCmdFlexProfileExDataStart(builder)
def AxsCmdFlexProfileExDataAddMaster(builder, master): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(master), 0)
def AddMaster(builder, master):
    return AxsCmdFlexProfileExDataAddMaster(builder, master)
def AxsCmdFlexProfileExDataAddSyncSource(builder, syncSource): builder.PrependInt8Slot(1, syncSource, 0)
def AddSyncSource(builder, syncSource):
    return AxsCmdFlexProfileExDataAddSyncSource(builder, syncSource)
def AxsCmdFlexProfileExDataAddDynSyncDirection(builder, dynSyncDirection): builder.PrependInt8Slot(2, dynSyncDirection, 0)
def AddDynSyncDirection(builder, dynSyncDirection):
    return AxsCmdFlexProfileExDataAddDynSyncDirection(builder, dynSyncDirection)
def AxsCmdFlexProfileExDataAddParameters(builder, parameters): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)
def AddParameters(builder, parameters):
    return AxsCmdFlexProfileExDataAddParameters(builder, parameters)
def AxsCmdFlexProfileExDataAddDlParameters(builder, dlParameters): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dlParameters), 0)
def AddDlParameters(builder, dlParameters):
    return AxsCmdFlexProfileExDataAddDlParameters(builder, dlParameters)
def AxsCmdFlexProfileExDataAddBuffered(builder, buffered): builder.PrependBoolSlot(5, buffered, 0)
def AddBuffered(builder, buffered):
    return AxsCmdFlexProfileExDataAddBuffered(builder, buffered)
def AxsCmdFlexProfileExDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdFlexProfileExDataEnd(builder)
import motion.sync.fbtypes.AxsCmdFlexProfileDlParams
import motion.sync.fbtypes.AxsCmdFlexProfileParams
try:
    from typing import Optional
except:
    pass

class AxsCmdFlexProfileExDataT(object):

    # AxsCmdFlexProfileExDataT
    def __init__(self):
        self.master = None  # type: str
        self.syncSource = 0  # type: int
        self.dynSyncDirection = 0  # type: int
        self.parameters = None  # type: Optional[motion.sync.fbtypes.AxsCmdFlexProfileParams.AxsCmdFlexProfileParamsT]
        self.dlParameters = None  # type: Optional[motion.sync.fbtypes.AxsCmdFlexProfileDlParams.AxsCmdFlexProfileDlParamsT]
        self.buffered = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdFlexProfileExData = AxsCmdFlexProfileExData()
        axsCmdFlexProfileExData.Init(buf, pos)
        return cls.InitFromObj(axsCmdFlexProfileExData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdFlexProfileExData):
        x = AxsCmdFlexProfileExDataT()
        x._UnPack(axsCmdFlexProfileExData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.master == other.master and \
            self.syncSource == other.syncSource and \
            self.dynSyncDirection == other.dynSyncDirection and \
            self.parameters == other.parameters and \
            self.dlParameters == other.dlParameters and \
            self.buffered == other.buffered

    # AxsCmdFlexProfileExDataT
    def _UnPack(self, axsCmdFlexProfileExData):
        if axsCmdFlexProfileExData is None:
            return
        self.master = axsCmdFlexProfileExData.Master()
        self.syncSource = axsCmdFlexProfileExData.SyncSource()
        self.dynSyncDirection = axsCmdFlexProfileExData.DynSyncDirection()
        if axsCmdFlexProfileExData.Parameters() is not None:
            self.parameters = motion.sync.fbtypes.AxsCmdFlexProfileParams.AxsCmdFlexProfileParamsT.InitFromObj(axsCmdFlexProfileExData.Parameters())
        if axsCmdFlexProfileExData.DlParameters() is not None:
            self.dlParameters = motion.sync.fbtypes.AxsCmdFlexProfileDlParams.AxsCmdFlexProfileDlParamsT.InitFromObj(axsCmdFlexProfileExData.DlParameters())
        self.buffered = axsCmdFlexProfileExData.Buffered()

    # AxsCmdFlexProfileExDataT
    def Pack(self, builder):
        if self.master is not None:
            master = builder.CreateString(self.master)
        if self.parameters is not None:
            parameters = self.parameters.Pack(builder)
        if self.dlParameters is not None:
            dlParameters = self.dlParameters.Pack(builder)
        AxsCmdFlexProfileExDataStart(builder)
        if self.master is not None:
            AxsCmdFlexProfileExDataAddMaster(builder, master)
        AxsCmdFlexProfileExDataAddSyncSource(builder, self.syncSource)
        AxsCmdFlexProfileExDataAddDynSyncDirection(builder, self.dynSyncDirection)
        if self.parameters is not None:
            AxsCmdFlexProfileExDataAddParameters(builder, parameters)
        if self.dlParameters is not None:
            AxsCmdFlexProfileExDataAddDlParameters(builder, dlParameters)
        AxsCmdFlexProfileExDataAddBuffered(builder, self.buffered)
        axsCmdFlexProfileExData = AxsCmdFlexProfileExDataEnd(builder)
        return axsCmdFlexProfileExData
