# Schema for Volcengine Text-to-Image Generation API (Seedream 3.0)
from pydantic import BaseModel, Field
from typing import Optional, List, Literal

class VolcengineTextToImageInput(BaseModel):
    """Input schema for Volcengine text-to-image generation"""
    
    prompt: str = Field(
        ...,
        description="Text prompt for image generation",
        examples=["鱼眼镜头，一只猫咪的头部，画面呈现出猫咪的五官因为拍摄方式扭曲的效果。"]
    )
    
    model: str = Field(
        ...,
        description=(
            "Model ID or Endpoint ID to use for image generation. "
            "Currently only supports doubao-seedream-3-0-t2i-250415"
        ),
        examples=["doubao-seedream-3-0-t2i-250415"]
    )
    
    response_format: Literal["url", "b64_json"] = Field(
        default="url",
        description=(
            "Format of the generated image response. "
            "'url' returns downloadable JPEG image links, "
            "'b64_json' returns Base64 encoded JSON format"
        )
    )
    
    size: Literal["1024x1024", "864x1152", "1152x864", "1280x720", "720x1280", "832x1248", "1248x832", "1512x648"] = Field(
        default="1024x1024",
        description=(
            "Width and height of the generated image in pixels. "
            "Must be between [512x512, 2048x2048]. "
            "Recommended sizes: 1024x1024, 864x1152, 1152x864, "
            "1280x720, 720x1280, 832x1248, 1248x832, 1512x648"
        )
    )
    
    seed: Optional[int] = Field(
        default=-1,
        ge=-1,
        le=2147483647,
        description=(
            "Random seed for controlling generation randomness. "
            "Range: [-1, 2147483647]. If not provided or -1, "
            "algorithm generates a random seed automatically"
        )
    )
    
    guidance_scale: Optional[float] = Field(
        default=2.5,
        ge=1.0,
        le=10.0,
        description=(
            "Consistency between model output and prompt. "
            "Higher values mean stronger adherence to prompt but less freedom. "
            "Range: [1, 10]"
        )
    )
    
    watermark: Optional[bool] = Field(
        default=True,
        description=(
            "Whether to add watermark to generated image. "
            "true: adds 'AI生成' watermark in bottom right corner, "
            "false: no watermark"
        )
    )


class ImageData(BaseModel):
    """Image data in response"""
    url: Optional[str] = Field(
        default=None,
        description=(
            "Download URL for the generated image. "
            "Note: URL expires after 24 hours, please save promptly"
        )
    )
    
    b64_json: Optional[str] = Field(
        default=None,
        description="Base64 encoded image data in JSON format"
    )


class Usage(BaseModel):
    """Usage information"""
    generated_images: int = Field(
        ...,
        description="Number of images generated by the model"
    )


class ErrorInfo(BaseModel):
    """Error information"""
    code: str = Field(
        ...,
        description="Error code"
    )
    
    message: str = Field(
        ...,
        description="Error message"
    )


class VolcengineTextToImageResponse(BaseModel):
    """Response schema for Volcengine text-to-image generation"""
    
    model: str = Field(
        ...,
        description="Model ID used for this request (model name-version)"
    )
    
    created: int = Field(
        ...,
        description="Unix timestamp (seconds) when this request was created"
    )
    
    data: List[ImageData] = Field(
        ...,
        description=(
            "Generated image information including download URL or Base64 data. "
            "Contains 'url' field when response_format is 'url', "
            "or 'b64_json' field when response_format is 'b64_json'"
        )
    )
    
    usage: Usage = Field(
        ...,
        description="Usage statistics for this request"
    )
    
    error: Optional[ErrorInfo] = Field(
        default=None,
        description="Error information if request failed"
    )

