# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: license.proto
# Protobuf Python Version: 5.29.5
# Command: protoc -I. --python_out=. --mypy_out=. license.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\rlicense.proto\x12\x18keydive_license_protocol\"\xb5\x02\n\x15LicenseIdentification\x12\x12\n\nrequest_id\x18\x01 \x01(\x0c\x12\x12\n\nsession_id\x18\x02 \x01(\x0c\x12\x13\n\x0bpurchase_id\x18\x03 \x01(\x0c\x12\x33\n\x04type\x18\x04 \x01(\x0e\x32%.keydive_license_protocol.LicenseType\x12\x0f\n\x07version\x18\x05 \x01(\x05\x12\x1e\n\x16provider_session_token\x18\x06 \x01(\x0c\x12(\n original_rental_duration_seconds\x18\x07 \x01(\x03\x12*\n\"original_playback_duration_seconds\x18\x08 \x01(\x03\x12#\n\x1boriginal_start_time_seconds\x18\t \x01(\x03\"\xfd\r\n\x0eLicenseRequest\x12\x41\n\tclient_id\x18\x01 \x01(\x0b\x32..keydive_license_protocol.ClientIdentification\x12R\n\ncontent_id\x18\x02 \x01(\x0b\x32>.keydive_license_protocol.LicenseRequest.ContentIdentification\x12\x42\n\x04type\x18\x03 \x01(\x0e\x32\x34.keydive_license_protocol.LicenseRequest.RequestType\x12\x14\n\x0crequest_time\x18\x04 \x01(\x03\x12$\n\x1ckey_control_nonce_deprecated\x18\x05 \x01(\x0c\x12P\n\x10protocol_version\x18\x06 \x01(\x0e\x32).keydive_license_protocol.ProtocolVersion:\x0bVERSION_2_0\x12\x19\n\x11key_control_nonce\x18\x07 \x01(\r\x12T\n\x13\x65ncrypted_client_id\x18\x08 \x01(\x0b\x32\x37.keydive_license_protocol.EncryptedClientIdentification\x12\x16\n\x0e\x63lient_version\x18\t \x01(\t\x1a\xf4\x08\n\x15\x43ontentIdentification\x12m\n\x12widevine_pssh_data\x18\x01 \x01(\x0b\x32O.keydive_license_protocol.LicenseRequest.ContentIdentification.WidevinePsshDataH\x00\x12_\n\x0bwebm_key_id\x18\x02 \x01(\x0b\x32H.keydive_license_protocol.LicenseRequest.ContentIdentification.WebmKeyIdH\x00\x12j\n\x10\x65xisting_license\x18\x03 \x01(\x0b\x32N.keydive_license_protocol.LicenseRequest.ContentIdentification.ExistingLicenseH\x00\x12\\\n\tinit_data\x18\x04 \x01(\x0b\x32G.keydive_license_protocol.LicenseRequest.ContentIdentification.InitDataH\x00\x1av\n\x10WidevinePsshData\x12\x11\n\tpssh_data\x18\x01 \x03(\x0c\x12;\n\x0clicense_type\x18\x02 \x01(\x0e\x32%.keydive_license_protocol.LicenseType\x12\x12\n\nrequest_id\x18\x03 \x01(\x0c\x1al\n\tWebmKeyId\x12\x0e\n\x06header\x18\x01 \x01(\x0c\x12;\n\x0clicense_type\x18\x02 \x01(\x0e\x32%.keydive_license_protocol.LicenseType\x12\x12\n\nrequest_id\x18\x03 \x01(\x0c\x1a\xbb\x01\n\x0f\x45xistingLicense\x12\x43\n\nlicense_id\x18\x01 \x01(\x0b\x32/.keydive_license_protocol.LicenseIdentification\x12\x1d\n\x15seconds_since_started\x18\x02 \x01(\x03\x12!\n\x19seconds_since_last_played\x18\x03 \x01(\x03\x12!\n\x19session_usage_table_entry\x18\x04 \x01(\x0c\x1a\x86\x02\n\x08InitData\x12r\n\x0einit_data_type\x18\x01 \x01(\x0e\x32T.keydive_license_protocol.LicenseRequest.ContentIdentification.InitData.InitDataType:\x04\x43\x45NC\x12\x11\n\tinit_data\x18\x02 \x01(\x0c\x12;\n\x0clicense_type\x18\x03 \x01(\x0e\x32%.keydive_license_protocol.LicenseType\x12\x12\n\nrequest_id\x18\x04 \x01(\x0c\"\"\n\x0cInitDataType\x12\x08\n\x04\x43\x45NC\x10\x01\x12\x08\n\x04WEBM\x10\x02\x42\x14\n\x12\x63ontent_id_variant\x1aP\n\x0eSubSessionData\x12\x1a\n\x12sub_session_key_id\x18\x01 \x01(\t\x12\r\n\x05nonce\x18\x02 \x01(\r\x12\x13\n\x0btrack_label\x18\x03 \x01(\t\"0\n\x0bRequestType\x12\x07\n\x03NEW\x10\x01\x12\x0b\n\x07RENEWAL\x10\x02\x12\x0b\n\x07RELEASE\x10\x03\"\xed\x01\n\nMetricData\x12\x12\n\nstage_name\x18\x01 \x01(\t\x12\x43\n\x0bmetric_data\x18\x02 \x03(\x0b\x32..keydive_license_protocol.MetricData.TypeValue\x1a\\\n\tTypeValue\x12=\n\x04type\x18\x01 \x01(\x0e\x32/.keydive_license_protocol.MetricData.MetricType\x12\x10\n\x05value\x18\x02 \x01(\x03:\x01\x30\"(\n\nMetricType\x12\x0b\n\x07LATENCY\x10\x01\x12\r\n\tTIMESTAMP\x10\x02\"K\n\x0bVersionInfo\x12\x1b\n\x13license_sdk_version\x18\x01 \x01(\t\x12\x1f\n\x17license_service_version\x18\x02 \x01(\t\"\x8e\x06\n\rSignedMessage\x12\x41\n\x04type\x18\x01 \x01(\x0e\x32\x33.keydive_license_protocol.SignedMessage.MessageType\x12\x0b\n\x03msg\x18\x02 \x01(\x0c\x12\x11\n\tsignature\x18\x03 \x01(\x0c\x12\x13\n\x0bsession_key\x18\x04 \x01(\x0c\x12\x1a\n\x12remote_attestation\x18\x05 \x01(\x0c\x12\x39\n\x0bmetric_data\x18\x06 \x03(\x0b\x32$.keydive_license_protocol.MetricData\x12\x43\n\x14service_version_info\x18\x07 \x01(\x0b\x32%.keydive_license_protocol.VersionInfo\x12\x61\n\x10session_key_type\x18\x08 \x01(\x0e\x32\x36.keydive_license_protocol.SignedMessage.SessionKeyType:\x0fWRAPPED_AES_KEY\x12\x1e\n\x16oemcrypto_core_message\x18\t \x01(\x0c\x12\"\n\x13using_secondary_key\x18\x0b \x01(\x08:\x05\x66\x61lse\"\xec\x01\n\x0bMessageType\x12\x13\n\x0fLICENSE_REQUEST\x10\x01\x12\x0b\n\x07LICENSE\x10\x02\x12\x12\n\x0e\x45RROR_RESPONSE\x10\x03\x12\x1f\n\x1bSERVICE_CERTIFICATE_REQUEST\x10\x04\x12\x17\n\x13SERVICE_CERTIFICATE\x10\x05\x12\x0f\n\x0bSUB_LICENSE\x10\x06\x12\x17\n\x13\x43\x41S_LICENSE_REQUEST\x10\x07\x12\x0f\n\x0b\x43\x41S_LICENSE\x10\x08\x12\x1c\n\x18\x45XTERNAL_LICENSE_REQUEST\x10\t\x12\x14\n\x10\x45XTERNAL_LICENSE\x10\n\"S\n\x0eSessionKeyType\x12\r\n\tUNDEFINED\x10\x00\x12\x13\n\x0fWRAPPED_AES_KEY\x10\x01\x12\x1d\n\x19\x45PHERMERAL_ECC_PUBLIC_KEY\x10\x02\"\xf0\x03\n\x14ProvisioningResponse\x12\x16\n\x0e\x64\x65vice_rsa_key\x18\x01 \x01(\x0c\x12\x19\n\x11\x64\x65vice_rsa_key_iv\x18\x02 \x01(\x0c\x12\x1a\n\x12\x64\x65vice_certificate\x18\x03 \x01(\x0c\x12\r\n\x05nonce\x18\x04 \x01(\x0c\x12\x14\n\x0cwrapping_key\x18\x05 \x01(\x0c\x12L\n\nota_keybox\x18\x06 \x01(\x0b\x32\x38.keydive_license_protocol.ProvisioningResponse.OtaKeybox\x12Q\n\x06status\x18\x07 \x01(\x0e\x32\x41.keydive_license_protocol.ProvisioningResponse.ProvisioningStatus\x1a\x64\n\tOtaKeybox\x12 \n\x18\x64\x65vice_key_encryption_iv\x18\x01 \x01(\x0c\x12\x1c\n\x14\x65ncrypted_device_key\x18\x02 \x01(\x0c\x12\x17\n\x0f\x64\x65vice_ca_token\x18\x03 \x01(\x0c\"]\n\x12ProvisioningStatus\x12\x0c\n\x08NO_ERROR\x10\x00\x12\x1e\n\x1aREVOKED_DEVICE_CREDENTIALS\x10\x01\x12\x19\n\x15REVOKED_DEVICE_SERIES\x10\x02\"L\n\x19SignedProvisioningContext\x12\x1c\n\x14provisioning_context\x18\x01 \x01(\x0c\x12\x11\n\tsignature\x18\x02 \x01(\x0c\"\x8f\x06\n\x19SignedProvisioningMessage\x12\x0f\n\x07message\x18\x01 \x01(\x0c\x12\x11\n\tsignature\x18\x02 \x01(\x0c\x12p\n\x11provisioning_type\x18\x03 \x01(\x0e\x32\x44.keydive_license_protocol.SignedProvisioningMessage.ProvisioningType:\x0fPROVISIONING_20\x12X\n\x1bsigned_provisioning_context\x18\x04 \x01(\x0b\x32\x33.keydive_license_protocol.SignedProvisioningContext\x12\x1a\n\x12remote_attestation\x18\x05 \x01(\x0c\x12\x1e\n\x16oemcrypto_core_message\x18\x06 \x01(\x0c\x12\x44\n\x0ehash_algorithm\x18\x07 \x01(\x0e\x32,.keydive_license_protocol.HashAlgorithmProto\x12i\n\x10protocol_version\x18\x08 \x01(\x0e\x32O.keydive_license_protocol.SignedProvisioningMessage.ProvisioningProtocolVersion\"e\n\x1bProvisioningProtocolVersion\x12\x17\n\x13VERSION_UNSPECIFIED\x10\x00\x12\r\n\tVERSION_1\x10\x01\x12\x0f\n\x0bVERSION_1_1\x10\x02\x12\r\n\tVERSION_2\x10\x03\"\xad\x01\n\x10ProvisioningType\x12!\n\x1dPROVISIONING_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n\x1bSERVICE_CERTIFICATE_REQUEST\x10\x01\x12\x13\n\x0fPROVISIONING_20\x10\x02\x12\x13\n\x0fPROVISIONING_30\x10\x03\x12\x16\n\x12\x41RCPP_PROVISIONING\x10\x04\x12\x13\n\x0fINTEL_SIGMA_101\x10\x65\"\x81\x11\n\x14\x43lientIdentification\x12N\n\x04type\x18\x01 \x01(\x0e\x32\x38.keydive_license_protocol.ClientIdentification.TokenType:\x06KEYBOX\x12\r\n\x05token\x18\x02 \x01(\x0c\x12M\n\x0b\x63lient_info\x18\x03 \x03(\x0b\x32\x38.keydive_license_protocol.ClientIdentification.NameValue\x12\x1d\n\x15provider_client_token\x18\x04 \x01(\x0c\x12\x17\n\x0flicense_counter\x18\x05 \x01(\r\x12^\n\x13\x63lient_capabilities\x18\x06 \x01(\x0b\x32\x41.keydive_license_protocol.ClientIdentification.ClientCapabilities\x12\x10\n\x08vmp_data\x18\x07 \x01(\x0c\x12\\\n\x12\x64\x65vice_credentials\x18\x08 \x03(\x0b\x32@.keydive_license_protocol.ClientIdentification.ClientCredentials\x1a(\n\tNameValue\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t\x1a\x9f\x0b\n\x12\x43lientCapabilities\x12\x1b\n\x0c\x63lient_token\x18\x01 \x01(\x08:\x05\x66\x61lse\x12\x1c\n\rsession_token\x18\x02 \x01(\x08:\x05\x66\x61lse\x12+\n\x1cvideo_resolution_constraints\x18\x03 \x01(\x08:\x05\x66\x61lse\x12r\n\x10max_hdcp_version\x18\x04 \x01(\x0e\x32M.keydive_license_protocol.ClientIdentification.ClientCapabilities.HdcpVersion:\tHDCP_NONE\x12\x1e\n\x16oem_crypto_api_version\x18\x05 \x01(\r\x12(\n\x19\x61nti_rollback_usage_table\x18\x06 \x01(\x08:\x05\x66\x61lse\x12\x13\n\x0bsrm_version\x18\x07 \x01(\r\x12\x1d\n\x0e\x63\x61n_update_srm\x18\x08 \x01(\x08:\x05\x66\x61lse\x12|\n\x1esupported_certificate_key_type\x18\t \x03(\x0e\x32T.keydive_license_protocol.ClientIdentification.ClientCapabilities.CertificateKeyType\x12\x95\x01\n\x1a\x61nalog_output_capabilities\x18\n \x01(\x0e\x32Z.keydive_license_protocol.ClientIdentification.ClientCapabilities.AnalogOutputCapabilities:\x15\x41NALOG_OUTPUT_UNKNOWN\x12(\n\x19\x63\x61n_disable_analog_output\x18\x0b \x01(\x08:\x05\x66\x61lse\x12\x1f\n\x14resource_rating_tier\x18\x0c \x01(\r:\x01\x30\x12\x8f\x01\n\x14watermarking_support\x18\r \x01(\x0e\x32U.keydive_license_protocol.ClientIdentification.ClientCapabilities.WatermarkingSupport:\x1aWATERMARKING_NOT_SUPPORTED\x12)\n\x1ainitial_renewal_delay_base\x18\x0e \x01(\x08:\x05\x66\x61lse\"\x80\x01\n\x0bHdcpVersion\x12\r\n\tHDCP_NONE\x10\x00\x12\x0b\n\x07HDCP_V1\x10\x01\x12\x0b\n\x07HDCP_V2\x10\x02\x12\r\n\tHDCP_V2_1\x10\x03\x12\r\n\tHDCP_V2_2\x10\x04\x12\r\n\tHDCP_V2_3\x10\x05\x12\x1b\n\x16HDCP_NO_DIGITAL_OUTPUT\x10\xff\x01\"i\n\x12\x43\x65rtificateKeyType\x12\x0c\n\x08RSA_2048\x10\x00\x12\x0c\n\x08RSA_3072\x10\x01\x12\x11\n\rECC_SECP256R1\x10\x02\x12\x11\n\rECC_SECP384R1\x10\x03\x12\x11\n\rECC_SECP521R1\x10\x04\"\x8d\x01\n\x18\x41nalogOutputCapabilities\x12\x19\n\x15\x41NALOG_OUTPUT_UNKNOWN\x10\x00\x12\x16\n\x12\x41NALOG_OUTPUT_NONE\x10\x01\x12\x1b\n\x17\x41NALOG_OUTPUT_SUPPORTED\x10\x02\x12!\n\x1d\x41NALOG_OUTPUT_SUPPORTS_CGMS_A\x10\x03\"\x92\x01\n\x13WatermarkingSupport\x12 \n\x1cWATERMARKING_SUPPORT_UNKNOWN\x10\x00\x12\x1e\n\x1aWATERMARKING_NOT_SUPPORTED\x10\x01\x12\x1d\n\x19WATERMARKING_CONFIGURABLE\x10\x02\x12\x1a\n\x16WATERMARKING_ALWAYS_ON\x10\x03\x1ar\n\x11\x43lientCredentials\x12N\n\x04type\x18\x01 \x01(\x0e\x32\x38.keydive_license_protocol.ClientIdentification.TokenType:\x06KEYBOX\x12\r\n\x05token\x18\x02 \x01(\x0c\"s\n\tTokenType\x12\n\n\x06KEYBOX\x10\x00\x12\x1a\n\x16\x44RM_DEVICE_CERTIFICATE\x10\x01\x12\"\n\x1eREMOTE_ATTESTATION_CERTIFICATE\x10\x02\x12\x1a\n\x16OEM_DEVICE_CERTIFICATE\x10\x03\"\xbb\x01\n\x1d\x45ncryptedClientIdentification\x12\x13\n\x0bprovider_id\x18\x01 \x01(\t\x12)\n!service_certificate_serial_number\x18\x02 \x01(\x0c\x12\x1b\n\x13\x65ncrypted_client_id\x18\x03 \x01(\x0c\x12\x1e\n\x16\x65ncrypted_client_id_iv\x18\x04 \x01(\x0c\x12\x1d\n\x15\x65ncrypted_privacy_key\x18\x05 \x01(\x0c\"\xab\x07\n\x0e\x44rmCertificate\x12;\n\x04type\x18\x01 \x01(\x0e\x32-.keydive_license_protocol.DrmCertificate.Type\x12\x15\n\rserial_number\x18\x02 \x01(\x0c\x12\x1d\n\x15\x63reation_time_seconds\x18\x03 \x01(\r\x12\x1f\n\x17\x65xpiration_time_seconds\x18\x0c \x01(\r\x12\x12\n\npublic_key\x18\x04 \x01(\x0c\x12\x11\n\tsystem_id\x18\x05 \x01(\r\x12\"\n\x16test_device_deprecated\x18\x06 \x01(\x08\x42\x02\x18\x01\x12\x13\n\x0bprovider_id\x18\x07 \x01(\t\x12K\n\rservice_types\x18\x08 \x03(\x0e\x32\x34.keydive_license_protocol.DrmCertificate.ServiceType\x12J\n\talgorithm\x18\t \x01(\x0e\x32\x32.keydive_license_protocol.DrmCertificate.Algorithm:\x03RSA\x12\x0e\n\x06rot_id\x18\n \x01(\x0c\x12N\n\x0e\x65ncryption_key\x18\x0b \x01(\x0b\x32\x36.keydive_license_protocol.DrmCertificate.EncryptionKey\x1ao\n\rEncryptionKey\x12\x12\n\npublic_key\x18\x01 \x01(\x0c\x12J\n\talgorithm\x18\x02 \x01(\x0e\x32\x32.keydive_license_protocol.DrmCertificate.Algorithm:\x03RSA\"L\n\x04Type\x12\x08\n\x04ROOT\x10\x00\x12\x10\n\x0c\x44\x45VICE_MODEL\x10\x01\x12\n\n\x06\x44\x45VICE\x10\x02\x12\x0b\n\x07SERVICE\x10\x03\x12\x0f\n\x0bPROVISIONER\x10\x04\"\x86\x01\n\x0bServiceType\x12\x18\n\x14UNKNOWN_SERVICE_TYPE\x10\x00\x12\x16\n\x12LICENSE_SERVER_SDK\x10\x01\x12\x1c\n\x18LICENSE_SERVER_PROXY_SDK\x10\x02\x12\x14\n\x10PROVISIONING_SDK\x10\x03\x12\x11\n\rCAS_PROXY_SDK\x10\x04\"d\n\tAlgorithm\x12\x15\n\x11UNKNOWN_ALGORITHM\x10\x00\x12\x07\n\x03RSA\x10\x01\x12\x11\n\rECC_SECP256R1\x10\x02\x12\x11\n\rECC_SECP384R1\x10\x03\x12\x11\n\rECC_SECP521R1\x10\x04\"\xc8\x01\n\x14SignedDrmCertificate\x12\x17\n\x0f\x64rm_certificate\x18\x01 \x01(\x0c\x12\x11\n\tsignature\x18\x02 \x01(\x0c\x12>\n\x06signer\x18\x03 \x01(\x0b\x32..keydive_license_protocol.SignedDrmCertificate\x12\x44\n\x0ehash_algorithm\x18\x04 \x01(\x0e\x32,.keydive_license_protocol.HashAlgorithmProto*8\n\x0bLicenseType\x12\r\n\tSTREAMING\x10\x01\x12\x0b\n\x07OFFLINE\x10\x02\x12\r\n\tAUTOMATIC\x10\x03*D\n\x0fProtocolVersion\x12\x0f\n\x0bVERSION_2_0\x10\x14\x12\x0f\n\x0bVERSION_2_1\x10\x15\x12\x0f\n\x0bVERSION_2_2\x10\x16*\x86\x01\n\x12HashAlgorithmProto\x12\x1e\n\x1aHASH_ALGORITHM_UNSPECIFIED\x10\x00\x12\x18\n\x14HASH_ALGORITHM_SHA_1\x10\x01\x12\x1a\n\x16HASH_ALGORITHM_SHA_256\x10\x02\x12\x1a\n\x16HASH_ALGORITHM_SHA_384\x10\x03\x42\x1e\n\x1a\x63om.keydive.license.protosH\x03')

_LICENSETYPE = DESCRIPTOR.enum_types_by_name['LicenseType']
LicenseType = enum_type_wrapper.EnumTypeWrapper(_LICENSETYPE)
_PROTOCOLVERSION = DESCRIPTOR.enum_types_by_name['ProtocolVersion']
ProtocolVersion = enum_type_wrapper.EnumTypeWrapper(_PROTOCOLVERSION)
_HASHALGORITHMPROTO = DESCRIPTOR.enum_types_by_name['HashAlgorithmProto']
HashAlgorithmProto = enum_type_wrapper.EnumTypeWrapper(_HASHALGORITHMPROTO)
STREAMING = 1
OFFLINE = 2
AUTOMATIC = 3
VERSION_2_0 = 20
VERSION_2_1 = 21
VERSION_2_2 = 22
HASH_ALGORITHM_UNSPECIFIED = 0
HASH_ALGORITHM_SHA_1 = 1
HASH_ALGORITHM_SHA_256 = 2
HASH_ALGORITHM_SHA_384 = 3


_LICENSEIDENTIFICATION = DESCRIPTOR.message_types_by_name['LicenseIdentification']
_LICENSEREQUEST = DESCRIPTOR.message_types_by_name['LicenseRequest']
_LICENSEREQUEST_CONTENTIDENTIFICATION = _LICENSEREQUEST.nested_types_by_name['ContentIdentification']
_LICENSEREQUEST_CONTENTIDENTIFICATION_WIDEVINEPSSHDATA = _LICENSEREQUEST_CONTENTIDENTIFICATION.nested_types_by_name['WidevinePsshData']
_LICENSEREQUEST_CONTENTIDENTIFICATION_WEBMKEYID = _LICENSEREQUEST_CONTENTIDENTIFICATION.nested_types_by_name['WebmKeyId']
_LICENSEREQUEST_CONTENTIDENTIFICATION_EXISTINGLICENSE = _LICENSEREQUEST_CONTENTIDENTIFICATION.nested_types_by_name['ExistingLicense']
_LICENSEREQUEST_CONTENTIDENTIFICATION_INITDATA = _LICENSEREQUEST_CONTENTIDENTIFICATION.nested_types_by_name['InitData']
_LICENSEREQUEST_SUBSESSIONDATA = _LICENSEREQUEST.nested_types_by_name['SubSessionData']
_METRICDATA = DESCRIPTOR.message_types_by_name['MetricData']
_METRICDATA_TYPEVALUE = _METRICDATA.nested_types_by_name['TypeValue']
_VERSIONINFO = DESCRIPTOR.message_types_by_name['VersionInfo']
_SIGNEDMESSAGE = DESCRIPTOR.message_types_by_name['SignedMessage']
_PROVISIONINGRESPONSE = DESCRIPTOR.message_types_by_name['ProvisioningResponse']
_PROVISIONINGRESPONSE_OTAKEYBOX = _PROVISIONINGRESPONSE.nested_types_by_name['OtaKeybox']
_SIGNEDPROVISIONINGCONTEXT = DESCRIPTOR.message_types_by_name['SignedProvisioningContext']
_SIGNEDPROVISIONINGMESSAGE = DESCRIPTOR.message_types_by_name['SignedProvisioningMessage']
_CLIENTIDENTIFICATION = DESCRIPTOR.message_types_by_name['ClientIdentification']
_CLIENTIDENTIFICATION_NAMEVALUE = _CLIENTIDENTIFICATION.nested_types_by_name['NameValue']
_CLIENTIDENTIFICATION_CLIENTCAPABILITIES = _CLIENTIDENTIFICATION.nested_types_by_name['ClientCapabilities']
_CLIENTIDENTIFICATION_CLIENTCREDENTIALS = _CLIENTIDENTIFICATION.nested_types_by_name['ClientCredentials']
_ENCRYPTEDCLIENTIDENTIFICATION = DESCRIPTOR.message_types_by_name['EncryptedClientIdentification']
_DRMCERTIFICATE = DESCRIPTOR.message_types_by_name['DrmCertificate']
_DRMCERTIFICATE_ENCRYPTIONKEY = _DRMCERTIFICATE.nested_types_by_name['EncryptionKey']
_SIGNEDDRMCERTIFICATE = DESCRIPTOR.message_types_by_name['SignedDrmCertificate']
_LICENSEREQUEST_CONTENTIDENTIFICATION_INITDATA_INITDATATYPE = _LICENSEREQUEST_CONTENTIDENTIFICATION_INITDATA.enum_types_by_name['InitDataType']
_LICENSEREQUEST_REQUESTTYPE = _LICENSEREQUEST.enum_types_by_name['RequestType']
_METRICDATA_METRICTYPE = _METRICDATA.enum_types_by_name['MetricType']
_SIGNEDMESSAGE_MESSAGETYPE = _SIGNEDMESSAGE.enum_types_by_name['MessageType']
_SIGNEDMESSAGE_SESSIONKEYTYPE = _SIGNEDMESSAGE.enum_types_by_name['SessionKeyType']
_PROVISIONINGRESPONSE_PROVISIONINGSTATUS = _PROVISIONINGRESPONSE.enum_types_by_name['ProvisioningStatus']
_SIGNEDPROVISIONINGMESSAGE_PROVISIONINGPROTOCOLVERSION = _SIGNEDPROVISIONINGMESSAGE.enum_types_by_name['ProvisioningProtocolVersion']
_SIGNEDPROVISIONINGMESSAGE_PROVISIONINGTYPE = _SIGNEDPROVISIONINGMESSAGE.enum_types_by_name['ProvisioningType']
_CLIENTIDENTIFICATION_CLIENTCAPABILITIES_HDCPVERSION = _CLIENTIDENTIFICATION_CLIENTCAPABILITIES.enum_types_by_name['HdcpVersion']
_CLIENTIDENTIFICATION_CLIENTCAPABILITIES_CERTIFICATEKEYTYPE = _CLIENTIDENTIFICATION_CLIENTCAPABILITIES.enum_types_by_name['CertificateKeyType']
_CLIENTIDENTIFICATION_CLIENTCAPABILITIES_ANALOGOUTPUTCAPABILITIES = _CLIENTIDENTIFICATION_CLIENTCAPABILITIES.enum_types_by_name['AnalogOutputCapabilities']
_CLIENTIDENTIFICATION_CLIENTCAPABILITIES_WATERMARKINGSUPPORT = _CLIENTIDENTIFICATION_CLIENTCAPABILITIES.enum_types_by_name['WatermarkingSupport']
_CLIENTIDENTIFICATION_TOKENTYPE = _CLIENTIDENTIFICATION.enum_types_by_name['TokenType']
_DRMCERTIFICATE_TYPE = _DRMCERTIFICATE.enum_types_by_name['Type']
_DRMCERTIFICATE_SERVICETYPE = _DRMCERTIFICATE.enum_types_by_name['ServiceType']
_DRMCERTIFICATE_ALGORITHM = _DRMCERTIFICATE.enum_types_by_name['Algorithm']
LicenseIdentification = _reflection.GeneratedProtocolMessageType('LicenseIdentification', (_message.Message,), {
  'DESCRIPTOR' : _LICENSEIDENTIFICATION,
  '__module__' : 'license_pb2'
  # @@protoc_insertion_point(class_scope:keydive_license_protocol.LicenseIdentification)
  })
_sym_db.RegisterMessage(LicenseIdentification)

LicenseRequest = _reflection.GeneratedProtocolMessageType('LicenseRequest', (_message.Message,), {

  'ContentIdentification' : _reflection.GeneratedProtocolMessageType('ContentIdentification', (_message.Message,), {

    'WidevinePsshData' : _reflection.GeneratedProtocolMessageType('WidevinePsshData', (_message.Message,), {
      'DESCRIPTOR' : _LICENSEREQUEST_CONTENTIDENTIFICATION_WIDEVINEPSSHDATA,
      '__module__' : 'license_pb2'
      # @@protoc_insertion_point(class_scope:keydive_license_protocol.LicenseRequest.ContentIdentification.WidevinePsshData)
      })
    ,

    'WebmKeyId' : _reflection.GeneratedProtocolMessageType('WebmKeyId', (_message.Message,), {
      'DESCRIPTOR' : _LICENSEREQUEST_CONTENTIDENTIFICATION_WEBMKEYID,
      '__module__' : 'license_pb2'
      # @@protoc_insertion_point(class_scope:keydive_license_protocol.LicenseRequest.ContentIdentification.WebmKeyId)
      })
    ,

    'ExistingLicense' : _reflection.GeneratedProtocolMessageType('ExistingLicense', (_message.Message,), {
      'DESCRIPTOR' : _LICENSEREQUEST_CONTENTIDENTIFICATION_EXISTINGLICENSE,
      '__module__' : 'license_pb2'
      # @@protoc_insertion_point(class_scope:keydive_license_protocol.LicenseRequest.ContentIdentification.ExistingLicense)
      })
    ,

    'InitData' : _reflection.GeneratedProtocolMessageType('InitData', (_message.Message,), {
      'DESCRIPTOR' : _LICENSEREQUEST_CONTENTIDENTIFICATION_INITDATA,
      '__module__' : 'license_pb2'
      # @@protoc_insertion_point(class_scope:keydive_license_protocol.LicenseRequest.ContentIdentification.InitData)
      })
    ,
    'DESCRIPTOR' : _LICENSEREQUEST_CONTENTIDENTIFICATION,
    '__module__' : 'license_pb2'
    # @@protoc_insertion_point(class_scope:keydive_license_protocol.LicenseRequest.ContentIdentification)
    })
  ,

  'SubSessionData' : _reflection.GeneratedProtocolMessageType('SubSessionData', (_message.Message,), {
    'DESCRIPTOR' : _LICENSEREQUEST_SUBSESSIONDATA,
    '__module__' : 'license_pb2'
    # @@protoc_insertion_point(class_scope:keydive_license_protocol.LicenseRequest.SubSessionData)
    })
  ,
  'DESCRIPTOR' : _LICENSEREQUEST,
  '__module__' : 'license_pb2'
  # @@protoc_insertion_point(class_scope:keydive_license_protocol.LicenseRequest)
  })
_sym_db.RegisterMessage(LicenseRequest)
_sym_db.RegisterMessage(LicenseRequest.ContentIdentification)
_sym_db.RegisterMessage(LicenseRequest.ContentIdentification.WidevinePsshData)
_sym_db.RegisterMessage(LicenseRequest.ContentIdentification.WebmKeyId)
_sym_db.RegisterMessage(LicenseRequest.ContentIdentification.ExistingLicense)
_sym_db.RegisterMessage(LicenseRequest.ContentIdentification.InitData)
_sym_db.RegisterMessage(LicenseRequest.SubSessionData)

MetricData = _reflection.GeneratedProtocolMessageType('MetricData', (_message.Message,), {

  'TypeValue' : _reflection.GeneratedProtocolMessageType('TypeValue', (_message.Message,), {
    'DESCRIPTOR' : _METRICDATA_TYPEVALUE,
    '__module__' : 'license_pb2'
    # @@protoc_insertion_point(class_scope:keydive_license_protocol.MetricData.TypeValue)
    })
  ,
  'DESCRIPTOR' : _METRICDATA,
  '__module__' : 'license_pb2'
  # @@protoc_insertion_point(class_scope:keydive_license_protocol.MetricData)
  })
_sym_db.RegisterMessage(MetricData)
_sym_db.RegisterMessage(MetricData.TypeValue)

VersionInfo = _reflection.GeneratedProtocolMessageType('VersionInfo', (_message.Message,), {
  'DESCRIPTOR' : _VERSIONINFO,
  '__module__' : 'license_pb2'
  # @@protoc_insertion_point(class_scope:keydive_license_protocol.VersionInfo)
  })
_sym_db.RegisterMessage(VersionInfo)

SignedMessage = _reflection.GeneratedProtocolMessageType('SignedMessage', (_message.Message,), {
  'DESCRIPTOR' : _SIGNEDMESSAGE,
  '__module__' : 'license_pb2'
  # @@protoc_insertion_point(class_scope:keydive_license_protocol.SignedMessage)
  })
_sym_db.RegisterMessage(SignedMessage)

ProvisioningResponse = _reflection.GeneratedProtocolMessageType('ProvisioningResponse', (_message.Message,), {

  'OtaKeybox' : _reflection.GeneratedProtocolMessageType('OtaKeybox', (_message.Message,), {
    'DESCRIPTOR' : _PROVISIONINGRESPONSE_OTAKEYBOX,
    '__module__' : 'license_pb2'
    # @@protoc_insertion_point(class_scope:keydive_license_protocol.ProvisioningResponse.OtaKeybox)
    })
  ,
  'DESCRIPTOR' : _PROVISIONINGRESPONSE,
  '__module__' : 'license_pb2'
  # @@protoc_insertion_point(class_scope:keydive_license_protocol.ProvisioningResponse)
  })
_sym_db.RegisterMessage(ProvisioningResponse)
_sym_db.RegisterMessage(ProvisioningResponse.OtaKeybox)

SignedProvisioningContext = _reflection.GeneratedProtocolMessageType('SignedProvisioningContext', (_message.Message,), {
  'DESCRIPTOR' : _SIGNEDPROVISIONINGCONTEXT,
  '__module__' : 'license_pb2'
  # @@protoc_insertion_point(class_scope:keydive_license_protocol.SignedProvisioningContext)
  })
_sym_db.RegisterMessage(SignedProvisioningContext)

SignedProvisioningMessage = _reflection.GeneratedProtocolMessageType('SignedProvisioningMessage', (_message.Message,), {
  'DESCRIPTOR' : _SIGNEDPROVISIONINGMESSAGE,
  '__module__' : 'license_pb2'
  # @@protoc_insertion_point(class_scope:keydive_license_protocol.SignedProvisioningMessage)
  })
_sym_db.RegisterMessage(SignedProvisioningMessage)

ClientIdentification = _reflection.GeneratedProtocolMessageType('ClientIdentification', (_message.Message,), {

  'NameValue' : _reflection.GeneratedProtocolMessageType('NameValue', (_message.Message,), {
    'DESCRIPTOR' : _CLIENTIDENTIFICATION_NAMEVALUE,
    '__module__' : 'license_pb2'
    # @@protoc_insertion_point(class_scope:keydive_license_protocol.ClientIdentification.NameValue)
    })
  ,

  'ClientCapabilities' : _reflection.GeneratedProtocolMessageType('ClientCapabilities', (_message.Message,), {
    'DESCRIPTOR' : _CLIENTIDENTIFICATION_CLIENTCAPABILITIES,
    '__module__' : 'license_pb2'
    # @@protoc_insertion_point(class_scope:keydive_license_protocol.ClientIdentification.ClientCapabilities)
    })
  ,

  'ClientCredentials' : _reflection.GeneratedProtocolMessageType('ClientCredentials', (_message.Message,), {
    'DESCRIPTOR' : _CLIENTIDENTIFICATION_CLIENTCREDENTIALS,
    '__module__' : 'license_pb2'
    # @@protoc_insertion_point(class_scope:keydive_license_protocol.ClientIdentification.ClientCredentials)
    })
  ,
  'DESCRIPTOR' : _CLIENTIDENTIFICATION,
  '__module__' : 'license_pb2'
  # @@protoc_insertion_point(class_scope:keydive_license_protocol.ClientIdentification)
  })
_sym_db.RegisterMessage(ClientIdentification)
_sym_db.RegisterMessage(ClientIdentification.NameValue)
_sym_db.RegisterMessage(ClientIdentification.ClientCapabilities)
_sym_db.RegisterMessage(ClientIdentification.ClientCredentials)

EncryptedClientIdentification = _reflection.GeneratedProtocolMessageType('EncryptedClientIdentification', (_message.Message,), {
  'DESCRIPTOR' : _ENCRYPTEDCLIENTIDENTIFICATION,
  '__module__' : 'license_pb2'
  # @@protoc_insertion_point(class_scope:keydive_license_protocol.EncryptedClientIdentification)
  })
_sym_db.RegisterMessage(EncryptedClientIdentification)

DrmCertificate = _reflection.GeneratedProtocolMessageType('DrmCertificate', (_message.Message,), {

  'EncryptionKey' : _reflection.GeneratedProtocolMessageType('EncryptionKey', (_message.Message,), {
    'DESCRIPTOR' : _DRMCERTIFICATE_ENCRYPTIONKEY,
    '__module__' : 'license_pb2'
    # @@protoc_insertion_point(class_scope:keydive_license_protocol.DrmCertificate.EncryptionKey)
    })
  ,
  'DESCRIPTOR' : _DRMCERTIFICATE,
  '__module__' : 'license_pb2'
  # @@protoc_insertion_point(class_scope:keydive_license_protocol.DrmCertificate)
  })
_sym_db.RegisterMessage(DrmCertificate)
_sym_db.RegisterMessage(DrmCertificate.EncryptionKey)

SignedDrmCertificate = _reflection.GeneratedProtocolMessageType('SignedDrmCertificate', (_message.Message,), {
  'DESCRIPTOR' : _SIGNEDDRMCERTIFICATE,
  '__module__' : 'license_pb2'
  # @@protoc_insertion_point(class_scope:keydive_license_protocol.SignedDrmCertificate)
  })
_sym_db.RegisterMessage(SignedDrmCertificate)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\032com.keydive.license.protosH\003'
  _DRMCERTIFICATE.fields_by_name['test_device_deprecated']._options = None
  _DRMCERTIFICATE.fields_by_name['test_device_deprecated']._serialized_options = b'\030\001'
  _LICENSETYPE._serialized_start=8127
  _LICENSETYPE._serialized_end=8183
  _PROTOCOLVERSION._serialized_start=8185
  _PROTOCOLVERSION._serialized_end=8253
  _HASHALGORITHMPROTO._serialized_start=8256
  _HASHALGORITHMPROTO._serialized_end=8390
  _LICENSEIDENTIFICATION._serialized_start=44
  _LICENSEIDENTIFICATION._serialized_end=353
  _LICENSEREQUEST._serialized_start=356
  _LICENSEREQUEST._serialized_end=2145
  _LICENSEREQUEST_CONTENTIDENTIFICATION._serialized_start=873
  _LICENSEREQUEST_CONTENTIDENTIFICATION._serialized_end=2013
  _LICENSEREQUEST_CONTENTIDENTIFICATION_WIDEVINEPSSHDATA._serialized_start=1308
  _LICENSEREQUEST_CONTENTIDENTIFICATION_WIDEVINEPSSHDATA._serialized_end=1426
  _LICENSEREQUEST_CONTENTIDENTIFICATION_WEBMKEYID._serialized_start=1428
  _LICENSEREQUEST_CONTENTIDENTIFICATION_WEBMKEYID._serialized_end=1536
  _LICENSEREQUEST_CONTENTIDENTIFICATION_EXISTINGLICENSE._serialized_start=1539
  _LICENSEREQUEST_CONTENTIDENTIFICATION_EXISTINGLICENSE._serialized_end=1726
  _LICENSEREQUEST_CONTENTIDENTIFICATION_INITDATA._serialized_start=1729
  _LICENSEREQUEST_CONTENTIDENTIFICATION_INITDATA._serialized_end=1991
  _LICENSEREQUEST_CONTENTIDENTIFICATION_INITDATA_INITDATATYPE._serialized_start=1957
  _LICENSEREQUEST_CONTENTIDENTIFICATION_INITDATA_INITDATATYPE._serialized_end=1991
  _LICENSEREQUEST_SUBSESSIONDATA._serialized_start=2015
  _LICENSEREQUEST_SUBSESSIONDATA._serialized_end=2095
  _LICENSEREQUEST_REQUESTTYPE._serialized_start=2097
  _LICENSEREQUEST_REQUESTTYPE._serialized_end=2145
  _METRICDATA._serialized_start=2148
  _METRICDATA._serialized_end=2385
  _METRICDATA_TYPEVALUE._serialized_start=2251
  _METRICDATA_TYPEVALUE._serialized_end=2343
  _METRICDATA_METRICTYPE._serialized_start=2345
  _METRICDATA_METRICTYPE._serialized_end=2385
  _VERSIONINFO._serialized_start=2387
  _VERSIONINFO._serialized_end=2462
  _SIGNEDMESSAGE._serialized_start=2465
  _SIGNEDMESSAGE._serialized_end=3247
  _SIGNEDMESSAGE_MESSAGETYPE._serialized_start=2926
  _SIGNEDMESSAGE_MESSAGETYPE._serialized_end=3162
  _SIGNEDMESSAGE_SESSIONKEYTYPE._serialized_start=3164
  _SIGNEDMESSAGE_SESSIONKEYTYPE._serialized_end=3247
  _PROVISIONINGRESPONSE._serialized_start=3250
  _PROVISIONINGRESPONSE._serialized_end=3746
  _PROVISIONINGRESPONSE_OTAKEYBOX._serialized_start=3551
  _PROVISIONINGRESPONSE_OTAKEYBOX._serialized_end=3651
  _PROVISIONINGRESPONSE_PROVISIONINGSTATUS._serialized_start=3653
  _PROVISIONINGRESPONSE_PROVISIONINGSTATUS._serialized_end=3746
  _SIGNEDPROVISIONINGCONTEXT._serialized_start=3748
  _SIGNEDPROVISIONINGCONTEXT._serialized_end=3824
  _SIGNEDPROVISIONINGMESSAGE._serialized_start=3827
  _SIGNEDPROVISIONINGMESSAGE._serialized_end=4610
  _SIGNEDPROVISIONINGMESSAGE_PROVISIONINGPROTOCOLVERSION._serialized_start=4333
  _SIGNEDPROVISIONINGMESSAGE_PROVISIONINGPROTOCOLVERSION._serialized_end=4434
  _SIGNEDPROVISIONINGMESSAGE_PROVISIONINGTYPE._serialized_start=4437
  _SIGNEDPROVISIONINGMESSAGE_PROVISIONINGTYPE._serialized_end=4610
  _CLIENTIDENTIFICATION._serialized_start=4613
  _CLIENTIDENTIFICATION._serialized_end=6790
  _CLIENTIDENTIFICATION_NAMEVALUE._serialized_start=5075
  _CLIENTIDENTIFICATION_NAMEVALUE._serialized_end=5115
  _CLIENTIDENTIFICATION_CLIENTCAPABILITIES._serialized_start=5118
  _CLIENTIDENTIFICATION_CLIENTCAPABILITIES._serialized_end=6557
  _CLIENTIDENTIFICATION_CLIENTCAPABILITIES_HDCPVERSION._serialized_start=6029
  _CLIENTIDENTIFICATION_CLIENTCAPABILITIES_HDCPVERSION._serialized_end=6157
  _CLIENTIDENTIFICATION_CLIENTCAPABILITIES_CERTIFICATEKEYTYPE._serialized_start=6159
  _CLIENTIDENTIFICATION_CLIENTCAPABILITIES_CERTIFICATEKEYTYPE._serialized_end=6264
  _CLIENTIDENTIFICATION_CLIENTCAPABILITIES_ANALOGOUTPUTCAPABILITIES._serialized_start=6267
  _CLIENTIDENTIFICATION_CLIENTCAPABILITIES_ANALOGOUTPUTCAPABILITIES._serialized_end=6408
  _CLIENTIDENTIFICATION_CLIENTCAPABILITIES_WATERMARKINGSUPPORT._serialized_start=6411
  _CLIENTIDENTIFICATION_CLIENTCAPABILITIES_WATERMARKINGSUPPORT._serialized_end=6557
  _CLIENTIDENTIFICATION_CLIENTCREDENTIALS._serialized_start=6559
  _CLIENTIDENTIFICATION_CLIENTCREDENTIALS._serialized_end=6673
  _CLIENTIDENTIFICATION_TOKENTYPE._serialized_start=6675
  _CLIENTIDENTIFICATION_TOKENTYPE._serialized_end=6790
  _ENCRYPTEDCLIENTIDENTIFICATION._serialized_start=6793
  _ENCRYPTEDCLIENTIDENTIFICATION._serialized_end=6980
  _DRMCERTIFICATE._serialized_start=6983
  _DRMCERTIFICATE._serialized_end=7922
  _DRMCERTIFICATE_ENCRYPTIONKEY._serialized_start=7494
  _DRMCERTIFICATE_ENCRYPTIONKEY._serialized_end=7605
  _DRMCERTIFICATE_TYPE._serialized_start=7607
  _DRMCERTIFICATE_TYPE._serialized_end=7683
  _DRMCERTIFICATE_SERVICETYPE._serialized_start=7686
  _DRMCERTIFICATE_SERVICETYPE._serialized_end=7820
  _DRMCERTIFICATE_ALGORITHM._serialized_start=7822
  _DRMCERTIFICATE_ALGORITHM._serialized_end=7922
  _SIGNEDDRMCERTIFICATE._serialized_start=7925
  _SIGNEDDRMCERTIFICATE._serialized_end=8125
# @@protoc_insertion_point(module_scope)
