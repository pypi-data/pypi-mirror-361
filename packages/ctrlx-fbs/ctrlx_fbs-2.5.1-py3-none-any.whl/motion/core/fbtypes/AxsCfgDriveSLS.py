# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Configuration of motion kernel monitoring and reaction of drive function 'safe limited speed'
class AxsCfgDriveSLS(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgDriveSLS()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgDriveSLS(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgDriveSLS
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # velocity limit for the axis in the motion kernel, when drive function 'safe limited speed' is active
    # AxsCfgDriveSLS
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of vel
    # AxsCfgDriveSLS
    def VelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # is safe operation mode monitoring in the motion kernel active or not
    # AxsCfgDriveSLS
    def EnableFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AxsCfgDriveSLSStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsCfgDriveSLSStart(builder)
def AxsCfgDriveSLSAddVel(builder, vel): builder.PrependFloat64Slot(0, vel, 0.0)
def AddVel(builder, vel):
    return AxsCfgDriveSLSAddVel(builder, vel)
def AxsCfgDriveSLSAddVelUnit(builder, velUnit): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(velUnit), 0)
def AddVelUnit(builder, velUnit):
    return AxsCfgDriveSLSAddVelUnit(builder, velUnit)
def AxsCfgDriveSLSAddEnableFlag(builder, enableFlag): builder.PrependBoolSlot(2, enableFlag, 0)
def AddEnableFlag(builder, enableFlag):
    return AxsCfgDriveSLSAddEnableFlag(builder, enableFlag)
def AxsCfgDriveSLSEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgDriveSLSEnd(builder)

class AxsCfgDriveSLST(object):

    # AxsCfgDriveSLST
    def __init__(self):
        self.vel = 0.0  # type: float
        self.velUnit = None  # type: str
        self.enableFlag = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgDriveSls = AxsCfgDriveSLS()
        axsCfgDriveSls.Init(buf, pos)
        return cls.InitFromObj(axsCfgDriveSls)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgDriveSls):
        x = AxsCfgDriveSLST()
        x._UnPack(axsCfgDriveSls)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.vel == other.vel and \
            self.velUnit == other.velUnit and \
            self.enableFlag == other.enableFlag

    # AxsCfgDriveSLST
    def _UnPack(self, axsCfgDriveSls):
        if axsCfgDriveSls is None:
            return
        self.vel = axsCfgDriveSls.Vel()
        self.velUnit = axsCfgDriveSls.VelUnit()
        self.enableFlag = axsCfgDriveSls.EnableFlag()

    # AxsCfgDriveSLST
    def Pack(self, builder):
        if self.velUnit is not None:
            velUnit = builder.CreateString(self.velUnit)
        AxsCfgDriveSLSStart(builder)
        AxsCfgDriveSLSAddVel(builder, self.vel)
        if self.velUnit is not None:
            AxsCfgDriveSLSAddVelUnit(builder, velUnit)
        AxsCfgDriveSLSAddEnableFlag(builder, self.enableFlag)
        axsCfgDriveSls = AxsCfgDriveSLSEnd(builder)
        return axsCfgDriveSls
