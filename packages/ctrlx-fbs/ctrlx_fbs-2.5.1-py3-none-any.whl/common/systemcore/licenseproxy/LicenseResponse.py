# automatically generated by the FlatBuffers compiler, do not modify

# namespace: licenseproxy

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LicenseResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LicenseResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLicenseResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LicenseResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LicenseResponse
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LicenseResponse
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LicenseResponse
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LicenseResponse
    def IsPermanent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # LicenseResponse
    def StartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LicenseResponse
    def EndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LicenseResponse
    def Tampered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def LicenseResponseStart(builder): builder.StartObject(7)
def Start(builder):
    return LicenseResponseStart(builder)
def LicenseResponseAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return LicenseResponseAddName(builder, name)
def LicenseResponseAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def AddVersion(builder, version):
    return LicenseResponseAddVersion(builder, version)
def LicenseResponseAddId(builder, id): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return LicenseResponseAddId(builder, id)
def LicenseResponseAddIsPermanent(builder, isPermanent): builder.PrependBoolSlot(3, isPermanent, 0)
def AddIsPermanent(builder, isPermanent):
    return LicenseResponseAddIsPermanent(builder, isPermanent)
def LicenseResponseAddStartDate(builder, startDate): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(startDate), 0)
def AddStartDate(builder, startDate):
    return LicenseResponseAddStartDate(builder, startDate)
def LicenseResponseAddEndDate(builder, endDate): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(endDate), 0)
def AddEndDate(builder, endDate):
    return LicenseResponseAddEndDate(builder, endDate)
def LicenseResponseAddTampered(builder, tampered): builder.PrependBoolSlot(6, tampered, 0)
def AddTampered(builder, tampered):
    return LicenseResponseAddTampered(builder, tampered)
def LicenseResponseEnd(builder): return builder.EndObject()
def End(builder):
    return LicenseResponseEnd(builder)

class LicenseResponseT(object):

    # LicenseResponseT
    def __init__(self):
        self.name = None  # type: str
        self.version = None  # type: str
        self.id = None  # type: str
        self.isPermanent = False  # type: bool
        self.startDate = None  # type: str
        self.endDate = None  # type: str
        self.tampered = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        licenseResponse = LicenseResponse()
        licenseResponse.Init(buf, pos)
        return cls.InitFromObj(licenseResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, licenseResponse):
        x = LicenseResponseT()
        x._UnPack(licenseResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.version == other.version and \
            self.id == other.id and \
            self.isPermanent == other.isPermanent and \
            self.startDate == other.startDate and \
            self.endDate == other.endDate and \
            self.tampered == other.tampered

    # LicenseResponseT
    def _UnPack(self, licenseResponse):
        if licenseResponse is None:
            return
        self.name = licenseResponse.Name()
        self.version = licenseResponse.Version()
        self.id = licenseResponse.Id()
        self.isPermanent = licenseResponse.IsPermanent()
        self.startDate = licenseResponse.StartDate()
        self.endDate = licenseResponse.EndDate()
        self.tampered = licenseResponse.Tampered()

    # LicenseResponseT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.startDate is not None:
            startDate = builder.CreateString(self.startDate)
        if self.endDate is not None:
            endDate = builder.CreateString(self.endDate)
        LicenseResponseStart(builder)
        if self.name is not None:
            LicenseResponseAddName(builder, name)
        if self.version is not None:
            LicenseResponseAddVersion(builder, version)
        if self.id is not None:
            LicenseResponseAddId(builder, id)
        LicenseResponseAddIsPermanent(builder, self.isPermanent)
        if self.startDate is not None:
            LicenseResponseAddStartDate(builder, startDate)
        if self.endDate is not None:
            LicenseResponseAddEndDate(builder, endDate)
        LicenseResponseAddTampered(builder, self.tampered)
        licenseResponse = LicenseResponseEnd(builder)
        return licenseResponse
