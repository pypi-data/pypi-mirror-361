# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# all supported calculation steps
class StateCalcStepParams(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StateCalcStepParams()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStateCalcStepParams(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StateCalcStepParams
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all params
    # StateCalcStepParams
    def Params(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.StateCalcStepSingleParam import StateCalcStepSingleParam
            obj = StateCalcStepSingleParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StateCalcStepParams
    def ParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StateCalcStepParams
    def ParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def StateCalcStepParamsStart(builder): builder.StartObject(1)
def Start(builder):
    return StateCalcStepParamsStart(builder)
def StateCalcStepParamsAddParams(builder, params): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(params), 0)
def AddParams(builder, params):
    return StateCalcStepParamsAddParams(builder, params)
def StateCalcStepParamsStartParamsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartParamsVector(builder, numElems):
    return StateCalcStepParamsStartParamsVector(builder, numElems)
def StateCalcStepParamsEnd(builder): return builder.EndObject()
def End(builder):
    return StateCalcStepParamsEnd(builder)
import motion.sync.fbtypes.StateCalcStepSingleParam
try:
    from typing import List
except:
    pass

class StateCalcStepParamsT(object):

    # StateCalcStepParamsT
    def __init__(self):
        self.params = None  # type: List[motion.sync.fbtypes.StateCalcStepSingleParam.StateCalcStepSingleParamT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateCalcStepParams = StateCalcStepParams()
        stateCalcStepParams.Init(buf, pos)
        return cls.InitFromObj(stateCalcStepParams)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateCalcStepParams):
        x = StateCalcStepParamsT()
        x._UnPack(stateCalcStepParams)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.params == other.params

    # StateCalcStepParamsT
    def _UnPack(self, stateCalcStepParams):
        if stateCalcStepParams is None:
            return
        if not stateCalcStepParams.ParamsIsNone():
            self.params = []
            for i in range(stateCalcStepParams.ParamsLength()):
                if stateCalcStepParams.Params(i) is None:
                    self.params.append(None)
                else:
                    stateCalcStepSingleParam_ = motion.sync.fbtypes.StateCalcStepSingleParam.StateCalcStepSingleParamT.InitFromObj(stateCalcStepParams.Params(i))
                    self.params.append(stateCalcStepSingleParam_)

    # StateCalcStepParamsT
    def Pack(self, builder):
        if self.params is not None:
            paramslist = []
            for i in range(len(self.params)):
                paramslist.append(self.params[i].Pack(builder))
            StateCalcStepParamsStartParamsVector(builder, len(self.params))
            for i in reversed(range(len(self.params))):
                builder.PrependUOffsetTRelative(paramslist[i])
            params = builder.EndVector()
        StateCalcStepParamsStart(builder)
        if self.params is not None:
            StateCalcStepParamsAddParams(builder, params)
        stateCalcStepParams = StateCalcStepParamsEnd(builder)
        return stateCalcStepParams
