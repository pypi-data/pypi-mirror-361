# automatically generated by the FlatBuffers compiler, do not modify

# namespace: builtin

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LocalizedText(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LocalizedText()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLocalizedText(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LocalizedText
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LocalizedText
    def Locale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LocalizedText
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LocalizedTextStart(builder): builder.StartObject(2)
def Start(builder):
    return LocalizedTextStart(builder)
def LocalizedTextAddLocale(builder, locale): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(locale), 0)
def AddLocale(builder, locale):
    return LocalizedTextAddLocale(builder, locale)
def LocalizedTextAddText(builder, text): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def AddText(builder, text):
    return LocalizedTextAddText(builder, text)
def LocalizedTextEnd(builder): return builder.EndObject()
def End(builder):
    return LocalizedTextEnd(builder)

class LocalizedTextT(object):

    # LocalizedTextT
    def __init__(self):
        self.locale = None  # type: str
        self.text = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        localizedText = LocalizedText()
        localizedText.Init(buf, pos)
        return cls.InitFromObj(localizedText)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, localizedText):
        x = LocalizedTextT()
        x._UnPack(localizedText)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.locale == other.locale and \
            self.text == other.text

    # LocalizedTextT
    def _UnPack(self, localizedText):
        if localizedText is None:
            return
        self.locale = localizedText.Locale()
        self.text = localizedText.Text()

    # LocalizedTextT
    def Pack(self, builder):
        if self.locale is not None:
            locale = builder.CreateString(self.locale)
        if self.text is not None:
            text = builder.CreateString(self.text)
        LocalizedTextStart(builder)
        if self.locale is not None:
            LocalizedTextAddLocale(builder, locale)
        if self.text is not None:
            LocalizedTextAddText(builder, text)
        localizedText = LocalizedTextEnd(builder)
        return localizedText
