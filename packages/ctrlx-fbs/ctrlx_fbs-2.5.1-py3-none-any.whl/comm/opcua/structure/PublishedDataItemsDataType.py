# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PublishedDataItemsDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PublishedDataItemsDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPublishedDataItemsDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PublishedDataItemsDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PublishedDataItemsDataType
    def PublishedData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.PublishedVariableDataType import PublishedVariableDataType
            obj = PublishedVariableDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PublishedDataItemsDataType
    def PublishedDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PublishedDataItemsDataType
    def PublishedDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def PublishedDataItemsDataTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return PublishedDataItemsDataTypeStart(builder)
def PublishedDataItemsDataTypeAddPublishedData(builder, publishedData): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(publishedData), 0)
def AddPublishedData(builder, publishedData):
    return PublishedDataItemsDataTypeAddPublishedData(builder, publishedData)
def PublishedDataItemsDataTypeStartPublishedDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPublishedDataVector(builder, numElems):
    return PublishedDataItemsDataTypeStartPublishedDataVector(builder, numElems)
def PublishedDataItemsDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return PublishedDataItemsDataTypeEnd(builder)
import comm.opcua.structure.PublishedVariableDataType
try:
    from typing import List
except:
    pass

class PublishedDataItemsDataTypeT(object):

    # PublishedDataItemsDataTypeT
    def __init__(self):
        self.publishedData = None  # type: List[comm.opcua.structure.PublishedVariableDataType.PublishedVariableDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        publishedDataItemsDataType = PublishedDataItemsDataType()
        publishedDataItemsDataType.Init(buf, pos)
        return cls.InitFromObj(publishedDataItemsDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, publishedDataItemsDataType):
        x = PublishedDataItemsDataTypeT()
        x._UnPack(publishedDataItemsDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.publishedData == other.publishedData

    # PublishedDataItemsDataTypeT
    def _UnPack(self, publishedDataItemsDataType):
        if publishedDataItemsDataType is None:
            return
        if not publishedDataItemsDataType.PublishedDataIsNone():
            self.publishedData = []
            for i in range(publishedDataItemsDataType.PublishedDataLength()):
                if publishedDataItemsDataType.PublishedData(i) is None:
                    self.publishedData.append(None)
                else:
                    publishedVariableDataType_ = comm.opcua.structure.PublishedVariableDataType.PublishedVariableDataTypeT.InitFromObj(publishedDataItemsDataType.PublishedData(i))
                    self.publishedData.append(publishedVariableDataType_)

    # PublishedDataItemsDataTypeT
    def Pack(self, builder):
        if self.publishedData is not None:
            publishedDatalist = []
            for i in range(len(self.publishedData)):
                publishedDatalist.append(self.publishedData[i].Pack(builder))
            PublishedDataItemsDataTypeStartPublishedDataVector(builder, len(self.publishedData))
            for i in reversed(range(len(self.publishedData))):
                builder.PrependUOffsetTRelative(publishedDatalist[i])
            publishedData = builder.EndVector()
        PublishedDataItemsDataTypeStart(builder)
        if self.publishedData is not None:
            PublishedDataItemsDataTypeAddPublishedData(builder, publishedData)
        publishedDataItemsDataType = PublishedDataItemsDataTypeEnd(builder)
        return publishedDataItemsDataType
