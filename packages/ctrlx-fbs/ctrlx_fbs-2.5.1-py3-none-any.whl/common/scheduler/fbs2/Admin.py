# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs2

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# General settings of Scheduler, startup behavior, callables, tasks and timing
class Admin(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Admin()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAdmin(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Admin
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Target operation state of Scheduler after power on ctrlX CORE
    # Admin
    def StartupState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Timeout for waiting for missing components before carry on switching to target operation state
    # Admin
    def StartupTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Error reaction in case of not all configured components are available
    # Admin
    def StartupErrorReaction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # Trigger source of Scheduler task tick
    # Admin
    def TriggerSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # Admin
    def ControlDebugType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Indication whether the DEBUG mode is active and hardware watchdog and task watchdogs are disabled
    # Admin
    def ControlDebug(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Information about CPU cores of ctrlX CORE
    # Admin
    def CpuInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.fbs2.CpuInfo import CpuInfo
            obj = CpuInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Indication whether switching to the SERVICE state is required for managing apps
    # Admin
    def HardwareWatchdogRequired(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Default behavior of task and hardware watchdog handling when no requirements are given by other
    # Admin
    def WatchdogDefaultValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 3

    # Utilization of the cycle time of Scheduler tick task causes by itself
    # Admin
    def Utilization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.fbs2.UtilizationThreshold import UtilizationThreshold
            obj = UtilizationThreshold()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # General settings for timeouts when switching callable operation states
    # Admin
    def CallableTimeouts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.fbs2.CallableTimeouts import CallableTimeouts
            obj = CallableTimeouts()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Program configuration mode of the Scheduler
    # Admin
    def ProgramConfigurationMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Configuration of waitstates on bootup states
    # Admin
    def WaitstateComponents(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from common.scheduler.fbs2.WaitstateComponent import WaitstateComponent
            obj = WaitstateComponent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Admin
    def WaitstateComponentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Admin
    def WaitstateComponentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

def AdminStart(builder): builder.StartObject(13)
def Start(builder):
    return AdminStart(builder)
def AdminAddStartupState(builder, startupState): builder.PrependInt8Slot(0, startupState, 0)
def AddStartupState(builder, startupState):
    return AdminAddStartupState(builder, startupState)
def AdminAddStartupTimeout(builder, startupTimeout): builder.PrependUint32Slot(1, startupTimeout, 0)
def AddStartupTimeout(builder, startupTimeout):
    return AdminAddStartupTimeout(builder, startupTimeout)
def AdminAddStartupErrorReaction(builder, startupErrorReaction): builder.PrependInt8Slot(2, startupErrorReaction, 1)
def AddStartupErrorReaction(builder, startupErrorReaction):
    return AdminAddStartupErrorReaction(builder, startupErrorReaction)
def AdminAddTriggerSource(builder, triggerSource): builder.PrependInt8Slot(3, triggerSource, 1)
def AddTriggerSource(builder, triggerSource):
    return AdminAddTriggerSource(builder, triggerSource)
def AdminAddControlDebugType(builder, controlDebugType): builder.PrependUint8Slot(4, controlDebugType, 0)
def AddControlDebugType(builder, controlDebugType):
    return AdminAddControlDebugType(builder, controlDebugType)
def AdminAddControlDebug(builder, controlDebug): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(controlDebug), 0)
def AddControlDebug(builder, controlDebug):
    return AdminAddControlDebug(builder, controlDebug)
def AdminAddCpuInfo(builder, cpuInfo): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(cpuInfo), 0)
def AddCpuInfo(builder, cpuInfo):
    return AdminAddCpuInfo(builder, cpuInfo)
def AdminAddHardwareWatchdogRequired(builder, hardwareWatchdogRequired): builder.PrependBoolSlot(7, hardwareWatchdogRequired, 0)
def AddHardwareWatchdogRequired(builder, hardwareWatchdogRequired):
    return AdminAddHardwareWatchdogRequired(builder, hardwareWatchdogRequired)
def AdminAddWatchdogDefaultValue(builder, watchdogDefaultValue): builder.PrependInt8Slot(8, watchdogDefaultValue, 3)
def AddWatchdogDefaultValue(builder, watchdogDefaultValue):
    return AdminAddWatchdogDefaultValue(builder, watchdogDefaultValue)
def AdminAddUtilization(builder, utilization): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(utilization), 0)
def AddUtilization(builder, utilization):
    return AdminAddUtilization(builder, utilization)
def AdminAddCallableTimeouts(builder, callableTimeouts): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(callableTimeouts), 0)
def AddCallableTimeouts(builder, callableTimeouts):
    return AdminAddCallableTimeouts(builder, callableTimeouts)
def AdminAddProgramConfigurationMode(builder, programConfigurationMode): builder.PrependInt8Slot(11, programConfigurationMode, 0)
def AddProgramConfigurationMode(builder, programConfigurationMode):
    return AdminAddProgramConfigurationMode(builder, programConfigurationMode)
def AdminAddWaitstateComponents(builder, waitstateComponents): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(waitstateComponents), 0)
def AddWaitstateComponents(builder, waitstateComponents):
    return AdminAddWaitstateComponents(builder, waitstateComponents)
def AdminStartWaitstateComponentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartWaitstateComponentsVector(builder, numElems):
    return AdminStartWaitstateComponentsVector(builder, numElems)
def AdminEnd(builder): return builder.EndObject()
def End(builder):
    return AdminEnd(builder)
import common.scheduler.controls.fbs.Controls
import common.scheduler.controls.fbs.Debug
import common.scheduler.fbs2.CallableTimeouts
import common.scheduler.fbs2.CpuInfo
import common.scheduler.fbs2.UtilizationThreshold
import common.scheduler.fbs2.WaitstateComponent
try:
    from typing import List, Optional, Union
except:
    pass

class AdminT(object):

    # AdminT
    def __init__(self):
        self.startupState = 0  # type: int
        self.startupTimeout = 0  # type: int
        self.startupErrorReaction = 1  # type: int
        self.triggerSource = 1  # type: int
        self.controlDebugType = 0  # type: int
        self.controlDebug = None  # type: Union[None, common.scheduler.controls.fbs.Debug.DebugT]
        self.cpuInfo = None  # type: Optional[common.scheduler.fbs2.CpuInfo.CpuInfoT]
        self.hardwareWatchdogRequired = False  # type: bool
        self.watchdogDefaultValue = 3  # type: int
        self.utilization = None  # type: Optional[common.scheduler.fbs2.UtilizationThreshold.UtilizationThresholdT]
        self.callableTimeouts = None  # type: Optional[common.scheduler.fbs2.CallableTimeouts.CallableTimeoutsT]
        self.programConfigurationMode = 0  # type: int
        self.waitstateComponents = None  # type: List[common.scheduler.fbs2.WaitstateComponent.WaitstateComponentT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        admin = Admin()
        admin.Init(buf, pos)
        return cls.InitFromObj(admin)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, admin):
        x = AdminT()
        x._UnPack(admin)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.startupState == other.startupState and \
            self.startupTimeout == other.startupTimeout and \
            self.startupErrorReaction == other.startupErrorReaction and \
            self.triggerSource == other.triggerSource and \
            self.controlDebugType == other.controlDebugType and \
            self.controlDebug == other.controlDebug and \
            self.cpuInfo == other.cpuInfo and \
            self.hardwareWatchdogRequired == other.hardwareWatchdogRequired and \
            self.watchdogDefaultValue == other.watchdogDefaultValue and \
            self.utilization == other.utilization and \
            self.callableTimeouts == other.callableTimeouts and \
            self.programConfigurationMode == other.programConfigurationMode and \
            self.waitstateComponents == other.waitstateComponents

    # AdminT
    def _UnPack(self, admin):
        if admin is None:
            return
        self.startupState = admin.StartupState()
        self.startupTimeout = admin.StartupTimeout()
        self.startupErrorReaction = admin.StartupErrorReaction()
        self.triggerSource = admin.TriggerSource()
        self.controlDebugType = admin.ControlDebugType()
        self.controlDebug = common.scheduler.controls.fbs.Controls.ControlsCreator(self.controlDebugType, admin.ControlDebug())
        if admin.CpuInfo() is not None:
            self.cpuInfo = common.scheduler.fbs2.CpuInfo.CpuInfoT.InitFromObj(admin.CpuInfo())
        self.hardwareWatchdogRequired = admin.HardwareWatchdogRequired()
        self.watchdogDefaultValue = admin.WatchdogDefaultValue()
        if admin.Utilization() is not None:
            self.utilization = common.scheduler.fbs2.UtilizationThreshold.UtilizationThresholdT.InitFromObj(admin.Utilization())
        if admin.CallableTimeouts() is not None:
            self.callableTimeouts = common.scheduler.fbs2.CallableTimeouts.CallableTimeoutsT.InitFromObj(admin.CallableTimeouts())
        self.programConfigurationMode = admin.ProgramConfigurationMode()
        if not admin.WaitstateComponentsIsNone():
            self.waitstateComponents = []
            for i in range(admin.WaitstateComponentsLength()):
                if admin.WaitstateComponents(i) is None:
                    self.waitstateComponents.append(None)
                else:
                    waitstateComponent_ = common.scheduler.fbs2.WaitstateComponent.WaitstateComponentT.InitFromObj(admin.WaitstateComponents(i))
                    self.waitstateComponents.append(waitstateComponent_)

    # AdminT
    def Pack(self, builder):
        if self.controlDebug is not None:
            controlDebug = self.controlDebug.Pack(builder)
        if self.cpuInfo is not None:
            cpuInfo = self.cpuInfo.Pack(builder)
        if self.utilization is not None:
            utilization = self.utilization.Pack(builder)
        if self.callableTimeouts is not None:
            callableTimeouts = self.callableTimeouts.Pack(builder)
        if self.waitstateComponents is not None:
            waitstateComponentslist = []
            for i in range(len(self.waitstateComponents)):
                waitstateComponentslist.append(self.waitstateComponents[i].Pack(builder))
            AdminStartWaitstateComponentsVector(builder, len(self.waitstateComponents))
            for i in reversed(range(len(self.waitstateComponents))):
                builder.PrependUOffsetTRelative(waitstateComponentslist[i])
            waitstateComponents = builder.EndVector()
        AdminStart(builder)
        AdminAddStartupState(builder, self.startupState)
        AdminAddStartupTimeout(builder, self.startupTimeout)
        AdminAddStartupErrorReaction(builder, self.startupErrorReaction)
        AdminAddTriggerSource(builder, self.triggerSource)
        AdminAddControlDebugType(builder, self.controlDebugType)
        if self.controlDebug is not None:
            AdminAddControlDebug(builder, controlDebug)
        if self.cpuInfo is not None:
            AdminAddCpuInfo(builder, cpuInfo)
        AdminAddHardwareWatchdogRequired(builder, self.hardwareWatchdogRequired)
        AdminAddWatchdogDefaultValue(builder, self.watchdogDefaultValue)
        if self.utilization is not None:
            AdminAddUtilization(builder, utilization)
        if self.callableTimeouts is not None:
            AdminAddCallableTimeouts(builder, callableTimeouts)
        AdminAddProgramConfigurationMode(builder, self.programConfigurationMode)
        if self.waitstateComponents is not None:
            AdminAddWaitstateComponents(builder, waitstateComponents)
        admin = AdminEnd(builder)
        return admin
