# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DataSetReaderDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataSetReaderDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataSetReaderDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DataSetReaderDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DataSetReaderDataType
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DataSetReaderDataType
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DataSetReaderDataType
    def PublisherId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.Variant import Variant
            obj = Variant()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetReaderDataType
    def WriterGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # DataSetReaderDataType
    def DataSetWriterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # DataSetReaderDataType
    def DataSetMetaData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.structure.DataSetMetaDataType import DataSetMetaDataType
            obj = DataSetMetaDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetReaderDataType
    def DataSetFieldContentMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DataSetReaderDataType
    def MessageReceiveTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DataSetReaderDataType
    def KeyFrameCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DataSetReaderDataType
    def HeaderLayoutUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DataSetReaderDataType
    def SecurityMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DataSetReaderDataType
    def SecurityGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DataSetReaderDataType
    def SecurityKeyServices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.EndpointDescription import EndpointDescription
            obj = EndpointDescription()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetReaderDataType
    def SecurityKeyServicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataSetReaderDataType
    def SecurityKeyServicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # DataSetReaderDataType
    def DataSetReaderProperties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.KeyValuePair import KeyValuePair
            obj = KeyValuePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetReaderDataType
    def DataSetReaderPropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataSetReaderDataType
    def DataSetReaderPropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # DataSetReaderDataType
    def TransportSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.DataSetReaderTransportDataType import DataSetReaderTransportDataType
            obj = DataSetReaderTransportDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetReaderDataType
    def MessageSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.DataSetReaderMessageDataType import DataSetReaderMessageDataType
            obj = DataSetReaderMessageDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetReaderDataType
    def SubscribedDataSet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.SubscribedDataSetDataType import SubscribedDataSetDataType
            obj = SubscribedDataSetDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DataSetReaderDataTypeStart(builder): builder.StartObject(17)
def Start(builder):
    return DataSetReaderDataTypeStart(builder)
def DataSetReaderDataTypeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return DataSetReaderDataTypeAddName(builder, name)
def DataSetReaderDataTypeAddEnabled(builder, enabled): builder.PrependBoolSlot(1, enabled, 0)
def AddEnabled(builder, enabled):
    return DataSetReaderDataTypeAddEnabled(builder, enabled)
def DataSetReaderDataTypeAddPublisherId(builder, publisherId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(publisherId), 0)
def AddPublisherId(builder, publisherId):
    return DataSetReaderDataTypeAddPublisherId(builder, publisherId)
def DataSetReaderDataTypeAddWriterGroupId(builder, writerGroupId): builder.PrependUint16Slot(3, writerGroupId, 0)
def AddWriterGroupId(builder, writerGroupId):
    return DataSetReaderDataTypeAddWriterGroupId(builder, writerGroupId)
def DataSetReaderDataTypeAddDataSetWriterId(builder, dataSetWriterId): builder.PrependUint16Slot(4, dataSetWriterId, 0)
def AddDataSetWriterId(builder, dataSetWriterId):
    return DataSetReaderDataTypeAddDataSetWriterId(builder, dataSetWriterId)
def DataSetReaderDataTypeAddDataSetMetaData(builder, dataSetMetaData): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetMetaData), 0)
def AddDataSetMetaData(builder, dataSetMetaData):
    return DataSetReaderDataTypeAddDataSetMetaData(builder, dataSetMetaData)
def DataSetReaderDataTypeAddDataSetFieldContentMask(builder, dataSetFieldContentMask): builder.PrependUint32Slot(6, dataSetFieldContentMask, 0)
def AddDataSetFieldContentMask(builder, dataSetFieldContentMask):
    return DataSetReaderDataTypeAddDataSetFieldContentMask(builder, dataSetFieldContentMask)
def DataSetReaderDataTypeAddMessageReceiveTimeout(builder, messageReceiveTimeout): builder.PrependFloat64Slot(7, messageReceiveTimeout, 0.0)
def AddMessageReceiveTimeout(builder, messageReceiveTimeout):
    return DataSetReaderDataTypeAddMessageReceiveTimeout(builder, messageReceiveTimeout)
def DataSetReaderDataTypeAddKeyFrameCount(builder, keyFrameCount): builder.PrependUint32Slot(8, keyFrameCount, 0)
def AddKeyFrameCount(builder, keyFrameCount):
    return DataSetReaderDataTypeAddKeyFrameCount(builder, keyFrameCount)
def DataSetReaderDataTypeAddHeaderLayoutUri(builder, headerLayoutUri): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(headerLayoutUri), 0)
def AddHeaderLayoutUri(builder, headerLayoutUri):
    return DataSetReaderDataTypeAddHeaderLayoutUri(builder, headerLayoutUri)
def DataSetReaderDataTypeAddSecurityMode(builder, securityMode): builder.PrependInt32Slot(10, securityMode, 0)
def AddSecurityMode(builder, securityMode):
    return DataSetReaderDataTypeAddSecurityMode(builder, securityMode)
def DataSetReaderDataTypeAddSecurityGroupId(builder, securityGroupId): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(securityGroupId), 0)
def AddSecurityGroupId(builder, securityGroupId):
    return DataSetReaderDataTypeAddSecurityGroupId(builder, securityGroupId)
def DataSetReaderDataTypeAddSecurityKeyServices(builder, securityKeyServices): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(securityKeyServices), 0)
def AddSecurityKeyServices(builder, securityKeyServices):
    return DataSetReaderDataTypeAddSecurityKeyServices(builder, securityKeyServices)
def DataSetReaderDataTypeStartSecurityKeyServicesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSecurityKeyServicesVector(builder, numElems):
    return DataSetReaderDataTypeStartSecurityKeyServicesVector(builder, numElems)
def DataSetReaderDataTypeAddDataSetReaderProperties(builder, dataSetReaderProperties): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetReaderProperties), 0)
def AddDataSetReaderProperties(builder, dataSetReaderProperties):
    return DataSetReaderDataTypeAddDataSetReaderProperties(builder, dataSetReaderProperties)
def DataSetReaderDataTypeStartDataSetReaderPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDataSetReaderPropertiesVector(builder, numElems):
    return DataSetReaderDataTypeStartDataSetReaderPropertiesVector(builder, numElems)
def DataSetReaderDataTypeAddTransportSettings(builder, transportSettings): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(transportSettings), 0)
def AddTransportSettings(builder, transportSettings):
    return DataSetReaderDataTypeAddTransportSettings(builder, transportSettings)
def DataSetReaderDataTypeAddMessageSettings(builder, messageSettings): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(messageSettings), 0)
def AddMessageSettings(builder, messageSettings):
    return DataSetReaderDataTypeAddMessageSettings(builder, messageSettings)
def DataSetReaderDataTypeAddSubscribedDataSet(builder, subscribedDataSet): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(subscribedDataSet), 0)
def AddSubscribedDataSet(builder, subscribedDataSet):
    return DataSetReaderDataTypeAddSubscribedDataSet(builder, subscribedDataSet)
def DataSetReaderDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return DataSetReaderDataTypeEnd(builder)
import comm.opcua.builtin.Variant
import comm.opcua.structure.DataSetMetaDataType
import comm.opcua.structure.EndpointDescription
import comm.opcua.structure.KeyValuePair
import comm.opcua.subtypes.DataSetReaderMessageDataType
import comm.opcua.subtypes.DataSetReaderTransportDataType
import comm.opcua.subtypes.SubscribedDataSetDataType
try:
    from typing import List, Optional
except:
    pass

class DataSetReaderDataTypeT(object):

    # DataSetReaderDataTypeT
    def __init__(self):
        self.name = None  # type: str
        self.enabled = False  # type: bool
        self.publisherId = None  # type: Optional[comm.opcua.builtin.Variant.VariantT]
        self.writerGroupId = 0  # type: int
        self.dataSetWriterId = 0  # type: int
        self.dataSetMetaData = None  # type: Optional[comm.opcua.structure.DataSetMetaDataType.DataSetMetaDataTypeT]
        self.dataSetFieldContentMask = 0  # type: int
        self.messageReceiveTimeout = 0.0  # type: float
        self.keyFrameCount = 0  # type: int
        self.headerLayoutUri = None  # type: str
        self.securityMode = 0  # type: int
        self.securityGroupId = None  # type: str
        self.securityKeyServices = None  # type: List[comm.opcua.structure.EndpointDescription.EndpointDescriptionT]
        self.dataSetReaderProperties = None  # type: List[comm.opcua.structure.KeyValuePair.KeyValuePairT]
        self.transportSettings = None  # type: Optional[comm.opcua.subtypes.DataSetReaderTransportDataType.DataSetReaderTransportDataTypeT]
        self.messageSettings = None  # type: Optional[comm.opcua.subtypes.DataSetReaderMessageDataType.DataSetReaderMessageDataTypeT]
        self.subscribedDataSet = None  # type: Optional[comm.opcua.subtypes.SubscribedDataSetDataType.SubscribedDataSetDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataSetReaderDataType = DataSetReaderDataType()
        dataSetReaderDataType.Init(buf, pos)
        return cls.InitFromObj(dataSetReaderDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataSetReaderDataType):
        x = DataSetReaderDataTypeT()
        x._UnPack(dataSetReaderDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.enabled == other.enabled and \
            self.publisherId == other.publisherId and \
            self.writerGroupId == other.writerGroupId and \
            self.dataSetWriterId == other.dataSetWriterId and \
            self.dataSetMetaData == other.dataSetMetaData and \
            self.dataSetFieldContentMask == other.dataSetFieldContentMask and \
            self.messageReceiveTimeout == other.messageReceiveTimeout and \
            self.keyFrameCount == other.keyFrameCount and \
            self.headerLayoutUri == other.headerLayoutUri and \
            self.securityMode == other.securityMode and \
            self.securityGroupId == other.securityGroupId and \
            self.securityKeyServices == other.securityKeyServices and \
            self.dataSetReaderProperties == other.dataSetReaderProperties and \
            self.transportSettings == other.transportSettings and \
            self.messageSettings == other.messageSettings and \
            self.subscribedDataSet == other.subscribedDataSet

    # DataSetReaderDataTypeT
    def _UnPack(self, dataSetReaderDataType):
        if dataSetReaderDataType is None:
            return
        self.name = dataSetReaderDataType.Name()
        self.enabled = dataSetReaderDataType.Enabled()
        if dataSetReaderDataType.PublisherId() is not None:
            self.publisherId = comm.opcua.builtin.Variant.VariantT.InitFromObj(dataSetReaderDataType.PublisherId())
        self.writerGroupId = dataSetReaderDataType.WriterGroupId()
        self.dataSetWriterId = dataSetReaderDataType.DataSetWriterId()
        if dataSetReaderDataType.DataSetMetaData() is not None:
            self.dataSetMetaData = comm.opcua.structure.DataSetMetaDataType.DataSetMetaDataTypeT.InitFromObj(dataSetReaderDataType.DataSetMetaData())
        self.dataSetFieldContentMask = dataSetReaderDataType.DataSetFieldContentMask()
        self.messageReceiveTimeout = dataSetReaderDataType.MessageReceiveTimeout()
        self.keyFrameCount = dataSetReaderDataType.KeyFrameCount()
        self.headerLayoutUri = dataSetReaderDataType.HeaderLayoutUri()
        self.securityMode = dataSetReaderDataType.SecurityMode()
        self.securityGroupId = dataSetReaderDataType.SecurityGroupId()
        if not dataSetReaderDataType.SecurityKeyServicesIsNone():
            self.securityKeyServices = []
            for i in range(dataSetReaderDataType.SecurityKeyServicesLength()):
                if dataSetReaderDataType.SecurityKeyServices(i) is None:
                    self.securityKeyServices.append(None)
                else:
                    endpointDescription_ = comm.opcua.structure.EndpointDescription.EndpointDescriptionT.InitFromObj(dataSetReaderDataType.SecurityKeyServices(i))
                    self.securityKeyServices.append(endpointDescription_)
        if not dataSetReaderDataType.DataSetReaderPropertiesIsNone():
            self.dataSetReaderProperties = []
            for i in range(dataSetReaderDataType.DataSetReaderPropertiesLength()):
                if dataSetReaderDataType.DataSetReaderProperties(i) is None:
                    self.dataSetReaderProperties.append(None)
                else:
                    keyValuePair_ = comm.opcua.structure.KeyValuePair.KeyValuePairT.InitFromObj(dataSetReaderDataType.DataSetReaderProperties(i))
                    self.dataSetReaderProperties.append(keyValuePair_)
        if dataSetReaderDataType.TransportSettings() is not None:
            self.transportSettings = comm.opcua.subtypes.DataSetReaderTransportDataType.DataSetReaderTransportDataTypeT.InitFromObj(dataSetReaderDataType.TransportSettings())
        if dataSetReaderDataType.MessageSettings() is not None:
            self.messageSettings = comm.opcua.subtypes.DataSetReaderMessageDataType.DataSetReaderMessageDataTypeT.InitFromObj(dataSetReaderDataType.MessageSettings())
        if dataSetReaderDataType.SubscribedDataSet() is not None:
            self.subscribedDataSet = comm.opcua.subtypes.SubscribedDataSetDataType.SubscribedDataSetDataTypeT.InitFromObj(dataSetReaderDataType.SubscribedDataSet())

    # DataSetReaderDataTypeT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.publisherId is not None:
            publisherId = self.publisherId.Pack(builder)
        if self.dataSetMetaData is not None:
            dataSetMetaData = self.dataSetMetaData.Pack(builder)
        if self.headerLayoutUri is not None:
            headerLayoutUri = builder.CreateString(self.headerLayoutUri)
        if self.securityGroupId is not None:
            securityGroupId = builder.CreateString(self.securityGroupId)
        if self.securityKeyServices is not None:
            securityKeyServiceslist = []
            for i in range(len(self.securityKeyServices)):
                securityKeyServiceslist.append(self.securityKeyServices[i].Pack(builder))
            DataSetReaderDataTypeStartSecurityKeyServicesVector(builder, len(self.securityKeyServices))
            for i in reversed(range(len(self.securityKeyServices))):
                builder.PrependUOffsetTRelative(securityKeyServiceslist[i])
            securityKeyServices = builder.EndVector()
        if self.dataSetReaderProperties is not None:
            dataSetReaderPropertieslist = []
            for i in range(len(self.dataSetReaderProperties)):
                dataSetReaderPropertieslist.append(self.dataSetReaderProperties[i].Pack(builder))
            DataSetReaderDataTypeStartDataSetReaderPropertiesVector(builder, len(self.dataSetReaderProperties))
            for i in reversed(range(len(self.dataSetReaderProperties))):
                builder.PrependUOffsetTRelative(dataSetReaderPropertieslist[i])
            dataSetReaderProperties = builder.EndVector()
        if self.transportSettings is not None:
            transportSettings = self.transportSettings.Pack(builder)
        if self.messageSettings is not None:
            messageSettings = self.messageSettings.Pack(builder)
        if self.subscribedDataSet is not None:
            subscribedDataSet = self.subscribedDataSet.Pack(builder)
        DataSetReaderDataTypeStart(builder)
        if self.name is not None:
            DataSetReaderDataTypeAddName(builder, name)
        DataSetReaderDataTypeAddEnabled(builder, self.enabled)
        if self.publisherId is not None:
            DataSetReaderDataTypeAddPublisherId(builder, publisherId)
        DataSetReaderDataTypeAddWriterGroupId(builder, self.writerGroupId)
        DataSetReaderDataTypeAddDataSetWriterId(builder, self.dataSetWriterId)
        if self.dataSetMetaData is not None:
            DataSetReaderDataTypeAddDataSetMetaData(builder, dataSetMetaData)
        DataSetReaderDataTypeAddDataSetFieldContentMask(builder, self.dataSetFieldContentMask)
        DataSetReaderDataTypeAddMessageReceiveTimeout(builder, self.messageReceiveTimeout)
        DataSetReaderDataTypeAddKeyFrameCount(builder, self.keyFrameCount)
        if self.headerLayoutUri is not None:
            DataSetReaderDataTypeAddHeaderLayoutUri(builder, headerLayoutUri)
        DataSetReaderDataTypeAddSecurityMode(builder, self.securityMode)
        if self.securityGroupId is not None:
            DataSetReaderDataTypeAddSecurityGroupId(builder, securityGroupId)
        if self.securityKeyServices is not None:
            DataSetReaderDataTypeAddSecurityKeyServices(builder, securityKeyServices)
        if self.dataSetReaderProperties is not None:
            DataSetReaderDataTypeAddDataSetReaderProperties(builder, dataSetReaderProperties)
        if self.transportSettings is not None:
            DataSetReaderDataTypeAddTransportSettings(builder, transportSettings)
        if self.messageSettings is not None:
            DataSetReaderDataTypeAddMessageSettings(builder, messageSettings)
        if self.subscribedDataSet is not None:
            DataSetReaderDataTypeAddSubscribedDataSet(builder, subscribedDataSet)
        dataSetReaderDataType = DataSetReaderDataTypeEnd(builder)
        return dataSetReaderDataType
