# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DatagramDataSetReaderTransportDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DatagramDataSetReaderTransportDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDatagramDataSetReaderTransportDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DatagramDataSetReaderTransportDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DatagramDataSetReaderTransportDataType
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.NetworkAddressDataType import NetworkAddressDataType
            obj = NetworkAddressDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DatagramDataSetReaderTransportDataType
    def QosCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DatagramDataSetReaderTransportDataType
    def DatagramQos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.subtypes.ReceiveQosDataType import ReceiveQosDataType
            obj = ReceiveQosDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DatagramDataSetReaderTransportDataType
    def DatagramQosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DatagramDataSetReaderTransportDataType
    def DatagramQosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # DatagramDataSetReaderTransportDataType
    def Topic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DatagramDataSetReaderTransportDataTypeStart(builder): builder.StartObject(4)
def Start(builder):
    return DatagramDataSetReaderTransportDataTypeStart(builder)
def DatagramDataSetReaderTransportDataTypeAddAddress(builder, address): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def AddAddress(builder, address):
    return DatagramDataSetReaderTransportDataTypeAddAddress(builder, address)
def DatagramDataSetReaderTransportDataTypeAddQosCategory(builder, qosCategory): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(qosCategory), 0)
def AddQosCategory(builder, qosCategory):
    return DatagramDataSetReaderTransportDataTypeAddQosCategory(builder, qosCategory)
def DatagramDataSetReaderTransportDataTypeAddDatagramQos(builder, datagramQos): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(datagramQos), 0)
def AddDatagramQos(builder, datagramQos):
    return DatagramDataSetReaderTransportDataTypeAddDatagramQos(builder, datagramQos)
def DatagramDataSetReaderTransportDataTypeStartDatagramQosVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDatagramQosVector(builder, numElems):
    return DatagramDataSetReaderTransportDataTypeStartDatagramQosVector(builder, numElems)
def DatagramDataSetReaderTransportDataTypeAddTopic(builder, topic): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(topic), 0)
def AddTopic(builder, topic):
    return DatagramDataSetReaderTransportDataTypeAddTopic(builder, topic)
def DatagramDataSetReaderTransportDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return DatagramDataSetReaderTransportDataTypeEnd(builder)
import comm.opcua.subtypes.NetworkAddressDataType
import comm.opcua.subtypes.ReceiveQosDataType
try:
    from typing import List, Optional
except:
    pass

class DatagramDataSetReaderTransportDataTypeT(object):

    # DatagramDataSetReaderTransportDataTypeT
    def __init__(self):
        self.address = None  # type: Optional[comm.opcua.subtypes.NetworkAddressDataType.NetworkAddressDataTypeT]
        self.qosCategory = None  # type: str
        self.datagramQos = None  # type: List[comm.opcua.subtypes.ReceiveQosDataType.ReceiveQosDataTypeT]
        self.topic = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        datagramDataSetReaderTransportDataType = DatagramDataSetReaderTransportDataType()
        datagramDataSetReaderTransportDataType.Init(buf, pos)
        return cls.InitFromObj(datagramDataSetReaderTransportDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, datagramDataSetReaderTransportDataType):
        x = DatagramDataSetReaderTransportDataTypeT()
        x._UnPack(datagramDataSetReaderTransportDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.address == other.address and \
            self.qosCategory == other.qosCategory and \
            self.datagramQos == other.datagramQos and \
            self.topic == other.topic

    # DatagramDataSetReaderTransportDataTypeT
    def _UnPack(self, datagramDataSetReaderTransportDataType):
        if datagramDataSetReaderTransportDataType is None:
            return
        if datagramDataSetReaderTransportDataType.Address() is not None:
            self.address = comm.opcua.subtypes.NetworkAddressDataType.NetworkAddressDataTypeT.InitFromObj(datagramDataSetReaderTransportDataType.Address())
        self.qosCategory = datagramDataSetReaderTransportDataType.QosCategory()
        if not datagramDataSetReaderTransportDataType.DatagramQosIsNone():
            self.datagramQos = []
            for i in range(datagramDataSetReaderTransportDataType.DatagramQosLength()):
                if datagramDataSetReaderTransportDataType.DatagramQos(i) is None:
                    self.datagramQos.append(None)
                else:
                    receiveQosDataType_ = comm.opcua.subtypes.ReceiveQosDataType.ReceiveQosDataTypeT.InitFromObj(datagramDataSetReaderTransportDataType.DatagramQos(i))
                    self.datagramQos.append(receiveQosDataType_)
        self.topic = datagramDataSetReaderTransportDataType.Topic()

    # DatagramDataSetReaderTransportDataTypeT
    def Pack(self, builder):
        if self.address is not None:
            address = self.address.Pack(builder)
        if self.qosCategory is not None:
            qosCategory = builder.CreateString(self.qosCategory)
        if self.datagramQos is not None:
            datagramQoslist = []
            for i in range(len(self.datagramQos)):
                datagramQoslist.append(self.datagramQos[i].Pack(builder))
            DatagramDataSetReaderTransportDataTypeStartDatagramQosVector(builder, len(self.datagramQos))
            for i in reversed(range(len(self.datagramQos))):
                builder.PrependUOffsetTRelative(datagramQoslist[i])
            datagramQos = builder.EndVector()
        if self.topic is not None:
            topic = builder.CreateString(self.topic)
        DatagramDataSetReaderTransportDataTypeStart(builder)
        if self.address is not None:
            DatagramDataSetReaderTransportDataTypeAddAddress(builder, address)
        if self.qosCategory is not None:
            DatagramDataSetReaderTransportDataTypeAddQosCategory(builder, qosCategory)
        if self.datagramQos is not None:
            DatagramDataSetReaderTransportDataTypeAddDatagramQos(builder, datagramQos)
        if self.topic is not None:
            DatagramDataSetReaderTransportDataTypeAddTopic(builder, topic)
        datagramDataSetReaderTransportDataType = DatagramDataSetReaderTransportDataTypeEnd(builder)
        return datagramDataSetReaderTransportDataType
