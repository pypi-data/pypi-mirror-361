# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single belt for kinematics belt synchronization 
class KinCfgBeltSync(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgBeltSync()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgBeltSync(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgBeltSync
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the belt (filled when reading; only used for writing with KinCfgBeltSyncAll. Otherwise the content is ignored)
    # KinCfgBeltSync
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # kinematics belt synchronization data, that defines the configuration for a single belt
    # KinCfgBeltSync
    def KinBeltSyncCfgData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgBeltSyncData import KinCfgBeltSyncData
            obj = KinCfgBeltSyncData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCfgBeltSyncStart(builder): builder.StartObject(2)
def Start(builder):
    return KinCfgBeltSyncStart(builder)
def KinCfgBeltSyncAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return KinCfgBeltSyncAddName(builder, name)
def KinCfgBeltSyncAddKinBeltSyncCfgData(builder, kinBeltSyncCfgData): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(kinBeltSyncCfgData), 0)
def AddKinBeltSyncCfgData(builder, kinBeltSyncCfgData):
    return KinCfgBeltSyncAddKinBeltSyncCfgData(builder, kinBeltSyncCfgData)
def KinCfgBeltSyncEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgBeltSyncEnd(builder)
import motion.core.fbtypes.KinCfgBeltSyncData
try:
    from typing import Optional
except:
    pass

class KinCfgBeltSyncT(object):

    # KinCfgBeltSyncT
    def __init__(self):
        self.name = None  # type: str
        self.kinBeltSyncCfgData = None  # type: Optional[motion.core.fbtypes.KinCfgBeltSyncData.KinCfgBeltSyncDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgBeltSync = KinCfgBeltSync()
        kinCfgBeltSync.Init(buf, pos)
        return cls.InitFromObj(kinCfgBeltSync)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgBeltSync):
        x = KinCfgBeltSyncT()
        x._UnPack(kinCfgBeltSync)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.kinBeltSyncCfgData == other.kinBeltSyncCfgData

    # KinCfgBeltSyncT
    def _UnPack(self, kinCfgBeltSync):
        if kinCfgBeltSync is None:
            return
        self.name = kinCfgBeltSync.Name()
        if kinCfgBeltSync.KinBeltSyncCfgData() is not None:
            self.kinBeltSyncCfgData = motion.core.fbtypes.KinCfgBeltSyncData.KinCfgBeltSyncDataT.InitFromObj(kinCfgBeltSync.KinBeltSyncCfgData())

    # KinCfgBeltSyncT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.kinBeltSyncCfgData is not None:
            kinBeltSyncCfgData = self.kinBeltSyncCfgData.Pack(builder)
        KinCfgBeltSyncStart(builder)
        if self.name is not None:
            KinCfgBeltSyncAddName(builder, name)
        if self.kinBeltSyncCfgData is not None:
            KinCfgBeltSyncAddKinBeltSyncCfgData(builder, kinBeltSyncCfgData)
        kinCfgBeltSync = KinCfgBeltSyncEnd(builder)
        return kinCfgBeltSync
