# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Master sync unit name to id response.
class MsuNameToIdResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MsuNameToIdResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMsuNameToIdResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MsuNameToIdResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Master sync unit id.
    # MsuNameToIdResponse
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Master sync unit name.
    # MsuNameToIdResponse
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MsuNameToIdResponseStart(builder): builder.StartObject(2)
def Start(builder):
    return MsuNameToIdResponseStart(builder)
def MsuNameToIdResponseAddId(builder, id): builder.PrependUint16Slot(0, id, 0)
def AddId(builder, id):
    return MsuNameToIdResponseAddId(builder, id)
def MsuNameToIdResponseAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return MsuNameToIdResponseAddName(builder, name)
def MsuNameToIdResponseEnd(builder): return builder.EndObject()
def End(builder):
    return MsuNameToIdResponseEnd(builder)

class MsuNameToIdResponseT(object):

    # MsuNameToIdResponseT
    def __init__(self):
        self.id = 0  # type: int
        self.name = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        msuNameToIdResponse = MsuNameToIdResponse()
        msuNameToIdResponse.Init(buf, pos)
        return cls.InitFromObj(msuNameToIdResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, msuNameToIdResponse):
        x = MsuNameToIdResponseT()
        x._UnPack(msuNameToIdResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.id == other.id and \
            self.name == other.name

    # MsuNameToIdResponseT
    def _UnPack(self, msuNameToIdResponse):
        if msuNameToIdResponse is None:
            return
        self.id = msuNameToIdResponse.Id()
        self.name = msuNameToIdResponse.Name()

    # MsuNameToIdResponseT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        MsuNameToIdResponseStart(builder)
        MsuNameToIdResponseAddId(builder, self.id)
        if self.name is not None:
            MsuNameToIdResponseAddName(builder, name)
        msuNameToIdResponse = MsuNameToIdResponseEnd(builder)
        return msuNameToIdResponse
