import * from "./math"

fn test_abs() {
    assert_eq!(abs(-5), 5, "abs(-5) should be 5");
    assert_eq!(abs(5), 5, "abs(5) should be 5");
    assert_eq!(abs(-3.14), 3.14, "abs(-3.14) should be 3.14");
    assert_eq!(abs(0), 0, "abs(0) should be 0");
}

fn test_sign() {
    assert_eq!(sign(10), 1, "sign(10) should be 1");
    assert_eq!(sign(0), 0, "sign(0) should be 0");
    assert_eq!(sign(-10), -1, "sign(-10) should be -1");
    assert_eq!(sign(0.0001), 1, "sign(small positive) should be 1");
}

fn test_clamp() {
    assert_eq!(clamp(3, 1, 5), 3, "clamp(middle)");
    assert_eq!(clamp(0, 1, 5), 1, "clamp(lower bound)");
    assert_eq!(clamp(6, 1, 5), 5, "clamp(upper bound)");
    assert_eq!(clamp(-3.5, -5.0, 5.0), -3.5, "clamp(negative range)");
}

fn test_min_max() {
    assert_eq!(min(3, 5), 3, "min(int)");
    assert_eq!(min(-2.5, -3.0), -3.0, "min(float)");
    assert_eq!(max(3, 5), 5, "max(int)");
    assert_eq!(max(-2.5, -3.0), -2.5, "max(float)");
}

fn test_round() {
    assert_eq!(round(3.3), 3.0, "round down");
    assert_eq!(round(3.5), 4.0, "round up");
    assert_eq!(round(-2.7), -3.0, "round negative");
    assert_eq!(round(0.4999), 0.0, "round edge");
}

fn test_floor_ceil_trunc() {
    assert_eq!(floor(3.9), 3.0, "floor positive");
    assert_eq!(floor(-2.1), -3.0, "floor negative");
    assert_eq!(ceil(2.1), 3.0, "ceil positive");
    assert_eq!(ceil(-1.9), -1.0, "ceil negative");
    assert_eq!(trunc(3.9), 3.0, "trunc positive");
    assert_eq!(trunc(-2.9), -2.0, "trunc negative");
}

fn test_fract() {
    assert_eq!(fract(3.14), 0.14, "fract positive");
    assert_eq!(fract(-2.7), -0.7, "fract negative");
    assert_eq!(fract(5.0), 0.0, "fract integer");
}

fn test_mod_rem() {
    assert_eq!(mod(7, 3), 1, "mod positive");
    assert_eq!(mod(-7, 3), 2, "mod negative");
    assert_eq!(rem(7, 3), 1, "rem positive");
    assert_eq!(rem(-7, 3), -1, "rem negative");
    assert_eq!(mod(5.5, 2.0), 1.5, "mod float");
}