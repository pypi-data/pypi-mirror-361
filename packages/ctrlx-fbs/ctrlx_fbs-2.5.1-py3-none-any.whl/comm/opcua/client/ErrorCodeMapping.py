# automatically generated by the FlatBuffers compiler, do not modify

# namespace: client

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ErrorCodeMapping(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ErrorCodeMapping()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsErrorCodeMapping(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ErrorCodeMapping
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ErrorCodeMapping
    def ListDlResultToUaStatusCode(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.client.DlResultToUaStatusCode import DlResultToUaStatusCode
            obj = DlResultToUaStatusCode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ErrorCodeMapping
    def ListDlResultToUaStatusCodeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ErrorCodeMapping
    def ListDlResultToUaStatusCodeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ErrorCodeMappingStart(builder): builder.StartObject(1)
def Start(builder):
    return ErrorCodeMappingStart(builder)
def ErrorCodeMappingAddListDlResultToUaStatusCode(builder, listDlResultToUaStatusCode): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(listDlResultToUaStatusCode), 0)
def AddListDlResultToUaStatusCode(builder, listDlResultToUaStatusCode):
    return ErrorCodeMappingAddListDlResultToUaStatusCode(builder, listDlResultToUaStatusCode)
def ErrorCodeMappingStartListDlResultToUaStatusCodeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartListDlResultToUaStatusCodeVector(builder, numElems):
    return ErrorCodeMappingStartListDlResultToUaStatusCodeVector(builder, numElems)
def ErrorCodeMappingEnd(builder): return builder.EndObject()
def End(builder):
    return ErrorCodeMappingEnd(builder)
import comm.opcua.client.DlResultToUaStatusCode
try:
    from typing import List
except:
    pass

class ErrorCodeMappingT(object):

    # ErrorCodeMappingT
    def __init__(self):
        self.listDlResultToUaStatusCode = None  # type: List[comm.opcua.client.DlResultToUaStatusCode.DlResultToUaStatusCodeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        errorCodeMapping = ErrorCodeMapping()
        errorCodeMapping.Init(buf, pos)
        return cls.InitFromObj(errorCodeMapping)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, errorCodeMapping):
        x = ErrorCodeMappingT()
        x._UnPack(errorCodeMapping)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.listDlResultToUaStatusCode == other.listDlResultToUaStatusCode

    # ErrorCodeMappingT
    def _UnPack(self, errorCodeMapping):
        if errorCodeMapping is None:
            return
        if not errorCodeMapping.ListDlResultToUaStatusCodeIsNone():
            self.listDlResultToUaStatusCode = []
            for i in range(errorCodeMapping.ListDlResultToUaStatusCodeLength()):
                if errorCodeMapping.ListDlResultToUaStatusCode(i) is None:
                    self.listDlResultToUaStatusCode.append(None)
                else:
                    dlResultToUaStatusCode_ = comm.opcua.client.DlResultToUaStatusCode.DlResultToUaStatusCodeT.InitFromObj(errorCodeMapping.ListDlResultToUaStatusCode(i))
                    self.listDlResultToUaStatusCode.append(dlResultToUaStatusCode_)

    # ErrorCodeMappingT
    def Pack(self, builder):
        if self.listDlResultToUaStatusCode is not None:
            listDlResultToUaStatusCodelist = []
            for i in range(len(self.listDlResultToUaStatusCode)):
                listDlResultToUaStatusCodelist.append(self.listDlResultToUaStatusCode[i].Pack(builder))
            ErrorCodeMappingStartListDlResultToUaStatusCodeVector(builder, len(self.listDlResultToUaStatusCode))
            for i in reversed(range(len(self.listDlResultToUaStatusCode))):
                builder.PrependUOffsetTRelative(listDlResultToUaStatusCodelist[i])
            listDlResultToUaStatusCode = builder.EndVector()
        ErrorCodeMappingStart(builder)
        if self.listDlResultToUaStatusCode is not None:
            ErrorCodeMappingAddListDlResultToUaStatusCode(builder, listDlResultToUaStatusCode)
        errorCodeMapping = ErrorCodeMappingEnd(builder)
        return errorCodeMapping
