# automatically generated by the FlatBuffers compiler, do not modify

# namespace: builtin

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArrayOfLocalizedText(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArrayOfLocalizedText()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArrayOfLocalizedText(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ArrayOfLocalizedText
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArrayOfLocalizedText
    def Array(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.builtin.LocalizedText import LocalizedText
            obj = LocalizedText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ArrayOfLocalizedText
    def ArrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArrayOfLocalizedText
    def ArrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ArrayOfLocalizedTextStart(builder): builder.StartObject(1)
def Start(builder):
    return ArrayOfLocalizedTextStart(builder)
def ArrayOfLocalizedTextAddArray(builder, array): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(array), 0)
def AddArray(builder, array):
    return ArrayOfLocalizedTextAddArray(builder, array)
def ArrayOfLocalizedTextStartArrayVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartArrayVector(builder, numElems):
    return ArrayOfLocalizedTextStartArrayVector(builder, numElems)
def ArrayOfLocalizedTextEnd(builder): return builder.EndObject()
def End(builder):
    return ArrayOfLocalizedTextEnd(builder)
import comm.opcua.builtin.LocalizedText
try:
    from typing import List
except:
    pass

class ArrayOfLocalizedTextT(object):

    # ArrayOfLocalizedTextT
    def __init__(self):
        self.array = None  # type: List[comm.opcua.builtin.LocalizedText.LocalizedTextT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        arrayOfLocalizedText = ArrayOfLocalizedText()
        arrayOfLocalizedText.Init(buf, pos)
        return cls.InitFromObj(arrayOfLocalizedText)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, arrayOfLocalizedText):
        x = ArrayOfLocalizedTextT()
        x._UnPack(arrayOfLocalizedText)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.array == other.array

    # ArrayOfLocalizedTextT
    def _UnPack(self, arrayOfLocalizedText):
        if arrayOfLocalizedText is None:
            return
        if not arrayOfLocalizedText.ArrayIsNone():
            self.array = []
            for i in range(arrayOfLocalizedText.ArrayLength()):
                if arrayOfLocalizedText.Array(i) is None:
                    self.array.append(None)
                else:
                    localizedText_ = comm.opcua.builtin.LocalizedText.LocalizedTextT.InitFromObj(arrayOfLocalizedText.Array(i))
                    self.array.append(localizedText_)

    # ArrayOfLocalizedTextT
    def Pack(self, builder):
        if self.array is not None:
            arraylist = []
            for i in range(len(self.array)):
                arraylist.append(self.array[i].Pack(builder))
            ArrayOfLocalizedTextStartArrayVector(builder, len(self.array))
            for i in reversed(range(len(self.array))):
                builder.PrependUOffsetTRelative(arraylist[i])
            array = builder.EndVector()
        ArrayOfLocalizedTextStart(builder)
        if self.array is not None:
            ArrayOfLocalizedTextAddArray(builder, array)
        arrayOfLocalizedText = ArrayOfLocalizedTextEnd(builder)
        return arrayOfLocalizedText
