# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class KeyValuePair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KeyValuePair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKeyValuePair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KeyValuePair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KeyValuePair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.QualifiedName import QualifiedName
            obj = QualifiedName()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KeyValuePair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.Variant import Variant
            obj = Variant()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KeyValuePairStart(builder): builder.StartObject(2)
def Start(builder):
    return KeyValuePairStart(builder)
def KeyValuePairAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def AddKey(builder, key):
    return KeyValuePairAddKey(builder, key)
def KeyValuePairAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return KeyValuePairAddValue(builder, value)
def KeyValuePairEnd(builder): return builder.EndObject()
def End(builder):
    return KeyValuePairEnd(builder)
import comm.opcua.builtin.QualifiedName
import comm.opcua.builtin.Variant
try:
    from typing import Optional
except:
    pass

class KeyValuePairT(object):

    # KeyValuePairT
    def __init__(self):
        self.key = None  # type: Optional[comm.opcua.builtin.QualifiedName.QualifiedNameT]
        self.value = None  # type: Optional[comm.opcua.builtin.Variant.VariantT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        keyValuePair = KeyValuePair()
        keyValuePair.Init(buf, pos)
        return cls.InitFromObj(keyValuePair)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, keyValuePair):
        x = KeyValuePairT()
        x._UnPack(keyValuePair)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.key == other.key and \
            self.value == other.value

    # KeyValuePairT
    def _UnPack(self, keyValuePair):
        if keyValuePair is None:
            return
        if keyValuePair.Key() is not None:
            self.key = comm.opcua.builtin.QualifiedName.QualifiedNameT.InitFromObj(keyValuePair.Key())
        if keyValuePair.Value() is not None:
            self.value = comm.opcua.builtin.Variant.VariantT.InitFromObj(keyValuePair.Value())

    # KeyValuePairT
    def Pack(self, builder):
        if self.key is not None:
            key = self.key.Pack(builder)
        if self.value is not None:
            value = self.value.Pack(builder)
        KeyValuePairStart(builder)
        if self.key is not None:
            KeyValuePairAddKey(builder, key)
        if self.value is not None:
            KeyValuePairAddValue(builder, value)
        keyValuePair = KeyValuePairEnd(builder)
        return keyValuePair
