# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20250708
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from lexmachina.models.itc_document_entity_data import ITCDocumentEntityData
from typing import Optional, Set
from typing_extensions import Self

class ITCDocument(BaseModel):
    """
    ITCDocument
    """ # noqa: E501
    usitc_document_id: StrictInt = Field(alias="usitcDocumentId")
    var_date: date = Field(alias="date")
    title: Optional[StrictStr]
    type: StrictStr
    filed_by: List[ITCDocumentEntityData] = Field(alias="filedBy")
    firm: List[ITCDocumentEntityData]
    on_behalf_of: List[ITCDocumentEntityData] = Field(alias="onBehalfOf")
    __properties: ClassVar[List[str]] = ["usitcDocumentId", "date", "title", "type", "filedBy", "firm", "onBehalfOf"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ITCDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filed_by (list)
        _items = []
        if self.filed_by:
            for _item_filed_by in self.filed_by:
                if _item_filed_by:
                    _items.append(_item_filed_by.to_dict())
            _dict['filedBy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in firm (list)
        _items = []
        if self.firm:
            for _item_firm in self.firm:
                if _item_firm:
                    _items.append(_item_firm.to_dict())
            _dict['firm'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in on_behalf_of (list)
        _items = []
        if self.on_behalf_of:
            for _item_on_behalf_of in self.on_behalf_of:
                if _item_on_behalf_of:
                    _items.append(_item_on_behalf_of.to_dict())
            _dict['onBehalfOf'] = _items
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ITCDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "usitcDocumentId": obj.get("usitcDocumentId"),
            "date": obj.get("date"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "filedBy": [ITCDocumentEntityData.from_dict(_item) for _item in obj["filedBy"]] if obj.get("filedBy") is not None else None,
            "firm": [ITCDocumentEntityData.from_dict(_item) for _item in obj["firm"]] if obj.get("firm") is not None else None,
            "onBehalfOf": [ITCDocumentEntityData.from_dict(_item) for _item in obj["onBehalfOf"]] if obj.get("onBehalfOf") is not None else None
        })
        return _obj


