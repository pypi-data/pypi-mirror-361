# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the collision avoidance function
class CollisionAvoidance(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CollisionAvoidance()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCollisionAvoidance(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CollisionAvoidance
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CollisionAvoidance
    def AxsName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CollisionAvoidance
    def Enable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CollisionAvoidance
    def Params(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.collision_avoidance.fbtypes.GetCollisionGuardStateParams import GetCollisionGuardStateParams
            obj = GetCollisionGuardStateParams()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def CollisionAvoidanceStart(builder): builder.StartObject(3)
def Start(builder):
    return CollisionAvoidanceStart(builder)
def CollisionAvoidanceAddAxsName(builder, axsName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsName), 0)
def AddAxsName(builder, axsName):
    return CollisionAvoidanceAddAxsName(builder, axsName)
def CollisionAvoidanceAddEnable(builder, enable): builder.PrependBoolSlot(1, enable, 0)
def AddEnable(builder, enable):
    return CollisionAvoidanceAddEnable(builder, enable)
def CollisionAvoidanceAddParams(builder, params): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(params), 0)
def AddParams(builder, params):
    return CollisionAvoidanceAddParams(builder, params)
def CollisionAvoidanceEnd(builder): return builder.EndObject()
def End(builder):
    return CollisionAvoidanceEnd(builder)
import motion.collision_avoidance.fbtypes.GetCollisionGuardStateParams
try:
    from typing import Optional
except:
    pass

class CollisionAvoidanceT(object):

    # CollisionAvoidanceT
    def __init__(self):
        self.axsName = None  # type: str
        self.enable = False  # type: bool
        self.params = None  # type: Optional[motion.collision_avoidance.fbtypes.GetCollisionGuardStateParams.GetCollisionGuardStateParamsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        collisionAvoidance = CollisionAvoidance()
        collisionAvoidance.Init(buf, pos)
        return cls.InitFromObj(collisionAvoidance)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, collisionAvoidance):
        x = CollisionAvoidanceT()
        x._UnPack(collisionAvoidance)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.axsName == other.axsName and \
            self.enable == other.enable and \
            self.params == other.params

    # CollisionAvoidanceT
    def _UnPack(self, collisionAvoidance):
        if collisionAvoidance is None:
            return
        self.axsName = collisionAvoidance.AxsName()
        self.enable = collisionAvoidance.Enable()
        if collisionAvoidance.Params() is not None:
            self.params = motion.collision_avoidance.fbtypes.GetCollisionGuardStateParams.GetCollisionGuardStateParamsT.InitFromObj(collisionAvoidance.Params())

    # CollisionAvoidanceT
    def Pack(self, builder):
        if self.axsName is not None:
            axsName = builder.CreateString(self.axsName)
        if self.params is not None:
            params = self.params.Pack(builder)
        CollisionAvoidanceStart(builder)
        if self.axsName is not None:
            CollisionAvoidanceAddAxsName(builder, axsName)
        CollisionAvoidanceAddEnable(builder, self.enable)
        if self.params is not None:
            CollisionAvoidanceAddParams(builder, params)
        collisionAvoidance = CollisionAvoidanceEnd(builder)
        return collisionAvoidance
