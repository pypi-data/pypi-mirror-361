:mod:`summit.multiview_platform.monoview_classifiers.random_scm`
================================================================

.. py:module:: summit.multiview_platform.monoview_classifiers.random_scm


random_scm
----------


.. py:data:: classifier_class_name
   :value: 'ScmBagging'


.. py:data:: MAX_INT

.. py:class:: ScmBagging(n_estimators=100, max_samples=0.5, max_features=0.5, max_rules=10, p_options=[1.0], model_type='conjunction', random_state=None)



   A Bagging classifier. for SetCoveringMachineClassifier()
   The estimators are built on subsets of both samples
   and features.
   :param n_estimators: The number of estimators in the ensemble.
   :type n_estimators: int, default=10
   :param max_samples: The number of samples to draw from X to train each estimator with
                       replacement.
                       - If int, then draw `max_samples` samples.
                       - If float, then draw `max_samples * X.shape[0]` samples.
   :type max_samples: int or float, default=1.0
   :param max_features: The number of features to draw from X to train each estimator (
                        without replacement.
                        - If int, then draw `max_features` features.
                        - If float, then draw `max_features * X.shape[1]` features.
   :type max_features: int or float, default=1.0
   :param p_options: The estimators will be fitted with values of p found in p_options
                     let k be k = n_estimators/len(p_options),
                     the k first estimators will have p=p_options[0],
                     the next k estimators will have p=p_options[1] and so on...
   :type p_options: list of float with len =< n_estimators, default=[1.0]
   :param random_state: Controls the random resampling of the original dataset
                        (sample wise and feature wise).
                        If the  estimator accepts a `random_state` attribute, a different
                        seed is generated for each instance in the ensemble.
                        Pass an int for reproducible output across multiple function calls.
                        See :term:`Glossary <random_state>`.
   :type random_state: int or RandomState, default=None

   .. attribute:: n_features_

      The number of features when :meth:`fit` is performed.

      :type: int

   .. attribute:: estimators_

      The collection of fitted  estimators.

      :type: list of estimators

   .. attribute:: estim_features

      The subset of drawn features for each  estimator.

      :type: list of arrays

   .. rubric:: Examples

   >>> @TODO

   .. rubric:: References

   .. [1] L. Breiman, "Pasting small votes for classification in large
          databases and on-line", Machine Learning, 36(1), 85-103, 1999.
   .. [2] G. Louppe and P. Geurts, "Ensembles on Random Patches", Machine
          Learning and Knowledge Discovery in Databases, 346-361, 2012.


   .. py:attribute:: param_names
      :value: ['n_estimators', 'max_rules', 'max_samples', 'max_features', 'model_type', 'p_options', 'random_state']



   .. py:attribute:: classed_params
      :value: []



   .. py:attribute:: distribs


   .. py:attribute:: weird_strings


   .. py:method:: set_params(p_options=[0.316], **kwargs)

      Set the parameters of this estimator.

      The method works on simple estimators as well as on nested objects
      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have
      parameters of the form ``<component>__<parameter>`` so that it's
      possible to update each component of a nested object.

      :param \*\*params: Estimator parameters.
      :type \*\*params: dict

      :returns: **self** -- Estimator instance.
      :rtype: estimator instance



   .. py:method:: get_interpretation(directory, base_file_name, y_test, feature_ids, multi_class=False)

      Base method that returns an empty string if there is not interpretation
      method in the classifier's module



