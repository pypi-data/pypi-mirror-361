# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Configuration of the units in the flexprofile
class CfgFlexProfileUnits(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CfgFlexProfileUnits()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCfgFlexProfileUnits(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CfgFlexProfileUnits
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # position unit of the master axis
    # CfgFlexProfileUnits
    def PosUnitMaster(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # velocity unit of the master axis
    # CfgFlexProfileUnits
    def VelUnitMaster(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # position unit of the slave axis
    # CfgFlexProfileUnits
    def PosUnitSlave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # velocity unit of the slave axis
    # CfgFlexProfileUnits
    def VelUnitSlave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # acceleration of the slave axis
    # CfgFlexProfileUnits
    def AccUnitSlave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # jerk unit of the slave axis
    # CfgFlexProfileUnits
    def JrkUnitSlave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # units should be considered
    # CfgFlexProfileUnits
    def ActivateUnits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CfgFlexProfileUnitsStart(builder): builder.StartObject(7)
def Start(builder):
    return CfgFlexProfileUnitsStart(builder)
def CfgFlexProfileUnitsAddPosUnitMaster(builder, posUnitMaster): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(posUnitMaster), 0)
def AddPosUnitMaster(builder, posUnitMaster):
    return CfgFlexProfileUnitsAddPosUnitMaster(builder, posUnitMaster)
def CfgFlexProfileUnitsAddVelUnitMaster(builder, velUnitMaster): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(velUnitMaster), 0)
def AddVelUnitMaster(builder, velUnitMaster):
    return CfgFlexProfileUnitsAddVelUnitMaster(builder, velUnitMaster)
def CfgFlexProfileUnitsAddPosUnitSlave(builder, posUnitSlave): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(posUnitSlave), 0)
def AddPosUnitSlave(builder, posUnitSlave):
    return CfgFlexProfileUnitsAddPosUnitSlave(builder, posUnitSlave)
def CfgFlexProfileUnitsAddVelUnitSlave(builder, velUnitSlave): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(velUnitSlave), 0)
def AddVelUnitSlave(builder, velUnitSlave):
    return CfgFlexProfileUnitsAddVelUnitSlave(builder, velUnitSlave)
def CfgFlexProfileUnitsAddAccUnitSlave(builder, accUnitSlave): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(accUnitSlave), 0)
def AddAccUnitSlave(builder, accUnitSlave):
    return CfgFlexProfileUnitsAddAccUnitSlave(builder, accUnitSlave)
def CfgFlexProfileUnitsAddJrkUnitSlave(builder, jrkUnitSlave): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(jrkUnitSlave), 0)
def AddJrkUnitSlave(builder, jrkUnitSlave):
    return CfgFlexProfileUnitsAddJrkUnitSlave(builder, jrkUnitSlave)
def CfgFlexProfileUnitsAddActivateUnits(builder, activateUnits): builder.PrependBoolSlot(6, activateUnits, 0)
def AddActivateUnits(builder, activateUnits):
    return CfgFlexProfileUnitsAddActivateUnits(builder, activateUnits)
def CfgFlexProfileUnitsEnd(builder): return builder.EndObject()
def End(builder):
    return CfgFlexProfileUnitsEnd(builder)

class CfgFlexProfileUnitsT(object):

    # CfgFlexProfileUnitsT
    def __init__(self):
        self.posUnitMaster = None  # type: str
        self.velUnitMaster = None  # type: str
        self.posUnitSlave = None  # type: str
        self.velUnitSlave = None  # type: str
        self.accUnitSlave = None  # type: str
        self.jrkUnitSlave = None  # type: str
        self.activateUnits = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cfgFlexProfileUnits = CfgFlexProfileUnits()
        cfgFlexProfileUnits.Init(buf, pos)
        return cls.InitFromObj(cfgFlexProfileUnits)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cfgFlexProfileUnits):
        x = CfgFlexProfileUnitsT()
        x._UnPack(cfgFlexProfileUnits)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.posUnitMaster == other.posUnitMaster and \
            self.velUnitMaster == other.velUnitMaster and \
            self.posUnitSlave == other.posUnitSlave and \
            self.velUnitSlave == other.velUnitSlave and \
            self.accUnitSlave == other.accUnitSlave and \
            self.jrkUnitSlave == other.jrkUnitSlave and \
            self.activateUnits == other.activateUnits

    # CfgFlexProfileUnitsT
    def _UnPack(self, cfgFlexProfileUnits):
        if cfgFlexProfileUnits is None:
            return
        self.posUnitMaster = cfgFlexProfileUnits.PosUnitMaster()
        self.velUnitMaster = cfgFlexProfileUnits.VelUnitMaster()
        self.posUnitSlave = cfgFlexProfileUnits.PosUnitSlave()
        self.velUnitSlave = cfgFlexProfileUnits.VelUnitSlave()
        self.accUnitSlave = cfgFlexProfileUnits.AccUnitSlave()
        self.jrkUnitSlave = cfgFlexProfileUnits.JrkUnitSlave()
        self.activateUnits = cfgFlexProfileUnits.ActivateUnits()

    # CfgFlexProfileUnitsT
    def Pack(self, builder):
        if self.posUnitMaster is not None:
            posUnitMaster = builder.CreateString(self.posUnitMaster)
        if self.velUnitMaster is not None:
            velUnitMaster = builder.CreateString(self.velUnitMaster)
        if self.posUnitSlave is not None:
            posUnitSlave = builder.CreateString(self.posUnitSlave)
        if self.velUnitSlave is not None:
            velUnitSlave = builder.CreateString(self.velUnitSlave)
        if self.accUnitSlave is not None:
            accUnitSlave = builder.CreateString(self.accUnitSlave)
        if self.jrkUnitSlave is not None:
            jrkUnitSlave = builder.CreateString(self.jrkUnitSlave)
        CfgFlexProfileUnitsStart(builder)
        if self.posUnitMaster is not None:
            CfgFlexProfileUnitsAddPosUnitMaster(builder, posUnitMaster)
        if self.velUnitMaster is not None:
            CfgFlexProfileUnitsAddVelUnitMaster(builder, velUnitMaster)
        if self.posUnitSlave is not None:
            CfgFlexProfileUnitsAddPosUnitSlave(builder, posUnitSlave)
        if self.velUnitSlave is not None:
            CfgFlexProfileUnitsAddVelUnitSlave(builder, velUnitSlave)
        if self.accUnitSlave is not None:
            CfgFlexProfileUnitsAddAccUnitSlave(builder, accUnitSlave)
        if self.jrkUnitSlave is not None:
            CfgFlexProfileUnitsAddJrkUnitSlave(builder, jrkUnitSlave)
        CfgFlexProfileUnitsAddActivateUnits(builder, self.activateUnits)
        cfgFlexProfileUnits = CfgFlexProfileUnitsEnd(builder)
        return cfgFlexProfileUnits
