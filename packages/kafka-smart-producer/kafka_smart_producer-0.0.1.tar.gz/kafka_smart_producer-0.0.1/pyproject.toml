[project]
name = "kafka-smart-producer"
version = "0.0.1"
description = "Intelligent Kafka producer with real-time, lag-aware partition selection"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "confluent-kafka>=2.0.0",
    "redis>=6.1.1",
    "cachetools>=5.0.0",
]
authors = [
    {name = "Pham Nam", email = "namph.data@gmail.com"},
]
keywords = ["kafka", "producer", "smart-routing", "partition-selection", "consumer-lag"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]

[project.optional-dependencies]
redis = ["redis>=4.0.0"]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/namphv/kafka-smart-producer"
Repository = "https://github.com/namphv/kafka-smart-producer"
Issues = "https://github.com/namphv/kafka-smart-producer/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/kafka_smart_producer"]

[tool.black]
line-length = 88

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit security
    "N",  # pep8-naming
]
ignore = [
    "S101", # assert used (OK in tests)
    "S311", # random module (OK for non-crypto use)
]

[tool.ruff.lint.per-file-ignores]
"examples/*" = ["E501"]  # Allow long lines in examples

[tool.ruff]
line-length = 88

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["kafka_smart_producer"]

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D105", "D107"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[dependency-groups]
dev = [
    "bandit>=1.7.10",
    "black>=24.8.0",
    "isort>=5.13.2",
    "mypy>=1.14.1",
    "pre-commit>=3.5.0",
    "pydocstyle>=6.3.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.24.0",
    "ruff>=0.12.2",
    "types-cachetools>=5.0.0",
]
