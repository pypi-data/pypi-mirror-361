# automatically generated by the FlatBuffers compiler, do not modify

# namespace: device

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SubDeviceDetails(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SubDeviceDetails()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSubDeviceDetails(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SubDeviceDetails
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SubDeviceDetails
    def Driver(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SubDeviceDetails
    def DriverProperties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.drive.device.Property import Property
            obj = Property()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SubDeviceDetails
    def DriverPropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SubDeviceDetails
    def DriverPropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # SubDeviceDetails
    def LastSeen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # SubDeviceDetails
    def LastSeenParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # SubDeviceDetails
    def LastSeenBrowse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # SubDeviceDetails
    def LastSeenFile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # SubDeviceDetails
    def LastAccess(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # SubDeviceDetails
    def LastAccessParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # SubDeviceDetails
    def LastAccessFile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def SubDeviceDetailsStart(builder): builder.StartObject(9)
def Start(builder):
    return SubDeviceDetailsStart(builder)
def SubDeviceDetailsAddDriver(builder, driver): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(driver), 0)
def AddDriver(builder, driver):
    return SubDeviceDetailsAddDriver(builder, driver)
def SubDeviceDetailsAddDriverProperties(builder, driverProperties): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(driverProperties), 0)
def AddDriverProperties(builder, driverProperties):
    return SubDeviceDetailsAddDriverProperties(builder, driverProperties)
def SubDeviceDetailsStartDriverPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDriverPropertiesVector(builder, numElems):
    return SubDeviceDetailsStartDriverPropertiesVector(builder, numElems)
def SubDeviceDetailsAddLastSeen(builder, lastSeen): builder.PrependUint64Slot(2, lastSeen, 0)
def AddLastSeen(builder, lastSeen):
    return SubDeviceDetailsAddLastSeen(builder, lastSeen)
def SubDeviceDetailsAddLastSeenParam(builder, lastSeenParam): builder.PrependUint64Slot(3, lastSeenParam, 0)
def AddLastSeenParam(builder, lastSeenParam):
    return SubDeviceDetailsAddLastSeenParam(builder, lastSeenParam)
def SubDeviceDetailsAddLastSeenBrowse(builder, lastSeenBrowse): builder.PrependUint64Slot(4, lastSeenBrowse, 0)
def AddLastSeenBrowse(builder, lastSeenBrowse):
    return SubDeviceDetailsAddLastSeenBrowse(builder, lastSeenBrowse)
def SubDeviceDetailsAddLastSeenFile(builder, lastSeenFile): builder.PrependUint64Slot(5, lastSeenFile, 0)
def AddLastSeenFile(builder, lastSeenFile):
    return SubDeviceDetailsAddLastSeenFile(builder, lastSeenFile)
def SubDeviceDetailsAddLastAccess(builder, lastAccess): builder.PrependUint64Slot(6, lastAccess, 0)
def AddLastAccess(builder, lastAccess):
    return SubDeviceDetailsAddLastAccess(builder, lastAccess)
def SubDeviceDetailsAddLastAccessParam(builder, lastAccessParam): builder.PrependUint64Slot(7, lastAccessParam, 0)
def AddLastAccessParam(builder, lastAccessParam):
    return SubDeviceDetailsAddLastAccessParam(builder, lastAccessParam)
def SubDeviceDetailsAddLastAccessFile(builder, lastAccessFile): builder.PrependUint64Slot(8, lastAccessFile, 0)
def AddLastAccessFile(builder, lastAccessFile):
    return SubDeviceDetailsAddLastAccessFile(builder, lastAccessFile)
def SubDeviceDetailsEnd(builder): return builder.EndObject()
def End(builder):
    return SubDeviceDetailsEnd(builder)
import comm.drive.device.Property
try:
    from typing import List
except:
    pass

class SubDeviceDetailsT(object):

    # SubDeviceDetailsT
    def __init__(self):
        self.driver = None  # type: str
        self.driverProperties = None  # type: List[comm.drive.device.Property.PropertyT]
        self.lastSeen = 0  # type: int
        self.lastSeenParam = 0  # type: int
        self.lastSeenBrowse = 0  # type: int
        self.lastSeenFile = 0  # type: int
        self.lastAccess = 0  # type: int
        self.lastAccessParam = 0  # type: int
        self.lastAccessFile = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        subDeviceDetails = SubDeviceDetails()
        subDeviceDetails.Init(buf, pos)
        return cls.InitFromObj(subDeviceDetails)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, subDeviceDetails):
        x = SubDeviceDetailsT()
        x._UnPack(subDeviceDetails)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.driver == other.driver and \
            self.driverProperties == other.driverProperties and \
            self.lastSeen == other.lastSeen and \
            self.lastSeenParam == other.lastSeenParam and \
            self.lastSeenBrowse == other.lastSeenBrowse and \
            self.lastSeenFile == other.lastSeenFile and \
            self.lastAccess == other.lastAccess and \
            self.lastAccessParam == other.lastAccessParam and \
            self.lastAccessFile == other.lastAccessFile

    # SubDeviceDetailsT
    def _UnPack(self, subDeviceDetails):
        if subDeviceDetails is None:
            return
        self.driver = subDeviceDetails.Driver()
        if not subDeviceDetails.DriverPropertiesIsNone():
            self.driverProperties = []
            for i in range(subDeviceDetails.DriverPropertiesLength()):
                if subDeviceDetails.DriverProperties(i) is None:
                    self.driverProperties.append(None)
                else:
                    property_ = comm.drive.device.Property.PropertyT.InitFromObj(subDeviceDetails.DriverProperties(i))
                    self.driverProperties.append(property_)
        self.lastSeen = subDeviceDetails.LastSeen()
        self.lastSeenParam = subDeviceDetails.LastSeenParam()
        self.lastSeenBrowse = subDeviceDetails.LastSeenBrowse()
        self.lastSeenFile = subDeviceDetails.LastSeenFile()
        self.lastAccess = subDeviceDetails.LastAccess()
        self.lastAccessParam = subDeviceDetails.LastAccessParam()
        self.lastAccessFile = subDeviceDetails.LastAccessFile()

    # SubDeviceDetailsT
    def Pack(self, builder):
        if self.driver is not None:
            driver = builder.CreateString(self.driver)
        if self.driverProperties is not None:
            driverPropertieslist = []
            for i in range(len(self.driverProperties)):
                driverPropertieslist.append(self.driverProperties[i].Pack(builder))
            SubDeviceDetailsStartDriverPropertiesVector(builder, len(self.driverProperties))
            for i in reversed(range(len(self.driverProperties))):
                builder.PrependUOffsetTRelative(driverPropertieslist[i])
            driverProperties = builder.EndVector()
        SubDeviceDetailsStart(builder)
        if self.driver is not None:
            SubDeviceDetailsAddDriver(builder, driver)
        if self.driverProperties is not None:
            SubDeviceDetailsAddDriverProperties(builder, driverProperties)
        SubDeviceDetailsAddLastSeen(builder, self.lastSeen)
        SubDeviceDetailsAddLastSeenParam(builder, self.lastSeenParam)
        SubDeviceDetailsAddLastSeenBrowse(builder, self.lastSeenBrowse)
        SubDeviceDetailsAddLastSeenFile(builder, self.lastSeenFile)
        SubDeviceDetailsAddLastAccess(builder, self.lastAccess)
        SubDeviceDetailsAddLastAccessParam(builder, self.lastAccessParam)
        SubDeviceDetailsAddLastAccessFile(builder, self.lastAccessFile)
        subDeviceDetails = SubDeviceDetailsEnd(builder)
        return subDeviceDetails
