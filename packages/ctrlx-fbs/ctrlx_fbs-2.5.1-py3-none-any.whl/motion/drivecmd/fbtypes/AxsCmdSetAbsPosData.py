# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis position commands
class AxsCmdSetAbsPosData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdSetAbsPosData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdSetAbsPosData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdSetAbsPosData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # buffered type for generic command
    # AxsCmdSetAbsPosData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # commanded target position (or increment for relative position command)
    # AxsCmdSetAbsPosData
    def AxsPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def AxsCmdSetAbsPosDataStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCmdSetAbsPosDataStart(builder)
def AxsCmdSetAbsPosDataAddBuffered(builder, buffered): builder.PrependBoolSlot(0, buffered, 0)
def AddBuffered(builder, buffered):
    return AxsCmdSetAbsPosDataAddBuffered(builder, buffered)
def AxsCmdSetAbsPosDataAddAxsPos(builder, axsPos): builder.PrependFloat64Slot(1, axsPos, 0.0)
def AddAxsPos(builder, axsPos):
    return AxsCmdSetAbsPosDataAddAxsPos(builder, axsPos)
def AxsCmdSetAbsPosDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdSetAbsPosDataEnd(builder)

class AxsCmdSetAbsPosDataT(object):

    # AxsCmdSetAbsPosDataT
    def __init__(self):
        self.buffered = False  # type: bool
        self.axsPos = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdSetAbsPosData = AxsCmdSetAbsPosData()
        axsCmdSetAbsPosData.Init(buf, pos)
        return cls.InitFromObj(axsCmdSetAbsPosData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdSetAbsPosData):
        x = AxsCmdSetAbsPosDataT()
        x._UnPack(axsCmdSetAbsPosData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.buffered == other.buffered and \
            self.axsPos == other.axsPos

    # AxsCmdSetAbsPosDataT
    def _UnPack(self, axsCmdSetAbsPosData):
        if axsCmdSetAbsPosData is None:
            return
        self.buffered = axsCmdSetAbsPosData.Buffered()
        self.axsPos = axsCmdSetAbsPosData.AxsPos()

    # AxsCmdSetAbsPosDataT
    def Pack(self, builder):
        AxsCmdSetAbsPosDataStart(builder)
        AxsCmdSetAbsPosDataAddBuffered(builder, self.buffered)
        AxsCmdSetAbsPosDataAddAxsPos(builder, self.axsPos)
        axsCmdSetAbsPosData = AxsCmdSetAbsPosDataEnd(builder)
        return axsCmdSetAbsPosData
