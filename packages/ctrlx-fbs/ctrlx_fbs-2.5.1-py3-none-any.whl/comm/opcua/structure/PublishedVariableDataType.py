# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PublishedVariableDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PublishedVariableDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPublishedVariableDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PublishedVariableDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PublishedVariableDataType
    def PublishedVariable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.NodeId import NodeId
            obj = NodeId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PublishedVariableDataType
    def AttributeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PublishedVariableDataType
    def SamplingIntervalHint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # PublishedVariableDataType
    def DeadbandType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PublishedVariableDataType
    def DeadbandValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # PublishedVariableDataType
    def IndexRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PublishedVariableDataType
    def SubstituteValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.Variant import Variant
            obj = Variant()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PublishedVariableDataType
    def MetaDataProperties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.builtin.QualifiedName import QualifiedName
            obj = QualifiedName()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PublishedVariableDataType
    def MetaDataPropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PublishedVariableDataType
    def MetaDataPropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def PublishedVariableDataTypeStart(builder): builder.StartObject(8)
def Start(builder):
    return PublishedVariableDataTypeStart(builder)
def PublishedVariableDataTypeAddPublishedVariable(builder, publishedVariable): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(publishedVariable), 0)
def AddPublishedVariable(builder, publishedVariable):
    return PublishedVariableDataTypeAddPublishedVariable(builder, publishedVariable)
def PublishedVariableDataTypeAddAttributeId(builder, attributeId): builder.PrependUint32Slot(1, attributeId, 0)
def AddAttributeId(builder, attributeId):
    return PublishedVariableDataTypeAddAttributeId(builder, attributeId)
def PublishedVariableDataTypeAddSamplingIntervalHint(builder, samplingIntervalHint): builder.PrependFloat64Slot(2, samplingIntervalHint, 0.0)
def AddSamplingIntervalHint(builder, samplingIntervalHint):
    return PublishedVariableDataTypeAddSamplingIntervalHint(builder, samplingIntervalHint)
def PublishedVariableDataTypeAddDeadbandType(builder, deadbandType): builder.PrependUint32Slot(3, deadbandType, 0)
def AddDeadbandType(builder, deadbandType):
    return PublishedVariableDataTypeAddDeadbandType(builder, deadbandType)
def PublishedVariableDataTypeAddDeadbandValue(builder, deadbandValue): builder.PrependFloat64Slot(4, deadbandValue, 0.0)
def AddDeadbandValue(builder, deadbandValue):
    return PublishedVariableDataTypeAddDeadbandValue(builder, deadbandValue)
def PublishedVariableDataTypeAddIndexRange(builder, indexRange): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(indexRange), 0)
def AddIndexRange(builder, indexRange):
    return PublishedVariableDataTypeAddIndexRange(builder, indexRange)
def PublishedVariableDataTypeAddSubstituteValue(builder, substituteValue): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(substituteValue), 0)
def AddSubstituteValue(builder, substituteValue):
    return PublishedVariableDataTypeAddSubstituteValue(builder, substituteValue)
def PublishedVariableDataTypeAddMetaDataProperties(builder, metaDataProperties): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(metaDataProperties), 0)
def AddMetaDataProperties(builder, metaDataProperties):
    return PublishedVariableDataTypeAddMetaDataProperties(builder, metaDataProperties)
def PublishedVariableDataTypeStartMetaDataPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMetaDataPropertiesVector(builder, numElems):
    return PublishedVariableDataTypeStartMetaDataPropertiesVector(builder, numElems)
def PublishedVariableDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return PublishedVariableDataTypeEnd(builder)
import comm.opcua.builtin.NodeId
import comm.opcua.builtin.QualifiedName
import comm.opcua.builtin.Variant
try:
    from typing import List, Optional
except:
    pass

class PublishedVariableDataTypeT(object):

    # PublishedVariableDataTypeT
    def __init__(self):
        self.publishedVariable = None  # type: Optional[comm.opcua.builtin.NodeId.NodeIdT]
        self.attributeId = 0  # type: int
        self.samplingIntervalHint = 0.0  # type: float
        self.deadbandType = 0  # type: int
        self.deadbandValue = 0.0  # type: float
        self.indexRange = None  # type: str
        self.substituteValue = None  # type: Optional[comm.opcua.builtin.Variant.VariantT]
        self.metaDataProperties = None  # type: List[comm.opcua.builtin.QualifiedName.QualifiedNameT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        publishedVariableDataType = PublishedVariableDataType()
        publishedVariableDataType.Init(buf, pos)
        return cls.InitFromObj(publishedVariableDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, publishedVariableDataType):
        x = PublishedVariableDataTypeT()
        x._UnPack(publishedVariableDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.publishedVariable == other.publishedVariable and \
            self.attributeId == other.attributeId and \
            self.samplingIntervalHint == other.samplingIntervalHint and \
            self.deadbandType == other.deadbandType and \
            self.deadbandValue == other.deadbandValue and \
            self.indexRange == other.indexRange and \
            self.substituteValue == other.substituteValue and \
            self.metaDataProperties == other.metaDataProperties

    # PublishedVariableDataTypeT
    def _UnPack(self, publishedVariableDataType):
        if publishedVariableDataType is None:
            return
        if publishedVariableDataType.PublishedVariable() is not None:
            self.publishedVariable = comm.opcua.builtin.NodeId.NodeIdT.InitFromObj(publishedVariableDataType.PublishedVariable())
        self.attributeId = publishedVariableDataType.AttributeId()
        self.samplingIntervalHint = publishedVariableDataType.SamplingIntervalHint()
        self.deadbandType = publishedVariableDataType.DeadbandType()
        self.deadbandValue = publishedVariableDataType.DeadbandValue()
        self.indexRange = publishedVariableDataType.IndexRange()
        if publishedVariableDataType.SubstituteValue() is not None:
            self.substituteValue = comm.opcua.builtin.Variant.VariantT.InitFromObj(publishedVariableDataType.SubstituteValue())
        if not publishedVariableDataType.MetaDataPropertiesIsNone():
            self.metaDataProperties = []
            for i in range(publishedVariableDataType.MetaDataPropertiesLength()):
                if publishedVariableDataType.MetaDataProperties(i) is None:
                    self.metaDataProperties.append(None)
                else:
                    qualifiedName_ = comm.opcua.builtin.QualifiedName.QualifiedNameT.InitFromObj(publishedVariableDataType.MetaDataProperties(i))
                    self.metaDataProperties.append(qualifiedName_)

    # PublishedVariableDataTypeT
    def Pack(self, builder):
        if self.publishedVariable is not None:
            publishedVariable = self.publishedVariable.Pack(builder)
        if self.indexRange is not None:
            indexRange = builder.CreateString(self.indexRange)
        if self.substituteValue is not None:
            substituteValue = self.substituteValue.Pack(builder)
        if self.metaDataProperties is not None:
            metaDataPropertieslist = []
            for i in range(len(self.metaDataProperties)):
                metaDataPropertieslist.append(self.metaDataProperties[i].Pack(builder))
            PublishedVariableDataTypeStartMetaDataPropertiesVector(builder, len(self.metaDataProperties))
            for i in reversed(range(len(self.metaDataProperties))):
                builder.PrependUOffsetTRelative(metaDataPropertieslist[i])
            metaDataProperties = builder.EndVector()
        PublishedVariableDataTypeStart(builder)
        if self.publishedVariable is not None:
            PublishedVariableDataTypeAddPublishedVariable(builder, publishedVariable)
        PublishedVariableDataTypeAddAttributeId(builder, self.attributeId)
        PublishedVariableDataTypeAddSamplingIntervalHint(builder, self.samplingIntervalHint)
        PublishedVariableDataTypeAddDeadbandType(builder, self.deadbandType)
        PublishedVariableDataTypeAddDeadbandValue(builder, self.deadbandValue)
        if self.indexRange is not None:
            PublishedVariableDataTypeAddIndexRange(builder, indexRange)
        if self.substituteValue is not None:
            PublishedVariableDataTypeAddSubstituteValue(builder, substituteValue)
        if self.metaDataProperties is not None:
            PublishedVariableDataTypeAddMetaDataProperties(builder, metaDataProperties)
        publishedVariableDataType = PublishedVariableDataTypeEnd(builder)
        return publishedVariableDataType
