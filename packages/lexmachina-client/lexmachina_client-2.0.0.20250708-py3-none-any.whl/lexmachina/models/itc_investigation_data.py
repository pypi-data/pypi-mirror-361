# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20250708
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from lexmachina.models.administrative_law_judge import AdministrativeLawJudge
from lexmachina.models.itc_document_list import ITCDocumentList
from lexmachina.models.itc_investigation_dates import ITCInvestigationDates
from lexmachina.models.itc_investigation_status import ITCInvestigationStatus
from lexmachina.models.itc_investigation_type import ITCInvestigationType
from lexmachina.models.itc_party import ITCParty
from lexmachina.models.patent import Patent
from typing import Optional, Set
from typing_extensions import Self

class ITCInvestigationData(BaseModel):
    """
    A single US ITC investigation and relevant metadata.
    """ # noqa: E501
    itc_investigation_id: StrictStr = Field(alias="itcInvestigationId")
    investigation_number: StrictStr = Field(alias="investigationNumber")
    title: StrictStr
    investigation_types: List[ITCInvestigationType] = Field(alias="investigationTypes")
    status: ITCInvestigationStatus
    dates: ITCInvestigationDates
    administrative_law_judges: List[AdministrativeLawJudge] = Field(alias="administrativeLawJudges")
    dispositions: List[StrictStr]
    parties: List[ITCParty]
    patents: List[Patent]
    itc_document_list: ITCDocumentList = Field(alias="itcDocumentList")
    __properties: ClassVar[List[str]] = ["itcInvestigationId", "investigationNumber", "title", "investigationTypes", "status", "dates", "administrativeLawJudges", "dispositions", "parties", "patents", "itcDocumentList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ITCInvestigationData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dates
        if self.dates:
            _dict['dates'] = self.dates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in administrative_law_judges (list)
        _items = []
        if self.administrative_law_judges:
            for _item_administrative_law_judges in self.administrative_law_judges:
                if _item_administrative_law_judges:
                    _items.append(_item_administrative_law_judges.to_dict())
            _dict['administrativeLawJudges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parties (list)
        _items = []
        if self.parties:
            for _item_parties in self.parties:
                if _item_parties:
                    _items.append(_item_parties.to_dict())
            _dict['parties'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in patents (list)
        _items = []
        if self.patents:
            for _item_patents in self.patents:
                if _item_patents:
                    _items.append(_item_patents.to_dict())
            _dict['patents'] = _items
        # override the default output from pydantic by calling `to_dict()` of itc_document_list
        if self.itc_document_list:
            _dict['itcDocumentList'] = self.itc_document_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ITCInvestigationData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "itcInvestigationId": obj.get("itcInvestigationId"),
            "investigationNumber": obj.get("investigationNumber"),
            "title": obj.get("title"),
            "investigationTypes": obj.get("investigationTypes"),
            "status": obj.get("status"),
            "dates": ITCInvestigationDates.from_dict(obj["dates"]) if obj.get("dates") is not None else None,
            "administrativeLawJudges": [AdministrativeLawJudge.from_dict(_item) for _item in obj["administrativeLawJudges"]] if obj.get("administrativeLawJudges") is not None else None,
            "dispositions": obj.get("dispositions"),
            "parties": [ITCParty.from_dict(_item) for _item in obj["parties"]] if obj.get("parties") is not None else None,
            "patents": [Patent.from_dict(_item) for _item in obj["patents"]] if obj.get("patents") is not None else None,
            "itcDocumentList": ITCDocumentList.from_dict(obj["itcDocumentList"]) if obj.get("itcDocumentList") is not None else None
        })
        return _obj


