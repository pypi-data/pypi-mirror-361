# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single calculation pipelines
class AxsCfgCalcPipeline(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgCalcPipeline()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgCalcPipeline(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgCalcPipeline
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the calculation pipeline
    # AxsCfgCalcPipeline
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # configuration of all steps of calculation pipeline
    # AxsCfgCalcPipeline
    def Steps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsCfgCalcStepAll import AxsCfgCalcStepAll
            obj = AxsCfgCalcStepAll()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCfgCalcPipelineStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCfgCalcPipelineStart(builder)
def AxsCfgCalcPipelineAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return AxsCfgCalcPipelineAddName(builder, name)
def AxsCfgCalcPipelineAddSteps(builder, steps): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(steps), 0)
def AddSteps(builder, steps):
    return AxsCfgCalcPipelineAddSteps(builder, steps)
def AxsCfgCalcPipelineEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgCalcPipelineEnd(builder)
import motion.sync.fbtypes.AxsCfgCalcStepAll
try:
    from typing import Optional
except:
    pass

class AxsCfgCalcPipelineT(object):

    # AxsCfgCalcPipelineT
    def __init__(self):
        self.name = None  # type: str
        self.steps = None  # type: Optional[motion.sync.fbtypes.AxsCfgCalcStepAll.AxsCfgCalcStepAllT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgCalcPipeline = AxsCfgCalcPipeline()
        axsCfgCalcPipeline.Init(buf, pos)
        return cls.InitFromObj(axsCfgCalcPipeline)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgCalcPipeline):
        x = AxsCfgCalcPipelineT()
        x._UnPack(axsCfgCalcPipeline)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.steps == other.steps

    # AxsCfgCalcPipelineT
    def _UnPack(self, axsCfgCalcPipeline):
        if axsCfgCalcPipeline is None:
            return
        self.name = axsCfgCalcPipeline.Name()
        if axsCfgCalcPipeline.Steps() is not None:
            self.steps = motion.sync.fbtypes.AxsCfgCalcStepAll.AxsCfgCalcStepAllT.InitFromObj(axsCfgCalcPipeline.Steps())

    # AxsCfgCalcPipelineT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.steps is not None:
            steps = self.steps.Pack(builder)
        AxsCfgCalcPipelineStart(builder)
        if self.name is not None:
            AxsCfgCalcPipelineAddName(builder, name)
        if self.steps is not None:
            AxsCfgCalcPipelineAddSteps(builder, steps)
        axsCfgCalcPipeline = AxsCfgCalcPipelineEnd(builder)
        return axsCfgCalcPipeline
