# automatically generated by the FlatBuffers compiler, do not modify

# namespace: taskmanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Memory(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Memory()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMemory(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Memory
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Memory
    def Total(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Memory
    def Used(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Memory
    def Free(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Memory
    def Buffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Memory
    def Cache(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Memory
    def Available(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def MemoryStart(builder): builder.StartObject(6)
def Start(builder):
    return MemoryStart(builder)
def MemoryAddTotal(builder, total): builder.PrependUint64Slot(0, total, 0)
def AddTotal(builder, total):
    return MemoryAddTotal(builder, total)
def MemoryAddUsed(builder, used): builder.PrependUint64Slot(1, used, 0)
def AddUsed(builder, used):
    return MemoryAddUsed(builder, used)
def MemoryAddFree(builder, free): builder.PrependUint64Slot(2, free, 0)
def AddFree(builder, free):
    return MemoryAddFree(builder, free)
def MemoryAddBuffer(builder, buffer): builder.PrependUint64Slot(3, buffer, 0)
def AddBuffer(builder, buffer):
    return MemoryAddBuffer(builder, buffer)
def MemoryAddCache(builder, cache): builder.PrependUint64Slot(4, cache, 0)
def AddCache(builder, cache):
    return MemoryAddCache(builder, cache)
def MemoryAddAvailable(builder, available): builder.PrependUint64Slot(5, available, 0)
def AddAvailable(builder, available):
    return MemoryAddAvailable(builder, available)
def MemoryEnd(builder): return builder.EndObject()
def End(builder):
    return MemoryEnd(builder)

class MemoryT(object):

    # MemoryT
    def __init__(self):
        self.total = 0  # type: int
        self.used = 0  # type: int
        self.free = 0  # type: int
        self.buffer = 0  # type: int
        self.cache = 0  # type: int
        self.available = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        memory = Memory()
        memory.Init(buf, pos)
        return cls.InitFromObj(memory)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, memory):
        x = MemoryT()
        x._UnPack(memory)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.total == other.total and \
            self.used == other.used and \
            self.free == other.free and \
            self.buffer == other.buffer and \
            self.cache == other.cache and \
            self.available == other.available

    # MemoryT
    def _UnPack(self, memory):
        if memory is None:
            return
        self.total = memory.Total()
        self.used = memory.Used()
        self.free = memory.Free()
        self.buffer = memory.Buffer()
        self.cache = memory.Cache()
        self.available = memory.Available()

    # MemoryT
    def Pack(self, builder):
        MemoryStart(builder)
        MemoryAddTotal(builder, self.total)
        MemoryAddUsed(builder, self.used)
        MemoryAddFree(builder, self.free)
        MemoryAddBuffer(builder, self.buffer)
        MemoryAddCache(builder, self.cache)
        MemoryAddAvailable(builder, self.available)
        memory = MemoryEnd(builder)
        return memory
