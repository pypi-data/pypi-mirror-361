# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Configuration of the dynamic synchronisation window modulo of a single axis
class AxsCfgDynSynchronisationSyncWinMod(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgDynSynchronisationSyncWinMod()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgDynSynchronisationSyncWinMod(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgDynSynchronisationSyncWinMod
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Dynamic synchronisation window modulo value
    # AxsCfgDynSynchronisationSyncWinMod
    def SyncWindowModulo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Unit of syncWindowModulo
    # AxsCfgDynSynchronisationSyncWinMod
    def SyncWindowModuloUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgDynSynchronisationSyncWinModStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCfgDynSynchronisationSyncWinModStart(builder)
def AxsCfgDynSynchronisationSyncWinModAddSyncWindowModulo(builder, syncWindowModulo): builder.PrependFloat64Slot(0, syncWindowModulo, 0.0)
def AddSyncWindowModulo(builder, syncWindowModulo):
    return AxsCfgDynSynchronisationSyncWinModAddSyncWindowModulo(builder, syncWindowModulo)
def AxsCfgDynSynchronisationSyncWinModAddSyncWindowModuloUnit(builder, syncWindowModuloUnit): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(syncWindowModuloUnit), 0)
def AddSyncWindowModuloUnit(builder, syncWindowModuloUnit):
    return AxsCfgDynSynchronisationSyncWinModAddSyncWindowModuloUnit(builder, syncWindowModuloUnit)
def AxsCfgDynSynchronisationSyncWinModEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgDynSynchronisationSyncWinModEnd(builder)

class AxsCfgDynSynchronisationSyncWinModT(object):

    # AxsCfgDynSynchronisationSyncWinModT
    def __init__(self):
        self.syncWindowModulo = 0.0  # type: float
        self.syncWindowModuloUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgDynSynchronisationSyncWinMod = AxsCfgDynSynchronisationSyncWinMod()
        axsCfgDynSynchronisationSyncWinMod.Init(buf, pos)
        return cls.InitFromObj(axsCfgDynSynchronisationSyncWinMod)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgDynSynchronisationSyncWinMod):
        x = AxsCfgDynSynchronisationSyncWinModT()
        x._UnPack(axsCfgDynSynchronisationSyncWinMod)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.syncWindowModulo == other.syncWindowModulo and \
            self.syncWindowModuloUnit == other.syncWindowModuloUnit

    # AxsCfgDynSynchronisationSyncWinModT
    def _UnPack(self, axsCfgDynSynchronisationSyncWinMod):
        if axsCfgDynSynchronisationSyncWinMod is None:
            return
        self.syncWindowModulo = axsCfgDynSynchronisationSyncWinMod.SyncWindowModulo()
        self.syncWindowModuloUnit = axsCfgDynSynchronisationSyncWinMod.SyncWindowModuloUnit()

    # AxsCfgDynSynchronisationSyncWinModT
    def Pack(self, builder):
        if self.syncWindowModuloUnit is not None:
            syncWindowModuloUnit = builder.CreateString(self.syncWindowModuloUnit)
        AxsCfgDynSynchronisationSyncWinModStart(builder)
        AxsCfgDynSynchronisationSyncWinModAddSyncWindowModulo(builder, self.syncWindowModulo)
        if self.syncWindowModuloUnit is not None:
            AxsCfgDynSynchronisationSyncWinModAddSyncWindowModuloUnit(builder, syncWindowModuloUnit)
        axsCfgDynSynchronisationSyncWinMod = AxsCfgDynSynchronisationSyncWinModEnd(builder)
        return axsCfgDynSynchronisationSyncWinMod
