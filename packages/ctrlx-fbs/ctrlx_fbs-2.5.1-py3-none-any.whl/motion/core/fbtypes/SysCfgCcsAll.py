# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of the camera coordinate system
class SysCfgCcsAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgCcsAll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfgCcsAll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfgCcsAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all configured CCS sets
    # SysCfgCcsAll
    def Sets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.SysCfgCcsSet import SysCfgCcsSet
            obj = SysCfgCcsSet()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SysCfgCcsAll
    def SetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgCcsAll
    def SetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def SysCfgCcsAllStart(builder): builder.StartObject(1)
def Start(builder):
    return SysCfgCcsAllStart(builder)
def SysCfgCcsAllAddSets(builder, sets): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sets), 0)
def AddSets(builder, sets):
    return SysCfgCcsAllAddSets(builder, sets)
def SysCfgCcsAllStartSetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSetsVector(builder, numElems):
    return SysCfgCcsAllStartSetsVector(builder, numElems)
def SysCfgCcsAllEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgCcsAllEnd(builder)
import motion.core.fbtypes.SysCfgCcsSet
try:
    from typing import List
except:
    pass

class SysCfgCcsAllT(object):

    # SysCfgCcsAllT
    def __init__(self):
        self.sets = None  # type: List[motion.core.fbtypes.SysCfgCcsSet.SysCfgCcsSetT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgCcsAll = SysCfgCcsAll()
        sysCfgCcsAll.Init(buf, pos)
        return cls.InitFromObj(sysCfgCcsAll)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfgCcsAll):
        x = SysCfgCcsAllT()
        x._UnPack(sysCfgCcsAll)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.sets == other.sets

    # SysCfgCcsAllT
    def _UnPack(self, sysCfgCcsAll):
        if sysCfgCcsAll is None:
            return
        if not sysCfgCcsAll.SetsIsNone():
            self.sets = []
            for i in range(sysCfgCcsAll.SetsLength()):
                if sysCfgCcsAll.Sets(i) is None:
                    self.sets.append(None)
                else:
                    sysCfgCcsSet_ = motion.core.fbtypes.SysCfgCcsSet.SysCfgCcsSetT.InitFromObj(sysCfgCcsAll.Sets(i))
                    self.sets.append(sysCfgCcsSet_)

    # SysCfgCcsAllT
    def Pack(self, builder):
        if self.sets is not None:
            setslist = []
            for i in range(len(self.sets)):
                setslist.append(self.sets[i].Pack(builder))
            SysCfgCcsAllStartSetsVector(builder, len(self.sets))
            for i in reversed(range(len(self.sets))):
                builder.PrependUOffsetTRelative(setslist[i])
            sets = builder.EndVector()
        SysCfgCcsAllStart(builder)
        if self.sets is not None:
            SysCfgCcsAllAddSets(builder, sets)
        sysCfgCcsAll = SysCfgCcsAllEnd(builder)
        return sysCfgCcsAll
