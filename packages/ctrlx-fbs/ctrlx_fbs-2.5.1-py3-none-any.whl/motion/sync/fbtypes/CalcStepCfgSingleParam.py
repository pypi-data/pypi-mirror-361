# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single parameter of a calculation step
class CalcStepCfgSingleParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CalcStepCfgSingleParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCalcStepCfgSingleParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CalcStepCfgSingleParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the parameter
    # CalcStepCfgSingleParam
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # value of the parameter (when it's a double value)
    # CalcStepCfgSingleParam
    def ValueDouble(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # value of the parameter (when it's a integer value)
    # CalcStepCfgSingleParam
    def ValueInt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # value of the parameter (when it's a string value)
    # CalcStepCfgSingleParam
    def ValueString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CalcStepCfgSingleParamStart(builder): builder.StartObject(4)
def Start(builder):
    return CalcStepCfgSingleParamStart(builder)
def CalcStepCfgSingleParamAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return CalcStepCfgSingleParamAddName(builder, name)
def CalcStepCfgSingleParamAddValueDouble(builder, valueDouble): builder.PrependFloat64Slot(1, valueDouble, 0.0)
def AddValueDouble(builder, valueDouble):
    return CalcStepCfgSingleParamAddValueDouble(builder, valueDouble)
def CalcStepCfgSingleParamAddValueInt(builder, valueInt): builder.PrependInt64Slot(2, valueInt, 0)
def AddValueInt(builder, valueInt):
    return CalcStepCfgSingleParamAddValueInt(builder, valueInt)
def CalcStepCfgSingleParamAddValueString(builder, valueString): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(valueString), 0)
def AddValueString(builder, valueString):
    return CalcStepCfgSingleParamAddValueString(builder, valueString)
def CalcStepCfgSingleParamEnd(builder): return builder.EndObject()
def End(builder):
    return CalcStepCfgSingleParamEnd(builder)

class CalcStepCfgSingleParamT(object):

    # CalcStepCfgSingleParamT
    def __init__(self):
        self.name = None  # type: str
        self.valueDouble = 0.0  # type: float
        self.valueInt = 0  # type: int
        self.valueString = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        calcStepCfgSingleParam = CalcStepCfgSingleParam()
        calcStepCfgSingleParam.Init(buf, pos)
        return cls.InitFromObj(calcStepCfgSingleParam)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, calcStepCfgSingleParam):
        x = CalcStepCfgSingleParamT()
        x._UnPack(calcStepCfgSingleParam)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.valueDouble == other.valueDouble and \
            self.valueInt == other.valueInt and \
            self.valueString == other.valueString

    # CalcStepCfgSingleParamT
    def _UnPack(self, calcStepCfgSingleParam):
        if calcStepCfgSingleParam is None:
            return
        self.name = calcStepCfgSingleParam.Name()
        self.valueDouble = calcStepCfgSingleParam.ValueDouble()
        self.valueInt = calcStepCfgSingleParam.ValueInt()
        self.valueString = calcStepCfgSingleParam.ValueString()

    # CalcStepCfgSingleParamT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.valueString is not None:
            valueString = builder.CreateString(self.valueString)
        CalcStepCfgSingleParamStart(builder)
        if self.name is not None:
            CalcStepCfgSingleParamAddName(builder, name)
        CalcStepCfgSingleParamAddValueDouble(builder, self.valueDouble)
        CalcStepCfgSingleParamAddValueInt(builder, self.valueInt)
        if self.valueString is not None:
            CalcStepCfgSingleParamAddValueString(builder, valueString)
        calcStepCfgSingleParam = CalcStepCfgSingleParamEnd(builder)
        return calcStepCfgSingleParam
