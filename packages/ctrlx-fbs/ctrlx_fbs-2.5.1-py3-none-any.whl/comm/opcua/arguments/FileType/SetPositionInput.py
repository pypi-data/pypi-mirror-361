# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FileType

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SetPositionInput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SetPositionInput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSetPositionInput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SetPositionInput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SetPositionInput
    def FileHandle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SetPositionInput
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def SetPositionInputStart(builder): builder.StartObject(2)
def Start(builder):
    return SetPositionInputStart(builder)
def SetPositionInputAddFileHandle(builder, fileHandle): builder.PrependUint32Slot(0, fileHandle, 0)
def AddFileHandle(builder, fileHandle):
    return SetPositionInputAddFileHandle(builder, fileHandle)
def SetPositionInputAddPosition(builder, position): builder.PrependUint64Slot(1, position, 0)
def AddPosition(builder, position):
    return SetPositionInputAddPosition(builder, position)
def SetPositionInputEnd(builder): return builder.EndObject()
def End(builder):
    return SetPositionInputEnd(builder)

class SetPositionInputT(object):

    # SetPositionInputT
    def __init__(self):
        self.fileHandle = 0  # type: int
        self.position = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        setPositionInput = SetPositionInput()
        setPositionInput.Init(buf, pos)
        return cls.InitFromObj(setPositionInput)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, setPositionInput):
        x = SetPositionInputT()
        x._UnPack(setPositionInput)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.fileHandle == other.fileHandle and \
            self.position == other.position

    # SetPositionInputT
    def _UnPack(self, setPositionInput):
        if setPositionInput is None:
            return
        self.fileHandle = setPositionInput.FileHandle()
        self.position = setPositionInput.Position()

    # SetPositionInputT
    def Pack(self, builder):
        SetPositionInputStart(builder)
        SetPositionInputAddFileHandle(builder, self.fileHandle)
        SetPositionInputAddPosition(builder, self.position)
        setPositionInput = SetPositionInputEnd(builder)
        return setPositionInput
