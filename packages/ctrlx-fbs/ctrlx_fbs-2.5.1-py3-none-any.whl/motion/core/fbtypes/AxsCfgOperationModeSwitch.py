# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# operation mode switch parameters for a single axis
class AxsCfgOperationModeSwitch(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgOperationModeSwitch()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgOperationModeSwitch(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgOperationModeSwitch
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # the additive extrapolation time (can also be negative) active only during an operation mode switch
    # AxsCfgOperationModeSwitch
    def ExtrapolationTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of extrapolationTime
    # AxsCfgOperationModeSwitch
    def ExtrapolationTimeUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgOperationModeSwitchStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCfgOperationModeSwitchStart(builder)
def AxsCfgOperationModeSwitchAddExtrapolationTime(builder, extrapolationTime): builder.PrependFloat64Slot(0, extrapolationTime, 0.0)
def AddExtrapolationTime(builder, extrapolationTime):
    return AxsCfgOperationModeSwitchAddExtrapolationTime(builder, extrapolationTime)
def AxsCfgOperationModeSwitchAddExtrapolationTimeUnit(builder, extrapolationTimeUnit): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(extrapolationTimeUnit), 0)
def AddExtrapolationTimeUnit(builder, extrapolationTimeUnit):
    return AxsCfgOperationModeSwitchAddExtrapolationTimeUnit(builder, extrapolationTimeUnit)
def AxsCfgOperationModeSwitchEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgOperationModeSwitchEnd(builder)

class AxsCfgOperationModeSwitchT(object):

    # AxsCfgOperationModeSwitchT
    def __init__(self):
        self.extrapolationTime = 0.0  # type: float
        self.extrapolationTimeUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgOperationModeSwitch = AxsCfgOperationModeSwitch()
        axsCfgOperationModeSwitch.Init(buf, pos)
        return cls.InitFromObj(axsCfgOperationModeSwitch)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgOperationModeSwitch):
        x = AxsCfgOperationModeSwitchT()
        x._UnPack(axsCfgOperationModeSwitch)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.extrapolationTime == other.extrapolationTime and \
            self.extrapolationTimeUnit == other.extrapolationTimeUnit

    # AxsCfgOperationModeSwitchT
    def _UnPack(self, axsCfgOperationModeSwitch):
        if axsCfgOperationModeSwitch is None:
            return
        self.extrapolationTime = axsCfgOperationModeSwitch.ExtrapolationTime()
        self.extrapolationTimeUnit = axsCfgOperationModeSwitch.ExtrapolationTimeUnit()

    # AxsCfgOperationModeSwitchT
    def Pack(self, builder):
        if self.extrapolationTimeUnit is not None:
            extrapolationTimeUnit = builder.CreateString(self.extrapolationTimeUnit)
        AxsCfgOperationModeSwitchStart(builder)
        AxsCfgOperationModeSwitchAddExtrapolationTime(builder, self.extrapolationTime)
        if self.extrapolationTimeUnit is not None:
            AxsCfgOperationModeSwitchAddExtrapolationTimeUnit(builder, extrapolationTimeUnit)
        axsCfgOperationModeSwitch = AxsCfgOperationModeSwitchEnd(builder)
        return axsCfgOperationModeSwitch
