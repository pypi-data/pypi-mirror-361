# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of the belt coordinate system
class SysCfgBeltCsAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgBeltCsAll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfgBeltCsAll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfgBeltCsAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all configured BeltCS sets
    # SysCfgBeltCsAll
    def Sets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.SysCfgBeltCsSet import SysCfgBeltCsSet
            obj = SysCfgBeltCsSet()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SysCfgBeltCsAll
    def SetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgBeltCsAll
    def SetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def SysCfgBeltCsAllStart(builder): builder.StartObject(1)
def Start(builder):
    return SysCfgBeltCsAllStart(builder)
def SysCfgBeltCsAllAddSets(builder, sets): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sets), 0)
def AddSets(builder, sets):
    return SysCfgBeltCsAllAddSets(builder, sets)
def SysCfgBeltCsAllStartSetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSetsVector(builder, numElems):
    return SysCfgBeltCsAllStartSetsVector(builder, numElems)
def SysCfgBeltCsAllEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgBeltCsAllEnd(builder)
import motion.core.fbtypes.SysCfgBeltCsSet
try:
    from typing import List
except:
    pass

class SysCfgBeltCsAllT(object):

    # SysCfgBeltCsAllT
    def __init__(self):
        self.sets = None  # type: List[motion.core.fbtypes.SysCfgBeltCsSet.SysCfgBeltCsSetT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgBeltCsAll = SysCfgBeltCsAll()
        sysCfgBeltCsAll.Init(buf, pos)
        return cls.InitFromObj(sysCfgBeltCsAll)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfgBeltCsAll):
        x = SysCfgBeltCsAllT()
        x._UnPack(sysCfgBeltCsAll)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.sets == other.sets

    # SysCfgBeltCsAllT
    def _UnPack(self, sysCfgBeltCsAll):
        if sysCfgBeltCsAll is None:
            return
        if not sysCfgBeltCsAll.SetsIsNone():
            self.sets = []
            for i in range(sysCfgBeltCsAll.SetsLength()):
                if sysCfgBeltCsAll.Sets(i) is None:
                    self.sets.append(None)
                else:
                    sysCfgBeltCsSet_ = motion.core.fbtypes.SysCfgBeltCsSet.SysCfgBeltCsSetT.InitFromObj(sysCfgBeltCsAll.Sets(i))
                    self.sets.append(sysCfgBeltCsSet_)

    # SysCfgBeltCsAllT
    def Pack(self, builder):
        if self.sets is not None:
            setslist = []
            for i in range(len(self.sets)):
                setslist.append(self.sets[i].Pack(builder))
            SysCfgBeltCsAllStartSetsVector(builder, len(self.sets))
            for i in reversed(range(len(self.sets))):
                builder.PrependUOffsetTRelative(setslist[i])
            sets = builder.EndVector()
        SysCfgBeltCsAllStart(builder)
        if self.sets is not None:
            SysCfgBeltCsAllAddSets(builder, sets)
        sysCfgBeltCsAll = SysCfgBeltCsAllEnd(builder)
        return sysCfgBeltCsAll
