# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20250708
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictStr
from typing import List, Optional
from lexmachina.models.district_case_number_search_result import DistrictCaseNumberSearchResult

from lexmachina.api_client import ApiClient, RequestSerialized
from lexmachina.api_response import ApiResponse
from lexmachina.rest import RESTResponseType


class FindApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def find_district_case_by_number(
        self,
        case_numbers: List[StrictStr],
        court: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[DistrictCaseNumberSearchResult]:
        """Find District Case By Number

        Finds Lex Machina case ids for specified case numbers.  - **case_numbers**: case number search strings - **court**: optional court to limit results  Matches results for each individual case number is cut off at 1000 match results.  Because case number formats vary, and because the case number for the same case can change over time, the search tries to err on the side of being more inclusive. So, this may return more results than you expect. For example, the search ignores judge initials at the end of case numbers. So, for case number \"1:19-cv-00077-NLH-KMW\", the trailing initials \"NLH\" and \"KMW\" will be ignored.  The court param is optional and can be any of the name versions given by the /list-courts endpoint (must match capitalization). Providing a value for the court param will filter all case number searches in the request for cases within that court.

        :param case_numbers: (required)
        :type case_numbers: List[str]
        :param court:
        :type court: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_district_case_by_number_serialize(
            case_numbers=case_numbers,
            court=court,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DistrictCaseNumberSearchResult]",
            '401': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_district_case_by_number_with_http_info(
        self,
        case_numbers: List[StrictStr],
        court: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[DistrictCaseNumberSearchResult]]:
        """Find District Case By Number

        Finds Lex Machina case ids for specified case numbers.  - **case_numbers**: case number search strings - **court**: optional court to limit results  Matches results for each individual case number is cut off at 1000 match results.  Because case number formats vary, and because the case number for the same case can change over time, the search tries to err on the side of being more inclusive. So, this may return more results than you expect. For example, the search ignores judge initials at the end of case numbers. So, for case number \"1:19-cv-00077-NLH-KMW\", the trailing initials \"NLH\" and \"KMW\" will be ignored.  The court param is optional and can be any of the name versions given by the /list-courts endpoint (must match capitalization). Providing a value for the court param will filter all case number searches in the request for cases within that court.

        :param case_numbers: (required)
        :type case_numbers: List[str]
        :param court:
        :type court: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_district_case_by_number_serialize(
            case_numbers=case_numbers,
            court=court,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DistrictCaseNumberSearchResult]",
            '401': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_district_case_by_number_without_preload_content(
        self,
        case_numbers: List[StrictStr],
        court: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find District Case By Number

        Finds Lex Machina case ids for specified case numbers.  - **case_numbers**: case number search strings - **court**: optional court to limit results  Matches results for each individual case number is cut off at 1000 match results.  Because case number formats vary, and because the case number for the same case can change over time, the search tries to err on the side of being more inclusive. So, this may return more results than you expect. For example, the search ignores judge initials at the end of case numbers. So, for case number \"1:19-cv-00077-NLH-KMW\", the trailing initials \"NLH\" and \"KMW\" will be ignored.  The court param is optional and can be any of the name versions given by the /list-courts endpoint (must match capitalization). Providing a value for the court param will filter all case number searches in the request for cases within that court.

        :param case_numbers: (required)
        :type case_numbers: List[str]
        :param court:
        :type court: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_district_case_by_number_serialize(
            case_numbers=case_numbers,
            court=court,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DistrictCaseNumberSearchResult]",
            '401': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_district_case_by_number_serialize(
        self,
        case_numbers,
        court,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'caseNumbers': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if case_numbers is not None:
            
            _query_params.append(('caseNumbers', case_numbers))
            
        if court is not None:
            
            _query_params.append(('court', court))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JwtAccessBearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/find-district-cases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


