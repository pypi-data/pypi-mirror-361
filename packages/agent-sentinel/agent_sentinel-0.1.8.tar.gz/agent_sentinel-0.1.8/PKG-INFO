Metadata-Version: 2.4
Name: agent-sentinel
Version: 0.1.8
Summary: Enterprise Security Monitoring SDK for AI Agents - Secure any AI agent in just 3 lines of code with real-time threat detection, behavioral analysis, and unified reporting that combines logs and insights into a single comprehensive file
Author-email: AgentSentinel Team <team@agentsentinel.dev>
Maintainer-email: AgentSentinel Team <team@agentsentinel.dev>
License: MIT
Project-URL: Homepage, https://github.com/agentsentinel/agent-sentinel
Project-URL: Documentation, https://docs.agentsentinel.dev
Project-URL: Repository, https://github.com/agentsentinel/agent-sentinel.git
Project-URL: Bug Tracker, https://github.com/agentsentinel/agent-sentinel/issues
Project-URL: Security Policy, https://github.com/agentsentinel/agent-sentinel/security/policy
Project-URL: Code of Conduct, https://github.com/agentsentinel/agent-sentinel/blob/main/CODE_OF_CONDUCT.md
Project-URL: Contributing, https://github.com/agentsentinel/agent-sentinel/blob/main/CONTRIBUTING.md
Project-URL: Changelog, https://github.com/agentsentinel/agent-sentinel/blob/main/CHANGELOG.md
Keywords: ai,security,monitoring,agents,threat-detection,enterprise,compliance,audit,dashboard,mcp,langchain,autogen,crewai,real-time,analytics,simple,easy
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: Intended Audience :: Information Technology
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Security
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Monitoring
Classifier: Topic :: System :: Logging
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: pyyaml>=6.0
Requires-Dist: requests>=2.28.0
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: asyncio-mqtt>=0.11.0
Requires-Dist: websockets>=10.0
Requires-Dist: structlog>=22.0.0
Requires-Dist: prometheus-client>=0.14.0
Requires-Dist: psutil>=5.9.0
Requires-Dist: python-dateutil>=2.8.0
Requires-Dist: typing-extensions>=4.0.0
Provides-Extra: dev
Requires-Dist: weave>=0.50.0; extra == "dev"
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-mock>=3.10.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Requires-Dist: coverage>=7.0.0; extra == "dev"
Requires-Dist: bandit>=1.7.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Requires-Dist: pytest-mock>=3.10.0; extra == "test"
Requires-Dist: coverage>=7.0.0; extra == "test"
Requires-Dist: responses>=0.23.0; extra == "test"
Requires-Dist: httpx>=0.24.0; extra == "test"
Requires-Dist: freezegun>=1.2.0; extra == "test"
Requires-Dist: factory-boy>=3.3.0; extra == "test"
Requires-Dist: faker>=19.0.0; extra == "test"
Provides-Extra: docs
Requires-Dist: sphinx>=7.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.3.0; extra == "docs"
Requires-Dist: myst-parser>=2.0.0; extra == "docs"
Requires-Dist: sphinx-autodoc-typehints>=1.24.0; extra == "docs"
Requires-Dist: sphinx-copybutton>=0.5.0; extra == "docs"
Requires-Dist: sphinx-tabs>=3.4.0; extra == "docs"

# Agent Sentinel

**Enterprise Security Monitoring SDK for AI Agents**

Secure any AI agent in just 3 lines of code with real-time threat detection, behavioral analysis, and comprehensive reporting capabilities.

## Quick Start

```python
from agent_sentinel import monitor, monitor_mcp

# Monitor regular functions
@monitor
def process_data(data: str) -> str:
    return data.upper()

# Monitor MCP tools
@monitor_mcp()
def search_database(query: str) -> str:
    return f"Searching for: {query}"

# Use the functions
result = process_data("hello world")
search_result = search_database("user data")
```

## Unified Reporting

Agent Sentinel now provides **unified reporting** that combines logs, security events, and analysis into a single comprehensive file:

### Programmatic Usage

```python
from agent_sentinel.core.sentinel import AgentSentinel

# Initialize with monitoring
sentinel = AgentSentinel(agent_id="my_agent")

# Your monitored functions run here...

# Generate unified report
report_path = sentinel.generate_unified_report()
print(f"Report generated: {report_path}")

# Get report path
report_path = sentinel.get_unified_report_path()
```

### CLI Usage

```bash
# Generate unified report
agent-sentinel report --config config.yaml --agent-id my_agent

# With custom output
agent-sentinel report --output my_report.json --format json
```

### Report Contents

The unified report includes:

- **📊 Executive Summary**: Status, risk score, security events count
- **🔍 Threat Analysis**: Detailed breakdown of detected threats
- **📈 Performance Metrics**: Monitoring statistics and performance data
- **💡 Recommendations**: Actionable security recommendations
- **📝 Session Logs**: Real-time monitoring logs
- **🛡️ Security Events**: Detailed security event information

### Report Structure

```json
{
  "metadata": {
    "agent_id": "my_agent",
    "generated_at": "2025-07-13T09:12:39.375674+00:00",
    "report_version": "1.0"
  },
  "summary": {
    "status": "CLEAN|WARNING|CRITICAL",
    "total_security_events": 0,
    "risk_score": 0.0,
    "monitoring_duration": 0.0
  },
  "threat_analysis": {
    "total_threats": 0,
    "threat_breakdown": {},
    "severity_distribution": {},
    "risk_score": 0.0
  },
  "recommendations": [
    "No security threats detected. Continue monitoring for best practices."
  ],
  "performance_metrics": {
    "total_events": 0,
    "events_by_type": {},
    "average_confidence": 0.0
  },
  "security_events": [],
  "session_logs": []
}
```

## Installation

```bash
pip install agent-sentinel
```

## What It Does

Agent Sentinel automatically detects and blocks 20+ threat types including:

- **SQL Injection** - Pattern-based detection of malicious SQL queries
- **XSS Attacks** - Cross-site scripting attack prevention  
- **Command Injection** - Shell command injection protection
- **Prompt Injection** - LLM prompt manipulation attempts
- **Data Exfiltration** - Unauthorized data access patterns
- **Behavioral Anomalies** - Unusual agent behavior patterns

## Usage

### Basic Monitoring

```python
from agent_sentinel import monitor, monitor_mcp

# Monitor regular functions and methods
@monitor
def process_user_input(user_data: str) -> str:
    return f"Processed: {user_data}"

# Monitor MCP (Model Context Protocol) tools
@monitor_mcp()
def search_web(query: str) -> dict:
    return {"results": "web search results"}

# Automatic threat detection and reporting
result = process_user_input("safe data")
search_results = search_web("test query")
```

### Advanced Configuration

```python
from agent_sentinel import Sentinel

# Initialize with custom configuration
sentinel = Sentinel(
    agent_id="production_agent",
    environment="production"
)

# Monitor with custom settings
@sentinel.monitor
def critical_operation(data: dict) -> dict:
    return {"status": "success", "data": data}
```

### Session-Based Monitoring

```python
from agent_sentinel import Sentinel

sentinel = Sentinel(agent_id="session_agent")

# Monitor entire user sessions
with sentinel.monitor_session("user_session_123"):
    result1 = process_query(query)
    result2 = generate_response(result1)
    result3 = format_output(result2)
```

## Key Features

### Real-Time Threat Detection
- Automatic detection of 20+ threat types
- Zero false positives in production testing
- <0.05ms average detection latency
- 40,000+ operations/second throughput

### Enterprise Security
- Circuit breaker pattern for failure protection
- Structured logging with compliance tags (GDPR, SOC2, HIPAA)
- Performance monitoring and resource tracking
- Multi-agent coordination security

### Framework Integration
- **LangChain**: Direct agent class monitoring
- **AutoGen**: Multi-agent conversation security
- **Custom Frameworks**: Universal decorator support
- **MCP Tools**: Specialized Model Context Protocol monitoring

## Performance

### Production Tested
- **Browser MCP Agent**: 49,508 ops/sec, 100% detection rate
- **GitHub MCP Agent**: 41,048 ops/sec, 100% detection rate  
- **Financial Coach Agent**: 98,319 ops/sec, 100% detection rate
- **Multi-Agent Researcher**: 45,246 ops/sec, 100% detection rate

### Security Analytics

```python
# Get comprehensive security insights
metrics = sentinel.get_security_metrics()
{
    "total_threats_blocked": 1247,
    "detection_rate": 100.0,
    "avg_response_time": "0.05ms",
    "threat_breakdown": {
        "sql_injection": 423,
        "xss_attack": 312,
        "prompt_injection": 289
    }
}
```

## CLI Tools

```bash
# Real-time monitoring
agent-sentinel monitor --agent-id my_agent

# Security audit
agent-sentinel audit --config config.yaml

# Performance analysis
agent-sentinel analyze --time-range 24h

# Export reports
agent-sentinel export --format json --output report.json
```

## Configuration

### Zero Configuration (Recommended)
```python
# Works out of the box
from agent_sentinel import monitor, monitor_mcp

@monitor
def my_function():
    pass
```

### Custom Configuration
```yaml
# config.yaml
agent_id: "production_agent"
environment: "production"
detection:
  enabled: true
  confidence_threshold: 0.8
logging:
  level: "INFO"
  format: "json"
```

```python
sentinel = Sentinel(config_path="config.yaml")
```

## Security & Compliance

- **GDPR**: Data privacy and retention controls
- **SOC2**: Audit trails and access controls  
- **HIPAA**: Healthcare data protection
- Local processing by default
- Configurable data retention policies
- Encryption for sensitive data

## Use Cases

- **AI Agent Security**: LLM prompt injection protection, tool usage monitoring
- **Enterprise Applications**: Compliance monitoring, audit trail generation
- **Development & Testing**: Security testing automation, behavior analysis

## Architecture

### Modular Design

```
agent_sentinel/
├── core/           # Core SDK functionality
├── detection/      # Threat detection engines
├── enterprise/     # Enterprise features
├── infrastructure/ # Monitoring & metrics
├── intelligence/   # Threat intelligence
├── logging/        # Structured logging
├── security/       # Security utilities
├── services/       # Core services
└── wrappers/       # Agent integration
```

### Plugin Architecture

- Custom detectors: Add domain-specific threat detection
- Intelligence sources: Integrate external threat feeds
- Export formats: Custom data export formats
- Notification systems: Slack, email, webhook integrations

## Development Setup

### Prerequisites

- Python 3.9+
- Git
- Virtual environment (recommended)

### Installation

```bash
# Clone repository
git clone https://github.com/agentsentinel/agent-sentinel.git
cd agent-sentinel

# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install development dependencies
pip install -e .[dev]

# Install pre-commit hooks
pre-commit install
```

### Development Dependencies

```bash
# Install all development tools
pip install -e .[dev,test,docs]

# Or install individually
pip install -e .[dev]      # Development tools (black, isort, mypy, etc.)
pip install -e .[test]     # Testing framework (pytest, coverage, etc.)
pip install -e .[docs]     # Documentation tools (sphinx, etc.)
```

## Testing

### Run Test Suite

```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=agent_sentinel --cov-report=html

# Run specific test categories
pytest -m unit          # Unit tests
pytest -m integration   # Integration tests
pytest -m security      # Security tests
pytest -m slow          # Slow running tests
```

### Security Validation

```bash
# Run comprehensive security tests
python test_comprehensive_integration.py

# Test with real agents
python test_real_agents_integration.py

# Performance benchmarks
python test_performance_benchmarks.py
```

### Code Quality

```bash
# Format code
black src/ tests/
isort src/ tests/

# Type checking
mypy src/

# Linting
flake8 src/ tests/
bandit -r src/
```

## Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for detailed information.

### Quick Contribution Guide

1. **Fork** the repository
2. **Create** a feature branch (`git checkout -b feature/amazing-feature`)
3. **Commit** your changes (`git commit -m 'Add amazing feature'`)
4. **Push** to the branch (`git push origin feature/amazing-feature`)
5. **Open** a Pull Request

### Development Guidelines

- Follow PEP 8 style guidelines
- Add type hints to all functions
- Write comprehensive tests
- Update documentation for new features
- Ensure all tests pass before submitting

### Testing Your Changes

```bash
# Run the full test suite
pytest

# Check code quality
pre-commit run --all-files

# Build documentation
cd docs && make html
```

## Documentation

### Building Documentation

```bash
# Install documentation dependencies
pip install -e .[docs]

# Build documentation
cd docs
make html

# View documentation
open _build/html/index.html
```

### Documentation Structure

- **User Guide**: Getting started and basic usage
- **API Reference**: Complete API documentation
- **Examples**: Code examples and tutorials
- **Architecture**: System design and components
- **Deployment**: Production deployment guides

## Deployment

### Production Deployment

```bash
# Install production version
pip install agent-sentinel

# Configure environment
export AGENT_SENTINEL_ENVIRONMENT=production
export AGENT_SENTINEL_AGENT_ID=your_agent_id

# Run with monitoring
agent-sentinel monitor --config production.yaml
```

### Docker Deployment

```dockerfile
FROM python:3.9-slim

WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .
CMD ["agent-sentinel", "monitor"]
```

### Kubernetes Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-sentinel
spec:
  replicas: 3
  selector:
    matchLabels:
      app: agent-sentinel
  template:
    metadata:
      labels:
        app: agent-sentinel
    spec:
      containers:
      - name: agent-sentinel
        image: agentsentinel/agent-sentinel:latest
        ports:
        - containerPort: 8080
```

## Support

### Get Help

- [Documentation](https://docs.agentsentinel.dev): Comprehensive guides and API reference
- [GitHub Issues](https://github.com/agentsentinel/agent-sentinel/issues): Bug reports and feature requests
- [Discord Community](https://discord.gg/agentsentinel): Community support and discussions
- [Enterprise Support](mailto:enterprise@agentsentinel.dev): Professional support and consulting

### Quick Links

- [Dashboard Demo](https://demo.agentsentinel.dev): Live security dashboard
- [Security Playground](https://playground.agentsentinel.dev): Test threat detection
- [Performance Benchmarks](https://benchmarks.agentsentinel.dev): Latest performance data
- [Threat Intelligence Feed](https://intel.agentsentinel.dev): Real-time threat data

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Changelog

See [CHANGELOG.md](CHANGELOG.md) for a detailed history of changes.

---

**Ready to secure your AI agents? Get started in 30 seconds:**

```bash
pip install agent-sentinel && python -c "
from agent_sentinel import monitor, monitor_mcp
print('Agent Sentinel is ready!')
"
```
