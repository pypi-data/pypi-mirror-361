# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConfigData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConfigData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConfigData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConfigData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConfigData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConfigData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConfigData
    def ConfigdataVector(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.profinet.device.fbs.ModuleData import ModuleData
            obj = ModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ConfigData
    def ConfigdataVectorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConfigData
    def ConfigdataVectorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def ConfigDataStart(builder): builder.StartObject(3)
def Start(builder):
    return ConfigDataStart(builder)
def ConfigDataAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ConfigDataAddName(builder, name)
def ConfigDataAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return ConfigDataAddDescription(builder, description)
def ConfigDataAddConfigdataVector(builder, configdataVector): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(configdataVector), 0)
def AddConfigdataVector(builder, configdataVector):
    return ConfigDataAddConfigdataVector(builder, configdataVector)
def ConfigDataStartConfigdataVectorVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartConfigdataVectorVector(builder, numElems):
    return ConfigDataStartConfigdataVectorVector(builder, numElems)
def ConfigDataEnd(builder): return builder.EndObject()
def End(builder):
    return ConfigDataEnd(builder)
import comm.profinet.device.fbs.ModuleData
try:
    from typing import List
except:
    pass

class ConfigDataT(object):

    # ConfigDataT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str
        self.configdataVector = None  # type: List[comm.profinet.device.fbs.ModuleData.ModuleDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        configData = ConfigData()
        configData.Init(buf, pos)
        return cls.InitFromObj(configData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, configData):
        x = ConfigDataT()
        x._UnPack(configData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.description == other.description and \
            self.configdataVector == other.configdataVector

    # ConfigDataT
    def _UnPack(self, configData):
        if configData is None:
            return
        self.name = configData.Name()
        self.description = configData.Description()
        if not configData.ConfigdataVectorIsNone():
            self.configdataVector = []
            for i in range(configData.ConfigdataVectorLength()):
                if configData.ConfigdataVector(i) is None:
                    self.configdataVector.append(None)
                else:
                    moduleData_ = comm.profinet.device.fbs.ModuleData.ModuleDataT.InitFromObj(configData.ConfigdataVector(i))
                    self.configdataVector.append(moduleData_)

    # ConfigDataT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.configdataVector is not None:
            configdataVectorlist = []
            for i in range(len(self.configdataVector)):
                configdataVectorlist.append(self.configdataVector[i].Pack(builder))
            ConfigDataStartConfigdataVectorVector(builder, len(self.configdataVector))
            for i in reversed(range(len(self.configdataVector))):
                builder.PrependUOffsetTRelative(configdataVectorlist[i])
            configdataVector = builder.EndVector()
        ConfigDataStart(builder)
        if self.name is not None:
            ConfigDataAddName(builder, name)
        if self.description is not None:
            ConfigDataAddDescription(builder, description)
        if self.configdataVector is not None:
            ConfigDataAddConfigdataVector(builder, configdataVector)
        configData = ConfigDataEnd(builder)
        return configData
