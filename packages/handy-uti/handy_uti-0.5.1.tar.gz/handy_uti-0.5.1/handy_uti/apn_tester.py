# %% =================================================
import jwt
import streamlit as st
import time
from enum import StrEnum
from httpx import Client, Response
from io import StringIO
from handy_uti.ui import app_header, divider, main_container

title = "APNs Tester"
icon = ":material/mark_chat_unread:"


# %% ================================================= utils
class EndPt(StrEnum):
    Development = ".sandbox"
    Production = ""


def create_jwt_token(auth_key: str, team_id: str, key_id: str) -> str:
    """Create JWT token for APNs"""
    token = jwt.encode(
        {
            "iss": team_id,
            "iat": time.time(),
        },
        auth_key,
        algorithm="ES256",
        headers={
            "alg": "ES256",
            "kid": key_id,
        },
    )
    return token


def create_payload(title: str, subtitle: str, body: str, userInfo: str) -> dict:
    """Create APNs payload"""
    return {
        "aps": {
            "alert": {
                "title": title,
                "subtitle": subtitle,
                "body": body,
            },
            "sound": "default",
        },
        "userInfo": userInfo,
    }


def send_push_notification(
    apns_topic: str, device_token: str, endpoint: EndPt, payload: dict, jwt_token: str
) -> Response:
    """Send a push notification"""

    headers = {
        "apns-topic": apns_topic,
        "authorization": f"bearer {jwt_token}",
    }

    url = f"https://api{endpoint}.push.apple.com/3/device/{device_token}"

    # Use httpx.Client with HTTP/2 support
    with Client(http2=True) as client:
        response = client.post(url, headers=headers, json=payload)

    return response


# %% ================================================= app


def usage():
    st.markdown(
        """
        #### üßë‚Äçüíª Usage
        - Before using APNs Tester, confirm your mobile app can process push notification correctly:
        - edit the bundle ID in following code, save it as `local-payload.apns`
        ```json
        {
            "Simulator Target Bundle": "your.app.bundle.id",
            "aps": {
                "alert": {
                    "title": "Push üí®",
                    "subtitle": "hi there üëã"
                },
                "sound": "default"
            },
            "custom": "some custom data"
        }
        ```
        - drag `local-payload.apns` to the simulator to see if it works or not
        - refer to the help of each input field for more details
        """
    )


def body():
    usage()
    divider()
    st.write("#### APNs Configuration")
    c1, c2 = st.columns(2)
    bundle_id = c1.text_input("App Bundle ID")
    team_id = c2.text_input(
        "Apple Team ID", help="see Apple Developer website ‚Üí Membership details"
    )

    c3, c4 = st.columns(2)
    key_id = c4.text_input(
        "APNs Key ID",
        help="see Apple Developer website ‚Üí Certificates, IDs & Profiles ‚Üí Keys",
    )
    endpoint = c3.radio(
        "APNs Server",
        options=EndPt._member_names_,
        horizontal=True,
        help="see the [docs](https://developer.apple.com/documentation/usernotifications/sending-notification-requests-to-apns#Establish-a-connection-to-APNs) for details",
    )

    device_tokens = st.text_area(
        "Device Token(s)",
        placeholder="accept multiple tokens, one token per line",
        help="""
            below is the code snippet to get the device token in string, see the [docs] for details

            ```swift
            // Get the device token
            func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
                let pushToken = deviceToken.map { String(format: "%02.2hhx", $0) }.joined()
                print("Device Token: \\(pushToken)")
            }
            ```

            [docs]: https://developer.apple.com/documentation/usernotifications/registering-your-app-with-apns
        """,
    )

    uploaded_file = st.file_uploader(
        "APNs Auth Key file(.p8)",
        type="p8",
        help="the `.p8` private key file generated by Apple when registering a new APNs key",
    )
    if uploaded_file:
        auth_key = StringIO(uploaded_file.getvalue().decode("utf-8")).read()

    st.write("#### Payload Content")

    c5, c6 = st.columns(2)
    title = c5.text_input("Title", value="Hi there! üëã")
    subtitle = c6.text_input("Subtitle", value="Test push notification üí®")
    body = st.text_input("Body", value="This is a test message from APNs Tester üöÄ")
    userInfo = st.text_input(
        "userInfo",
        value="any additional data",
        help="see the JSON payload [docs](https://developer.apple.com/documentation/usernotifications/generating-a-remote-notification#Create-the-JSON-payload) for details",
    )

    # if st.form_submit_button("Send Push Notification"):
    if st.button("Send Push Notification"):
        payload = create_payload(title, subtitle, body, userInfo)
        jwt_token = create_jwt_token(auth_key, team_id, key_id)

        for device_token in device_tokens.split():
            response = send_push_notification(
                bundle_id, device_token, EndPt[endpoint], payload, jwt_token
            )

            if response.status_code == 200:
                st.write(f"‚úÖ Notification sent: {device_token}")
            else:
                st.write(f"‚ö†Ô∏è Failed: {device_token}")


def app():
    app_header(
        icon=f":blue[{icon}]",
        title=title,
        description="Test Apple Push Notification With Ease",
    )
    main_container(body)
