# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs2

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Switching progress (initial / current / target) of Scheduler operation state
class StateSwitchingInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StateSwitchingInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStateSwitchingInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StateSwitchingInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Initial operation state of Scheduler at the beginning of switching
    # StateSwitchingInfo
    def Initial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 2

    # Current operation state of Scheduler
    # StateSwitchingInfo
    def Current(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 2

    # Target operation state of Scheduler
    # StateSwitchingInfo
    def Target(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 2

def StateSwitchingInfoStart(builder): builder.StartObject(3)
def Start(builder):
    return StateSwitchingInfoStart(builder)
def StateSwitchingInfoAddInitial(builder, initial): builder.PrependInt8Slot(0, initial, 2)
def AddInitial(builder, initial):
    return StateSwitchingInfoAddInitial(builder, initial)
def StateSwitchingInfoAddCurrent(builder, current): builder.PrependInt8Slot(1, current, 2)
def AddCurrent(builder, current):
    return StateSwitchingInfoAddCurrent(builder, current)
def StateSwitchingInfoAddTarget(builder, target): builder.PrependInt8Slot(2, target, 2)
def AddTarget(builder, target):
    return StateSwitchingInfoAddTarget(builder, target)
def StateSwitchingInfoEnd(builder): return builder.EndObject()
def End(builder):
    return StateSwitchingInfoEnd(builder)

class StateSwitchingInfoT(object):

    # StateSwitchingInfoT
    def __init__(self):
        self.initial = 2  # type: int
        self.current = 2  # type: int
        self.target = 2  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateSwitchingInfo = StateSwitchingInfo()
        stateSwitchingInfo.Init(buf, pos)
        return cls.InitFromObj(stateSwitchingInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateSwitchingInfo):
        x = StateSwitchingInfoT()
        x._UnPack(stateSwitchingInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.initial == other.initial and \
            self.current == other.current and \
            self.target == other.target

    # StateSwitchingInfoT
    def _UnPack(self, stateSwitchingInfo):
        if stateSwitchingInfo is None:
            return
        self.initial = stateSwitchingInfo.Initial()
        self.current = stateSwitchingInfo.Current()
        self.target = stateSwitchingInfo.Target()

    # StateSwitchingInfoT
    def Pack(self, builder):
        StateSwitchingInfoStart(builder)
        StateSwitchingInfoAddInitial(builder, self.initial)
        StateSwitchingInfoAddCurrent(builder, self.current)
        StateSwitchingInfoAddTarget(builder, self.target)
        stateSwitchingInfo = StateSwitchingInfoEnd(builder)
        return stateSwitchingInfo
