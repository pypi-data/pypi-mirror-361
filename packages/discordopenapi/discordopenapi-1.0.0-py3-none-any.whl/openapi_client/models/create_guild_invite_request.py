# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateGuildInviteRequest(BaseModel):
    """
    CreateGuildInviteRequest
    """ # noqa: E501
    max_age: Optional[Annotated[int, Field(le=604800, strict=True, ge=0)]] = None
    temporary: Optional[StrictBool] = None
    max_uses: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = None
    unique: Optional[StrictBool] = None
    target_user_id: Optional[Annotated[str, Field(strict=True)]] = None
    target_application_id: Optional[Annotated[str, Field(strict=True)]] = None
    target_type: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["max_age", "temporary", "max_uses", "unique", "target_user_id", "target_application_id", "target_type"]

    @field_validator('target_user_id')
    def target_user_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    @field_validator('target_application_id')
    def target_application_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateGuildInviteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if max_age (nullable) is None
        # and model_fields_set contains the field
        if self.max_age is None and "max_age" in self.model_fields_set:
            _dict['max_age'] = None

        # set to None if temporary (nullable) is None
        # and model_fields_set contains the field
        if self.temporary is None and "temporary" in self.model_fields_set:
            _dict['temporary'] = None

        # set to None if max_uses (nullable) is None
        # and model_fields_set contains the field
        if self.max_uses is None and "max_uses" in self.model_fields_set:
            _dict['max_uses'] = None

        # set to None if unique (nullable) is None
        # and model_fields_set contains the field
        if self.unique is None and "unique" in self.model_fields_set:
            _dict['unique'] = None

        # set to None if target_type (nullable) is None
        # and model_fields_set contains the field
        if self.target_type is None and "target_type" in self.model_fields_set:
            _dict['target_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateGuildInviteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "max_age": obj.get("max_age"),
            "temporary": obj.get("temporary"),
            "max_uses": obj.get("max_uses"),
            "unique": obj.get("unique"),
            "target_user_id": obj.get("target_user_id"),
            "target_application_id": obj.get("target_application_id"),
            "target_type": obj.get("target_type")
        })
        return _obj


