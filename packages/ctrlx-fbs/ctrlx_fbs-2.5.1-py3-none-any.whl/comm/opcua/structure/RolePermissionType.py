# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RolePermissionType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RolePermissionType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRolePermissionType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RolePermissionType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RolePermissionType
    def RoleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.NodeId import NodeId
            obj = NodeId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RolePermissionType
    def Permissions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def RolePermissionTypeStart(builder): builder.StartObject(2)
def Start(builder):
    return RolePermissionTypeStart(builder)
def RolePermissionTypeAddRoleId(builder, roleId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(roleId), 0)
def AddRoleId(builder, roleId):
    return RolePermissionTypeAddRoleId(builder, roleId)
def RolePermissionTypeAddPermissions(builder, permissions): builder.PrependUint32Slot(1, permissions, 0)
def AddPermissions(builder, permissions):
    return RolePermissionTypeAddPermissions(builder, permissions)
def RolePermissionTypeEnd(builder): return builder.EndObject()
def End(builder):
    return RolePermissionTypeEnd(builder)
import comm.opcua.builtin.NodeId
try:
    from typing import Optional
except:
    pass

class RolePermissionTypeT(object):

    # RolePermissionTypeT
    def __init__(self):
        self.roleId = None  # type: Optional[comm.opcua.builtin.NodeId.NodeIdT]
        self.permissions = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rolePermissionType = RolePermissionType()
        rolePermissionType.Init(buf, pos)
        return cls.InitFromObj(rolePermissionType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rolePermissionType):
        x = RolePermissionTypeT()
        x._UnPack(rolePermissionType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.roleId == other.roleId and \
            self.permissions == other.permissions

    # RolePermissionTypeT
    def _UnPack(self, rolePermissionType):
        if rolePermissionType is None:
            return
        if rolePermissionType.RoleId() is not None:
            self.roleId = comm.opcua.builtin.NodeId.NodeIdT.InitFromObj(rolePermissionType.RoleId())
        self.permissions = rolePermissionType.Permissions()

    # RolePermissionTypeT
    def Pack(self, builder):
        if self.roleId is not None:
            roleId = self.roleId.Pack(builder)
        RolePermissionTypeStart(builder)
        if self.roleId is not None:
            RolePermissionTypeAddRoleId(builder, roleId)
        RolePermissionTypeAddPermissions(builder, self.permissions)
        rolePermissionType = RolePermissionTypeEnd(builder)
        return rolePermissionType
