[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "novaeval"
version = "0.2.2"
description = "A comprehensive, open-source LLM evaluation framework for testing and benchmarking AI models"
readme = "README.md"
license = "Apache-2.0"
authors = [
    {name = "Noveum AI", email = "team@noveum.ai"},
]
maintainers = [
    {name = "Noveum AI", email = "team@noveum.ai"},
]
keywords = [
    "llm", "evaluation", "ai", "machine-learning", "benchmarking",
    "testing", "rag", "agents", "conversational-ai", "g-eval"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
]
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.5.0",
    "httpx>=0.25.0",
    "tenacity>=8.2.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "pyyaml>=6.0",
    "jinja2>=3.1.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "datasets>=2.14.0",
    "transformers>=4.35.0",
    "torch>=2.0.0",
    "openai>=1.3.0",
    "anthropic>=0.8.0",
    "boto3>=1.34.0",
    "google-cloud-aiplatform>=1.38.0",
    "tiktoken>=0.5.0",
    "nltk>=3.8.0",
    "spacy>=3.7.0",
    "rouge-score>=0.1.2",
    "bert-score>=0.3.13",
    "sentence-transformers>=2.2.0",
    "evaluate>=0.4.0",
    "plotly>=5.17.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "streamlit>=1.28.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "prometheus-client>=0.19.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "coverage>=7.3.0",
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.2",
]
azure = [
    "azure-ai-inference>=1.0.0; python_version<'3.11'",
]
all = [
    "novaeval[dev,docs,azure]",
]

[project.urls]
Homepage = "https://github.com/Noveum/NovaEval"
Documentation = "https://novaeval.readthedocs.io"
Repository = "https://github.com/Noveum/NovaEval"
"Bug Tracker" = "https://github.com/Noveum/NovaEval/issues"
Changelog = "https://github.com/Noveum/NovaEval/blob/main/CHANGELOG.md"

[project.scripts]
novaeval = "novaeval.cli:main"

[project.entry-points."novaeval.datasets"]
mmlu = "novaeval.datasets.mmlu:MMLUDataset"
huggingface = "novaeval.datasets.huggingface:HuggingFaceDataset"
custom = "novaeval.datasets.custom:CustomDataset"

[project.entry-points."novaeval.models"]
openai = "novaeval.models.openai:OpenAIModel"
anthropic = "novaeval.models.anthropic:AnthropicModel"
noveum = "novaeval.models.noveum:NoveumModel"

[project.entry-points."novaeval.scorers"]
accuracy = "novaeval.scorers.accuracy:AccuracyScorer"
g_eval = "novaeval.scorers.g_eval:GEvalScorer"
rag = "novaeval.scorers.rag:RAGScorer"
conversational = "novaeval.scorers.conversational:ConversationalScorer"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
novaeval = ["py.typed", "*.yaml", "*.json", "templates/*.j2"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["novaeval"]
known_third_party = ["pytest", "pydantic", "httpx", "typer", "rich"]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise exceptions with raise ... from err (not critical)
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "PERF203",  # try-except within a loop incurs performance overhead
    "PERF102",  # when using only values of dict use values() method
    "RUF012",  # mutable class attributes should be annotated with ClassVar
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG001", "S101"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = false  # Allow generic types without parameters for now
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = false  # Don't warn about returning Any
warn_unreachable = false  # Don't warn about unreachable code
warn_unused_configs = true
warn_unused_ignores = false  # Don't warn about unused ignore comments

# Disable specific error codes for non-critical issues
disable_error_code = ["import-untyped", "type-arg"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/novaeval"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
