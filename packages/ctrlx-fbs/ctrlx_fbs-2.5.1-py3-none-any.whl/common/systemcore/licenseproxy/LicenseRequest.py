# automatically generated by the FlatBuffers compiler, do not modify

# namespace: licenseproxy

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LicenseRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LicenseRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLicenseRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LicenseRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LicenseRequest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LicenseRequest
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LicenseRequestStart(builder): builder.StartObject(2)
def Start(builder):
    return LicenseRequestStart(builder)
def LicenseRequestAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return LicenseRequestAddName(builder, name)
def LicenseRequestAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def AddVersion(builder, version):
    return LicenseRequestAddVersion(builder, version)
def LicenseRequestEnd(builder): return builder.EndObject()
def End(builder):
    return LicenseRequestEnd(builder)

class LicenseRequestT(object):

    # LicenseRequestT
    def __init__(self):
        self.name = None  # type: str
        self.version = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        licenseRequest = LicenseRequest()
        licenseRequest.Init(buf, pos)
        return cls.InitFromObj(licenseRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, licenseRequest):
        x = LicenseRequestT()
        x._UnPack(licenseRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.version == other.version

    # LicenseRequestT
    def _UnPack(self, licenseRequest):
        if licenseRequest is None:
            return
        self.name = licenseRequest.Name()
        self.version = licenseRequest.Version()

    # LicenseRequestT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.version is not None:
            version = builder.CreateString(self.version)
        LicenseRequestStart(builder)
        if self.name is not None:
            LicenseRequestAddName(builder, name)
        if self.version is not None:
            LicenseRequestAddVersion(builder, version)
        licenseRequest = LicenseRequestEnd(builder)
        return licenseRequest
