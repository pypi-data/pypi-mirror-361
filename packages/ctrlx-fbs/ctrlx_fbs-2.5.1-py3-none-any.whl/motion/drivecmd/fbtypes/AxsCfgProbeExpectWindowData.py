# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of single probe data
class AxsCfgProbeExpectWindowData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgProbeExpectWindowData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgProbeExpectWindowData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgProbeExpectWindowData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # enable expect window if TRUE
    # AxsCfgProbeExpectWindowData
    def Enable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # expect window start position
    # AxsCfgProbeExpectWindowData
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # expect window end position
    # AxsCfgProbeExpectWindowData
    def End(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def AxsCfgProbeExpectWindowDataStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsCfgProbeExpectWindowDataStart(builder)
def AxsCfgProbeExpectWindowDataAddEnable(builder, enable): builder.PrependBoolSlot(0, enable, 0)
def AddEnable(builder, enable):
    return AxsCfgProbeExpectWindowDataAddEnable(builder, enable)
def AxsCfgProbeExpectWindowDataAddStart(builder, start): builder.PrependFloat64Slot(1, start, 0.0)
def AddStart(builder, start):
    return AxsCfgProbeExpectWindowDataAddStart(builder, start)
def AxsCfgProbeExpectWindowDataAddEnd(builder, end): builder.PrependFloat64Slot(2, end, 0.0)
def AddEnd(builder, end):
    return AxsCfgProbeExpectWindowDataAddEnd(builder, end)
def AxsCfgProbeExpectWindowDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgProbeExpectWindowDataEnd(builder)

class AxsCfgProbeExpectWindowDataT(object):

    # AxsCfgProbeExpectWindowDataT
    def __init__(self):
        self.enable = False  # type: bool
        self.start = 0.0  # type: float
        self.end = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgProbeExpectWindowData = AxsCfgProbeExpectWindowData()
        axsCfgProbeExpectWindowData.Init(buf, pos)
        return cls.InitFromObj(axsCfgProbeExpectWindowData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgProbeExpectWindowData):
        x = AxsCfgProbeExpectWindowDataT()
        x._UnPack(axsCfgProbeExpectWindowData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.enable == other.enable and \
            self.start == other.start and \
            self.end == other.end

    # AxsCfgProbeExpectWindowDataT
    def _UnPack(self, axsCfgProbeExpectWindowData):
        if axsCfgProbeExpectWindowData is None:
            return
        self.enable = axsCfgProbeExpectWindowData.Enable()
        self.start = axsCfgProbeExpectWindowData.Start()
        self.end = axsCfgProbeExpectWindowData.End()

    # AxsCfgProbeExpectWindowDataT
    def Pack(self, builder):
        AxsCfgProbeExpectWindowDataStart(builder)
        AxsCfgProbeExpectWindowDataAddEnable(builder, self.enable)
        AxsCfgProbeExpectWindowDataAddStart(builder, self.start)
        AxsCfgProbeExpectWindowDataAddEnd(builder, self.end)
        axsCfgProbeExpectWindowData = AxsCfgProbeExpectWindowDataEnd(builder)
        return axsCfgProbeExpectWindowData
