# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.1.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class QRCodeConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'show_on_home_page': 'bool',
        'badge_enabled': 'bool',
        'qr_code_label_enabled': 'bool',
        'badge_position': 'str',
        'qr_code_label': 'str'
    }

    attribute_map = {
        'show_on_home_page': 'showOnHomePage',
        'badge_enabled': 'badgeEnabled',
        'qr_code_label_enabled': 'qrCodeLabelEnabled',
        'badge_position': 'badgePosition',
        'qr_code_label': 'qrCodeLabel'
    }

    def __init__(self, show_on_home_page=None, badge_enabled=None, qr_code_label_enabled=None, badge_position=None, qr_code_label=None):  # noqa: E501
        """QRCodeConfig - a model defined in Swagger"""  # noqa: E501
        self._show_on_home_page = None
        self._badge_enabled = None
        self._qr_code_label_enabled = None
        self._badge_position = None
        self._qr_code_label = None
        self.discriminator = None
        if show_on_home_page is not None:
            self.show_on_home_page = show_on_home_page
        if badge_enabled is not None:
            self.badge_enabled = badge_enabled
        if qr_code_label_enabled is not None:
            self.qr_code_label_enabled = qr_code_label_enabled
        if badge_position is not None:
            self.badge_position = badge_position
        if qr_code_label is not None:
            self.qr_code_label = qr_code_label

    @property
    def show_on_home_page(self):
        """Gets the show_on_home_page of this QRCodeConfig.  # noqa: E501


        :return: The show_on_home_page of this QRCodeConfig.  # noqa: E501
        :rtype: bool
        """
        return self._show_on_home_page

    @show_on_home_page.setter
    def show_on_home_page(self, show_on_home_page):
        """Sets the show_on_home_page of this QRCodeConfig.


        :param show_on_home_page: The show_on_home_page of this QRCodeConfig.  # noqa: E501
        :type: bool
        """

        self._show_on_home_page = show_on_home_page

    @property
    def badge_enabled(self):
        """Gets the badge_enabled of this QRCodeConfig.  # noqa: E501


        :return: The badge_enabled of this QRCodeConfig.  # noqa: E501
        :rtype: bool
        """
        return self._badge_enabled

    @badge_enabled.setter
    def badge_enabled(self, badge_enabled):
        """Sets the badge_enabled of this QRCodeConfig.


        :param badge_enabled: The badge_enabled of this QRCodeConfig.  # noqa: E501
        :type: bool
        """

        self._badge_enabled = badge_enabled

    @property
    def qr_code_label_enabled(self):
        """Gets the qr_code_label_enabled of this QRCodeConfig.  # noqa: E501


        :return: The qr_code_label_enabled of this QRCodeConfig.  # noqa: E501
        :rtype: bool
        """
        return self._qr_code_label_enabled

    @qr_code_label_enabled.setter
    def qr_code_label_enabled(self, qr_code_label_enabled):
        """Sets the qr_code_label_enabled of this QRCodeConfig.


        :param qr_code_label_enabled: The qr_code_label_enabled of this QRCodeConfig.  # noqa: E501
        :type: bool
        """

        self._qr_code_label_enabled = qr_code_label_enabled

    @property
    def badge_position(self):
        """Gets the badge_position of this QRCodeConfig.  # noqa: E501


        :return: The badge_position of this QRCodeConfig.  # noqa: E501
        :rtype: str
        """
        return self._badge_position

    @badge_position.setter
    def badge_position(self, badge_position):
        """Sets the badge_position of this QRCodeConfig.


        :param badge_position: The badge_position of this QRCodeConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["RIGHT", "LEFT"]  # noqa: E501
        if badge_position not in allowed_values:
            raise ValueError(
                "Invalid value for `badge_position` ({0}), must be one of {1}"  # noqa: E501
                .format(badge_position, allowed_values)
            )

        self._badge_position = badge_position

    @property
    def qr_code_label(self):
        """Gets the qr_code_label of this QRCodeConfig.  # noqa: E501


        :return: The qr_code_label of this QRCodeConfig.  # noqa: E501
        :rtype: str
        """
        return self._qr_code_label

    @qr_code_label.setter
    def qr_code_label(self, qr_code_label):
        """Sets the qr_code_label of this QRCodeConfig.


        :param qr_code_label: The qr_code_label of this QRCodeConfig.  # noqa: E501
        :type: str
        """

        self._qr_code_label = qr_code_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QRCodeConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QRCodeConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
