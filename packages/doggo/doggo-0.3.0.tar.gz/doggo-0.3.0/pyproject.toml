[project]
name = "doggo"
version = "0.3.0"
description = "Your loyal digital companion who finds files the way you think about them"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "n0lan"}
]
keywords = ["cli", "search", "ai", "semantic", "files", "images"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Utilities",
    "Topic :: Desktop Environment :: File Managers",
]

dependencies = [
    "click>=8.1.7",
    "openai>=1.0.0",
    "pillow>=10.0.0",
    "rich>=13.0.0",
    "chromadb>=0.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.3",
    "coverage>=7.6.1",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["doggo"]

[project.scripts]
doggo = "doggo.cli:main"

[project.urls]
Homepage = "https://github.com/0nsh/doggo"
Repository = "https://github.com/0nsh/doggo"
Issues = "https://github.com/0nsh/doggo"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
max-function-length = 10
extend-ignore = ["E203", "W503"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=doggo",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["doggo"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 