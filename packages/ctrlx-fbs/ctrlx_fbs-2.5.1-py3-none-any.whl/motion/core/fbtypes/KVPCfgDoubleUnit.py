# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Table for just one single double value, which has a unit (can be used for any floating point numbers, that are not unit-less)
class KVPCfgDoubleUnit(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KVPCfgDoubleUnit()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKVPCfgDoubleUnit(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KVPCfgDoubleUnit
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # the value
    # KVPCfgDoubleUnit
    def DoubleVal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # the unit of the value as string
    # KVPCfgDoubleUnit
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KVPCfgDoubleUnitStart(builder): builder.StartObject(2)
def Start(builder):
    return KVPCfgDoubleUnitStart(builder)
def KVPCfgDoubleUnitAddDoubleVal(builder, doubleVal): builder.PrependFloat64Slot(0, doubleVal, 0.0)
def AddDoubleVal(builder, doubleVal):
    return KVPCfgDoubleUnitAddDoubleVal(builder, doubleVal)
def KVPCfgDoubleUnitAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def AddUnit(builder, unit):
    return KVPCfgDoubleUnitAddUnit(builder, unit)
def KVPCfgDoubleUnitEnd(builder): return builder.EndObject()
def End(builder):
    return KVPCfgDoubleUnitEnd(builder)

class KVPCfgDoubleUnitT(object):

    # KVPCfgDoubleUnitT
    def __init__(self):
        self.doubleVal = 0.0  # type: float
        self.unit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kvpcfgDoubleUnit = KVPCfgDoubleUnit()
        kvpcfgDoubleUnit.Init(buf, pos)
        return cls.InitFromObj(kvpcfgDoubleUnit)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kvpcfgDoubleUnit):
        x = KVPCfgDoubleUnitT()
        x._UnPack(kvpcfgDoubleUnit)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.doubleVal == other.doubleVal and \
            self.unit == other.unit

    # KVPCfgDoubleUnitT
    def _UnPack(self, kvpcfgDoubleUnit):
        if kvpcfgDoubleUnit is None:
            return
        self.doubleVal = kvpcfgDoubleUnit.DoubleVal()
        self.unit = kvpcfgDoubleUnit.Unit()

    # KVPCfgDoubleUnitT
    def Pack(self, builder):
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        KVPCfgDoubleUnitStart(builder)
        KVPCfgDoubleUnitAddDoubleVal(builder, self.doubleVal)
        if self.unit is not None:
            KVPCfgDoubleUnitAddUnit(builder, unit)
        kvpcfgDoubleUnit = KVPCfgDoubleUnitEnd(builder)
        return kvpcfgDoubleUnit
