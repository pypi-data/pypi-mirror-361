# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CircleMeaning2dSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CircleMeaning2dSettings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCircleMeaning2dSettings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CircleMeaning2dSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CircleMeaning2dSettings
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def CircleMeaning2dSettingsStart(builder): builder.StartObject(1)
def Start(builder):
    return CircleMeaning2dSettingsStart(builder)
def CircleMeaning2dSettingsAddType(builder, type): builder.PrependInt8Slot(0, type, 0)
def AddType(builder, type):
    return CircleMeaning2dSettingsAddType(builder, type)
def CircleMeaning2dSettingsEnd(builder): return builder.EndObject()
def End(builder):
    return CircleMeaning2dSettingsEnd(builder)

class CircleMeaning2dSettingsT(object):

    # CircleMeaning2dSettingsT
    def __init__(self):
        self.type = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        circleMeaning2dSettings = CircleMeaning2dSettings()
        circleMeaning2dSettings.Init(buf, pos)
        return cls.InitFromObj(circleMeaning2dSettings)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, circleMeaning2dSettings):
        x = CircleMeaning2dSettingsT()
        x._UnPack(circleMeaning2dSettings)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.type == other.type

    # CircleMeaning2dSettingsT
    def _UnPack(self, circleMeaning2dSettings):
        if circleMeaning2dSettings is None:
            return
        self.type = circleMeaning2dSettings.Type()

    # CircleMeaning2dSettingsT
    def Pack(self, builder):
        CircleMeaning2dSettingsStart(builder)
        CircleMeaning2dSettingsAddType(builder, self.type)
        circleMeaning2dSettings = CircleMeaning2dSettingsEnd(builder)
        return circleMeaning2dSettings
