# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Master sync unit id list response.
class MsuIdListResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MsuIdListResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMsuIdListResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MsuIdListResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Master sync unit id numbers.
    # MsuIdListResponse
    def IdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # MsuIdListResponse
    def IdListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # MsuIdListResponse
    def IdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MsuIdListResponse
    def IdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def MsuIdListResponseStart(builder): builder.StartObject(1)
def Start(builder):
    return MsuIdListResponseStart(builder)
def MsuIdListResponseAddIdList(builder, idList): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idList), 0)
def AddIdList(builder, idList):
    return MsuIdListResponseAddIdList(builder, idList)
def MsuIdListResponseStartIdListVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def StartIdListVector(builder, numElems):
    return MsuIdListResponseStartIdListVector(builder, numElems)
def MsuIdListResponseEnd(builder): return builder.EndObject()
def End(builder):
    return MsuIdListResponseEnd(builder)
try:
    from typing import List
except:
    pass

class MsuIdListResponseT(object):

    # MsuIdListResponseT
    def __init__(self):
        self.idList = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        msuIdListResponse = MsuIdListResponse()
        msuIdListResponse.Init(buf, pos)
        return cls.InitFromObj(msuIdListResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, msuIdListResponse):
        x = MsuIdListResponseT()
        x._UnPack(msuIdListResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.idList == other.idList

    # MsuIdListResponseT
    def _UnPack(self, msuIdListResponse):
        if msuIdListResponse is None:
            return
        if not msuIdListResponse.IdListIsNone():
            if np is None:
                self.idList = []
                for i in range(msuIdListResponse.IdListLength()):
                    self.idList.append(msuIdListResponse.IdList(i))
            else:
                self.idList = msuIdListResponse.IdListAsNumpy()

    # MsuIdListResponseT
    def Pack(self, builder):
        if self.idList is not None:
            if np is not None and type(self.idList) is np.ndarray:
                idList = builder.CreateNumpyVector(self.idList)
            else:
                MsuIdListResponseStartIdListVector(builder, len(self.idList))
                for i in reversed(range(len(self.idList))):
                    builder.PrependUint16(self.idList[i])
                idList = builder.EndVector()
        MsuIdListResponseStart(builder)
        if self.idList is not None:
            MsuIdListResponseAddIdList(builder, idList)
        msuIdListResponse = MsuIdListResponseEnd(builder)
        return msuIdListResponse
