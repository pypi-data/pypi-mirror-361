# automatically generated by the FlatBuffers compiler, do not modify

# namespace: automation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DeleteOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeleteOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeleteOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DeleteOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # force close of all connections for this subscription
    # DeleteOptions
    def Forceclose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def DeleteOptionsStart(builder): builder.StartObject(1)
def Start(builder):
    return DeleteOptionsStart(builder)
def DeleteOptionsAddForceclose(builder, forceclose): builder.PrependBoolSlot(0, forceclose, 0)
def AddForceclose(builder, forceclose):
    return DeleteOptionsAddForceclose(builder, forceclose)
def DeleteOptionsEnd(builder): return builder.EndObject()
def End(builder):
    return DeleteOptionsEnd(builder)

class DeleteOptionsT(object):

    # DeleteOptionsT
    def __init__(self):
        self.forceclose = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        deleteOptions = DeleteOptions()
        deleteOptions.Init(buf, pos)
        return cls.InitFromObj(deleteOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, deleteOptions):
        x = DeleteOptionsT()
        x._UnPack(deleteOptions)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.forceclose == other.forceclose

    # DeleteOptionsT
    def _UnPack(self, deleteOptions):
        if deleteOptions is None:
            return
        self.forceclose = deleteOptions.Forceclose()

    # DeleteOptionsT
    def Pack(self, builder):
        DeleteOptionsStart(builder)
        DeleteOptionsAddForceclose(builder, self.forceclose)
        deleteOptions = DeleteOptionsEnd(builder)
        return deleteOptions
