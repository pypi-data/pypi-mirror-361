# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PubSubConfiguration2DataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PubSubConfiguration2DataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPubSubConfiguration2DataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PubSubConfiguration2DataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PubSubConfiguration2DataType
    def PublishedDataSets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.PublishedDataSetDataType import PublishedDataSetDataType
            obj = PublishedDataSetDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConfiguration2DataType
    def PublishedDataSetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubConfiguration2DataType
    def PublishedDataSetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # PubSubConfiguration2DataType
    def Connections(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.PubSubConnectionDataType import PubSubConnectionDataType
            obj = PubSubConnectionDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConfiguration2DataType
    def ConnectionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubConfiguration2DataType
    def ConnectionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # PubSubConfiguration2DataType
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PubSubConfiguration2DataType
    def SubscribedDataSets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.StandaloneSubscribedDataSetDataType import StandaloneSubscribedDataSetDataType
            obj = StandaloneSubscribedDataSetDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConfiguration2DataType
    def SubscribedDataSetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubConfiguration2DataType
    def SubscribedDataSetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # PubSubConfiguration2DataType
    def DataSetClasses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.DataSetMetaDataType import DataSetMetaDataType
            obj = DataSetMetaDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConfiguration2DataType
    def DataSetClassesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubConfiguration2DataType
    def DataSetClassesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # PubSubConfiguration2DataType
    def DefaultSecurityKeyServices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.EndpointDescription import EndpointDescription
            obj = EndpointDescription()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConfiguration2DataType
    def DefaultSecurityKeyServicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubConfiguration2DataType
    def DefaultSecurityKeyServicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # PubSubConfiguration2DataType
    def SecurityGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.SecurityGroupDataType import SecurityGroupDataType
            obj = SecurityGroupDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConfiguration2DataType
    def SecurityGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubConfiguration2DataType
    def SecurityGroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # PubSubConfiguration2DataType
    def PubSubKeyPushTargets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.PubSubKeyPushTargetDataType import PubSubKeyPushTargetDataType
            obj = PubSubKeyPushTargetDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConfiguration2DataType
    def PubSubKeyPushTargetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubConfiguration2DataType
    def PubSubKeyPushTargetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # PubSubConfiguration2DataType
    def ConfigurationVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PubSubConfiguration2DataType
    def ConfigurationProperties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.KeyValuePair import KeyValuePair
            obj = KeyValuePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConfiguration2DataType
    def ConfigurationPropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubConfiguration2DataType
    def ConfigurationPropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def PubSubConfiguration2DataTypeStart(builder): builder.StartObject(10)
def Start(builder):
    return PubSubConfiguration2DataTypeStart(builder)
def PubSubConfiguration2DataTypeAddPublishedDataSets(builder, publishedDataSets): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(publishedDataSets), 0)
def AddPublishedDataSets(builder, publishedDataSets):
    return PubSubConfiguration2DataTypeAddPublishedDataSets(builder, publishedDataSets)
def PubSubConfiguration2DataTypeStartPublishedDataSetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPublishedDataSetsVector(builder, numElems):
    return PubSubConfiguration2DataTypeStartPublishedDataSetsVector(builder, numElems)
def PubSubConfiguration2DataTypeAddConnections(builder, connections): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(connections), 0)
def AddConnections(builder, connections):
    return PubSubConfiguration2DataTypeAddConnections(builder, connections)
def PubSubConfiguration2DataTypeStartConnectionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartConnectionsVector(builder, numElems):
    return PubSubConfiguration2DataTypeStartConnectionsVector(builder, numElems)
def PubSubConfiguration2DataTypeAddEnabled(builder, enabled): builder.PrependBoolSlot(2, enabled, 0)
def AddEnabled(builder, enabled):
    return PubSubConfiguration2DataTypeAddEnabled(builder, enabled)
def PubSubConfiguration2DataTypeAddSubscribedDataSets(builder, subscribedDataSets): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(subscribedDataSets), 0)
def AddSubscribedDataSets(builder, subscribedDataSets):
    return PubSubConfiguration2DataTypeAddSubscribedDataSets(builder, subscribedDataSets)
def PubSubConfiguration2DataTypeStartSubscribedDataSetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSubscribedDataSetsVector(builder, numElems):
    return PubSubConfiguration2DataTypeStartSubscribedDataSetsVector(builder, numElems)
def PubSubConfiguration2DataTypeAddDataSetClasses(builder, dataSetClasses): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetClasses), 0)
def AddDataSetClasses(builder, dataSetClasses):
    return PubSubConfiguration2DataTypeAddDataSetClasses(builder, dataSetClasses)
def PubSubConfiguration2DataTypeStartDataSetClassesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDataSetClassesVector(builder, numElems):
    return PubSubConfiguration2DataTypeStartDataSetClassesVector(builder, numElems)
def PubSubConfiguration2DataTypeAddDefaultSecurityKeyServices(builder, defaultSecurityKeyServices): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(defaultSecurityKeyServices), 0)
def AddDefaultSecurityKeyServices(builder, defaultSecurityKeyServices):
    return PubSubConfiguration2DataTypeAddDefaultSecurityKeyServices(builder, defaultSecurityKeyServices)
def PubSubConfiguration2DataTypeStartDefaultSecurityKeyServicesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDefaultSecurityKeyServicesVector(builder, numElems):
    return PubSubConfiguration2DataTypeStartDefaultSecurityKeyServicesVector(builder, numElems)
def PubSubConfiguration2DataTypeAddSecurityGroups(builder, securityGroups): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(securityGroups), 0)
def AddSecurityGroups(builder, securityGroups):
    return PubSubConfiguration2DataTypeAddSecurityGroups(builder, securityGroups)
def PubSubConfiguration2DataTypeStartSecurityGroupsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSecurityGroupsVector(builder, numElems):
    return PubSubConfiguration2DataTypeStartSecurityGroupsVector(builder, numElems)
def PubSubConfiguration2DataTypeAddPubSubKeyPushTargets(builder, pubSubKeyPushTargets): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(pubSubKeyPushTargets), 0)
def AddPubSubKeyPushTargets(builder, pubSubKeyPushTargets):
    return PubSubConfiguration2DataTypeAddPubSubKeyPushTargets(builder, pubSubKeyPushTargets)
def PubSubConfiguration2DataTypeStartPubSubKeyPushTargetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPubSubKeyPushTargetsVector(builder, numElems):
    return PubSubConfiguration2DataTypeStartPubSubKeyPushTargetsVector(builder, numElems)
def PubSubConfiguration2DataTypeAddConfigurationVersion(builder, configurationVersion): builder.PrependUint32Slot(8, configurationVersion, 0)
def AddConfigurationVersion(builder, configurationVersion):
    return PubSubConfiguration2DataTypeAddConfigurationVersion(builder, configurationVersion)
def PubSubConfiguration2DataTypeAddConfigurationProperties(builder, configurationProperties): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(configurationProperties), 0)
def AddConfigurationProperties(builder, configurationProperties):
    return PubSubConfiguration2DataTypeAddConfigurationProperties(builder, configurationProperties)
def PubSubConfiguration2DataTypeStartConfigurationPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartConfigurationPropertiesVector(builder, numElems):
    return PubSubConfiguration2DataTypeStartConfigurationPropertiesVector(builder, numElems)
def PubSubConfiguration2DataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return PubSubConfiguration2DataTypeEnd(builder)
import comm.opcua.structure.DataSetMetaDataType
import comm.opcua.structure.EndpointDescription
import comm.opcua.structure.KeyValuePair
import comm.opcua.structure.PubSubConnectionDataType
import comm.opcua.structure.PubSubKeyPushTargetDataType
import comm.opcua.structure.PublishedDataSetDataType
import comm.opcua.structure.SecurityGroupDataType
import comm.opcua.structure.StandaloneSubscribedDataSetDataType
try:
    from typing import List
except:
    pass

class PubSubConfiguration2DataTypeT(object):

    # PubSubConfiguration2DataTypeT
    def __init__(self):
        self.publishedDataSets = None  # type: List[comm.opcua.structure.PublishedDataSetDataType.PublishedDataSetDataTypeT]
        self.connections = None  # type: List[comm.opcua.structure.PubSubConnectionDataType.PubSubConnectionDataTypeT]
        self.enabled = False  # type: bool
        self.subscribedDataSets = None  # type: List[comm.opcua.structure.StandaloneSubscribedDataSetDataType.StandaloneSubscribedDataSetDataTypeT]
        self.dataSetClasses = None  # type: List[comm.opcua.structure.DataSetMetaDataType.DataSetMetaDataTypeT]
        self.defaultSecurityKeyServices = None  # type: List[comm.opcua.structure.EndpointDescription.EndpointDescriptionT]
        self.securityGroups = None  # type: List[comm.opcua.structure.SecurityGroupDataType.SecurityGroupDataTypeT]
        self.pubSubKeyPushTargets = None  # type: List[comm.opcua.structure.PubSubKeyPushTargetDataType.PubSubKeyPushTargetDataTypeT]
        self.configurationVersion = 0  # type: int
        self.configurationProperties = None  # type: List[comm.opcua.structure.KeyValuePair.KeyValuePairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pubSubConfiguration2DataType = PubSubConfiguration2DataType()
        pubSubConfiguration2DataType.Init(buf, pos)
        return cls.InitFromObj(pubSubConfiguration2DataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, pubSubConfiguration2DataType):
        x = PubSubConfiguration2DataTypeT()
        x._UnPack(pubSubConfiguration2DataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.publishedDataSets == other.publishedDataSets and \
            self.connections == other.connections and \
            self.enabled == other.enabled and \
            self.subscribedDataSets == other.subscribedDataSets and \
            self.dataSetClasses == other.dataSetClasses and \
            self.defaultSecurityKeyServices == other.defaultSecurityKeyServices and \
            self.securityGroups == other.securityGroups and \
            self.pubSubKeyPushTargets == other.pubSubKeyPushTargets and \
            self.configurationVersion == other.configurationVersion and \
            self.configurationProperties == other.configurationProperties

    # PubSubConfiguration2DataTypeT
    def _UnPack(self, pubSubConfiguration2DataType):
        if pubSubConfiguration2DataType is None:
            return
        if not pubSubConfiguration2DataType.PublishedDataSetsIsNone():
            self.publishedDataSets = []
            for i in range(pubSubConfiguration2DataType.PublishedDataSetsLength()):
                if pubSubConfiguration2DataType.PublishedDataSets(i) is None:
                    self.publishedDataSets.append(None)
                else:
                    publishedDataSetDataType_ = comm.opcua.structure.PublishedDataSetDataType.PublishedDataSetDataTypeT.InitFromObj(pubSubConfiguration2DataType.PublishedDataSets(i))
                    self.publishedDataSets.append(publishedDataSetDataType_)
        if not pubSubConfiguration2DataType.ConnectionsIsNone():
            self.connections = []
            for i in range(pubSubConfiguration2DataType.ConnectionsLength()):
                if pubSubConfiguration2DataType.Connections(i) is None:
                    self.connections.append(None)
                else:
                    pubSubConnectionDataType_ = comm.opcua.structure.PubSubConnectionDataType.PubSubConnectionDataTypeT.InitFromObj(pubSubConfiguration2DataType.Connections(i))
                    self.connections.append(pubSubConnectionDataType_)
        self.enabled = pubSubConfiguration2DataType.Enabled()
        if not pubSubConfiguration2DataType.SubscribedDataSetsIsNone():
            self.subscribedDataSets = []
            for i in range(pubSubConfiguration2DataType.SubscribedDataSetsLength()):
                if pubSubConfiguration2DataType.SubscribedDataSets(i) is None:
                    self.subscribedDataSets.append(None)
                else:
                    standaloneSubscribedDataSetDataType_ = comm.opcua.structure.StandaloneSubscribedDataSetDataType.StandaloneSubscribedDataSetDataTypeT.InitFromObj(pubSubConfiguration2DataType.SubscribedDataSets(i))
                    self.subscribedDataSets.append(standaloneSubscribedDataSetDataType_)
        if not pubSubConfiguration2DataType.DataSetClassesIsNone():
            self.dataSetClasses = []
            for i in range(pubSubConfiguration2DataType.DataSetClassesLength()):
                if pubSubConfiguration2DataType.DataSetClasses(i) is None:
                    self.dataSetClasses.append(None)
                else:
                    dataSetMetaDataType_ = comm.opcua.structure.DataSetMetaDataType.DataSetMetaDataTypeT.InitFromObj(pubSubConfiguration2DataType.DataSetClasses(i))
                    self.dataSetClasses.append(dataSetMetaDataType_)
        if not pubSubConfiguration2DataType.DefaultSecurityKeyServicesIsNone():
            self.defaultSecurityKeyServices = []
            for i in range(pubSubConfiguration2DataType.DefaultSecurityKeyServicesLength()):
                if pubSubConfiguration2DataType.DefaultSecurityKeyServices(i) is None:
                    self.defaultSecurityKeyServices.append(None)
                else:
                    endpointDescription_ = comm.opcua.structure.EndpointDescription.EndpointDescriptionT.InitFromObj(pubSubConfiguration2DataType.DefaultSecurityKeyServices(i))
                    self.defaultSecurityKeyServices.append(endpointDescription_)
        if not pubSubConfiguration2DataType.SecurityGroupsIsNone():
            self.securityGroups = []
            for i in range(pubSubConfiguration2DataType.SecurityGroupsLength()):
                if pubSubConfiguration2DataType.SecurityGroups(i) is None:
                    self.securityGroups.append(None)
                else:
                    securityGroupDataType_ = comm.opcua.structure.SecurityGroupDataType.SecurityGroupDataTypeT.InitFromObj(pubSubConfiguration2DataType.SecurityGroups(i))
                    self.securityGroups.append(securityGroupDataType_)
        if not pubSubConfiguration2DataType.PubSubKeyPushTargetsIsNone():
            self.pubSubKeyPushTargets = []
            for i in range(pubSubConfiguration2DataType.PubSubKeyPushTargetsLength()):
                if pubSubConfiguration2DataType.PubSubKeyPushTargets(i) is None:
                    self.pubSubKeyPushTargets.append(None)
                else:
                    pubSubKeyPushTargetDataType_ = comm.opcua.structure.PubSubKeyPushTargetDataType.PubSubKeyPushTargetDataTypeT.InitFromObj(pubSubConfiguration2DataType.PubSubKeyPushTargets(i))
                    self.pubSubKeyPushTargets.append(pubSubKeyPushTargetDataType_)
        self.configurationVersion = pubSubConfiguration2DataType.ConfigurationVersion()
        if not pubSubConfiguration2DataType.ConfigurationPropertiesIsNone():
            self.configurationProperties = []
            for i in range(pubSubConfiguration2DataType.ConfigurationPropertiesLength()):
                if pubSubConfiguration2DataType.ConfigurationProperties(i) is None:
                    self.configurationProperties.append(None)
                else:
                    keyValuePair_ = comm.opcua.structure.KeyValuePair.KeyValuePairT.InitFromObj(pubSubConfiguration2DataType.ConfigurationProperties(i))
                    self.configurationProperties.append(keyValuePair_)

    # PubSubConfiguration2DataTypeT
    def Pack(self, builder):
        if self.publishedDataSets is not None:
            publishedDataSetslist = []
            for i in range(len(self.publishedDataSets)):
                publishedDataSetslist.append(self.publishedDataSets[i].Pack(builder))
            PubSubConfiguration2DataTypeStartPublishedDataSetsVector(builder, len(self.publishedDataSets))
            for i in reversed(range(len(self.publishedDataSets))):
                builder.PrependUOffsetTRelative(publishedDataSetslist[i])
            publishedDataSets = builder.EndVector()
        if self.connections is not None:
            connectionslist = []
            for i in range(len(self.connections)):
                connectionslist.append(self.connections[i].Pack(builder))
            PubSubConfiguration2DataTypeStartConnectionsVector(builder, len(self.connections))
            for i in reversed(range(len(self.connections))):
                builder.PrependUOffsetTRelative(connectionslist[i])
            connections = builder.EndVector()
        if self.subscribedDataSets is not None:
            subscribedDataSetslist = []
            for i in range(len(self.subscribedDataSets)):
                subscribedDataSetslist.append(self.subscribedDataSets[i].Pack(builder))
            PubSubConfiguration2DataTypeStartSubscribedDataSetsVector(builder, len(self.subscribedDataSets))
            for i in reversed(range(len(self.subscribedDataSets))):
                builder.PrependUOffsetTRelative(subscribedDataSetslist[i])
            subscribedDataSets = builder.EndVector()
        if self.dataSetClasses is not None:
            dataSetClasseslist = []
            for i in range(len(self.dataSetClasses)):
                dataSetClasseslist.append(self.dataSetClasses[i].Pack(builder))
            PubSubConfiguration2DataTypeStartDataSetClassesVector(builder, len(self.dataSetClasses))
            for i in reversed(range(len(self.dataSetClasses))):
                builder.PrependUOffsetTRelative(dataSetClasseslist[i])
            dataSetClasses = builder.EndVector()
        if self.defaultSecurityKeyServices is not None:
            defaultSecurityKeyServiceslist = []
            for i in range(len(self.defaultSecurityKeyServices)):
                defaultSecurityKeyServiceslist.append(self.defaultSecurityKeyServices[i].Pack(builder))
            PubSubConfiguration2DataTypeStartDefaultSecurityKeyServicesVector(builder, len(self.defaultSecurityKeyServices))
            for i in reversed(range(len(self.defaultSecurityKeyServices))):
                builder.PrependUOffsetTRelative(defaultSecurityKeyServiceslist[i])
            defaultSecurityKeyServices = builder.EndVector()
        if self.securityGroups is not None:
            securityGroupslist = []
            for i in range(len(self.securityGroups)):
                securityGroupslist.append(self.securityGroups[i].Pack(builder))
            PubSubConfiguration2DataTypeStartSecurityGroupsVector(builder, len(self.securityGroups))
            for i in reversed(range(len(self.securityGroups))):
                builder.PrependUOffsetTRelative(securityGroupslist[i])
            securityGroups = builder.EndVector()
        if self.pubSubKeyPushTargets is not None:
            pubSubKeyPushTargetslist = []
            for i in range(len(self.pubSubKeyPushTargets)):
                pubSubKeyPushTargetslist.append(self.pubSubKeyPushTargets[i].Pack(builder))
            PubSubConfiguration2DataTypeStartPubSubKeyPushTargetsVector(builder, len(self.pubSubKeyPushTargets))
            for i in reversed(range(len(self.pubSubKeyPushTargets))):
                builder.PrependUOffsetTRelative(pubSubKeyPushTargetslist[i])
            pubSubKeyPushTargets = builder.EndVector()
        if self.configurationProperties is not None:
            configurationPropertieslist = []
            for i in range(len(self.configurationProperties)):
                configurationPropertieslist.append(self.configurationProperties[i].Pack(builder))
            PubSubConfiguration2DataTypeStartConfigurationPropertiesVector(builder, len(self.configurationProperties))
            for i in reversed(range(len(self.configurationProperties))):
                builder.PrependUOffsetTRelative(configurationPropertieslist[i])
            configurationProperties = builder.EndVector()
        PubSubConfiguration2DataTypeStart(builder)
        if self.publishedDataSets is not None:
            PubSubConfiguration2DataTypeAddPublishedDataSets(builder, publishedDataSets)
        if self.connections is not None:
            PubSubConfiguration2DataTypeAddConnections(builder, connections)
        PubSubConfiguration2DataTypeAddEnabled(builder, self.enabled)
        if self.subscribedDataSets is not None:
            PubSubConfiguration2DataTypeAddSubscribedDataSets(builder, subscribedDataSets)
        if self.dataSetClasses is not None:
            PubSubConfiguration2DataTypeAddDataSetClasses(builder, dataSetClasses)
        if self.defaultSecurityKeyServices is not None:
            PubSubConfiguration2DataTypeAddDefaultSecurityKeyServices(builder, defaultSecurityKeyServices)
        if self.securityGroups is not None:
            PubSubConfiguration2DataTypeAddSecurityGroups(builder, securityGroups)
        if self.pubSubKeyPushTargets is not None:
            PubSubConfiguration2DataTypeAddPubSubKeyPushTargets(builder, pubSubKeyPushTargets)
        PubSubConfiguration2DataTypeAddConfigurationVersion(builder, self.configurationVersion)
        if self.configurationProperties is not None:
            PubSubConfiguration2DataTypeAddConfigurationProperties(builder, configurationProperties)
        pubSubConfiguration2DataType = PubSubConfiguration2DataTypeEnd(builder)
        return pubSubConfiguration2DataType
