# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command wait for signal
class CmdOptionSetSignal(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CmdOptionSetSignal()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmdOptionSetSignal(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CmdOptionSetSignal
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # permanent type (e.g. "Once")
    # CmdOptionSetSignal
    def PermType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # signal Id
    # CmdOptionSetSignal
    def SignalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def CmdOptionSetSignalStart(builder): builder.StartObject(2)
def Start(builder):
    return CmdOptionSetSignalStart(builder)
def CmdOptionSetSignalAddPermType(builder, permType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(permType), 0)
def AddPermType(builder, permType):
    return CmdOptionSetSignalAddPermType(builder, permType)
def CmdOptionSetSignalAddSignalId(builder, signalId): builder.PrependUint32Slot(1, signalId, 0)
def AddSignalId(builder, signalId):
    return CmdOptionSetSignalAddSignalId(builder, signalId)
def CmdOptionSetSignalEnd(builder): return builder.EndObject()
def End(builder):
    return CmdOptionSetSignalEnd(builder)

class CmdOptionSetSignalT(object):

    # CmdOptionSetSignalT
    def __init__(self):
        self.permType = None  # type: str
        self.signalId = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdOptionSetSignal = CmdOptionSetSignal()
        cmdOptionSetSignal.Init(buf, pos)
        return cls.InitFromObj(cmdOptionSetSignal)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdOptionSetSignal):
        x = CmdOptionSetSignalT()
        x._UnPack(cmdOptionSetSignal)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.permType == other.permType and \
            self.signalId == other.signalId

    # CmdOptionSetSignalT
    def _UnPack(self, cmdOptionSetSignal):
        if cmdOptionSetSignal is None:
            return
        self.permType = cmdOptionSetSignal.PermType()
        self.signalId = cmdOptionSetSignal.SignalId()

    # CmdOptionSetSignalT
    def Pack(self, builder):
        if self.permType is not None:
            permType = builder.CreateString(self.permType)
        CmdOptionSetSignalStart(builder)
        if self.permType is not None:
            CmdOptionSetSignalAddPermType(builder, permType)
        CmdOptionSetSignalAddSignalId(builder, self.signalId)
        cmdOptionSetSignal = CmdOptionSetSignalEnd(builder)
        return cmdOptionSetSignal
