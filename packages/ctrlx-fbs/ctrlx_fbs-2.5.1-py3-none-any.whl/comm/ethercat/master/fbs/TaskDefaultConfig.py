# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Request a new EtherCAT-Master instance
class TaskDefaultConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TaskDefaultConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTaskDefaultConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TaskDefaultConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Default task configuration for EtherCAT callable
    # TaskDefaultConfig
    def DefaultTaskConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.TaskConfiguration import TaskConfiguration
            obj = TaskConfiguration()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TaskDefaultConfigStart(builder): builder.StartObject(1)
def Start(builder):
    return TaskDefaultConfigStart(builder)
def TaskDefaultConfigAddDefaultTaskConfig(builder, defaultTaskConfig): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(defaultTaskConfig), 0)
def AddDefaultTaskConfig(builder, defaultTaskConfig):
    return TaskDefaultConfigAddDefaultTaskConfig(builder, defaultTaskConfig)
def TaskDefaultConfigEnd(builder): return builder.EndObject()
def End(builder):
    return TaskDefaultConfigEnd(builder)
import comm.ethercat.master.fbs.TaskConfiguration
try:
    from typing import Optional
except:
    pass

class TaskDefaultConfigT(object):

    # TaskDefaultConfigT
    def __init__(self):
        self.defaultTaskConfig = None  # type: Optional[comm.ethercat.master.fbs.TaskConfiguration.TaskConfigurationT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        taskDefaultConfig = TaskDefaultConfig()
        taskDefaultConfig.Init(buf, pos)
        return cls.InitFromObj(taskDefaultConfig)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, taskDefaultConfig):
        x = TaskDefaultConfigT()
        x._UnPack(taskDefaultConfig)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.defaultTaskConfig == other.defaultTaskConfig

    # TaskDefaultConfigT
    def _UnPack(self, taskDefaultConfig):
        if taskDefaultConfig is None:
            return
        if taskDefaultConfig.DefaultTaskConfig() is not None:
            self.defaultTaskConfig = comm.ethercat.master.fbs.TaskConfiguration.TaskConfigurationT.InitFromObj(taskDefaultConfig.DefaultTaskConfig())

    # TaskDefaultConfigT
    def Pack(self, builder):
        if self.defaultTaskConfig is not None:
            defaultTaskConfig = self.defaultTaskConfig.Pack(builder)
        TaskDefaultConfigStart(builder)
        if self.defaultTaskConfig is not None:
            TaskDefaultConfigAddDefaultTaskConfig(builder, defaultTaskConfig)
        taskDefaultConfig = TaskDefaultConfigEnd(builder)
        return taskDefaultConfig
