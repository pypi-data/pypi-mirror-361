# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard Professional Edition IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.1.0PE
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class OtherConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fw_update_strategy': 'int',
        'sw_update_strategy': 'int',
        'client_only_observe_after_connect': 'int',
        'power_mode': 'str',
        'psm_activity_timer': 'int',
        'edrx_cycle': 'int',
        'paging_transmission_window': 'int',
        'fw_update_resource': 'str',
        'sw_update_resource': 'str',
        'default_object_id_ver': 'str'
    }

    attribute_map = {
        'fw_update_strategy': 'fwUpdateStrategy',
        'sw_update_strategy': 'swUpdateStrategy',
        'client_only_observe_after_connect': 'clientOnlyObserveAfterConnect',
        'power_mode': 'powerMode',
        'psm_activity_timer': 'psmActivityTimer',
        'edrx_cycle': 'edrxCycle',
        'paging_transmission_window': 'pagingTransmissionWindow',
        'fw_update_resource': 'fwUpdateResource',
        'sw_update_resource': 'swUpdateResource',
        'default_object_id_ver': 'defaultObjectIDVer'
    }

    def __init__(self, fw_update_strategy=None, sw_update_strategy=None, client_only_observe_after_connect=None, power_mode=None, psm_activity_timer=None, edrx_cycle=None, paging_transmission_window=None, fw_update_resource=None, sw_update_resource=None, default_object_id_ver=None):  # noqa: E501
        """OtherConfiguration - a model defined in Swagger"""  # noqa: E501
        self._fw_update_strategy = None
        self._sw_update_strategy = None
        self._client_only_observe_after_connect = None
        self._power_mode = None
        self._psm_activity_timer = None
        self._edrx_cycle = None
        self._paging_transmission_window = None
        self._fw_update_resource = None
        self._sw_update_resource = None
        self._default_object_id_ver = None
        self.discriminator = None
        if fw_update_strategy is not None:
            self.fw_update_strategy = fw_update_strategy
        if sw_update_strategy is not None:
            self.sw_update_strategy = sw_update_strategy
        if client_only_observe_after_connect is not None:
            self.client_only_observe_after_connect = client_only_observe_after_connect
        if power_mode is not None:
            self.power_mode = power_mode
        if psm_activity_timer is not None:
            self.psm_activity_timer = psm_activity_timer
        if edrx_cycle is not None:
            self.edrx_cycle = edrx_cycle
        if paging_transmission_window is not None:
            self.paging_transmission_window = paging_transmission_window
        if fw_update_resource is not None:
            self.fw_update_resource = fw_update_resource
        if sw_update_resource is not None:
            self.sw_update_resource = sw_update_resource
        if default_object_id_ver is not None:
            self.default_object_id_ver = default_object_id_ver

    @property
    def fw_update_strategy(self):
        """Gets the fw_update_strategy of this OtherConfiguration.  # noqa: E501


        :return: The fw_update_strategy of this OtherConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._fw_update_strategy

    @fw_update_strategy.setter
    def fw_update_strategy(self, fw_update_strategy):
        """Sets the fw_update_strategy of this OtherConfiguration.


        :param fw_update_strategy: The fw_update_strategy of this OtherConfiguration.  # noqa: E501
        :type: int
        """

        self._fw_update_strategy = fw_update_strategy

    @property
    def sw_update_strategy(self):
        """Gets the sw_update_strategy of this OtherConfiguration.  # noqa: E501


        :return: The sw_update_strategy of this OtherConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._sw_update_strategy

    @sw_update_strategy.setter
    def sw_update_strategy(self, sw_update_strategy):
        """Sets the sw_update_strategy of this OtherConfiguration.


        :param sw_update_strategy: The sw_update_strategy of this OtherConfiguration.  # noqa: E501
        :type: int
        """

        self._sw_update_strategy = sw_update_strategy

    @property
    def client_only_observe_after_connect(self):
        """Gets the client_only_observe_after_connect of this OtherConfiguration.  # noqa: E501


        :return: The client_only_observe_after_connect of this OtherConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._client_only_observe_after_connect

    @client_only_observe_after_connect.setter
    def client_only_observe_after_connect(self, client_only_observe_after_connect):
        """Sets the client_only_observe_after_connect of this OtherConfiguration.


        :param client_only_observe_after_connect: The client_only_observe_after_connect of this OtherConfiguration.  # noqa: E501
        :type: int
        """

        self._client_only_observe_after_connect = client_only_observe_after_connect

    @property
    def power_mode(self):
        """Gets the power_mode of this OtherConfiguration.  # noqa: E501


        :return: The power_mode of this OtherConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._power_mode

    @power_mode.setter
    def power_mode(self, power_mode):
        """Sets the power_mode of this OtherConfiguration.


        :param power_mode: The power_mode of this OtherConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["PSM", "DRX", "E_DRX"]  # noqa: E501
        if power_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `power_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(power_mode, allowed_values)
            )

        self._power_mode = power_mode

    @property
    def psm_activity_timer(self):
        """Gets the psm_activity_timer of this OtherConfiguration.  # noqa: E501


        :return: The psm_activity_timer of this OtherConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._psm_activity_timer

    @psm_activity_timer.setter
    def psm_activity_timer(self, psm_activity_timer):
        """Sets the psm_activity_timer of this OtherConfiguration.


        :param psm_activity_timer: The psm_activity_timer of this OtherConfiguration.  # noqa: E501
        :type: int
        """

        self._psm_activity_timer = psm_activity_timer

    @property
    def edrx_cycle(self):
        """Gets the edrx_cycle of this OtherConfiguration.  # noqa: E501


        :return: The edrx_cycle of this OtherConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._edrx_cycle

    @edrx_cycle.setter
    def edrx_cycle(self, edrx_cycle):
        """Sets the edrx_cycle of this OtherConfiguration.


        :param edrx_cycle: The edrx_cycle of this OtherConfiguration.  # noqa: E501
        :type: int
        """

        self._edrx_cycle = edrx_cycle

    @property
    def paging_transmission_window(self):
        """Gets the paging_transmission_window of this OtherConfiguration.  # noqa: E501


        :return: The paging_transmission_window of this OtherConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._paging_transmission_window

    @paging_transmission_window.setter
    def paging_transmission_window(self, paging_transmission_window):
        """Sets the paging_transmission_window of this OtherConfiguration.


        :param paging_transmission_window: The paging_transmission_window of this OtherConfiguration.  # noqa: E501
        :type: int
        """

        self._paging_transmission_window = paging_transmission_window

    @property
    def fw_update_resource(self):
        """Gets the fw_update_resource of this OtherConfiguration.  # noqa: E501


        :return: The fw_update_resource of this OtherConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._fw_update_resource

    @fw_update_resource.setter
    def fw_update_resource(self, fw_update_resource):
        """Sets the fw_update_resource of this OtherConfiguration.


        :param fw_update_resource: The fw_update_resource of this OtherConfiguration.  # noqa: E501
        :type: str
        """

        self._fw_update_resource = fw_update_resource

    @property
    def sw_update_resource(self):
        """Gets the sw_update_resource of this OtherConfiguration.  # noqa: E501


        :return: The sw_update_resource of this OtherConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._sw_update_resource

    @sw_update_resource.setter
    def sw_update_resource(self, sw_update_resource):
        """Sets the sw_update_resource of this OtherConfiguration.


        :param sw_update_resource: The sw_update_resource of this OtherConfiguration.  # noqa: E501
        :type: str
        """

        self._sw_update_resource = sw_update_resource

    @property
    def default_object_id_ver(self):
        """Gets the default_object_id_ver of this OtherConfiguration.  # noqa: E501


        :return: The default_object_id_ver of this OtherConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._default_object_id_ver

    @default_object_id_ver.setter
    def default_object_id_ver(self, default_object_id_ver):
        """Sets the default_object_id_ver of this OtherConfiguration.


        :param default_object_id_ver: The default_object_id_ver of this OtherConfiguration.  # noqa: E501
        :type: str
        """

        self._default_object_id_ver = default_object_id_ver

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OtherConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OtherConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
