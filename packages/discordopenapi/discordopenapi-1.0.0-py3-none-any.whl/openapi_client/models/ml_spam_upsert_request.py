# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.default_keyword_list_upsert_request_actions_inner import DefaultKeywordListUpsertRequestActionsInner
from typing import Optional, Set
from typing_extensions import Self

class MLSpamUpsertRequest(BaseModel):
    """
    MLSpamUpsertRequest
    """ # noqa: E501
    name: Annotated[str, Field(strict=True, max_length=100)]
    event_type: StrictInt
    actions: Optional[Annotated[List[DefaultKeywordListUpsertRequestActionsInner], Field(min_length=1, max_length=5)]] = None
    enabled: Optional[StrictBool] = None
    exempt_roles: Optional[Annotated[List[Annotated[str, Field(strict=True)]], Field(max_length=20)]] = None
    exempt_channels: Optional[Annotated[List[Annotated[str, Field(strict=True)]], Field(max_length=50)]] = None
    trigger_type: StrictInt
    trigger_metadata: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["name", "event_type", "actions", "enabled", "exempt_roles", "exempt_channels", "trigger_type", "trigger_metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MLSpamUpsertRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # set to None if actions (nullable) is None
        # and model_fields_set contains the field
        if self.actions is None and "actions" in self.model_fields_set:
            _dict['actions'] = None

        # set to None if enabled (nullable) is None
        # and model_fields_set contains the field
        if self.enabled is None and "enabled" in self.model_fields_set:
            _dict['enabled'] = None

        # set to None if exempt_roles (nullable) is None
        # and model_fields_set contains the field
        if self.exempt_roles is None and "exempt_roles" in self.model_fields_set:
            _dict['exempt_roles'] = None

        # set to None if exempt_channels (nullable) is None
        # and model_fields_set contains the field
        if self.exempt_channels is None and "exempt_channels" in self.model_fields_set:
            _dict['exempt_channels'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MLSpamUpsertRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "event_type": obj.get("event_type"),
            "actions": [DefaultKeywordListUpsertRequestActionsInner.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "enabled": obj.get("enabled"),
            "exempt_roles": obj.get("exempt_roles"),
            "exempt_channels": obj.get("exempt_channels"),
            "trigger_type": obj.get("trigger_type"),
            "trigger_metadata": obj.get("trigger_metadata")
        })
        return _obj


