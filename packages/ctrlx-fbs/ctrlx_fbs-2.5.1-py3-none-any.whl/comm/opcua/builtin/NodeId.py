# automatically generated by the FlatBuffers compiler, do not modify

# namespace: builtin

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NodeId(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NodeId()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNodeId(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NodeId
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NodeId
    def NodeIdUnionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # NodeId
    def NodeIdUnion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def NodeIdStart(builder): builder.StartObject(2)
def Start(builder):
    return NodeIdStart(builder)
def NodeIdAddNodeIdUnionType(builder, nodeIdUnionType): builder.PrependUint8Slot(0, nodeIdUnionType, 0)
def AddNodeIdUnionType(builder, nodeIdUnionType):
    return NodeIdAddNodeIdUnionType(builder, nodeIdUnionType)
def NodeIdAddNodeIdUnion(builder, nodeIdUnion): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodeIdUnion), 0)
def AddNodeIdUnion(builder, nodeIdUnion):
    return NodeIdAddNodeIdUnion(builder, nodeIdUnion)
def NodeIdEnd(builder): return builder.EndObject()
def End(builder):
    return NodeIdEnd(builder)
import comm.opcua.builtin.GuidNodeId
import comm.opcua.builtin.NodeIdUnion
import comm.opcua.builtin.NumericNodeId
import comm.opcua.builtin.OpaqueNodeId
import comm.opcua.builtin.StringNodeId
try:
    from typing import Union
except:
    pass

class NodeIdT(object):

    # NodeIdT
    def __init__(self):
        self.nodeIdUnionType = 0  # type: int
        self.nodeIdUnion = None  # type: Union[None, comm.opcua.builtin.NumericNodeId.NumericNodeIdT, comm.opcua.builtin.StringNodeId.StringNodeIdT, comm.opcua.builtin.GuidNodeId.GuidNodeIdT, comm.opcua.builtin.OpaqueNodeId.OpaqueNodeIdT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        nodeId = NodeId()
        nodeId.Init(buf, pos)
        return cls.InitFromObj(nodeId)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, nodeId):
        x = NodeIdT()
        x._UnPack(nodeId)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.nodeIdUnionType == other.nodeIdUnionType and \
            self.nodeIdUnion == other.nodeIdUnion

    # NodeIdT
    def _UnPack(self, nodeId):
        if nodeId is None:
            return
        self.nodeIdUnionType = nodeId.NodeIdUnionType()
        self.nodeIdUnion = comm.opcua.builtin.NodeIdUnion.NodeIdUnionCreator(self.nodeIdUnionType, nodeId.NodeIdUnion())

    # NodeIdT
    def Pack(self, builder):
        if self.nodeIdUnion is not None:
            nodeIdUnion = self.nodeIdUnion.Pack(builder)
        NodeIdStart(builder)
        NodeIdAddNodeIdUnionType(builder, self.nodeIdUnionType)
        if self.nodeIdUnion is not None:
            NodeIdAddNodeIdUnion(builder, nodeIdUnion)
        nodeId = NodeIdEnd(builder)
        return nodeId
