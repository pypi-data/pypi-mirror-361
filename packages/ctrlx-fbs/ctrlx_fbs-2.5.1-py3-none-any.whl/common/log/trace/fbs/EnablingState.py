# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table holds the enabling state of messages, warnings and errors of one trace unit.
class EnablingState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EnablingState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEnablingState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EnablingState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unit name of the registered trace unit.
    # EnablingState
    def UnitName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Enabling state of messages.
    # EnablingState
    def Messages(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Enabling state of warnings.
    # EnablingState
    def Warnings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Enabling state of errors.
    # EnablingState
    def Errors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def EnablingStateStart(builder): builder.StartObject(4)
def Start(builder):
    return EnablingStateStart(builder)
def EnablingStateAddUnitName(builder, unitName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unitName), 0)
def AddUnitName(builder, unitName):
    return EnablingStateAddUnitName(builder, unitName)
def EnablingStateAddMessages(builder, messages): builder.PrependBoolSlot(1, messages, 0)
def AddMessages(builder, messages):
    return EnablingStateAddMessages(builder, messages)
def EnablingStateAddWarnings(builder, warnings): builder.PrependBoolSlot(2, warnings, 0)
def AddWarnings(builder, warnings):
    return EnablingStateAddWarnings(builder, warnings)
def EnablingStateAddErrors(builder, errors): builder.PrependBoolSlot(3, errors, 0)
def AddErrors(builder, errors):
    return EnablingStateAddErrors(builder, errors)
def EnablingStateEnd(builder): return builder.EndObject()
def End(builder):
    return EnablingStateEnd(builder)

class EnablingStateT(object):

    # EnablingStateT
    def __init__(self):
        self.unitName = None  # type: str
        self.messages = False  # type: bool
        self.warnings = False  # type: bool
        self.errors = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        enablingState = EnablingState()
        enablingState.Init(buf, pos)
        return cls.InitFromObj(enablingState)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, enablingState):
        x = EnablingStateT()
        x._UnPack(enablingState)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.unitName == other.unitName and \
            self.messages == other.messages and \
            self.warnings == other.warnings and \
            self.errors == other.errors

    # EnablingStateT
    def _UnPack(self, enablingState):
        if enablingState is None:
            return
        self.unitName = enablingState.UnitName()
        self.messages = enablingState.Messages()
        self.warnings = enablingState.Warnings()
        self.errors = enablingState.Errors()

    # EnablingStateT
    def Pack(self, builder):
        if self.unitName is not None:
            unitName = builder.CreateString(self.unitName)
        EnablingStateStart(builder)
        if self.unitName is not None:
            EnablingStateAddUnitName(builder, unitName)
        EnablingStateAddMessages(builder, self.messages)
        EnablingStateAddWarnings(builder, self.warnings)
        EnablingStateAddErrors(builder, self.errors)
        enablingState = EnablingStateEnd(builder)
        return enablingState
