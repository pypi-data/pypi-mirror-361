# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.1.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Domain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'DomainId',
        'created_time': 'int',
        'tenant_id': 'TenantId',
        'name': 'str',
        'oauth2_enabled': 'bool',
        'propagate_to_edge': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'created_time': 'createdTime',
        'tenant_id': 'tenantId',
        'name': 'name',
        'oauth2_enabled': 'oauth2Enabled',
        'propagate_to_edge': 'propagateToEdge'
    }

    def __init__(self, id=None, created_time=None, tenant_id=None, name=None, oauth2_enabled=None, propagate_to_edge=None):  # noqa: E501
        """Domain - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_time = None
        self._tenant_id = None
        self._name = None
        self._oauth2_enabled = None
        self._propagate_to_edge = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_time is not None:
            self.created_time = created_time
        if tenant_id is not None:
            self.tenant_id = tenant_id
        self.name = name
        if oauth2_enabled is not None:
            self.oauth2_enabled = oauth2_enabled
        if propagate_to_edge is not None:
            self.propagate_to_edge = propagate_to_edge

    @property
    def id(self):
        """Gets the id of this Domain.  # noqa: E501


        :return: The id of this Domain.  # noqa: E501
        :rtype: DomainId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Domain.


        :param id: The id of this Domain.  # noqa: E501
        :type: DomainId
        """

        self._id = id

    @property
    def created_time(self):
        """Gets the created_time of this Domain.  # noqa: E501


        :return: The created_time of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Domain.


        :param created_time: The created_time of this Domain.  # noqa: E501
        :type: int
        """

        self._created_time = created_time

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Domain.  # noqa: E501


        :return: The tenant_id of this Domain.  # noqa: E501
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Domain.


        :param tenant_id: The tenant_id of this Domain.  # noqa: E501
        :type: TenantId
        """

        self._tenant_id = tenant_id

    @property
    def name(self):
        """Gets the name of this Domain.  # noqa: E501

        Domain name. Cannot be empty  # noqa: E501

        :return: The name of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Domain.

        Domain name. Cannot be empty  # noqa: E501

        :param name: The name of this Domain.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def oauth2_enabled(self):
        """Gets the oauth2_enabled of this Domain.  # noqa: E501

        Whether OAuth2 settings are enabled or not  # noqa: E501

        :return: The oauth2_enabled of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._oauth2_enabled

    @oauth2_enabled.setter
    def oauth2_enabled(self, oauth2_enabled):
        """Sets the oauth2_enabled of this Domain.

        Whether OAuth2 settings are enabled or not  # noqa: E501

        :param oauth2_enabled: The oauth2_enabled of this Domain.  # noqa: E501
        :type: bool
        """

        self._oauth2_enabled = oauth2_enabled

    @property
    def propagate_to_edge(self):
        """Gets the propagate_to_edge of this Domain.  # noqa: E501

        Whether OAuth2 settings are enabled on Edge or not  # noqa: E501

        :return: The propagate_to_edge of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._propagate_to_edge

    @propagate_to_edge.setter
    def propagate_to_edge(self, propagate_to_edge):
        """Sets the propagate_to_edge of this Domain.

        Whether OAuth2 settings are enabled on Edge or not  # noqa: E501

        :param propagate_to_edge: The propagate_to_edge of this Domain.  # noqa: E501
        :type: bool
        """

        self._propagate_to_edge = propagate_to_edge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Domain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Domain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
