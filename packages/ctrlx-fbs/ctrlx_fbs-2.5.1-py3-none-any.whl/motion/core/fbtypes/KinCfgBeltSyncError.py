# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of the error reaction in the motion kernel kinematics function 'belt synchronization'
class KinCfgBeltSyncError(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgBeltSyncError()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgBeltSyncError(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgBeltSyncError
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # type of the error reaction in the kinematics function 'belt synchronization'
    # KinCfgBeltSyncError
    def ErrorReactionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 2

    # direction of the retract motion in case of an error in the kinematics function 'belt synchronization'
    # KinCfgBeltSyncError
    def KinBeltRetractDirectionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 4

    # Value of the retract plane
    # KinCfgBeltSyncError
    def RetractPlaneValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of retractPlaneValue
    # KinCfgBeltSyncError
    def RetractPlaneValueUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dynamic limits of the retract motion (absolute values)
    # KinCfgBeltSyncError
    def RetractMotionLimits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgLimits import KinCfgLimits
            obj = KinCfgLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCfgBeltSyncErrorStart(builder): builder.StartObject(5)
def Start(builder):
    return KinCfgBeltSyncErrorStart(builder)
def KinCfgBeltSyncErrorAddErrorReactionType(builder, errorReactionType): builder.PrependInt8Slot(0, errorReactionType, 2)
def AddErrorReactionType(builder, errorReactionType):
    return KinCfgBeltSyncErrorAddErrorReactionType(builder, errorReactionType)
def KinCfgBeltSyncErrorAddKinBeltRetractDirectionType(builder, kinBeltRetractDirectionType): builder.PrependInt8Slot(1, kinBeltRetractDirectionType, 4)
def AddKinBeltRetractDirectionType(builder, kinBeltRetractDirectionType):
    return KinCfgBeltSyncErrorAddKinBeltRetractDirectionType(builder, kinBeltRetractDirectionType)
def KinCfgBeltSyncErrorAddRetractPlaneValue(builder, retractPlaneValue): builder.PrependFloat64Slot(2, retractPlaneValue, 0.0)
def AddRetractPlaneValue(builder, retractPlaneValue):
    return KinCfgBeltSyncErrorAddRetractPlaneValue(builder, retractPlaneValue)
def KinCfgBeltSyncErrorAddRetractPlaneValueUnit(builder, retractPlaneValueUnit): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(retractPlaneValueUnit), 0)
def AddRetractPlaneValueUnit(builder, retractPlaneValueUnit):
    return KinCfgBeltSyncErrorAddRetractPlaneValueUnit(builder, retractPlaneValueUnit)
def KinCfgBeltSyncErrorAddRetractMotionLimits(builder, retractMotionLimits): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(retractMotionLimits), 0)
def AddRetractMotionLimits(builder, retractMotionLimits):
    return KinCfgBeltSyncErrorAddRetractMotionLimits(builder, retractMotionLimits)
def KinCfgBeltSyncErrorEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgBeltSyncErrorEnd(builder)
import motion.core.fbtypes.KinCfgLimits
try:
    from typing import Optional
except:
    pass

class KinCfgBeltSyncErrorT(object):

    # KinCfgBeltSyncErrorT
    def __init__(self):
        self.errorReactionType = 2  # type: int
        self.kinBeltRetractDirectionType = 4  # type: int
        self.retractPlaneValue = 0.0  # type: float
        self.retractPlaneValueUnit = None  # type: str
        self.retractMotionLimits = None  # type: Optional[motion.core.fbtypes.KinCfgLimits.KinCfgLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgBeltSyncError = KinCfgBeltSyncError()
        kinCfgBeltSyncError.Init(buf, pos)
        return cls.InitFromObj(kinCfgBeltSyncError)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgBeltSyncError):
        x = KinCfgBeltSyncErrorT()
        x._UnPack(kinCfgBeltSyncError)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.errorReactionType == other.errorReactionType and \
            self.kinBeltRetractDirectionType == other.kinBeltRetractDirectionType and \
            self.retractPlaneValue == other.retractPlaneValue and \
            self.retractPlaneValueUnit == other.retractPlaneValueUnit and \
            self.retractMotionLimits == other.retractMotionLimits

    # KinCfgBeltSyncErrorT
    def _UnPack(self, kinCfgBeltSyncError):
        if kinCfgBeltSyncError is None:
            return
        self.errorReactionType = kinCfgBeltSyncError.ErrorReactionType()
        self.kinBeltRetractDirectionType = kinCfgBeltSyncError.KinBeltRetractDirectionType()
        self.retractPlaneValue = kinCfgBeltSyncError.RetractPlaneValue()
        self.retractPlaneValueUnit = kinCfgBeltSyncError.RetractPlaneValueUnit()
        if kinCfgBeltSyncError.RetractMotionLimits() is not None:
            self.retractMotionLimits = motion.core.fbtypes.KinCfgLimits.KinCfgLimitsT.InitFromObj(kinCfgBeltSyncError.RetractMotionLimits())

    # KinCfgBeltSyncErrorT
    def Pack(self, builder):
        if self.retractPlaneValueUnit is not None:
            retractPlaneValueUnit = builder.CreateString(self.retractPlaneValueUnit)
        if self.retractMotionLimits is not None:
            retractMotionLimits = self.retractMotionLimits.Pack(builder)
        KinCfgBeltSyncErrorStart(builder)
        KinCfgBeltSyncErrorAddErrorReactionType(builder, self.errorReactionType)
        KinCfgBeltSyncErrorAddKinBeltRetractDirectionType(builder, self.kinBeltRetractDirectionType)
        KinCfgBeltSyncErrorAddRetractPlaneValue(builder, self.retractPlaneValue)
        if self.retractPlaneValueUnit is not None:
            KinCfgBeltSyncErrorAddRetractPlaneValueUnit(builder, retractPlaneValueUnit)
        if self.retractMotionLimits is not None:
            KinCfgBeltSyncErrorAddRetractMotionLimits(builder, retractMotionLimits)
        kinCfgBeltSyncError = KinCfgBeltSyncErrorEnd(builder)
        return kinCfgBeltSyncError
