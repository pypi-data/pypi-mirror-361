# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a FlexProfile segment
class CfgFlexProfileSegment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CfgFlexProfileSegment()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCfgFlexProfileSegment(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CfgFlexProfileSegment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Gain/hub/lift of segment - slave range  (Y)   // Units
    # CfgFlexProfileSegment
    def Gain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Range of segment         - master range (X)   // Units
    # CfgFlexProfileSegment
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Start Velocity                                // Units/s
    # CfgFlexProfileSegment
    def V0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Start Acceleration                            // Units/s^2
    # CfgFlexProfileSegment
    def A0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Start Jerk                                    // Units/s^3
    # CfgFlexProfileSegment
    def J0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # End Velocity                                  // Units/s
    # CfgFlexProfileSegment
    def V1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # End Acceleration                              // Units/s^2
    # CfgFlexProfileSegment
    def A1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # End Jerk                                      // Units/s^3
    # CfgFlexProfileSegment
    def J1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Travel/Limit Velocity                         // Units/s
    # CfgFlexProfileSegment
    def LimV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Travel/Limit Acc                              // Units/s^2
    # CfgFlexProfileSegment
    def LimA0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Travel/Limit Dec                              // Units/s^2
    # CfgFlexProfileSegment
    def LimA1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Travel/Limit Acc-Jerk                         // Units/s^3
    # CfgFlexProfileSegment
    def LimJ0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Travel/Limit Acc-Jerk                         // Units/s^3
    # CfgFlexProfileSegment
    def LimJ1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Inflection point (Range 0.0 to 1.0)
    # CfgFlexProfileSegment
    def Lambda_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Type of the segment transition (fixed or flexible)
    # CfgFlexProfileSegment
    def SyncType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Type of the law (e.g. Polynomial 5th order)
    # CfgFlexProfileSegment
    def LawType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Name of the referenced point table for dedicated motion laws
    # CfgFlexProfileSegment
    def PointTableReference(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of the master (FML_MasterType - axis or time)
    # CfgFlexProfileSegment
    def Master(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # cam builder data (segment specific)
    # CfgFlexProfileSegment
    def CamBuilderSegmentData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CfgFlexProfileSegmentStart(builder): builder.StartObject(19)
def Start(builder):
    return CfgFlexProfileSegmentStart(builder)
def CfgFlexProfileSegmentAddGain(builder, gain): builder.PrependFloat64Slot(0, gain, 0.0)
def AddGain(builder, gain):
    return CfgFlexProfileSegmentAddGain(builder, gain)
def CfgFlexProfileSegmentAddRange(builder, range): builder.PrependFloat64Slot(1, range, 0.0)
def AddRange(builder, range):
    return CfgFlexProfileSegmentAddRange(builder, range)
def CfgFlexProfileSegmentAddV0(builder, v0): builder.PrependFloat64Slot(2, v0, 0.0)
def AddV0(builder, v0):
    return CfgFlexProfileSegmentAddV0(builder, v0)
def CfgFlexProfileSegmentAddA0(builder, a0): builder.PrependFloat64Slot(3, a0, 0.0)
def AddA0(builder, a0):
    return CfgFlexProfileSegmentAddA0(builder, a0)
def CfgFlexProfileSegmentAddJ0(builder, j0): builder.PrependFloat64Slot(4, j0, 0.0)
def AddJ0(builder, j0):
    return CfgFlexProfileSegmentAddJ0(builder, j0)
def CfgFlexProfileSegmentAddV1(builder, v1): builder.PrependFloat64Slot(5, v1, 0.0)
def AddV1(builder, v1):
    return CfgFlexProfileSegmentAddV1(builder, v1)
def CfgFlexProfileSegmentAddA1(builder, a1): builder.PrependFloat64Slot(6, a1, 0.0)
def AddA1(builder, a1):
    return CfgFlexProfileSegmentAddA1(builder, a1)
def CfgFlexProfileSegmentAddJ1(builder, j1): builder.PrependFloat64Slot(7, j1, 0.0)
def AddJ1(builder, j1):
    return CfgFlexProfileSegmentAddJ1(builder, j1)
def CfgFlexProfileSegmentAddLimV(builder, limV): builder.PrependFloat64Slot(8, limV, 0.0)
def AddLimV(builder, limV):
    return CfgFlexProfileSegmentAddLimV(builder, limV)
def CfgFlexProfileSegmentAddLimA0(builder, limA0): builder.PrependFloat64Slot(9, limA0, 0.0)
def AddLimA0(builder, limA0):
    return CfgFlexProfileSegmentAddLimA0(builder, limA0)
def CfgFlexProfileSegmentAddLimA1(builder, limA1): builder.PrependFloat64Slot(10, limA1, 0.0)
def AddLimA1(builder, limA1):
    return CfgFlexProfileSegmentAddLimA1(builder, limA1)
def CfgFlexProfileSegmentAddLimJ0(builder, limJ0): builder.PrependFloat64Slot(11, limJ0, 0.0)
def AddLimJ0(builder, limJ0):
    return CfgFlexProfileSegmentAddLimJ0(builder, limJ0)
def CfgFlexProfileSegmentAddLimJ1(builder, limJ1): builder.PrependFloat64Slot(12, limJ1, 0.0)
def AddLimJ1(builder, limJ1):
    return CfgFlexProfileSegmentAddLimJ1(builder, limJ1)
def CfgFlexProfileSegmentAddLambda_(builder, lambda_): builder.PrependFloat64Slot(13, lambda_, 0.0)
def AddLambda_(builder, lambda_):
    return CfgFlexProfileSegmentAddLambda_(builder, lambda_)
def CfgFlexProfileSegmentAddSyncType(builder, syncType): builder.PrependInt8Slot(14, syncType, 0)
def AddSyncType(builder, syncType):
    return CfgFlexProfileSegmentAddSyncType(builder, syncType)
def CfgFlexProfileSegmentAddLawType(builder, lawType): builder.PrependUint32Slot(15, lawType, 0)
def AddLawType(builder, lawType):
    return CfgFlexProfileSegmentAddLawType(builder, lawType)
def CfgFlexProfileSegmentAddPointTableReference(builder, pointTableReference): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(pointTableReference), 0)
def AddPointTableReference(builder, pointTableReference):
    return CfgFlexProfileSegmentAddPointTableReference(builder, pointTableReference)
def CfgFlexProfileSegmentAddMaster(builder, master): builder.PrependUint32Slot(17, master, 0)
def AddMaster(builder, master):
    return CfgFlexProfileSegmentAddMaster(builder, master)
def CfgFlexProfileSegmentAddCamBuilderSegmentData(builder, camBuilderSegmentData): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(camBuilderSegmentData), 0)
def AddCamBuilderSegmentData(builder, camBuilderSegmentData):
    return CfgFlexProfileSegmentAddCamBuilderSegmentData(builder, camBuilderSegmentData)
def CfgFlexProfileSegmentEnd(builder): return builder.EndObject()
def End(builder):
    return CfgFlexProfileSegmentEnd(builder)

class CfgFlexProfileSegmentT(object):

    # CfgFlexProfileSegmentT
    def __init__(self):
        self.gain = 0.0  # type: float
        self.range = 0.0  # type: float
        self.v0 = 0.0  # type: float
        self.a0 = 0.0  # type: float
        self.j0 = 0.0  # type: float
        self.v1 = 0.0  # type: float
        self.a1 = 0.0  # type: float
        self.j1 = 0.0  # type: float
        self.limV = 0.0  # type: float
        self.limA0 = 0.0  # type: float
        self.limA1 = 0.0  # type: float
        self.limJ0 = 0.0  # type: float
        self.limJ1 = 0.0  # type: float
        self.lambda_ = 0.0  # type: float
        self.syncType = 0  # type: int
        self.lawType = 0  # type: int
        self.pointTableReference = None  # type: str
        self.master = 0  # type: int
        self.camBuilderSegmentData = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cfgFlexProfileSegment = CfgFlexProfileSegment()
        cfgFlexProfileSegment.Init(buf, pos)
        return cls.InitFromObj(cfgFlexProfileSegment)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cfgFlexProfileSegment):
        x = CfgFlexProfileSegmentT()
        x._UnPack(cfgFlexProfileSegment)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.gain == other.gain and \
            self.range == other.range and \
            self.v0 == other.v0 and \
            self.a0 == other.a0 and \
            self.j0 == other.j0 and \
            self.v1 == other.v1 and \
            self.a1 == other.a1 and \
            self.j1 == other.j1 and \
            self.limV == other.limV and \
            self.limA0 == other.limA0 and \
            self.limA1 == other.limA1 and \
            self.limJ0 == other.limJ0 and \
            self.limJ1 == other.limJ1 and \
            self.lambda_ == other.lambda_ and \
            self.syncType == other.syncType and \
            self.lawType == other.lawType and \
            self.pointTableReference == other.pointTableReference and \
            self.master == other.master and \
            self.camBuilderSegmentData == other.camBuilderSegmentData

    # CfgFlexProfileSegmentT
    def _UnPack(self, cfgFlexProfileSegment):
        if cfgFlexProfileSegment is None:
            return
        self.gain = cfgFlexProfileSegment.Gain()
        self.range = cfgFlexProfileSegment.Range()
        self.v0 = cfgFlexProfileSegment.V0()
        self.a0 = cfgFlexProfileSegment.A0()
        self.j0 = cfgFlexProfileSegment.J0()
        self.v1 = cfgFlexProfileSegment.V1()
        self.a1 = cfgFlexProfileSegment.A1()
        self.j1 = cfgFlexProfileSegment.J1()
        self.limV = cfgFlexProfileSegment.LimV()
        self.limA0 = cfgFlexProfileSegment.LimA0()
        self.limA1 = cfgFlexProfileSegment.LimA1()
        self.limJ0 = cfgFlexProfileSegment.LimJ0()
        self.limJ1 = cfgFlexProfileSegment.LimJ1()
        self.lambda_ = cfgFlexProfileSegment.Lambda_()
        self.syncType = cfgFlexProfileSegment.SyncType()
        self.lawType = cfgFlexProfileSegment.LawType()
        self.pointTableReference = cfgFlexProfileSegment.PointTableReference()
        self.master = cfgFlexProfileSegment.Master()
        self.camBuilderSegmentData = cfgFlexProfileSegment.CamBuilderSegmentData()

    # CfgFlexProfileSegmentT
    def Pack(self, builder):
        if self.pointTableReference is not None:
            pointTableReference = builder.CreateString(self.pointTableReference)
        if self.camBuilderSegmentData is not None:
            camBuilderSegmentData = builder.CreateString(self.camBuilderSegmentData)
        CfgFlexProfileSegmentStart(builder)
        CfgFlexProfileSegmentAddGain(builder, self.gain)
        CfgFlexProfileSegmentAddRange(builder, self.range)
        CfgFlexProfileSegmentAddV0(builder, self.v0)
        CfgFlexProfileSegmentAddA0(builder, self.a0)
        CfgFlexProfileSegmentAddJ0(builder, self.j0)
        CfgFlexProfileSegmentAddV1(builder, self.v1)
        CfgFlexProfileSegmentAddA1(builder, self.a1)
        CfgFlexProfileSegmentAddJ1(builder, self.j1)
        CfgFlexProfileSegmentAddLimV(builder, self.limV)
        CfgFlexProfileSegmentAddLimA0(builder, self.limA0)
        CfgFlexProfileSegmentAddLimA1(builder, self.limA1)
        CfgFlexProfileSegmentAddLimJ0(builder, self.limJ0)
        CfgFlexProfileSegmentAddLimJ1(builder, self.limJ1)
        CfgFlexProfileSegmentAddLambda_(builder, self.lambda_)
        CfgFlexProfileSegmentAddSyncType(builder, self.syncType)
        CfgFlexProfileSegmentAddLawType(builder, self.lawType)
        if self.pointTableReference is not None:
            CfgFlexProfileSegmentAddPointTableReference(builder, pointTableReference)
        CfgFlexProfileSegmentAddMaster(builder, self.master)
        if self.camBuilderSegmentData is not None:
            CfgFlexProfileSegmentAddCamBuilderSegmentData(builder, camBuilderSegmentData)
        cfgFlexProfileSegment = CfgFlexProfileSegmentEnd(builder)
        return cfgFlexProfileSegment
