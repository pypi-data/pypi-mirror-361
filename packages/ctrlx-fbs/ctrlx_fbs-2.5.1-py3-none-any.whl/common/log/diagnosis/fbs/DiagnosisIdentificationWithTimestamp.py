# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines the unique identification of a diagnostic log in combination with additional information of the log.
class DiagnosisIdentificationWithTimestamp(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiagnosisIdentificationWithTimestamp()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiagnosisIdentificationWithTimestamp(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DiagnosisIdentificationWithTimestamp
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identification of the diagnostic log.
    # DiagnosisIdentificationWithTimestamp
    def DiagnosisIdentification(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.log.diagnosis.fbs.DiagnosisIdentification import DiagnosisIdentification
            obj = DiagnosisIdentification()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Timestamp of the diagnostic log.
    # DiagnosisIdentificationWithTimestamp
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # User id of the user who notified the log.
    # DiagnosisIdentificationWithTimestamp
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Snap that notified the log (e.g. Automation Core).
    # DiagnosisIdentificationWithTimestamp
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unit name of the component that notified the log (e.g. comm.datalayer).
    # DiagnosisIdentificationWithTimestamp
    def UnitName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the file from where the log was notified.
    # DiagnosisIdentificationWithTimestamp
    def FileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the function from where the log was notified.
    # DiagnosisIdentificationWithTimestamp
    def FunctionName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Line number from where the log was notified.
    # DiagnosisIdentificationWithTimestamp
    def LineNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Dynamic description for additional dynamic elements.
    # DiagnosisIdentificationWithTimestamp
    def DynamicDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiagnosisIdentificationWithTimestampStart(builder): builder.StartObject(9)
def Start(builder):
    return DiagnosisIdentificationWithTimestampStart(builder)
def DiagnosisIdentificationWithTimestampAddDiagnosisIdentification(builder, diagnosisIdentification): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(diagnosisIdentification), 0)
def AddDiagnosisIdentification(builder, diagnosisIdentification):
    return DiagnosisIdentificationWithTimestampAddDiagnosisIdentification(builder, diagnosisIdentification)
def DiagnosisIdentificationWithTimestampAddTimestamp(builder, timestamp): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)
def AddTimestamp(builder, timestamp):
    return DiagnosisIdentificationWithTimestampAddTimestamp(builder, timestamp)
def DiagnosisIdentificationWithTimestampAddUserId(builder, userId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(userId), 0)
def AddUserId(builder, userId):
    return DiagnosisIdentificationWithTimestampAddUserId(builder, userId)
def DiagnosisIdentificationWithTimestampAddOrigin(builder, origin): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)
def AddOrigin(builder, origin):
    return DiagnosisIdentificationWithTimestampAddOrigin(builder, origin)
def DiagnosisIdentificationWithTimestampAddUnitName(builder, unitName): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unitName), 0)
def AddUnitName(builder, unitName):
    return DiagnosisIdentificationWithTimestampAddUnitName(builder, unitName)
def DiagnosisIdentificationWithTimestampAddFileName(builder, fileName): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(fileName), 0)
def AddFileName(builder, fileName):
    return DiagnosisIdentificationWithTimestampAddFileName(builder, fileName)
def DiagnosisIdentificationWithTimestampAddFunctionName(builder, functionName): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(functionName), 0)
def AddFunctionName(builder, functionName):
    return DiagnosisIdentificationWithTimestampAddFunctionName(builder, functionName)
def DiagnosisIdentificationWithTimestampAddLineNumber(builder, lineNumber): builder.PrependUint32Slot(7, lineNumber, 0)
def AddLineNumber(builder, lineNumber):
    return DiagnosisIdentificationWithTimestampAddLineNumber(builder, lineNumber)
def DiagnosisIdentificationWithTimestampAddDynamicDescription(builder, dynamicDescription): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(dynamicDescription), 0)
def AddDynamicDescription(builder, dynamicDescription):
    return DiagnosisIdentificationWithTimestampAddDynamicDescription(builder, dynamicDescription)
def DiagnosisIdentificationWithTimestampEnd(builder): return builder.EndObject()
def End(builder):
    return DiagnosisIdentificationWithTimestampEnd(builder)
import common.log.diagnosis.fbs.DiagnosisIdentification
try:
    from typing import Optional
except:
    pass

class DiagnosisIdentificationWithTimestampT(object):

    # DiagnosisIdentificationWithTimestampT
    def __init__(self):
        self.diagnosisIdentification = None  # type: Optional[common.log.diagnosis.fbs.DiagnosisIdentification.DiagnosisIdentificationT]
        self.timestamp = None  # type: str
        self.userId = None  # type: str
        self.origin = None  # type: str
        self.unitName = None  # type: str
        self.fileName = None  # type: str
        self.functionName = None  # type: str
        self.lineNumber = 0  # type: int
        self.dynamicDescription = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diagnosisIdentificationWithTimestamp = DiagnosisIdentificationWithTimestamp()
        diagnosisIdentificationWithTimestamp.Init(buf, pos)
        return cls.InitFromObj(diagnosisIdentificationWithTimestamp)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, diagnosisIdentificationWithTimestamp):
        x = DiagnosisIdentificationWithTimestampT()
        x._UnPack(diagnosisIdentificationWithTimestamp)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.diagnosisIdentification == other.diagnosisIdentification and \
            self.timestamp == other.timestamp and \
            self.userId == other.userId and \
            self.origin == other.origin and \
            self.unitName == other.unitName and \
            self.fileName == other.fileName and \
            self.functionName == other.functionName and \
            self.lineNumber == other.lineNumber and \
            self.dynamicDescription == other.dynamicDescription

    # DiagnosisIdentificationWithTimestampT
    def _UnPack(self, diagnosisIdentificationWithTimestamp):
        if diagnosisIdentificationWithTimestamp is None:
            return
        if diagnosisIdentificationWithTimestamp.DiagnosisIdentification() is not None:
            self.diagnosisIdentification = common.log.diagnosis.fbs.DiagnosisIdentification.DiagnosisIdentificationT.InitFromObj(diagnosisIdentificationWithTimestamp.DiagnosisIdentification())
        self.timestamp = diagnosisIdentificationWithTimestamp.Timestamp()
        self.userId = diagnosisIdentificationWithTimestamp.UserId()
        self.origin = diagnosisIdentificationWithTimestamp.Origin()
        self.unitName = diagnosisIdentificationWithTimestamp.UnitName()
        self.fileName = diagnosisIdentificationWithTimestamp.FileName()
        self.functionName = diagnosisIdentificationWithTimestamp.FunctionName()
        self.lineNumber = diagnosisIdentificationWithTimestamp.LineNumber()
        self.dynamicDescription = diagnosisIdentificationWithTimestamp.DynamicDescription()

    # DiagnosisIdentificationWithTimestampT
    def Pack(self, builder):
        if self.diagnosisIdentification is not None:
            diagnosisIdentification = self.diagnosisIdentification.Pack(builder)
        if self.timestamp is not None:
            timestamp = builder.CreateString(self.timestamp)
        if self.userId is not None:
            userId = builder.CreateString(self.userId)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.unitName is not None:
            unitName = builder.CreateString(self.unitName)
        if self.fileName is not None:
            fileName = builder.CreateString(self.fileName)
        if self.functionName is not None:
            functionName = builder.CreateString(self.functionName)
        if self.dynamicDescription is not None:
            dynamicDescription = builder.CreateString(self.dynamicDescription)
        DiagnosisIdentificationWithTimestampStart(builder)
        if self.diagnosisIdentification is not None:
            DiagnosisIdentificationWithTimestampAddDiagnosisIdentification(builder, diagnosisIdentification)
        if self.timestamp is not None:
            DiagnosisIdentificationWithTimestampAddTimestamp(builder, timestamp)
        if self.userId is not None:
            DiagnosisIdentificationWithTimestampAddUserId(builder, userId)
        if self.origin is not None:
            DiagnosisIdentificationWithTimestampAddOrigin(builder, origin)
        if self.unitName is not None:
            DiagnosisIdentificationWithTimestampAddUnitName(builder, unitName)
        if self.fileName is not None:
            DiagnosisIdentificationWithTimestampAddFileName(builder, fileName)
        if self.functionName is not None:
            DiagnosisIdentificationWithTimestampAddFunctionName(builder, functionName)
        DiagnosisIdentificationWithTimestampAddLineNumber(builder, self.lineNumber)
        if self.dynamicDescription is not None:
            DiagnosisIdentificationWithTimestampAddDynamicDescription(builder, dynamicDescription)
        diagnosisIdentificationWithTimestamp = DiagnosisIdentificationWithTimestampEnd(builder)
        return diagnosisIdentificationWithTimestamp
