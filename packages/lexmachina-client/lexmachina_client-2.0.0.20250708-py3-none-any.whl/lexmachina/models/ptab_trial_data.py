# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20250708
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from lexmachina.models.administrative_patent_judge import AdministrativePatentJudge
from lexmachina.models.attorney import Attorney
from lexmachina.models.case_status import CaseStatus
from lexmachina.models.law_firm import LawFirm
from lexmachina.models.party import Party
from lexmachina.models.ptab_claim_findings import PTABClaimFindings
from lexmachina.models.ptab_decision_ground import PTABDecisionGround
from lexmachina.models.ptab_patent import PTABPatent
from lexmachina.models.ptab_petition_stage_ground import PTABPetitionStageGround
from lexmachina.models.ptab_trial_dates import PTABTrialDates
from lexmachina.models.uspto_patent_technology_center import USPTOPatentTechnologyCenter
from typing import Optional, Set
from typing_extensions import Self

class PTABTrialData(BaseModel):
    """
    A single PTAB trial and relevant metadata.
    """ # noqa: E501
    ptab_trial_id: StrictInt = Field(alias="ptabTrialId")
    ptab_trial_number: StrictStr = Field(alias="ptabTrialNumber")
    status: CaseStatus
    dates: PTABTrialDates
    uspto_patent_technology_center: USPTOPatentTechnologyCenter = Field(alias="usptoPatentTechnologyCenter")
    administrative_patent_judges: List[AdministrativePatentJudge] = Field(alias="administrativePatentJudges")
    law_firms: List[LawFirm] = Field(alias="lawFirms")
    attorneys: List[Attorney]
    parties: List[Party]
    trial_type: StrictStr = Field(alias="trialType")
    trial_tags: List[StrictStr] = Field(alias="trialTags")
    trial_resolution: Optional[StrictStr] = Field(alias="trialResolution")
    patent: PTABPatent
    claim_findings: Optional[List[PTABClaimFindings]] = Field(alias="claimFindings")
    petition_stage_grounds: Optional[PTABPetitionStageGround] = Field(alias="petitionStageGrounds")
    institution_decision_grounds: Optional[List[PTABDecisionGround]] = Field(alias="institutionDecisionGrounds")
    final_decision_grounds: Optional[List[PTABDecisionGround]] = Field(alias="finalDecisionGrounds")
    __properties: ClassVar[List[str]] = ["ptabTrialId", "ptabTrialNumber", "status", "dates", "usptoPatentTechnologyCenter", "administrativePatentJudges", "lawFirms", "attorneys", "parties", "trialType", "trialTags", "trialResolution", "patent", "claimFindings", "petitionStageGrounds", "institutionDecisionGrounds", "finalDecisionGrounds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PTABTrialData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dates
        if self.dates:
            _dict['dates'] = self.dates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uspto_patent_technology_center
        if self.uspto_patent_technology_center:
            _dict['usptoPatentTechnologyCenter'] = self.uspto_patent_technology_center.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in administrative_patent_judges (list)
        _items = []
        if self.administrative_patent_judges:
            for _item_administrative_patent_judges in self.administrative_patent_judges:
                if _item_administrative_patent_judges:
                    _items.append(_item_administrative_patent_judges.to_dict())
            _dict['administrativePatentJudges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in law_firms (list)
        _items = []
        if self.law_firms:
            for _item_law_firms in self.law_firms:
                if _item_law_firms:
                    _items.append(_item_law_firms.to_dict())
            _dict['lawFirms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attorneys (list)
        _items = []
        if self.attorneys:
            for _item_attorneys in self.attorneys:
                if _item_attorneys:
                    _items.append(_item_attorneys.to_dict())
            _dict['attorneys'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parties (list)
        _items = []
        if self.parties:
            for _item_parties in self.parties:
                if _item_parties:
                    _items.append(_item_parties.to_dict())
            _dict['parties'] = _items
        # override the default output from pydantic by calling `to_dict()` of patent
        if self.patent:
            _dict['patent'] = self.patent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in claim_findings (list)
        _items = []
        if self.claim_findings:
            for _item_claim_findings in self.claim_findings:
                if _item_claim_findings:
                    _items.append(_item_claim_findings.to_dict())
            _dict['claimFindings'] = _items
        # override the default output from pydantic by calling `to_dict()` of petition_stage_grounds
        if self.petition_stage_grounds:
            _dict['petitionStageGrounds'] = self.petition_stage_grounds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in institution_decision_grounds (list)
        _items = []
        if self.institution_decision_grounds:
            for _item_institution_decision_grounds in self.institution_decision_grounds:
                if _item_institution_decision_grounds:
                    _items.append(_item_institution_decision_grounds.to_dict())
            _dict['institutionDecisionGrounds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in final_decision_grounds (list)
        _items = []
        if self.final_decision_grounds:
            for _item_final_decision_grounds in self.final_decision_grounds:
                if _item_final_decision_grounds:
                    _items.append(_item_final_decision_grounds.to_dict())
            _dict['finalDecisionGrounds'] = _items
        # set to None if trial_resolution (nullable) is None
        # and model_fields_set contains the field
        if self.trial_resolution is None and "trial_resolution" in self.model_fields_set:
            _dict['trialResolution'] = None

        # set to None if claim_findings (nullable) is None
        # and model_fields_set contains the field
        if self.claim_findings is None and "claim_findings" in self.model_fields_set:
            _dict['claimFindings'] = None

        # set to None if petition_stage_grounds (nullable) is None
        # and model_fields_set contains the field
        if self.petition_stage_grounds is None and "petition_stage_grounds" in self.model_fields_set:
            _dict['petitionStageGrounds'] = None

        # set to None if institution_decision_grounds (nullable) is None
        # and model_fields_set contains the field
        if self.institution_decision_grounds is None and "institution_decision_grounds" in self.model_fields_set:
            _dict['institutionDecisionGrounds'] = None

        # set to None if final_decision_grounds (nullable) is None
        # and model_fields_set contains the field
        if self.final_decision_grounds is None and "final_decision_grounds" in self.model_fields_set:
            _dict['finalDecisionGrounds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PTABTrialData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ptabTrialId": obj.get("ptabTrialId"),
            "ptabTrialNumber": obj.get("ptabTrialNumber"),
            "status": obj.get("status"),
            "dates": PTABTrialDates.from_dict(obj["dates"]) if obj.get("dates") is not None else None,
            "usptoPatentTechnologyCenter": USPTOPatentTechnologyCenter.from_dict(obj["usptoPatentTechnologyCenter"]) if obj.get("usptoPatentTechnologyCenter") is not None else None,
            "administrativePatentJudges": [AdministrativePatentJudge.from_dict(_item) for _item in obj["administrativePatentJudges"]] if obj.get("administrativePatentJudges") is not None else None,
            "lawFirms": [LawFirm.from_dict(_item) for _item in obj["lawFirms"]] if obj.get("lawFirms") is not None else None,
            "attorneys": [Attorney.from_dict(_item) for _item in obj["attorneys"]] if obj.get("attorneys") is not None else None,
            "parties": [Party.from_dict(_item) for _item in obj["parties"]] if obj.get("parties") is not None else None,
            "trialType": obj.get("trialType"),
            "trialTags": obj.get("trialTags"),
            "trialResolution": obj.get("trialResolution"),
            "patent": PTABPatent.from_dict(obj["patent"]) if obj.get("patent") is not None else None,
            "claimFindings": [PTABClaimFindings.from_dict(_item) for _item in obj["claimFindings"]] if obj.get("claimFindings") is not None else None,
            "petitionStageGrounds": PTABPetitionStageGround.from_dict(obj["petitionStageGrounds"]) if obj.get("petitionStageGrounds") is not None else None,
            "institutionDecisionGrounds": [PTABDecisionGround.from_dict(_item) for _item in obj["institutionDecisionGrounds"]] if obj.get("institutionDecisionGrounds") is not None else None,
            "finalDecisionGrounds": [PTABDecisionGround.from_dict(_item) for _item in obj["finalDecisionGrounds"]] if obj.get("finalDecisionGrounds") is not None else None
        })
        return _obj


