# automatically generated by the FlatBuffers compiler, do not modify

# namespace: licenseproxy

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LicenseInformation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LicenseInformation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLicenseInformation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LicenseInformation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LicenseInformation
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LicenseInformation
    def RemainingTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def LicenseInformationStart(builder): builder.StartObject(2)
def Start(builder):
    return LicenseInformationStart(builder)
def LicenseInformationAddMode(builder, mode): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mode), 0)
def AddMode(builder, mode):
    return LicenseInformationAddMode(builder, mode)
def LicenseInformationAddRemainingTime(builder, remainingTime): builder.PrependInt32Slot(1, remainingTime, 0)
def AddRemainingTime(builder, remainingTime):
    return LicenseInformationAddRemainingTime(builder, remainingTime)
def LicenseInformationEnd(builder): return builder.EndObject()
def End(builder):
    return LicenseInformationEnd(builder)

class LicenseInformationT(object):

    # LicenseInformationT
    def __init__(self):
        self.mode = None  # type: str
        self.remainingTime = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        licenseInformation = LicenseInformation()
        licenseInformation.Init(buf, pos)
        return cls.InitFromObj(licenseInformation)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, licenseInformation):
        x = LicenseInformationT()
        x._UnPack(licenseInformation)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mode == other.mode and \
            self.remainingTime == other.remainingTime

    # LicenseInformationT
    def _UnPack(self, licenseInformation):
        if licenseInformation is None:
            return
        self.mode = licenseInformation.Mode()
        self.remainingTime = licenseInformation.RemainingTime()

    # LicenseInformationT
    def Pack(self, builder):
        if self.mode is not None:
            mode = builder.CreateString(self.mode)
        LicenseInformationStart(builder)
        if self.mode is not None:
            LicenseInformationAddMode(builder, mode)
        LicenseInformationAddRemainingTime(builder, self.remainingTime)
        licenseInformation = LicenseInformationEnd(builder)
        return licenseInformation
