# automatically generated by the FlatBuffers compiler, do not modify

# namespace: companion

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Mapping of one sourceUaNodeId to targetUaNodeId
class NodeIdMapping(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NodeIdMapping()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNodeIdMapping(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NodeIdMapping
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The original OPC UA NodeId which will be mapped into the OPC UA companion model, e.g. ns=2;s=plc/app/Appl/...
    # NodeIdMapping
    def SourceUaNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The target OPC UA NodeId in the companion model, e.g. ns=20;s=myModel.myPlcNode
    # NodeIdMapping
    def TargetUaNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Verification of the mapping, used as output parameter
    # NodeIdMapping
    def MappingResult(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # NodeIdMapping
    def MappingResultAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # NodeIdMapping
    def MappingResultLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeIdMapping
    def MappingResultIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # The target object OPC UA NodeId in the companion model, e.g. ns=20;s=myModel.myPlcNode.
    # Must only be specified manually for methods which must be called in context of an object,
    # i.e., are only present as component of an ObjectType. Otherwise generated automatically.
    # NodeIdMapping
    def TargetObjectUaNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def NodeIdMappingStart(builder): builder.StartObject(4)
def Start(builder):
    return NodeIdMappingStart(builder)
def NodeIdMappingAddSourceUaNodeId(builder, sourceUaNodeId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sourceUaNodeId), 0)
def AddSourceUaNodeId(builder, sourceUaNodeId):
    return NodeIdMappingAddSourceUaNodeId(builder, sourceUaNodeId)
def NodeIdMappingAddTargetUaNodeId(builder, targetUaNodeId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(targetUaNodeId), 0)
def AddTargetUaNodeId(builder, targetUaNodeId):
    return NodeIdMappingAddTargetUaNodeId(builder, targetUaNodeId)
def NodeIdMappingAddMappingResult(builder, mappingResult): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mappingResult), 0)
def AddMappingResult(builder, mappingResult):
    return NodeIdMappingAddMappingResult(builder, mappingResult)
def NodeIdMappingStartMappingResultVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartMappingResultVector(builder, numElems):
    return NodeIdMappingStartMappingResultVector(builder, numElems)
def NodeIdMappingAddTargetObjectUaNodeId(builder, targetObjectUaNodeId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(targetObjectUaNodeId), 0)
def AddTargetObjectUaNodeId(builder, targetObjectUaNodeId):
    return NodeIdMappingAddTargetObjectUaNodeId(builder, targetObjectUaNodeId)
def NodeIdMappingEnd(builder): return builder.EndObject()
def End(builder):
    return NodeIdMappingEnd(builder)
try:
    from typing import List
except:
    pass

class NodeIdMappingT(object):

    # NodeIdMappingT
    def __init__(self):
        self.sourceUaNodeId = None  # type: str
        self.targetUaNodeId = None  # type: str
        self.mappingResult = None  # type: List[int]
        self.targetObjectUaNodeId = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        nodeIdMapping = NodeIdMapping()
        nodeIdMapping.Init(buf, pos)
        return cls.InitFromObj(nodeIdMapping)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, nodeIdMapping):
        x = NodeIdMappingT()
        x._UnPack(nodeIdMapping)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.sourceUaNodeId == other.sourceUaNodeId and \
            self.targetUaNodeId == other.targetUaNodeId and \
            self.mappingResult == other.mappingResult and \
            self.targetObjectUaNodeId == other.targetObjectUaNodeId

    # NodeIdMappingT
    def _UnPack(self, nodeIdMapping):
        if nodeIdMapping is None:
            return
        self.sourceUaNodeId = nodeIdMapping.SourceUaNodeId()
        self.targetUaNodeId = nodeIdMapping.TargetUaNodeId()
        if not nodeIdMapping.MappingResultIsNone():
            if np is None:
                self.mappingResult = []
                for i in range(nodeIdMapping.MappingResultLength()):
                    self.mappingResult.append(nodeIdMapping.MappingResult(i))
            else:
                self.mappingResult = nodeIdMapping.MappingResultAsNumpy()
        self.targetObjectUaNodeId = nodeIdMapping.TargetObjectUaNodeId()

    # NodeIdMappingT
    def Pack(self, builder):
        if self.sourceUaNodeId is not None:
            sourceUaNodeId = builder.CreateString(self.sourceUaNodeId)
        if self.targetUaNodeId is not None:
            targetUaNodeId = builder.CreateString(self.targetUaNodeId)
        if self.mappingResult is not None:
            if np is not None and type(self.mappingResult) is np.ndarray:
                mappingResult = builder.CreateNumpyVector(self.mappingResult)
            else:
                NodeIdMappingStartMappingResultVector(builder, len(self.mappingResult))
                for i in reversed(range(len(self.mappingResult))):
                    builder.PrependByte(self.mappingResult[i])
                mappingResult = builder.EndVector()
        if self.targetObjectUaNodeId is not None:
            targetObjectUaNodeId = builder.CreateString(self.targetObjectUaNodeId)
        NodeIdMappingStart(builder)
        if self.sourceUaNodeId is not None:
            NodeIdMappingAddSourceUaNodeId(builder, sourceUaNodeId)
        if self.targetUaNodeId is not None:
            NodeIdMappingAddTargetUaNodeId(builder, targetUaNodeId)
        if self.mappingResult is not None:
            NodeIdMappingAddMappingResult(builder, mappingResult)
        if self.targetObjectUaNodeId is not None:
            NodeIdMappingAddTargetObjectUaNodeId(builder, targetObjectUaNodeId)
        nodeIdMapping = NodeIdMappingEnd(builder)
        return nodeIdMapping
