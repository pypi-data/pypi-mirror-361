# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Configuration of the error reaction behavior of a single axis
class AxsCfgErrReaction(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgErrReaction()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgErrReaction(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgErrReaction
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Reference to configuration of the slave limits exceeded behavior of the axis
    # AxsCfgErrReaction
    def SlaveLimitsExceeded(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsCfgErrReactionSlaveLimExceeded import AxsCfgErrReactionSlaveLimExceeded
            obj = AxsCfgErrReactionSlaveLimExceeded()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCfgErrReactionStart(builder): builder.StartObject(1)
def Start(builder):
    return AxsCfgErrReactionStart(builder)
def AxsCfgErrReactionAddSlaveLimitsExceeded(builder, slaveLimitsExceeded): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(slaveLimitsExceeded), 0)
def AddSlaveLimitsExceeded(builder, slaveLimitsExceeded):
    return AxsCfgErrReactionAddSlaveLimitsExceeded(builder, slaveLimitsExceeded)
def AxsCfgErrReactionEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgErrReactionEnd(builder)
import motion.sync.fbtypes.AxsCfgErrReactionSlaveLimExceeded
try:
    from typing import Optional
except:
    pass

class AxsCfgErrReactionT(object):

    # AxsCfgErrReactionT
    def __init__(self):
        self.slaveLimitsExceeded = None  # type: Optional[motion.sync.fbtypes.AxsCfgErrReactionSlaveLimExceeded.AxsCfgErrReactionSlaveLimExceededT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgErrReaction = AxsCfgErrReaction()
        axsCfgErrReaction.Init(buf, pos)
        return cls.InitFromObj(axsCfgErrReaction)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgErrReaction):
        x = AxsCfgErrReactionT()
        x._UnPack(axsCfgErrReaction)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.slaveLimitsExceeded == other.slaveLimitsExceeded

    # AxsCfgErrReactionT
    def _UnPack(self, axsCfgErrReaction):
        if axsCfgErrReaction is None:
            return
        if axsCfgErrReaction.SlaveLimitsExceeded() is not None:
            self.slaveLimitsExceeded = motion.sync.fbtypes.AxsCfgErrReactionSlaveLimExceeded.AxsCfgErrReactionSlaveLimExceededT.InitFromObj(axsCfgErrReaction.SlaveLimitsExceeded())

    # AxsCfgErrReactionT
    def Pack(self, builder):
        if self.slaveLimitsExceeded is not None:
            slaveLimitsExceeded = self.slaveLimitsExceeded.Pack(builder)
        AxsCfgErrReactionStart(builder)
        if self.slaveLimitsExceeded is not None:
            AxsCfgErrReactionAddSlaveLimitsExceeded(builder, slaveLimitsExceeded)
        axsCfgErrReaction = AxsCfgErrReactionEnd(builder)
        return axsCfgErrReaction
