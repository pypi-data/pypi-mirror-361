# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard Professional Edition IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.1.0PE
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomMenuDeleteResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'assignee_type': 'str',
        'assignee_list': 'list[EntityInfo]'
    }

    attribute_map = {
        'success': 'success',
        'assignee_type': 'assigneeType',
        'assignee_list': 'assigneeList'
    }

    def __init__(self, success=None, assignee_type=None, assignee_list=None):  # noqa: E501
        """CustomMenuDeleteResult - a model defined in Swagger"""  # noqa: E501
        self._success = None
        self._assignee_type = None
        self._assignee_list = None
        self.discriminator = None
        if success is not None:
            self.success = success
        if assignee_type is not None:
            self.assignee_type = assignee_type
        if assignee_list is not None:
            self.assignee_list = assignee_list

    @property
    def success(self):
        """Gets the success of this CustomMenuDeleteResult.  # noqa: E501


        :return: The success of this CustomMenuDeleteResult.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this CustomMenuDeleteResult.


        :param success: The success of this CustomMenuDeleteResult.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def assignee_type(self):
        """Gets the assignee_type of this CustomMenuDeleteResult.  # noqa: E501


        :return: The assignee_type of this CustomMenuDeleteResult.  # noqa: E501
        :rtype: str
        """
        return self._assignee_type

    @assignee_type.setter
    def assignee_type(self, assignee_type):
        """Sets the assignee_type of this CustomMenuDeleteResult.


        :param assignee_type: The assignee_type of this CustomMenuDeleteResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO_ASSIGN", "ALL", "CUSTOMERS", "USERS"]  # noqa: E501
        if assignee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignee_type, allowed_values)
            )

        self._assignee_type = assignee_type

    @property
    def assignee_list(self):
        """Gets the assignee_list of this CustomMenuDeleteResult.  # noqa: E501


        :return: The assignee_list of this CustomMenuDeleteResult.  # noqa: E501
        :rtype: list[EntityInfo]
        """
        return self._assignee_list

    @assignee_list.setter
    def assignee_list(self, assignee_list):
        """Sets the assignee_list of this CustomMenuDeleteResult.


        :param assignee_list: The assignee_list of this CustomMenuDeleteResult.  # noqa: E501
        :type: list[EntityInfo]
        """

        self._assignee_list = assignee_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomMenuDeleteResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomMenuDeleteResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
