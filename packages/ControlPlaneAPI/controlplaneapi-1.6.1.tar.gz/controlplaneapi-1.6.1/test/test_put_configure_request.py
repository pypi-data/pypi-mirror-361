# coding: utf-8

"""
    ControlPlaneAPI

    ControlPlaneAPI

    The version of the OpenAPI document: 1.6.1
    Contact: luke.brown@3adesign.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ControlPlaneAPI.models.put_configure_request import PutConfigureRequest

class TestPutConfigureRequest(unittest.TestCase):
    """PutConfigureRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PutConfigureRequest:
        """Test PutConfigureRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PutConfigureRequest`
        """
        model = PutConfigureRequest()
        if include_optional:
            return PutConfigureRequest(
                name = '',
                components = [
                    ControlPlaneAPI.models.put_configure_request_components_inner.put_configure_request_components_inner(
                        id = '', 
                        label = '', 
                        config = '', 
                        io_handles = ControlPlaneAPI.models.put_configure_request_components_inner_io_handles.put_configure_request_components_inner_io_handles(
                            input = [
                                ControlPlaneAPI.models.put_configure_request_components_inner_io_handles_input_inner.put_configure_request_components_inner_io_handles_input_inner(
                                    id = '', 
                                    label = '', )
                                ], 
                            output = [
                                ControlPlaneAPI.models.put_configure_request_components_inner_io_handles_input_inner.put_configure_request_components_inner_io_handles_input_inner(
                                    id = '', 
                                    label = '', )
                                ], ), 
                        custom_environments = [
                            
                            ], )
                    ]
            )
        else:
            return PutConfigureRequest(
        )
        """

    def testPutConfigureRequest(self):
        """Test PutConfigureRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
