# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EnumField(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EnumField()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEnumField(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EnumField
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EnumField
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EnumField
    def DisplayName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.LocalizedText import LocalizedText
            obj = LocalizedText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EnumField
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.LocalizedText import LocalizedText
            obj = LocalizedText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EnumField
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EnumFieldStart(builder): builder.StartObject(4)
def Start(builder):
    return EnumFieldStart(builder)
def EnumFieldAddValue(builder, value): builder.PrependInt64Slot(0, value, 0)
def AddValue(builder, value):
    return EnumFieldAddValue(builder, value)
def EnumFieldAddDisplayName(builder, displayName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(displayName), 0)
def AddDisplayName(builder, displayName):
    return EnumFieldAddDisplayName(builder, displayName)
def EnumFieldAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return EnumFieldAddDescription(builder, description)
def EnumFieldAddName(builder, name): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return EnumFieldAddName(builder, name)
def EnumFieldEnd(builder): return builder.EndObject()
def End(builder):
    return EnumFieldEnd(builder)
import comm.opcua.builtin.LocalizedText
try:
    from typing import Optional
except:
    pass

class EnumFieldT(object):

    # EnumFieldT
    def __init__(self):
        self.value = 0  # type: int
        self.displayName = None  # type: Optional[comm.opcua.builtin.LocalizedText.LocalizedTextT]
        self.description = None  # type: Optional[comm.opcua.builtin.LocalizedText.LocalizedTextT]
        self.name = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        enumField = EnumField()
        enumField.Init(buf, pos)
        return cls.InitFromObj(enumField)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, enumField):
        x = EnumFieldT()
        x._UnPack(enumField)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value and \
            self.displayName == other.displayName and \
            self.description == other.description and \
            self.name == other.name

    # EnumFieldT
    def _UnPack(self, enumField):
        if enumField is None:
            return
        self.value = enumField.Value()
        if enumField.DisplayName() is not None:
            self.displayName = comm.opcua.builtin.LocalizedText.LocalizedTextT.InitFromObj(enumField.DisplayName())
        if enumField.Description() is not None:
            self.description = comm.opcua.builtin.LocalizedText.LocalizedTextT.InitFromObj(enumField.Description())
        self.name = enumField.Name()

    # EnumFieldT
    def Pack(self, builder):
        if self.displayName is not None:
            displayName = self.displayName.Pack(builder)
        if self.description is not None:
            description = self.description.Pack(builder)
        if self.name is not None:
            name = builder.CreateString(self.name)
        EnumFieldStart(builder)
        EnumFieldAddValue(builder, self.value)
        if self.displayName is not None:
            EnumFieldAddDisplayName(builder, displayName)
        if self.description is not None:
            EnumFieldAddDescription(builder, description)
        if self.name is not None:
            EnumFieldAddName(builder, name)
        enumField = EnumFieldEnd(builder)
        return enumField
