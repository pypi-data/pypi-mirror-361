# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs2

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Utilization of the cycle time of Scheduler tick task causes by itself
class UtilizationThreshold(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UtilizationThreshold()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUtilizationThreshold(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UtilizationThreshold
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Threshold of utilization of the cycle time of Scheduler tick task causes by itself for reporting a warning
    # UtilizationThreshold
    def Warning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 50

    # Threshold of utilization of the cycle time of Scheduler tick task causes by itself for reporting an error
    # UtilizationThreshold
    def Error(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 75

def UtilizationThresholdStart(builder): builder.StartObject(2)
def Start(builder):
    return UtilizationThresholdStart(builder)
def UtilizationThresholdAddWarning(builder, warning): builder.PrependUint8Slot(0, warning, 50)
def AddWarning(builder, warning):
    return UtilizationThresholdAddWarning(builder, warning)
def UtilizationThresholdAddError(builder, error): builder.PrependUint8Slot(1, error, 75)
def AddError(builder, error):
    return UtilizationThresholdAddError(builder, error)
def UtilizationThresholdEnd(builder): return builder.EndObject()
def End(builder):
    return UtilizationThresholdEnd(builder)

class UtilizationThresholdT(object):

    # UtilizationThresholdT
    def __init__(self):
        self.warning = 50  # type: int
        self.error = 75  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        utilizationThreshold = UtilizationThreshold()
        utilizationThreshold.Init(buf, pos)
        return cls.InitFromObj(utilizationThreshold)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, utilizationThreshold):
        x = UtilizationThresholdT()
        x._UnPack(utilizationThreshold)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.warning == other.warning and \
            self.error == other.error

    # UtilizationThresholdT
    def _UnPack(self, utilizationThreshold):
        if utilizationThreshold is None:
            return
        self.warning = utilizationThreshold.Warning()
        self.error = utilizationThreshold.Error()

    # UtilizationThresholdT
    def Pack(self, builder):
        UtilizationThresholdStart(builder)
        UtilizationThresholdAddWarning(builder, self.warning)
        UtilizationThresholdAddError(builder, self.error)
        utilizationThreshold = UtilizationThresholdEnd(builder)
        return utilizationThreshold
