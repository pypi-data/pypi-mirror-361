import mimetypes
import asyncio
import httpx
from typing import Optional
from .types import InlineKeyboardMarkup

class Bot:
    BASE_URL = "https://botapi.max.ru"

    def __init__(self, token: str):
        self.token = token
        self.base_url = self.BASE_URL
        self.client = httpx.AsyncClient()

    async def _request(self, method: str, path: str, params=None, json=None):
        if params is None:
            params = {}
        params["access_token"] = self.token  # üëà –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
        headers = {"Content-Type": "application/json"}
        try:
            response = await self.client.request(
                method=method,
                url=self.base_url + path,
                params=params,
                json=json,
                headers=headers,
                timeout=httpx.Timeout(30.0)
            )
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            print(f"[Bot] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            print(f"[Bot] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.status_code} {e.response.text}")  # üëà –≤–æ—Ç —ç—Ç–æ –∫–ª—é—á
            raise
        except httpx.ReadTimeout:
            print("[Bot] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è long polling)")
            return {}

    async def get_me(self):
        return await self._request("GET", "/me")

    async def send_message(
            self,
            chat_id: Optional[int] = None,
            user_id: Optional[int] = None,
            text: str = "",
            reply_markup: Optional[InlineKeyboardMarkup] = None,
            notify: bool = True,
            format: Optional[str] = None
    ):
        if not (chat_id or user_id):
            raise ValueError("–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: chat_id –∏–ª–∏ user_id")

        params = {
            "access_token": self.token
        }

        if chat_id:
            params["chat_id"] = chat_id
        else:
            params["user_id"] = user_id

        json_body = {
            "text": text,
            "notify": str(notify).lower(),  # –µ—Å–ª–∏ API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞–∫ "true"/"false"
        }

        if format:
            json_body["format"] = format

        if reply_markup:
            json_body["attachments"] = [reply_markup.to_attachment()]

        print("[send_message] params:", params)
        print("[send_message] json:", json_body)

        return await self.client.post(
            f"{self.base_url}/messages",
            params=params,
            json=json_body,
            headers={"Content-Type": "application/json"},
            timeout=httpx.Timeout(30.0)
        )

    async def answer_callback(self, callback_id: str, notification: str):
        print("[Bot] ‚û§ –û—Ç–≤–µ—Ç –Ω–∞ callback:", {
            "callback_id": callback_id,
            "notification": notification
        })
        return await self._request(
            "POST",
            "/answers",
            params={"callback_id": callback_id},
            json={"notification": notification}
        )

    async def update_message(self,
            message_id: str,
            text: str,
            reply_markup: Optional[InlineKeyboardMarkup] = None,
            notify: bool = True,
            format: Optional[str] = None):

        params = {
            "access_token": self.token,
            "message_id": message_id,
            # API –º–æ–∂–µ—Ç –æ–∂–∏–¥–∞—Ç—å "true"/"false"
        }

        json_body = {
            "text": text,
            "notify": notify,
        }

        if format:
            json_body["format"] = format

        if reply_markup:
            json_body["attachments"] = [reply_markup.to_attachment()]

        print("[send_message] params:", params)
        print("[send_message] json:", json_body)

        return await self.client.put(
            f"{self.base_url}/messages",
            params=params,
            json=json_body,
            headers={"Content-Type": "application/json"},
            timeout=httpx.Timeout(30.0)
        )


    async def delete_message(self, message_id: str):
        params = {
            "access_token": self.token,
            "message_id": message_id,
            # API –º–æ–∂–µ—Ç –æ–∂–∏–¥–∞—Ç—å "true"/"false"
        }

        return await self.client.delete(
            f"{self.base_url}/messages",
            params=params,
            headers={"Content-Type": "application/json"},
            timeout=httpx.Timeout(30.0)
        )

    async def upload_file(self, file_path: str, media_type: str) -> str:
        # 1. –ü–æ–ª—É—á–∞–µ–º URL –∑–∞–≥—Ä—É–∑–∫–∏
        resp = await self._request("POST", "/uploads", params={"type": media_type})
        upload_url = resp["url"]

        mime_type, _ = mimetypes.guess_type(file_path)
        with open(file_path, "rb") as f:
            files = {"data": (file_path, f, mime_type or "application/octet-stream")}
            async with httpx.AsyncClient() as client:
                upload_resp = await client.post(upload_url, files=files)
                upload_resp.raise_for_status()

                print("[DEBUG] upload_resp.status_code:", upload_resp.status_code)
                print("[DEBUG] upload_resp.text:", upload_resp.text)

                if "<retval>1</retval>" not in upload_resp.text:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {upload_resp.text}")

                # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
                try:
                    result = upload_resp.json()
                except ValueError:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")

        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
        if media_type == "image":
            if "photos" in result and result["photos"]:
                first_size = next(iter(result["photos"].values()))
                token = first_size.get("token")
                if token:
                    return token
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        elif media_type in ("video", "audio", "file"):
            token = result.get("token")
            if token:
                return token
            raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è {media_type}")

        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}")

    async def send_file(
            self,
            file_path: str,
            media_type: str,
            chat_id: Optional[int] = None,
            user_id: Optional[int] = None,
            text: str = "",
            reply_markup: Optional[InlineKeyboardMarkup] = None,
            notify: bool = True,
            format: Optional[str] = None, max_retries = 3
    ):



        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        tokens = await self.upload_file(file_path, media_type)
        print("token:", tokens)
        await asyncio.sleep(5)
        # –ë–∞–∑–æ–≤–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ ‚Äî –º–µ–¥–∏–∞—Ñ–∞–π–ª
        attachments = [
            {
                "type": media_type,
                "payload": {"token": tokens}
            }
        ]

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ
        if reply_markup:
            attachments.append(reply_markup.to_attachment())

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî –∫–∞–∫ –≤ send_message
        params = {
            "access_token": self.token,
        }
        if chat_id:
            params["chat_id"] = chat_id
        else:
            params["user_id"] = user_id
        json_body = {
            "text": text,
            "notify": notify,
            "attachments": attachments,
        }

        if format:
            json_body["format"] = format

        print("[send_file] params:", params)
        print("[send_file] json:", json_body)

        delay = 2  # —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for attempt in range(1, max_retries + 1):
            resp = await self.client.post(
                f"{self.base_url}/messages",
                params=params,
                json=json_body,
                headers={"Content-Type": "application/json"},
                timeout=60
            )
            print(f"Attempt {attempt}: RESP:", resp.status_code)
            print("RESP_TEXT:", resp.text)
            if resp.status_code != 400:
                return resp
            if "attachment.not.ready" in resp.text or "not.processed" in resp.text:
                print(f"–ñ–¥—É {delay} —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É—é –µ—â–µ —Ä–∞–∑...")
                await asyncio.sleep(delay)
            else:
                # –ö–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞
                break
        return resp

    async def download_media(self, url: str, dest_path: str = None):
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ (url) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞ –¥–∏—Å–∫.
        –ï—Å–ª–∏ dest_path –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –±–µ—Ä—ë—Ç—Å—è –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ url.
        """
        if dest_path is None:
            filename = url.split("?")[0].split("/")[-1] or "file.bin"
            ext = mimetypes.guess_extension((await self._get_content_type(url)) or "")
            if ext and not filename.endswith(ext):
                filename += ext
            dest_path = filename

        async with httpx.AsyncClient() as client:
            async with client.stream("GET", url, timeout=120) as response:
                response.raise_for_status()
                with open(dest_path, "wb") as f:
                    async for chunk in response.aiter_bytes(1024 * 1024):
                        f.write(chunk)
        print(f"[Bot] –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {dest_path}")
        return dest_path

    async def _get_content_type(self, url):
        async with httpx.AsyncClient() as client:
            resp = await client.head(url)
            return resp.headers.get("content-type")







