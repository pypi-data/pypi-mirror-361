[project]
name = "deluge-compat"
dynamic = ["version"]
description = "Python compatibility layer for executing Deluge scripts with full SalesIQ/Zobot support"
readme = "README.md"
authors = [
    { name = "Carlos Tosta", email = "jctosta86@gmail.com" }
]
license = { file = "LICENSE"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
]
keywords = ["deluge", "zoho", "compatibility", "scripting", "salesiq", "zobot"]
requires-python = ">=3.10"
dependencies = [
    "requests>=2.25.0",
    "cryptography>=3.0.0",
]

[project.optional-dependencies]
cli = [
    "typer>=0.9.0",
    "rich>=13.0.0",
    "faker>=24.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "pyright>=1.1.0",
    "pre-commit>=3.0.0",
]
slim = []

[project.scripts]
deluge-run = "deluge_compat.cli:run_main"
deluge-translate = "deluge_compat.cli:translate_main"
deluge-chat = "deluge_compat.cli_chat:chat_main"

[project.urls]
Homepage = "https://github.com/jctosta/deluge-compat"
Repository = "https://github.com/jctosta/deluge-compat"
Issues = "https://github.com/jctosta/deluge-compat/issues"
Documentation = "https://github.com/jctosta/deluge-compat/tree/main/docs"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/deluge_compat/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/deluge_compat"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--cov=deluge_compat",
    "--cov-report=term-missing",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py310"
line-length = 100
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["B011"]  # assert False
"examples/*" = ["F401", "F841"]  # unused imports/variables in examples

[tool.ruff.lint.isort]
known-first-party = ["deluge_compat"]

[tool.pyright]
include = ["src", "tests"]
exclude = [
    "**/__pycache__",
    "**/.venv",
    "**/venv",
    "**/node_modules",
    "**/.git"
]
venvPath = "."
venv = ".venv"
pythonVersion = "3.10"
typeCheckingMode = "standard"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
# Don't check dependencies
stubPath = ""
