# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.81.1-01.

    The version of the OpenAPI document: 3.81.1-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from nexus_api_client.models.api_privilege import ApiPrivilege
from nexus_api_client.models.api_privilege_application_request import ApiPrivilegeApplicationRequest
from nexus_api_client.models.api_privilege_repository_admin_request import ApiPrivilegeRepositoryAdminRequest
from nexus_api_client.models.api_privilege_repository_content_selector_request import ApiPrivilegeRepositoryContentSelectorRequest
from nexus_api_client.models.api_privilege_repository_view_request import ApiPrivilegeRepositoryViewRequest
from nexus_api_client.models.api_privilege_script_request import ApiPrivilegeScriptRequest
from nexus_api_client.models.api_privilege_wildcard_request import ApiPrivilegeWildcardRequest
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

GETALLPRIVILEGES200RESPONSEINNER_ONE_OF_SCHEMAS = ["ApiPrivilege", "ApiPrivilegeApplicationRequest", "ApiPrivilegeRepositoryAdminRequest", "ApiPrivilegeRepositoryContentSelectorRequest", "ApiPrivilegeRepositoryViewRequest", "ApiPrivilegeScriptRequest", "ApiPrivilegeWildcardRequest"]

class GetAllPrivileges200ResponseInner(BaseModel):
    """
    GetAllPrivileges200ResponseInner
    """
    # data type: ApiPrivilegeApplicationRequest
    oneof_schema_1_validator: Optional[ApiPrivilegeApplicationRequest] = None
    # data type: ApiPrivilegeRepositoryAdminRequest
    oneof_schema_2_validator: Optional[ApiPrivilegeRepositoryAdminRequest] = None
    # data type: ApiPrivilegeRepositoryContentSelectorRequest
    oneof_schema_3_validator: Optional[ApiPrivilegeRepositoryContentSelectorRequest] = None
    # data type: ApiPrivilegeRepositoryViewRequest
    oneof_schema_4_validator: Optional[ApiPrivilegeRepositoryViewRequest] = None
    # data type: ApiPrivilegeScriptRequest
    oneof_schema_5_validator: Optional[ApiPrivilegeScriptRequest] = None
    # data type: ApiPrivilegeWildcardRequest
    oneof_schema_6_validator: Optional[ApiPrivilegeWildcardRequest] = None
    # data type: ApiPrivilege
    oneof_schema_7_validator: Optional[ApiPrivilege] = None
    actual_instance: Optional[Union[ApiPrivilege, ApiPrivilegeApplicationRequest, ApiPrivilegeRepositoryAdminRequest, ApiPrivilegeRepositoryContentSelectorRequest, ApiPrivilegeRepositoryViewRequest, ApiPrivilegeScriptRequest, ApiPrivilegeWildcardRequest]] = None
    one_of_schemas: Set[str] = { "ApiPrivilege", "ApiPrivilegeApplicationRequest", "ApiPrivilegeRepositoryAdminRequest", "ApiPrivilegeRepositoryContentSelectorRequest", "ApiPrivilegeRepositoryViewRequest", "ApiPrivilegeScriptRequest", "ApiPrivilegeWildcardRequest" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = GetAllPrivileges200ResponseInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: ApiPrivilegeApplicationRequest
        if not isinstance(v, ApiPrivilegeApplicationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApiPrivilegeApplicationRequest`")
        else:
            match += 1
        # validate data type: ApiPrivilegeRepositoryAdminRequest
        if not isinstance(v, ApiPrivilegeRepositoryAdminRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApiPrivilegeRepositoryAdminRequest`")
        else:
            match += 1
        # validate data type: ApiPrivilegeRepositoryContentSelectorRequest
        if not isinstance(v, ApiPrivilegeRepositoryContentSelectorRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApiPrivilegeRepositoryContentSelectorRequest`")
        else:
            match += 1
        # validate data type: ApiPrivilegeRepositoryViewRequest
        if not isinstance(v, ApiPrivilegeRepositoryViewRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApiPrivilegeRepositoryViewRequest`")
        else:
            match += 1
        # validate data type: ApiPrivilegeScriptRequest
        if not isinstance(v, ApiPrivilegeScriptRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApiPrivilegeScriptRequest`")
        else:
            match += 1
        # validate data type: ApiPrivilegeWildcardRequest
        if not isinstance(v, ApiPrivilegeWildcardRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApiPrivilegeWildcardRequest`")
        else:
            match += 1
        # validate data type: ApiPrivilege
        if not isinstance(v, ApiPrivilege):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApiPrivilege`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in GetAllPrivileges200ResponseInner with oneOf schemas: ApiPrivilege, ApiPrivilegeApplicationRequest, ApiPrivilegeRepositoryAdminRequest, ApiPrivilegeRepositoryContentSelectorRequest, ApiPrivilegeRepositoryViewRequest, ApiPrivilegeScriptRequest, ApiPrivilegeWildcardRequest. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in GetAllPrivileges200ResponseInner with oneOf schemas: ApiPrivilege, ApiPrivilegeApplicationRequest, ApiPrivilegeRepositoryAdminRequest, ApiPrivilegeRepositoryContentSelectorRequest, ApiPrivilegeRepositoryViewRequest, ApiPrivilegeScriptRequest, ApiPrivilegeWildcardRequest. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ApiPrivilegeApplicationRequest
        try:
            instance.actual_instance = ApiPrivilegeApplicationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApiPrivilegeRepositoryAdminRequest
        try:
            instance.actual_instance = ApiPrivilegeRepositoryAdminRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApiPrivilegeRepositoryContentSelectorRequest
        try:
            instance.actual_instance = ApiPrivilegeRepositoryContentSelectorRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApiPrivilegeRepositoryViewRequest
        try:
            instance.actual_instance = ApiPrivilegeRepositoryViewRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApiPrivilegeScriptRequest
        try:
            instance.actual_instance = ApiPrivilegeScriptRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApiPrivilegeWildcardRequest
        try:
            instance.actual_instance = ApiPrivilegeWildcardRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApiPrivilege
        try:
            instance.actual_instance = ApiPrivilege.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into GetAllPrivileges200ResponseInner with oneOf schemas: ApiPrivilege, ApiPrivilegeApplicationRequest, ApiPrivilegeRepositoryAdminRequest, ApiPrivilegeRepositoryContentSelectorRequest, ApiPrivilegeRepositoryViewRequest, ApiPrivilegeScriptRequest, ApiPrivilegeWildcardRequest. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into GetAllPrivileges200ResponseInner with oneOf schemas: ApiPrivilege, ApiPrivilegeApplicationRequest, ApiPrivilegeRepositoryAdminRequest, ApiPrivilegeRepositoryContentSelectorRequest, ApiPrivilegeRepositoryViewRequest, ApiPrivilegeScriptRequest, ApiPrivilegeWildcardRequest. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ApiPrivilege, ApiPrivilegeApplicationRequest, ApiPrivilegeRepositoryAdminRequest, ApiPrivilegeRepositoryContentSelectorRequest, ApiPrivilegeRepositoryViewRequest, ApiPrivilegeScriptRequest, ApiPrivilegeWildcardRequest]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


