# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis command for generic synchronized motion
class AxsCmdSyncGenericData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdSyncGenericData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdSyncGenericData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdSyncGenericData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the master axis
    # AxsCmdSyncGenericData
    def Master(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # name of the pipeline
    # AxsCmdSyncGenericData
    def Pipeline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sync source
    # AxsCmdSyncGenericData
    def SyncSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # should this be a buffered command?
    # AxsCmdSyncGenericData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AxsCmdSyncGenericDataStart(builder): builder.StartObject(4)
def Start(builder):
    return AxsCmdSyncGenericDataStart(builder)
def AxsCmdSyncGenericDataAddMaster(builder, master): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(master), 0)
def AddMaster(builder, master):
    return AxsCmdSyncGenericDataAddMaster(builder, master)
def AxsCmdSyncGenericDataAddPipeline(builder, pipeline): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pipeline), 0)
def AddPipeline(builder, pipeline):
    return AxsCmdSyncGenericDataAddPipeline(builder, pipeline)
def AxsCmdSyncGenericDataAddSyncSource(builder, syncSource): builder.PrependInt8Slot(2, syncSource, 0)
def AddSyncSource(builder, syncSource):
    return AxsCmdSyncGenericDataAddSyncSource(builder, syncSource)
def AxsCmdSyncGenericDataAddBuffered(builder, buffered): builder.PrependBoolSlot(3, buffered, 0)
def AddBuffered(builder, buffered):
    return AxsCmdSyncGenericDataAddBuffered(builder, buffered)
def AxsCmdSyncGenericDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdSyncGenericDataEnd(builder)

class AxsCmdSyncGenericDataT(object):

    # AxsCmdSyncGenericDataT
    def __init__(self):
        self.master = None  # type: str
        self.pipeline = None  # type: str
        self.syncSource = 0  # type: int
        self.buffered = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdSyncGenericData = AxsCmdSyncGenericData()
        axsCmdSyncGenericData.Init(buf, pos)
        return cls.InitFromObj(axsCmdSyncGenericData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdSyncGenericData):
        x = AxsCmdSyncGenericDataT()
        x._UnPack(axsCmdSyncGenericData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.master == other.master and \
            self.pipeline == other.pipeline and \
            self.syncSource == other.syncSource and \
            self.buffered == other.buffered

    # AxsCmdSyncGenericDataT
    def _UnPack(self, axsCmdSyncGenericData):
        if axsCmdSyncGenericData is None:
            return
        self.master = axsCmdSyncGenericData.Master()
        self.pipeline = axsCmdSyncGenericData.Pipeline()
        self.syncSource = axsCmdSyncGenericData.SyncSource()
        self.buffered = axsCmdSyncGenericData.Buffered()

    # AxsCmdSyncGenericDataT
    def Pack(self, builder):
        if self.master is not None:
            master = builder.CreateString(self.master)
        if self.pipeline is not None:
            pipeline = builder.CreateString(self.pipeline)
        AxsCmdSyncGenericDataStart(builder)
        if self.master is not None:
            AxsCmdSyncGenericDataAddMaster(builder, master)
        if self.pipeline is not None:
            AxsCmdSyncGenericDataAddPipeline(builder, pipeline)
        AxsCmdSyncGenericDataAddSyncSource(builder, self.syncSource)
        AxsCmdSyncGenericDataAddBuffered(builder, self.buffered)
        axsCmdSyncGenericData = AxsCmdSyncGenericDataEnd(builder)
        return axsCmdSyncGenericData
