# automatically generated by the FlatBuffers compiler, do not modify

# namespace: server

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserTokenType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserTokenType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserTokenType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserTokenType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # User token type
    # UA_USERTOKENTYPE_ANONYMOUS = 0,
    # UA_USERTOKENTYPE_USERNAME = 1,
    # UA_USERTOKENTYPE_CERTIFICATE = 2,
    # UA_USERTOKENTYPE_ISSUEDTOKEN = 3
    # UserTokenType
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Security policies
    # UA_SECURITY_POLICY_NONE = 0,
    # UA_SECURITY_POLICY_BASIC128RSA15 = 1,
    # UA_SECURITY_POLICY_BASIC256 = 2,
    # UA_SECURITY_POLICY_BASIC256SHA256 = 3,
    # UA_SECURITY_POLICY_AES128_SHA256_RSAOAEP = 4,
    # UA_SECURITY_POLICY_AES256_SHA256_RSAPSS = 5,
    # UA_SECURITY_POLICY_ID_MAX = 6
    # UserTokenType
    def PolicyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def UserTokenTypeStart(builder): builder.StartObject(2)
def Start(builder):
    return UserTokenTypeStart(builder)
def UserTokenTypeAddType(builder, type): builder.PrependUint32Slot(0, type, 0)
def AddType(builder, type):
    return UserTokenTypeAddType(builder, type)
def UserTokenTypeAddPolicyId(builder, policyId): builder.PrependUint32Slot(1, policyId, 0)
def AddPolicyId(builder, policyId):
    return UserTokenTypeAddPolicyId(builder, policyId)
def UserTokenTypeEnd(builder): return builder.EndObject()
def End(builder):
    return UserTokenTypeEnd(builder)

class UserTokenTypeT(object):

    # UserTokenTypeT
    def __init__(self):
        self.type = 0  # type: int
        self.policyId = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        userTokenType = UserTokenType()
        userTokenType.Init(buf, pos)
        return cls.InitFromObj(userTokenType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, userTokenType):
        x = UserTokenTypeT()
        x._UnPack(userTokenType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.type == other.type and \
            self.policyId == other.policyId

    # UserTokenTypeT
    def _UnPack(self, userTokenType):
        if userTokenType is None:
            return
        self.type = userTokenType.Type()
        self.policyId = userTokenType.PolicyId()

    # UserTokenTypeT
    def Pack(self, builder):
        UserTokenTypeStart(builder)
        UserTokenTypeAddType(builder, self.type)
        UserTokenTypeAddPolicyId(builder, self.policyId)
        userTokenType = UserTokenTypeEnd(builder)
        return userTokenType
