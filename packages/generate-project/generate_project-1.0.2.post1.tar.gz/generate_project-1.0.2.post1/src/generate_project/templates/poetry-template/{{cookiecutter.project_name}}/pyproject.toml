[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.description }}"
authors = ["{{ cookiecutter.author_name }} <{{ cookiecutter.email }}>"]
readme = "README.md"
packages = [{ include = "{{ cookiecutter.package_name }}", from = "src" }]

[tool.poetry.urls]
"Source Code" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_name }}"
"Release Notes" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_name }}/releases"
"Documentation" = "https://{{ cookiecutter.project_name }}.readthedocs.io/"
"Issue Tracker" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_name }}/issues"

[tool.semantic_release]
version_variable = [
    "pyproject.toml:version",
    "docs/conf.py:release",
    "src/{{ cookiecutter.package_name }}/__init__.py:__version__",
]

[tool.poetry.dependencies]
python = "{{ cookiecutter.python_version }}"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.29.5"
python-dotenv = "^1.1.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^6.1.0"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
flake8 = "^7.1.0"
flake8-pyproject = "^1.2.0"
pylint = "^3.3.0"
black = "^25.1.0"
isort = "^6.0.0"

[tool.poetry.group.typing]
optional = true

[tool.poetry.group.typing.dependencies]
mypy = "^1.15"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^8.1.3"
sphinx-rtd-theme = "^3.0.2"
myst-parser = "^4.0.0"
sphinx-copybutton = "^0.5.2"
sphinx-autobuild = "^2021.3.14"
sphinx-sitemap = "^2.6.0"
sphinx-tabs = "^3.4.7"
doc8 = ">=0.8.0"

[tool.black]
line-length = 119

[tool.flake8]
extend-ignore = [
    "W503",
    # E501: Line too long
    "E501",
    # D100: Missing docstring in public module
    "D100",
    # D101: Missing docstring in public class
    "D101",
    # D102: Missing docstring in public method
    "D102",
    # D103: Missing docstring in public function
    "D103",
    # D104: Missing docstring in public package
    "D104",
    # W605: Invalid escape sequence
    "W605",
    # E203: Whitespace before ':'
    "E203",
]
exclude = [
    # "docs",
    # "tests",
    ".venv",
    ".git",
    "__pycache__",
    "build",
    "dist",
]
radon-max-cc = 15
max-line-length = 119

[tool.mypy]
# exclude = '^(tests\/test.*\.py|docs\/.*\.py)$'
python_version = "{{ cookiecutter.python_version.lstrip('^~>=<!').split(',')[0].split()[0] }}"

warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
show_error_codes = true
warn_unused_ignores = true

[tool.pylint.MESSAGES_CONTROL]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "use-implicit-booleaness-not-comparison-to-string",
    "use-implicit-booleaness-not-comparison-to-zero",
    "missing-module-docstring",
    "missing-function-docstring",
    "missing-class-docstring",
    "no-self-argument",
    "broad-exception-caught",
    "anomalous-backslash-in-string",
    "logging-fstring-interpolation",
    "raise-missing-from",
    "redefined-builtin",
    "invalid-overridden-method",
    "unspecified-encoding",
    "import-outside-toplevel",
    "global-statement",
    "global-variable-not-assigned",
]

[tool.pylint.FORMAT]
max-line-length = 119

[tool.pylint.MASTER]
ignore = [
    # "tests",
    # "docs",
    ".venv",
    ".git",
    "__pycache__",
    "build",
    "dist",
]

[tool.isort]
profile = "black"
known_third_party = [
    "numpy",
    "pandas",
    "keras",
    "tensorflow",
    "sklearn",
    "matplotlib",
    "scipy",
    "h5py",
    "seaborn",
    "numba",
    "gym",
    "PyQt6",
    "PyQt5",
    "pyqtgraph",
    "fastapi",
    "pytest",
    "uvicorn",
    "pydantic",
    "requests",
    "aiohttp",
    "databases",
    "aioredis",
    "sqlalchemy",
    "psycopg2-binary",
    "snappy",
    "asyncpg",
    "pytest_asyncio",
]
force_single_line = false
multi_line_output = 3
force_grid_wrap = 2
use_parentheses = true
include_trailing_comma = true
lines_after_imports = 2
ensure_newline_before_comments = true
line_length = 119
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "FIRSTPARTY"
extend_skip = [
    # "tests",
    # "docs",
    ".venv",
    ".git",
    "__pycache__",
    "build",
    "dist",
]

[tool.doc8]
max-line-length = 120
ignore = ["D004", "D002"]
ignore-path = ["docs/_build"]
