# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20250708
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AppealsAttorneyFilter(BaseModel):
    """
    AppealsAttorneyFilter
    """ # noqa: E501
    include: Optional[List[StrictInt]] = None
    exclude: Optional[List[StrictInt]] = None
    include_appellant: Optional[List[StrictInt]] = Field(default=None, alias="includeAppellant")
    exclude_appellant: Optional[List[StrictInt]] = Field(default=None, alias="excludeAppellant")
    include_appellee: Optional[List[StrictInt]] = Field(default=None, alias="includeAppellee")
    exclude_appellee: Optional[List[StrictInt]] = Field(default=None, alias="excludeAppellee")
    include_respondent: Optional[List[StrictInt]] = Field(default=None, alias="includeRespondent")
    exclude_respondent: Optional[List[StrictInt]] = Field(default=None, alias="excludeRespondent")
    include_third_party: Optional[List[StrictInt]] = Field(default=None, alias="includeThirdParty")
    exclude_third_party: Optional[List[StrictInt]] = Field(default=None, alias="excludeThirdParty")
    include_petitioner_movant: Optional[List[StrictInt]] = Field(default=None, alias="includePetitionerMovant")
    exclude_petitioner_movant: Optional[List[StrictInt]] = Field(default=None, alias="excludePetitionerMovant")
    __properties: ClassVar[List[str]] = ["include", "exclude", "includeAppellant", "excludeAppellant", "includeAppellee", "excludeAppellee", "includeRespondent", "excludeRespondent", "includeThirdParty", "excludeThirdParty", "includePetitionerMovant", "excludePetitionerMovant"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppealsAttorneyFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if include (nullable) is None
        # and model_fields_set contains the field
        if self.include is None and "include" in self.model_fields_set:
            _dict['include'] = None

        # set to None if exclude (nullable) is None
        # and model_fields_set contains the field
        if self.exclude is None and "exclude" in self.model_fields_set:
            _dict['exclude'] = None

        # set to None if include_appellant (nullable) is None
        # and model_fields_set contains the field
        if self.include_appellant is None and "include_appellant" in self.model_fields_set:
            _dict['includeAppellant'] = None

        # set to None if exclude_appellant (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_appellant is None and "exclude_appellant" in self.model_fields_set:
            _dict['excludeAppellant'] = None

        # set to None if include_appellee (nullable) is None
        # and model_fields_set contains the field
        if self.include_appellee is None and "include_appellee" in self.model_fields_set:
            _dict['includeAppellee'] = None

        # set to None if exclude_appellee (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_appellee is None and "exclude_appellee" in self.model_fields_set:
            _dict['excludeAppellee'] = None

        # set to None if include_respondent (nullable) is None
        # and model_fields_set contains the field
        if self.include_respondent is None and "include_respondent" in self.model_fields_set:
            _dict['includeRespondent'] = None

        # set to None if exclude_respondent (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_respondent is None and "exclude_respondent" in self.model_fields_set:
            _dict['excludeRespondent'] = None

        # set to None if include_third_party (nullable) is None
        # and model_fields_set contains the field
        if self.include_third_party is None and "include_third_party" in self.model_fields_set:
            _dict['includeThirdParty'] = None

        # set to None if exclude_third_party (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_third_party is None and "exclude_third_party" in self.model_fields_set:
            _dict['excludeThirdParty'] = None

        # set to None if include_petitioner_movant (nullable) is None
        # and model_fields_set contains the field
        if self.include_petitioner_movant is None and "include_petitioner_movant" in self.model_fields_set:
            _dict['includePetitionerMovant'] = None

        # set to None if exclude_petitioner_movant (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_petitioner_movant is None and "exclude_petitioner_movant" in self.model_fields_set:
            _dict['excludePetitionerMovant'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppealsAttorneyFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "include": obj.get("include"),
            "exclude": obj.get("exclude"),
            "includeAppellant": obj.get("includeAppellant"),
            "excludeAppellant": obj.get("excludeAppellant"),
            "includeAppellee": obj.get("includeAppellee"),
            "excludeAppellee": obj.get("excludeAppellee"),
            "includeRespondent": obj.get("includeRespondent"),
            "excludeRespondent": obj.get("excludeRespondent"),
            "includeThirdParty": obj.get("includeThirdParty"),
            "excludeThirdParty": obj.get("excludeThirdParty"),
            "includePetitionerMovant": obj.get("includePetitionerMovant"),
            "excludePetitionerMovant": obj.get("excludePetitionerMovant")
        })
        return _obj


