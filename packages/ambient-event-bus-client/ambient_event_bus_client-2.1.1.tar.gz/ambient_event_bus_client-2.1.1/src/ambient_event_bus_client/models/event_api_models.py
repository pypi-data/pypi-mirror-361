# generated by datamodel-codegen:
#   filename:  event-api-openapi.json
#   timestamp: 2024-05-03T15:29:57+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, model_validator


class Connection(BaseModel):
    id: Optional[str] = Field(None, title="Id")
    created_at: Optional[datetime] = Field(
        "2024-04-27T03:22:46.716266", title="Created At"
    )
    session_id: Optional[str] = Field(None, title="Session Id")
    is_active: Optional[bool] = Field(False, title="Is Active")
    start_time: datetime = Field(..., title="Start Time")
    end_time: Optional[datetime] = Field(None, title="End Time")


class CreateConnection(BaseModel):
    session_id: str = Field(..., title="Session Id")
    start_time: Optional[datetime] = Field(
        "2024-04-27T03:22:46.722048", title="Start Time"
    )


class ListResponseConnection(BaseModel):
    timestamp: Optional[datetime] = Field(
        "2024-04-27T03:22:46.717171", title="Timestamp"
    )
    results: List[Connection] = Field(..., title="Results")
    count: Optional[int] = Field(None, title="Count")


class Message(BaseModel):
    id: Optional[str] = Field(None, title="Id")
    created_at: Optional[datetime] = Field(
        "2024-04-27T03:22:46.716266", title="Created At"
    )
    topic: str = Field(..., title="Topic")
    content: str = Field(..., title="Content")
    subscriber_id: Optional[str] = Field(None, title="Subscriber Id")
    connection_id: Optional[str] = Field(None, title="Connection Id")
    session_id: Optional[str] = Field(None, title="Session Id")
    timestamp: Optional[datetime] = Field(
        "2024-04-27T03:22:46.726648", title="Timestamp"
    )
    priority: Optional[str] = Field(None, title="Priority")
    aggregate_type: Optional[str] = Field(None, title="Aggregate Type")
    aggregate_id: Optional[int] = Field(None, title="Aggregate Id")


class MessageCreate(BaseModel):
    topic: str = Field(..., title="Topic")
    content: str = Field(..., title="Content")
    aggregate_type: Optional[str] = Field(None, title="Aggregate Type")
    aggregate_id: Optional[int] = Field(None, title="Aggregate Id")

    @model_validator(mode="before")
    @classmethod
    def validate_aggregate_fields(cls, values):
        if isinstance(values, dict):
            aggregate_type = values.get("aggregate_type")
            aggregate_id = values.get("aggregate_id")

            if aggregate_id is not None and aggregate_type is None:
                raise ValueError(
                    "aggregate_type is required when aggregate_id is provided"
                )

        return values


class Status(Enum):
    CREATED = "CREATED"
    CONNECTED = "CONNECTED"
    DISCONNECTED = "DISCONNECTED"
    DELETED = "DELETED"
    ERROR = "ERROR"
    ACTIVE = "active"


class Subscriber(BaseModel):
    id: Optional[str] = Field(None, title="Id")
    created_at: Optional[datetime] = Field(
        "2024-04-27T03:22:46.716266", title="Created At"
    )
    updated_at: Optional[datetime] = Field(None, title="Updated At")
    status: Optional[str] = Field(None, title="Status")
    permissions: Optional[List[str]] = Field(None, title="Permissions")
    active_sessions: Optional[int] = Field(None, title="Active Sessions")
    message_quota: Optional[int] = Field(None, title="Message Quota")
    connection_quota: Optional[int] = Field(None, title="Connection Quota")


class SubscriptionCreate(BaseModel):
    topic: str = Field(..., title="Topic")
    subscriber_id: str = Field(..., title="Subscriber Id")
    aggregate_type: Optional[str] = Field(None, title="Aggregate Type")
    aggregate_id: Optional[int] = Field(None, title="Aggregate Id")
    is_regex: bool = Field(False, title="Is Regex")

    @model_validator(mode="before")
    @classmethod
    def validate_aggregate_fields(cls, values):
        if isinstance(values, dict):
            aggregate_type = values.get("aggregate_type")
            aggregate_id = values.get("aggregate_id")

            if aggregate_id is not None and aggregate_type is None:
                raise ValueError(
                    "aggregate_type is required when aggregate_id is provided"
                )

        return values


class Subscription(BaseModel):
    id: Optional[str] = Field(None, title="Id")
    created_at: Optional[datetime] = Field(
        "2024-04-27T03:22:46.716266", title="Created At"
    )
    subscriber_id: Optional[str] = Field(None, title="Subscriber Id")
    topic: str = Field(..., title="Topic")
    aggregate_type: Optional[str] = Field(None, title="Aggregate Type")
    aggregate_id: Optional[int] = Field(None, title="Aggregate Id")
    is_regex: bool = Field(False, title="Is Regex")


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class ListResponseMessage(BaseModel):
    timestamp: Optional[datetime] = Field(
        "2024-04-27T03:22:46.717171", title="Timestamp"
    )
    results: List[Message] = Field(..., title="Results")
    count: Optional[int] = Field(None, title="Count")


class ListResponseSubscriber(BaseModel):
    timestamp: Optional[datetime] = Field(
        "2024-04-27T03:22:46.717171", title="Timestamp"
    )
    results: List[Subscriber] = Field(..., title="Results")
    count: Optional[int] = Field(None, title="Count")


class ListResponseSubscription(BaseModel):
    timestamp: Optional[datetime] = Field(
        "2024-04-27T03:22:46.717171", title="Timestamp"
    )
    results: List[Subscription] = Field(..., title="Results")
    count: Optional[int] = Field(None, title="Count")


class Session(BaseModel):
    id: Optional[str] = Field(None, title="Id")
    created_at: Optional[datetime] = Field(
        "2024-04-27T03:22:46.716266", title="Created At"
    )
    subscriber_id: Optional[str] = Field(None, title="Subscriber Id")
    expires_at: Optional[datetime] = Field(None, title="Expires At")
    last_seen_at: Optional[datetime] = Field(None, title="Last Seen At")
    status: Optional[str] = Field(None, title="Status")
    is_active: Optional[bool] = Field(None, title="Is Active")
    connection_count: Optional[int] = Field(None, title="Connection Count")
    last_connected: Optional[datetime] = Field(
        "2024-04-27T03:22:46.720380", title="Last Connected"
    )
    token: Optional[str] = Field(None, title="Token")
    refresh_token: Optional[str] = Field(None, title="Refresh Token")


class ListResponseSession(BaseModel):
    timestamp: Optional[datetime] = Field(
        "2024-04-27T03:22:46.717171", title="Timestamp"
    )
    results: List[Session] = Field(..., title="Results")
    count: Optional[int] = Field(None, title="Count")
