# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReaderGroupDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReaderGroupDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReaderGroupDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ReaderGroupDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReaderGroupDataType
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ReaderGroupDataType
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ReaderGroupDataType
    def SecurityMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ReaderGroupDataType
    def SecurityGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ReaderGroupDataType
    def SecurityKeyServices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.EndpointDescription import EndpointDescription
            obj = EndpointDescription()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ReaderGroupDataType
    def SecurityKeyServicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReaderGroupDataType
    def SecurityKeyServicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # ReaderGroupDataType
    def MaxNetworkMessageSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReaderGroupDataType
    def GroupProperties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.KeyValuePair import KeyValuePair
            obj = KeyValuePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ReaderGroupDataType
    def GroupPropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReaderGroupDataType
    def GroupPropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # ReaderGroupDataType
    def TransportSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.ReaderGroupTransportDataType import ReaderGroupTransportDataType
            obj = ReaderGroupTransportDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ReaderGroupDataType
    def MessageSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.ReaderGroupMessageDataType import ReaderGroupMessageDataType
            obj = ReaderGroupMessageDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ReaderGroupDataType
    def DataSetReaders(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.DataSetReaderDataType import DataSetReaderDataType
            obj = DataSetReaderDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ReaderGroupDataType
    def DataSetReadersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReaderGroupDataType
    def DataSetReadersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def ReaderGroupDataTypeStart(builder): builder.StartObject(10)
def Start(builder):
    return ReaderGroupDataTypeStart(builder)
def ReaderGroupDataTypeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ReaderGroupDataTypeAddName(builder, name)
def ReaderGroupDataTypeAddEnabled(builder, enabled): builder.PrependBoolSlot(1, enabled, 0)
def AddEnabled(builder, enabled):
    return ReaderGroupDataTypeAddEnabled(builder, enabled)
def ReaderGroupDataTypeAddSecurityMode(builder, securityMode): builder.PrependInt32Slot(2, securityMode, 0)
def AddSecurityMode(builder, securityMode):
    return ReaderGroupDataTypeAddSecurityMode(builder, securityMode)
def ReaderGroupDataTypeAddSecurityGroupId(builder, securityGroupId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(securityGroupId), 0)
def AddSecurityGroupId(builder, securityGroupId):
    return ReaderGroupDataTypeAddSecurityGroupId(builder, securityGroupId)
def ReaderGroupDataTypeAddSecurityKeyServices(builder, securityKeyServices): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(securityKeyServices), 0)
def AddSecurityKeyServices(builder, securityKeyServices):
    return ReaderGroupDataTypeAddSecurityKeyServices(builder, securityKeyServices)
def ReaderGroupDataTypeStartSecurityKeyServicesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSecurityKeyServicesVector(builder, numElems):
    return ReaderGroupDataTypeStartSecurityKeyServicesVector(builder, numElems)
def ReaderGroupDataTypeAddMaxNetworkMessageSize(builder, maxNetworkMessageSize): builder.PrependUint32Slot(5, maxNetworkMessageSize, 0)
def AddMaxNetworkMessageSize(builder, maxNetworkMessageSize):
    return ReaderGroupDataTypeAddMaxNetworkMessageSize(builder, maxNetworkMessageSize)
def ReaderGroupDataTypeAddGroupProperties(builder, groupProperties): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(groupProperties), 0)
def AddGroupProperties(builder, groupProperties):
    return ReaderGroupDataTypeAddGroupProperties(builder, groupProperties)
def ReaderGroupDataTypeStartGroupPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartGroupPropertiesVector(builder, numElems):
    return ReaderGroupDataTypeStartGroupPropertiesVector(builder, numElems)
def ReaderGroupDataTypeAddTransportSettings(builder, transportSettings): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(transportSettings), 0)
def AddTransportSettings(builder, transportSettings):
    return ReaderGroupDataTypeAddTransportSettings(builder, transportSettings)
def ReaderGroupDataTypeAddMessageSettings(builder, messageSettings): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(messageSettings), 0)
def AddMessageSettings(builder, messageSettings):
    return ReaderGroupDataTypeAddMessageSettings(builder, messageSettings)
def ReaderGroupDataTypeAddDataSetReaders(builder, dataSetReaders): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetReaders), 0)
def AddDataSetReaders(builder, dataSetReaders):
    return ReaderGroupDataTypeAddDataSetReaders(builder, dataSetReaders)
def ReaderGroupDataTypeStartDataSetReadersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDataSetReadersVector(builder, numElems):
    return ReaderGroupDataTypeStartDataSetReadersVector(builder, numElems)
def ReaderGroupDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return ReaderGroupDataTypeEnd(builder)
import comm.opcua.structure.DataSetReaderDataType
import comm.opcua.structure.EndpointDescription
import comm.opcua.structure.KeyValuePair
import comm.opcua.subtypes.ReaderGroupMessageDataType
import comm.opcua.subtypes.ReaderGroupTransportDataType
try:
    from typing import List, Optional
except:
    pass

class ReaderGroupDataTypeT(object):

    # ReaderGroupDataTypeT
    def __init__(self):
        self.name = None  # type: str
        self.enabled = False  # type: bool
        self.securityMode = 0  # type: int
        self.securityGroupId = None  # type: str
        self.securityKeyServices = None  # type: List[comm.opcua.structure.EndpointDescription.EndpointDescriptionT]
        self.maxNetworkMessageSize = 0  # type: int
        self.groupProperties = None  # type: List[comm.opcua.structure.KeyValuePair.KeyValuePairT]
        self.transportSettings = None  # type: Optional[comm.opcua.subtypes.ReaderGroupTransportDataType.ReaderGroupTransportDataTypeT]
        self.messageSettings = None  # type: Optional[comm.opcua.subtypes.ReaderGroupMessageDataType.ReaderGroupMessageDataTypeT]
        self.dataSetReaders = None  # type: List[comm.opcua.structure.DataSetReaderDataType.DataSetReaderDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        readerGroupDataType = ReaderGroupDataType()
        readerGroupDataType.Init(buf, pos)
        return cls.InitFromObj(readerGroupDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, readerGroupDataType):
        x = ReaderGroupDataTypeT()
        x._UnPack(readerGroupDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.enabled == other.enabled and \
            self.securityMode == other.securityMode and \
            self.securityGroupId == other.securityGroupId and \
            self.securityKeyServices == other.securityKeyServices and \
            self.maxNetworkMessageSize == other.maxNetworkMessageSize and \
            self.groupProperties == other.groupProperties and \
            self.transportSettings == other.transportSettings and \
            self.messageSettings == other.messageSettings and \
            self.dataSetReaders == other.dataSetReaders

    # ReaderGroupDataTypeT
    def _UnPack(self, readerGroupDataType):
        if readerGroupDataType is None:
            return
        self.name = readerGroupDataType.Name()
        self.enabled = readerGroupDataType.Enabled()
        self.securityMode = readerGroupDataType.SecurityMode()
        self.securityGroupId = readerGroupDataType.SecurityGroupId()
        if not readerGroupDataType.SecurityKeyServicesIsNone():
            self.securityKeyServices = []
            for i in range(readerGroupDataType.SecurityKeyServicesLength()):
                if readerGroupDataType.SecurityKeyServices(i) is None:
                    self.securityKeyServices.append(None)
                else:
                    endpointDescription_ = comm.opcua.structure.EndpointDescription.EndpointDescriptionT.InitFromObj(readerGroupDataType.SecurityKeyServices(i))
                    self.securityKeyServices.append(endpointDescription_)
        self.maxNetworkMessageSize = readerGroupDataType.MaxNetworkMessageSize()
        if not readerGroupDataType.GroupPropertiesIsNone():
            self.groupProperties = []
            for i in range(readerGroupDataType.GroupPropertiesLength()):
                if readerGroupDataType.GroupProperties(i) is None:
                    self.groupProperties.append(None)
                else:
                    keyValuePair_ = comm.opcua.structure.KeyValuePair.KeyValuePairT.InitFromObj(readerGroupDataType.GroupProperties(i))
                    self.groupProperties.append(keyValuePair_)
        if readerGroupDataType.TransportSettings() is not None:
            self.transportSettings = comm.opcua.subtypes.ReaderGroupTransportDataType.ReaderGroupTransportDataTypeT.InitFromObj(readerGroupDataType.TransportSettings())
        if readerGroupDataType.MessageSettings() is not None:
            self.messageSettings = comm.opcua.subtypes.ReaderGroupMessageDataType.ReaderGroupMessageDataTypeT.InitFromObj(readerGroupDataType.MessageSettings())
        if not readerGroupDataType.DataSetReadersIsNone():
            self.dataSetReaders = []
            for i in range(readerGroupDataType.DataSetReadersLength()):
                if readerGroupDataType.DataSetReaders(i) is None:
                    self.dataSetReaders.append(None)
                else:
                    dataSetReaderDataType_ = comm.opcua.structure.DataSetReaderDataType.DataSetReaderDataTypeT.InitFromObj(readerGroupDataType.DataSetReaders(i))
                    self.dataSetReaders.append(dataSetReaderDataType_)

    # ReaderGroupDataTypeT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.securityGroupId is not None:
            securityGroupId = builder.CreateString(self.securityGroupId)
        if self.securityKeyServices is not None:
            securityKeyServiceslist = []
            for i in range(len(self.securityKeyServices)):
                securityKeyServiceslist.append(self.securityKeyServices[i].Pack(builder))
            ReaderGroupDataTypeStartSecurityKeyServicesVector(builder, len(self.securityKeyServices))
            for i in reversed(range(len(self.securityKeyServices))):
                builder.PrependUOffsetTRelative(securityKeyServiceslist[i])
            securityKeyServices = builder.EndVector()
        if self.groupProperties is not None:
            groupPropertieslist = []
            for i in range(len(self.groupProperties)):
                groupPropertieslist.append(self.groupProperties[i].Pack(builder))
            ReaderGroupDataTypeStartGroupPropertiesVector(builder, len(self.groupProperties))
            for i in reversed(range(len(self.groupProperties))):
                builder.PrependUOffsetTRelative(groupPropertieslist[i])
            groupProperties = builder.EndVector()
        if self.transportSettings is not None:
            transportSettings = self.transportSettings.Pack(builder)
        if self.messageSettings is not None:
            messageSettings = self.messageSettings.Pack(builder)
        if self.dataSetReaders is not None:
            dataSetReaderslist = []
            for i in range(len(self.dataSetReaders)):
                dataSetReaderslist.append(self.dataSetReaders[i].Pack(builder))
            ReaderGroupDataTypeStartDataSetReadersVector(builder, len(self.dataSetReaders))
            for i in reversed(range(len(self.dataSetReaders))):
                builder.PrependUOffsetTRelative(dataSetReaderslist[i])
            dataSetReaders = builder.EndVector()
        ReaderGroupDataTypeStart(builder)
        if self.name is not None:
            ReaderGroupDataTypeAddName(builder, name)
        ReaderGroupDataTypeAddEnabled(builder, self.enabled)
        ReaderGroupDataTypeAddSecurityMode(builder, self.securityMode)
        if self.securityGroupId is not None:
            ReaderGroupDataTypeAddSecurityGroupId(builder, securityGroupId)
        if self.securityKeyServices is not None:
            ReaderGroupDataTypeAddSecurityKeyServices(builder, securityKeyServices)
        ReaderGroupDataTypeAddMaxNetworkMessageSize(builder, self.maxNetworkMessageSize)
        if self.groupProperties is not None:
            ReaderGroupDataTypeAddGroupProperties(builder, groupProperties)
        if self.transportSettings is not None:
            ReaderGroupDataTypeAddTransportSettings(builder, transportSettings)
        if self.messageSettings is not None:
            ReaderGroupDataTypeAddMessageSettings(builder, messageSettings)
        if self.dataSetReaders is not None:
            ReaderGroupDataTypeAddDataSetReaders(builder, dataSetReaders)
        readerGroupDataType = ReaderGroupDataTypeEnd(builder)
        return readerGroupDataType
