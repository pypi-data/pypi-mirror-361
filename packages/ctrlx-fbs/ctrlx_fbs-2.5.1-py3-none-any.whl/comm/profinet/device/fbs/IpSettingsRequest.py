# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class IpSettingsRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IpSettingsRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIpSettingsRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IpSettingsRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IpSettingsRequest
    def Address(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # IpSettingsRequest
    def AddressAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # IpSettingsRequest
    def AddressLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IpSettingsRequest
    def AddressIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # IpSettingsRequest
    def SubnetMask(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # IpSettingsRequest
    def SubnetMaskAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # IpSettingsRequest
    def SubnetMaskLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IpSettingsRequest
    def SubnetMaskIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # IpSettingsRequest
    def GatewayAddress(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # IpSettingsRequest
    def GatewayAddressAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # IpSettingsRequest
    def GatewayAddressLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IpSettingsRequest
    def GatewayAddressIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def IpSettingsRequestStart(builder): builder.StartObject(3)
def Start(builder):
    return IpSettingsRequestStart(builder)
def IpSettingsRequestAddAddress(builder, address): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def AddAddress(builder, address):
    return IpSettingsRequestAddAddress(builder, address)
def IpSettingsRequestStartAddressVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartAddressVector(builder, numElems):
    return IpSettingsRequestStartAddressVector(builder, numElems)
def IpSettingsRequestAddSubnetMask(builder, subnetMask): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(subnetMask), 0)
def AddSubnetMask(builder, subnetMask):
    return IpSettingsRequestAddSubnetMask(builder, subnetMask)
def IpSettingsRequestStartSubnetMaskVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartSubnetMaskVector(builder, numElems):
    return IpSettingsRequestStartSubnetMaskVector(builder, numElems)
def IpSettingsRequestAddGatewayAddress(builder, gatewayAddress): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gatewayAddress), 0)
def AddGatewayAddress(builder, gatewayAddress):
    return IpSettingsRequestAddGatewayAddress(builder, gatewayAddress)
def IpSettingsRequestStartGatewayAddressVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartGatewayAddressVector(builder, numElems):
    return IpSettingsRequestStartGatewayAddressVector(builder, numElems)
def IpSettingsRequestEnd(builder): return builder.EndObject()
def End(builder):
    return IpSettingsRequestEnd(builder)
try:
    from typing import List
except:
    pass

class IpSettingsRequestT(object):

    # IpSettingsRequestT
    def __init__(self):
        self.address = None  # type: List[int]
        self.subnetMask = None  # type: List[int]
        self.gatewayAddress = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ipSettingsRequest = IpSettingsRequest()
        ipSettingsRequest.Init(buf, pos)
        return cls.InitFromObj(ipSettingsRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ipSettingsRequest):
        x = IpSettingsRequestT()
        x._UnPack(ipSettingsRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.address == other.address and \
            self.subnetMask == other.subnetMask and \
            self.gatewayAddress == other.gatewayAddress

    # IpSettingsRequestT
    def _UnPack(self, ipSettingsRequest):
        if ipSettingsRequest is None:
            return
        if not ipSettingsRequest.AddressIsNone():
            if np is None:
                self.address = []
                for i in range(ipSettingsRequest.AddressLength()):
                    self.address.append(ipSettingsRequest.Address(i))
            else:
                self.address = ipSettingsRequest.AddressAsNumpy()
        if not ipSettingsRequest.SubnetMaskIsNone():
            if np is None:
                self.subnetMask = []
                for i in range(ipSettingsRequest.SubnetMaskLength()):
                    self.subnetMask.append(ipSettingsRequest.SubnetMask(i))
            else:
                self.subnetMask = ipSettingsRequest.SubnetMaskAsNumpy()
        if not ipSettingsRequest.GatewayAddressIsNone():
            if np is None:
                self.gatewayAddress = []
                for i in range(ipSettingsRequest.GatewayAddressLength()):
                    self.gatewayAddress.append(ipSettingsRequest.GatewayAddress(i))
            else:
                self.gatewayAddress = ipSettingsRequest.GatewayAddressAsNumpy()

    # IpSettingsRequestT
    def Pack(self, builder):
        if self.address is not None:
            if np is not None and type(self.address) is np.ndarray:
                address = builder.CreateNumpyVector(self.address)
            else:
                IpSettingsRequestStartAddressVector(builder, len(self.address))
                for i in reversed(range(len(self.address))):
                    builder.PrependUint8(self.address[i])
                address = builder.EndVector()
        if self.subnetMask is not None:
            if np is not None and type(self.subnetMask) is np.ndarray:
                subnetMask = builder.CreateNumpyVector(self.subnetMask)
            else:
                IpSettingsRequestStartSubnetMaskVector(builder, len(self.subnetMask))
                for i in reversed(range(len(self.subnetMask))):
                    builder.PrependUint8(self.subnetMask[i])
                subnetMask = builder.EndVector()
        if self.gatewayAddress is not None:
            if np is not None and type(self.gatewayAddress) is np.ndarray:
                gatewayAddress = builder.CreateNumpyVector(self.gatewayAddress)
            else:
                IpSettingsRequestStartGatewayAddressVector(builder, len(self.gatewayAddress))
                for i in reversed(range(len(self.gatewayAddress))):
                    builder.PrependUint8(self.gatewayAddress[i])
                gatewayAddress = builder.EndVector()
        IpSettingsRequestStart(builder)
        if self.address is not None:
            IpSettingsRequestAddAddress(builder, address)
        if self.subnetMask is not None:
            IpSettingsRequestAddSubnetMask(builder, subnetMask)
        if self.gatewayAddress is not None:
            IpSettingsRequestAddGatewayAddress(builder, gatewayAddress)
        ipSettingsRequest = IpSettingsRequestEnd(builder)
        return ipSettingsRequest
