#!/usr/bin/env python3
"""
Vulnerability Severity Management Module

This module provides unified severity assessment functionality
for vulnerabilities across different frameworks.
"""

from ...constants.severity_levels import SEVERITY_HIGH, SEVERITY_MEDIUM


def get_severity(vuln_type: str, description: str = "", framework: str = "java") -> str:
    """
    Unified severity assessment function
    
    Args:
        vuln_type: Type of vulnerability
        description: Description of the vulnerability for enhanced assessment
        framework: Framework context (java, react_native, flutter)
    
    Returns:
        Severity level as string (High/Medium/Low)
    """
    # Framework-specific severity mappings can be added here
    if framework == "react_native":
        return _get_react_native_severity(vuln_type, description)
    elif framework == "flutter":
        return _get_flutter_severity(vuln_type, description)
    else:
        return _get_java_severity(vuln_type, description)


def get_enhanced_severity(vuln_type: str, description: str, framework: str = "react_native") -> str:
    """Enhanced severity assessment with context analysis (alias for get_severity)"""
    return get_severity(vuln_type, description, framework)


def _get_java_severity(vuln_type: str, description: str = "") -> str:
    """Get severity level for Java/Kotlin vulnerabilities"""
    if vuln_type in SEVERITY_HIGH:
        return "High"
    elif vuln_type in SEVERITY_MEDIUM:
        return "Medium"
    else:
        return "Low"


def _get_react_native_severity(vuln_type: str, description: str = "") -> str:
    """Enhanced severity assessment for React Native vulnerabilities"""
    critical_keywords = ['eval', 'password', 'private key', 'secret key', 'aws secret', 'bearer token']
    high_keywords = ['token', 'api key', 'native module', 'javascript injection', 'ssl verification disabled']
    
    description_lower = description.lower()
    
    # Critical severity
    if any(keyword in description_lower for keyword in critical_keywords):
        return "Critical"
    
    # High severity categories
    high_severity = [
        'JavaScript Injection', 'React Native Bridge Security',
        'Hardcoded Secrets and API Keys', 'Deep Link and URL Handling Vulnerabilities'
    ]
    
    # Medium severity categories
    medium_severity = [
        'Insecure Data Storage', 'Insecure Network Communication',
        'Input Validation Issues', 'Cryptographic Vulnerabilities'
    ]
    
    # Low severity categories
    low_severity = [
        'React Native Security Issues'
    ]
    
    if vuln_type in high_severity or any(keyword in description_lower for keyword in high_keywords):
        return "High"
    elif vuln_type in medium_severity:
        return "Medium"
    elif vuln_type in low_severity:
        return "Low"
    else:
        return "Medium"  # Default for unknown types


def _get_flutter_severity(vuln_type: str, description: str = "") -> str:
    """Enhanced severity assessment for Flutter vulnerabilities"""
    critical_keywords = ['hardcoded password', 'private key', 'secret key', 'api key exposure']
    high_keywords = ['platform channel', 'asset tampering', 'code injection', 'xss']
    
    description_lower = description.lower()
    
    # Critical severity
    if any(keyword in description_lower for keyword in critical_keywords):
        return "Critical"
    
    # Flutter specific severity rules
    flutter_high_severity = [
        'Platform Channel Vulnerability', 'Asset Tampering',
        'Hardcoded Secrets', 'Code Injection', 'XSS'
    ]
    flutter_medium_severity = [
        'Insecure Network', 'Weak Cryptography', 'Debug Mode',
        'Package Vulnerability', 'Path Traversal'
    ]
    
    if vuln_type in flutter_high_severity or any(keyword in description_lower for keyword in high_keywords):
        return "High"
    elif vuln_type in flutter_medium_severity:
        return "Medium"
    else:
        return "Low"
