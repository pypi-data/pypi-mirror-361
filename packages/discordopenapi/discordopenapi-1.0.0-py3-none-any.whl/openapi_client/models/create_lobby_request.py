# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.lobby_member_request import LobbyMemberRequest
from typing import Optional, Set
from typing_extensions import Self

class CreateLobbyRequest(BaseModel):
    """
    CreateLobbyRequest
    """ # noqa: E501
    idle_timeout_seconds: Optional[Annotated[int, Field(le=604800, strict=True, ge=5)]] = None
    members: Optional[Annotated[List[LobbyMemberRequest], Field(max_length=25)]] = None
    metadata: Optional[Dict[str, Annotated[str, Field(strict=True, max_length=1024)]]] = None
    __properties: ClassVar[List[str]] = ["idle_timeout_seconds", "members", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateLobbyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item_members in self.members:
                if _item_members:
                    _items.append(_item_members.to_dict())
            _dict['members'] = _items
        # set to None if idle_timeout_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.idle_timeout_seconds is None and "idle_timeout_seconds" in self.model_fields_set:
            _dict['idle_timeout_seconds'] = None

        # set to None if members (nullable) is None
        # and model_fields_set contains the field
        if self.members is None and "members" in self.model_fields_set:
            _dict['members'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateLobbyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "idle_timeout_seconds": obj.get("idle_timeout_seconds"),
            "members": [LobbyMemberRequest.from_dict(_item) for _item in obj["members"]] if obj.get("members") is not None else None,
            "metadata": obj.get("metadata")
        })
        return _obj


