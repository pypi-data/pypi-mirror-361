# coding: utf-8

"""
    Lookup/Ibis web service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from identitylib.lookup_client.models.attribute import Attribute
from identitylib.lookup_client.models.identifier import Identifier
from identitylib.lookup_client.models.person_identifier import PersonIdentifier
from typing import Optional, Set
from typing_extensions import Self

class Person(BaseModel):
    """
    Class representing a person returned by the web service API. Note that the identifier is the person's primary identifier (typically their CRSid), regardless of which identifier was used to query for the person.
    """ # noqa: E501
    cancelled: Optional[StrictBool] = Field(default=None, description="Flag indicating if the person is cancelled.")
    identifier: Optional[PersonIdentifier] = None
    display_name: Optional[StrictStr] = Field(default=None, description="The person's display name (if visible).", alias="displayName")
    registered_name: Optional[StrictStr] = Field(default=None, description="The person's registered name (if visible).", alias="registeredName")
    surname: Optional[StrictStr] = Field(default=None, description="The person's surname (if visible).")
    visible_name: Optional[StrictStr] = Field(default=None, description="The person's display name if that is visible, otherwise their registered name if that is visible, otherwise their surname if that is visible, otherwise the value of their primary identifier (typically their CRSid) which is always visible.", alias="visibleName")
    mis_affiliation: Optional[StrictStr] = Field(default=None, description="The person's MIS status (`\"staff\"`, `\"student\"`, `\"staff,student\"` or `\"\"`).", alias="misAffiliation")
    identifiers: Optional[List[Identifier]] = Field(default=None, description="A list of the person's identifiers. This will only be populated if the `fetch` parameter included the `\"all_identifiers\"` option.")
    attributes: Optional[List[Attribute]] = Field(default=None, description="A list of the person's attributes. This will only be populated if the `fetch` parameter includes the `\"all_attrs\"` option, or any specific attribute schemes such as `\"email\"` or `\"title\"`, or the special pseudo-attribute scheme `\"phone_numbers\"`.")
    institutions: Optional[List[Institution]] = Field(default=None, description="A list of all the institution's to which the person belongs. This will only be populated if the `fetch` parameter includes the `\"all_insts\"` option.")
    groups: Optional[List[Group]] = Field(default=None, description="A list of all the groups to which the person belongs, including indirect group memberships, via groups that include other groups. This will only be populated if the `fetch` parameter includes the `\"all_groups\"` option.")
    direct_groups: Optional[List[Group]] = Field(default=None, description="A list of all the groups that the person directly belongs to. This does not include indirect group memberships - i.e., groups that include these groups. This will only be populated if the `fetch` parameter includes the `\"direct_groups\"` option.", alias="directGroups")
    id: Optional[StrictStr] = Field(default=None, description="An ID that can uniquely identify this person within the returned XML/JSON document. This is only used in the flattened XML/JSON representation (if the \"flatten\" parameter is specified).")
    ref: Optional[StrictStr] = Field(default=None, description="A reference (by id) to a person element in the XML/JSON document. This is only used in the flattened XML/JSON representation (if the \"flatten\" parameter is specified).")
    __properties: ClassVar[List[str]] = ["cancelled", "identifier", "displayName", "registeredName", "surname", "visibleName", "misAffiliation", "identifiers", "attributes", "institutions", "groups", "directGroups", "id", "ref"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Person from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in identifiers (list)
        _items = []
        if self.identifiers:
            for _item in self.identifiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['identifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item in self.attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in institutions (list)
        _items = []
        if self.institutions:
            for _item in self.institutions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['institutions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item in self.groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in direct_groups (list)
        _items = []
        if self.direct_groups:
            for _item in self.direct_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['directGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Person from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancelled": obj.get("cancelled"),
            "identifier": PersonIdentifier.from_dict(obj["identifier"]) if obj.get("identifier") is not None else None,
            "displayName": obj.get("displayName"),
            "registeredName": obj.get("registeredName"),
            "surname": obj.get("surname"),
            "visibleName": obj.get("visibleName"),
            "misAffiliation": obj.get("misAffiliation"),
            "identifiers": [Identifier.from_dict(_item) for _item in obj["identifiers"]] if obj.get("identifiers") is not None else None,
            "attributes": [Attribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "institutions": [Institution.from_dict(_item) for _item in obj["institutions"]] if obj.get("institutions") is not None else None,
            "groups": [Group.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None,
            "directGroups": [Group.from_dict(_item) for _item in obj["directGroups"]] if obj.get("directGroups") is not None else None,
            "id": obj.get("id"),
            "ref": obj.get("ref")
        })
        return _obj

from identitylib.lookup_client.models.group import Group
from identitylib.lookup_client.models.institution import Institution
# TODO: Rewrite to not use raise_errors
Person.model_rebuild(raise_errors=False)

