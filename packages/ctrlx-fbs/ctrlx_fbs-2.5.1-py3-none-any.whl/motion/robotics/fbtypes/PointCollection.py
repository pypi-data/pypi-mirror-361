# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PointCollection(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PointCollection()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPointCollection(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PointCollection
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PointCollection
    def Points(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.robotics.fbtypes.Point import Point
            obj = Point()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PointCollection
    def PointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PointCollection
    def PointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def PointCollectionStart(builder): builder.StartObject(1)
def Start(builder):
    return PointCollectionStart(builder)
def PointCollectionAddPoints(builder, points): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(points), 0)
def AddPoints(builder, points):
    return PointCollectionAddPoints(builder, points)
def PointCollectionStartPointsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPointsVector(builder, numElems):
    return PointCollectionStartPointsVector(builder, numElems)
def PointCollectionEnd(builder): return builder.EndObject()
def End(builder):
    return PointCollectionEnd(builder)
import motion.robotics.fbtypes.Point
try:
    from typing import List
except:
    pass

class PointCollectionT(object):

    # PointCollectionT
    def __init__(self):
        self.points = None  # type: List[motion.robotics.fbtypes.Point.PointT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pointCollection = PointCollection()
        pointCollection.Init(buf, pos)
        return cls.InitFromObj(pointCollection)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, pointCollection):
        x = PointCollectionT()
        x._UnPack(pointCollection)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.points == other.points

    # PointCollectionT
    def _UnPack(self, pointCollection):
        if pointCollection is None:
            return
        if not pointCollection.PointsIsNone():
            self.points = []
            for i in range(pointCollection.PointsLength()):
                if pointCollection.Points(i) is None:
                    self.points.append(None)
                else:
                    point_ = motion.robotics.fbtypes.Point.PointT.InitFromObj(pointCollection.Points(i))
                    self.points.append(point_)

    # PointCollectionT
    def Pack(self, builder):
        if self.points is not None:
            pointslist = []
            for i in range(len(self.points)):
                pointslist.append(self.points[i].Pack(builder))
            PointCollectionStartPointsVector(builder, len(self.points))
            for i in reversed(range(len(self.points))):
                builder.PrependUOffsetTRelative(pointslist[i])
            points = builder.EndVector()
        PointCollectionStart(builder)
        if self.points is not None:
            PointCollectionAddPoints(builder, points)
        pointCollection = PointCollectionEnd(builder)
        return pointCollection
