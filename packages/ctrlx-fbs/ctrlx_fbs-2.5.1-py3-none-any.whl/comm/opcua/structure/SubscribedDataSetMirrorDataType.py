# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SubscribedDataSetMirrorDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SubscribedDataSetMirrorDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSubscribedDataSetMirrorDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SubscribedDataSetMirrorDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SubscribedDataSetMirrorDataType
    def ParentNodeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SubscribedDataSetMirrorDataType
    def RolePermissions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.RolePermissionType import RolePermissionType
            obj = RolePermissionType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SubscribedDataSetMirrorDataType
    def RolePermissionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SubscribedDataSetMirrorDataType
    def RolePermissionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def SubscribedDataSetMirrorDataTypeStart(builder): builder.StartObject(2)
def Start(builder):
    return SubscribedDataSetMirrorDataTypeStart(builder)
def SubscribedDataSetMirrorDataTypeAddParentNodeName(builder, parentNodeName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(parentNodeName), 0)
def AddParentNodeName(builder, parentNodeName):
    return SubscribedDataSetMirrorDataTypeAddParentNodeName(builder, parentNodeName)
def SubscribedDataSetMirrorDataTypeAddRolePermissions(builder, rolePermissions): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rolePermissions), 0)
def AddRolePermissions(builder, rolePermissions):
    return SubscribedDataSetMirrorDataTypeAddRolePermissions(builder, rolePermissions)
def SubscribedDataSetMirrorDataTypeStartRolePermissionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRolePermissionsVector(builder, numElems):
    return SubscribedDataSetMirrorDataTypeStartRolePermissionsVector(builder, numElems)
def SubscribedDataSetMirrorDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return SubscribedDataSetMirrorDataTypeEnd(builder)
import comm.opcua.structure.RolePermissionType
try:
    from typing import List
except:
    pass

class SubscribedDataSetMirrorDataTypeT(object):

    # SubscribedDataSetMirrorDataTypeT
    def __init__(self):
        self.parentNodeName = None  # type: str
        self.rolePermissions = None  # type: List[comm.opcua.structure.RolePermissionType.RolePermissionTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        subscribedDataSetMirrorDataType = SubscribedDataSetMirrorDataType()
        subscribedDataSetMirrorDataType.Init(buf, pos)
        return cls.InitFromObj(subscribedDataSetMirrorDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, subscribedDataSetMirrorDataType):
        x = SubscribedDataSetMirrorDataTypeT()
        x._UnPack(subscribedDataSetMirrorDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.parentNodeName == other.parentNodeName and \
            self.rolePermissions == other.rolePermissions

    # SubscribedDataSetMirrorDataTypeT
    def _UnPack(self, subscribedDataSetMirrorDataType):
        if subscribedDataSetMirrorDataType is None:
            return
        self.parentNodeName = subscribedDataSetMirrorDataType.ParentNodeName()
        if not subscribedDataSetMirrorDataType.RolePermissionsIsNone():
            self.rolePermissions = []
            for i in range(subscribedDataSetMirrorDataType.RolePermissionsLength()):
                if subscribedDataSetMirrorDataType.RolePermissions(i) is None:
                    self.rolePermissions.append(None)
                else:
                    rolePermissionType_ = comm.opcua.structure.RolePermissionType.RolePermissionTypeT.InitFromObj(subscribedDataSetMirrorDataType.RolePermissions(i))
                    self.rolePermissions.append(rolePermissionType_)

    # SubscribedDataSetMirrorDataTypeT
    def Pack(self, builder):
        if self.parentNodeName is not None:
            parentNodeName = builder.CreateString(self.parentNodeName)
        if self.rolePermissions is not None:
            rolePermissionslist = []
            for i in range(len(self.rolePermissions)):
                rolePermissionslist.append(self.rolePermissions[i].Pack(builder))
            SubscribedDataSetMirrorDataTypeStartRolePermissionsVector(builder, len(self.rolePermissions))
            for i in reversed(range(len(self.rolePermissions))):
                builder.PrependUOffsetTRelative(rolePermissionslist[i])
            rolePermissions = builder.EndVector()
        SubscribedDataSetMirrorDataTypeStart(builder)
        if self.parentNodeName is not None:
            SubscribedDataSetMirrorDataTypeAddParentNodeName(builder, parentNodeName)
        if self.rolePermissions is not None:
            SubscribedDataSetMirrorDataTypeAddRolePermissions(builder, rolePermissions)
        subscribedDataSetMirrorDataType = SubscribedDataSetMirrorDataTypeEnd(builder)
        return subscribedDataSetMirrorDataType
