# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DatagramConnectionTransport2DataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DatagramConnectionTransport2DataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDatagramConnectionTransport2DataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DatagramConnectionTransport2DataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DatagramConnectionTransport2DataType
    def DiscoveryAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.NetworkAddressDataType import NetworkAddressDataType
            obj = NetworkAddressDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DatagramConnectionTransport2DataType
    def DiscoveryAnnounceRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DatagramConnectionTransport2DataType
    def DiscoveryMaxMessageSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DatagramConnectionTransport2DataType
    def QosCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DatagramConnectionTransport2DataType
    def DatagramQos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.subtypes.QosDataType import QosDataType
            obj = QosDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DatagramConnectionTransport2DataType
    def DatagramQosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DatagramConnectionTransport2DataType
    def DatagramQosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def DatagramConnectionTransport2DataTypeStart(builder): builder.StartObject(5)
def Start(builder):
    return DatagramConnectionTransport2DataTypeStart(builder)
def DatagramConnectionTransport2DataTypeAddDiscoveryAddress(builder, discoveryAddress): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(discoveryAddress), 0)
def AddDiscoveryAddress(builder, discoveryAddress):
    return DatagramConnectionTransport2DataTypeAddDiscoveryAddress(builder, discoveryAddress)
def DatagramConnectionTransport2DataTypeAddDiscoveryAnnounceRate(builder, discoveryAnnounceRate): builder.PrependUint32Slot(1, discoveryAnnounceRate, 0)
def AddDiscoveryAnnounceRate(builder, discoveryAnnounceRate):
    return DatagramConnectionTransport2DataTypeAddDiscoveryAnnounceRate(builder, discoveryAnnounceRate)
def DatagramConnectionTransport2DataTypeAddDiscoveryMaxMessageSize(builder, discoveryMaxMessageSize): builder.PrependUint32Slot(2, discoveryMaxMessageSize, 0)
def AddDiscoveryMaxMessageSize(builder, discoveryMaxMessageSize):
    return DatagramConnectionTransport2DataTypeAddDiscoveryMaxMessageSize(builder, discoveryMaxMessageSize)
def DatagramConnectionTransport2DataTypeAddQosCategory(builder, qosCategory): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(qosCategory), 0)
def AddQosCategory(builder, qosCategory):
    return DatagramConnectionTransport2DataTypeAddQosCategory(builder, qosCategory)
def DatagramConnectionTransport2DataTypeAddDatagramQos(builder, datagramQos): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(datagramQos), 0)
def AddDatagramQos(builder, datagramQos):
    return DatagramConnectionTransport2DataTypeAddDatagramQos(builder, datagramQos)
def DatagramConnectionTransport2DataTypeStartDatagramQosVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDatagramQosVector(builder, numElems):
    return DatagramConnectionTransport2DataTypeStartDatagramQosVector(builder, numElems)
def DatagramConnectionTransport2DataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return DatagramConnectionTransport2DataTypeEnd(builder)
import comm.opcua.subtypes.NetworkAddressDataType
import comm.opcua.subtypes.QosDataType
try:
    from typing import List, Optional
except:
    pass

class DatagramConnectionTransport2DataTypeT(object):

    # DatagramConnectionTransport2DataTypeT
    def __init__(self):
        self.discoveryAddress = None  # type: Optional[comm.opcua.subtypes.NetworkAddressDataType.NetworkAddressDataTypeT]
        self.discoveryAnnounceRate = 0  # type: int
        self.discoveryMaxMessageSize = 0  # type: int
        self.qosCategory = None  # type: str
        self.datagramQos = None  # type: List[comm.opcua.subtypes.QosDataType.QosDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        datagramConnectionTransport2DataType = DatagramConnectionTransport2DataType()
        datagramConnectionTransport2DataType.Init(buf, pos)
        return cls.InitFromObj(datagramConnectionTransport2DataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, datagramConnectionTransport2DataType):
        x = DatagramConnectionTransport2DataTypeT()
        x._UnPack(datagramConnectionTransport2DataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.discoveryAddress == other.discoveryAddress and \
            self.discoveryAnnounceRate == other.discoveryAnnounceRate and \
            self.discoveryMaxMessageSize == other.discoveryMaxMessageSize and \
            self.qosCategory == other.qosCategory and \
            self.datagramQos == other.datagramQos

    # DatagramConnectionTransport2DataTypeT
    def _UnPack(self, datagramConnectionTransport2DataType):
        if datagramConnectionTransport2DataType is None:
            return
        if datagramConnectionTransport2DataType.DiscoveryAddress() is not None:
            self.discoveryAddress = comm.opcua.subtypes.NetworkAddressDataType.NetworkAddressDataTypeT.InitFromObj(datagramConnectionTransport2DataType.DiscoveryAddress())
        self.discoveryAnnounceRate = datagramConnectionTransport2DataType.DiscoveryAnnounceRate()
        self.discoveryMaxMessageSize = datagramConnectionTransport2DataType.DiscoveryMaxMessageSize()
        self.qosCategory = datagramConnectionTransport2DataType.QosCategory()
        if not datagramConnectionTransport2DataType.DatagramQosIsNone():
            self.datagramQos = []
            for i in range(datagramConnectionTransport2DataType.DatagramQosLength()):
                if datagramConnectionTransport2DataType.DatagramQos(i) is None:
                    self.datagramQos.append(None)
                else:
                    qosDataType_ = comm.opcua.subtypes.QosDataType.QosDataTypeT.InitFromObj(datagramConnectionTransport2DataType.DatagramQos(i))
                    self.datagramQos.append(qosDataType_)

    # DatagramConnectionTransport2DataTypeT
    def Pack(self, builder):
        if self.discoveryAddress is not None:
            discoveryAddress = self.discoveryAddress.Pack(builder)
        if self.qosCategory is not None:
            qosCategory = builder.CreateString(self.qosCategory)
        if self.datagramQos is not None:
            datagramQoslist = []
            for i in range(len(self.datagramQos)):
                datagramQoslist.append(self.datagramQos[i].Pack(builder))
            DatagramConnectionTransport2DataTypeStartDatagramQosVector(builder, len(self.datagramQos))
            for i in reversed(range(len(self.datagramQos))):
                builder.PrependUOffsetTRelative(datagramQoslist[i])
            datagramQos = builder.EndVector()
        DatagramConnectionTransport2DataTypeStart(builder)
        if self.discoveryAddress is not None:
            DatagramConnectionTransport2DataTypeAddDiscoveryAddress(builder, discoveryAddress)
        DatagramConnectionTransport2DataTypeAddDiscoveryAnnounceRate(builder, self.discoveryAnnounceRate)
        DatagramConnectionTransport2DataTypeAddDiscoveryMaxMessageSize(builder, self.discoveryMaxMessageSize)
        if self.qosCategory is not None:
            DatagramConnectionTransport2DataTypeAddQosCategory(builder, qosCategory)
        if self.datagramQos is not None:
            DatagramConnectionTransport2DataTypeAddDatagramQos(builder, datagramQos)
        datagramConnectionTransport2DataType = DatagramConnectionTransport2DataTypeEnd(builder)
        return datagramConnectionTransport2DataType
