# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PubSubConfigurationValueDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PubSubConfigurationValueDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPubSubConfigurationValueDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PubSubConfigurationValueDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PubSubConfigurationValueDataType
    def ConfigurationElement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.structure.PubSubConfigurationRefDataType import PubSubConfigurationRefDataType
            obj = PubSubConfigurationRefDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConfigurationValueDataType
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PubSubConfigurationValueDataType
    def Identifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.Variant import Variant
            obj = Variant()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PubSubConfigurationValueDataTypeStart(builder): builder.StartObject(3)
def Start(builder):
    return PubSubConfigurationValueDataTypeStart(builder)
def PubSubConfigurationValueDataTypeAddConfigurationElement(builder, configurationElement): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(configurationElement), 0)
def AddConfigurationElement(builder, configurationElement):
    return PubSubConfigurationValueDataTypeAddConfigurationElement(builder, configurationElement)
def PubSubConfigurationValueDataTypeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return PubSubConfigurationValueDataTypeAddName(builder, name)
def PubSubConfigurationValueDataTypeAddIdentifier(builder, identifier): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(identifier), 0)
def AddIdentifier(builder, identifier):
    return PubSubConfigurationValueDataTypeAddIdentifier(builder, identifier)
def PubSubConfigurationValueDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return PubSubConfigurationValueDataTypeEnd(builder)
import comm.opcua.builtin.Variant
import comm.opcua.structure.PubSubConfigurationRefDataType
try:
    from typing import Optional
except:
    pass

class PubSubConfigurationValueDataTypeT(object):

    # PubSubConfigurationValueDataTypeT
    def __init__(self):
        self.configurationElement = None  # type: Optional[comm.opcua.structure.PubSubConfigurationRefDataType.PubSubConfigurationRefDataTypeT]
        self.name = None  # type: str
        self.identifier = None  # type: Optional[comm.opcua.builtin.Variant.VariantT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pubSubConfigurationValueDataType = PubSubConfigurationValueDataType()
        pubSubConfigurationValueDataType.Init(buf, pos)
        return cls.InitFromObj(pubSubConfigurationValueDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, pubSubConfigurationValueDataType):
        x = PubSubConfigurationValueDataTypeT()
        x._UnPack(pubSubConfigurationValueDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.configurationElement == other.configurationElement and \
            self.name == other.name and \
            self.identifier == other.identifier

    # PubSubConfigurationValueDataTypeT
    def _UnPack(self, pubSubConfigurationValueDataType):
        if pubSubConfigurationValueDataType is None:
            return
        if pubSubConfigurationValueDataType.ConfigurationElement() is not None:
            self.configurationElement = comm.opcua.structure.PubSubConfigurationRefDataType.PubSubConfigurationRefDataTypeT.InitFromObj(pubSubConfigurationValueDataType.ConfigurationElement())
        self.name = pubSubConfigurationValueDataType.Name()
        if pubSubConfigurationValueDataType.Identifier() is not None:
            self.identifier = comm.opcua.builtin.Variant.VariantT.InitFromObj(pubSubConfigurationValueDataType.Identifier())

    # PubSubConfigurationValueDataTypeT
    def Pack(self, builder):
        if self.configurationElement is not None:
            configurationElement = self.configurationElement.Pack(builder)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.identifier is not None:
            identifier = self.identifier.Pack(builder)
        PubSubConfigurationValueDataTypeStart(builder)
        if self.configurationElement is not None:
            PubSubConfigurationValueDataTypeAddConfigurationElement(builder, configurationElement)
        if self.name is not None:
            PubSubConfigurationValueDataTypeAddName(builder, name)
        if self.identifier is not None:
            PubSubConfigurationValueDataTypeAddIdentifier(builder, identifier)
        pubSubConfigurationValueDataType = PubSubConfigurationValueDataTypeEnd(builder)
        return pubSubConfigurationValueDataType
