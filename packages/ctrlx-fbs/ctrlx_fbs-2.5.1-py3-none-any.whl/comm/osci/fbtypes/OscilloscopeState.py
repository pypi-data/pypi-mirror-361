# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OscilloscopeState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OscilloscopeState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOscilloscopeState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OscilloscopeState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OscilloscopeState
    def Opstate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # OscilloscopeState
    def Diagnosis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.OscilloscopeDiagnosis import OscilloscopeDiagnosis
            obj = OscilloscopeDiagnosis()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OscilloscopeState
    def BufferLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def OscilloscopeStateStart(builder): builder.StartObject(3)
def Start(builder):
    return OscilloscopeStateStart(builder)
def OscilloscopeStateAddOpstate(builder, opstate): builder.PrependInt8Slot(0, opstate, 0)
def AddOpstate(builder, opstate):
    return OscilloscopeStateAddOpstate(builder, opstate)
def OscilloscopeStateAddDiagnosis(builder, diagnosis): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(diagnosis), 0)
def AddDiagnosis(builder, diagnosis):
    return OscilloscopeStateAddDiagnosis(builder, diagnosis)
def OscilloscopeStateAddBufferLevel(builder, bufferLevel): builder.PrependFloat64Slot(2, bufferLevel, 0.0)
def AddBufferLevel(builder, bufferLevel):
    return OscilloscopeStateAddBufferLevel(builder, bufferLevel)
def OscilloscopeStateEnd(builder): return builder.EndObject()
def End(builder):
    return OscilloscopeStateEnd(builder)
import comm.osci.fbtypes.OscilloscopeDiagnosis
try:
    from typing import Optional
except:
    pass

class OscilloscopeStateT(object):

    # OscilloscopeStateT
    def __init__(self):
        self.opstate = 0  # type: int
        self.diagnosis = None  # type: Optional[comm.osci.fbtypes.OscilloscopeDiagnosis.OscilloscopeDiagnosisT]
        self.bufferLevel = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        oscilloscopeState = OscilloscopeState()
        oscilloscopeState.Init(buf, pos)
        return cls.InitFromObj(oscilloscopeState)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, oscilloscopeState):
        x = OscilloscopeStateT()
        x._UnPack(oscilloscopeState)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.opstate == other.opstate and \
            self.diagnosis == other.diagnosis and \
            self.bufferLevel == other.bufferLevel

    # OscilloscopeStateT
    def _UnPack(self, oscilloscopeState):
        if oscilloscopeState is None:
            return
        self.opstate = oscilloscopeState.Opstate()
        if oscilloscopeState.Diagnosis() is not None:
            self.diagnosis = comm.osci.fbtypes.OscilloscopeDiagnosis.OscilloscopeDiagnosisT.InitFromObj(oscilloscopeState.Diagnosis())
        self.bufferLevel = oscilloscopeState.BufferLevel()

    # OscilloscopeStateT
    def Pack(self, builder):
        if self.diagnosis is not None:
            diagnosis = self.diagnosis.Pack(builder)
        OscilloscopeStateStart(builder)
        OscilloscopeStateAddOpstate(builder, self.opstate)
        if self.diagnosis is not None:
            OscilloscopeStateAddDiagnosis(builder, diagnosis)
        OscilloscopeStateAddBufferLevel(builder, self.bufferLevel)
        oscilloscopeState = OscilloscopeStateEnd(builder)
        return oscilloscopeState
