# coding: utf-8

"""
    aind-mgi-service

     ## aind-mgi-service  Service to pull data from Mouse Genome Informatics database.  

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MgiSummaryRow(BaseModel):
    """
    Model of Summary Row dictionary returned
    """ # noqa: E501
    detail_uri: Optional[StrictStr] = Field(default=None, alias="detailUri")
    feature_type: Optional[StrictStr] = Field(default=None, alias="featureType")
    strand: Optional[StrictStr] = None
    chromosome: Optional[StrictStr] = None
    stars: Optional[StrictStr] = None
    best_match_text: Optional[StrictStr] = Field(default=None, alias="bestMatchText")
    best_match_type: Optional[StrictStr] = Field(default=None, alias="bestMatchType")
    name: Optional[StrictStr] = None
    location: Optional[StrictStr] = None
    symbol: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["detailUri", "featureType", "strand", "chromosome", "stars", "bestMatchText", "bestMatchType", "name", "location", "symbol"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MgiSummaryRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if detail_uri (nullable) is None
        # and model_fields_set contains the field
        if self.detail_uri is None and "detail_uri" in self.model_fields_set:
            _dict['detailUri'] = None

        # set to None if feature_type (nullable) is None
        # and model_fields_set contains the field
        if self.feature_type is None and "feature_type" in self.model_fields_set:
            _dict['featureType'] = None

        # set to None if strand (nullable) is None
        # and model_fields_set contains the field
        if self.strand is None and "strand" in self.model_fields_set:
            _dict['strand'] = None

        # set to None if chromosome (nullable) is None
        # and model_fields_set contains the field
        if self.chromosome is None and "chromosome" in self.model_fields_set:
            _dict['chromosome'] = None

        # set to None if stars (nullable) is None
        # and model_fields_set contains the field
        if self.stars is None and "stars" in self.model_fields_set:
            _dict['stars'] = None

        # set to None if best_match_text (nullable) is None
        # and model_fields_set contains the field
        if self.best_match_text is None and "best_match_text" in self.model_fields_set:
            _dict['bestMatchText'] = None

        # set to None if best_match_type (nullable) is None
        # and model_fields_set contains the field
        if self.best_match_type is None and "best_match_type" in self.model_fields_set:
            _dict['bestMatchType'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MgiSummaryRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detailUri": obj.get("detailUri"),
            "featureType": obj.get("featureType"),
            "strand": obj.get("strand"),
            "chromosome": obj.get("chromosome"),
            "stars": obj.get("stars"),
            "bestMatchText": obj.get("bestMatchText"),
            "bestMatchType": obj.get("bestMatchType"),
            "name": obj.get("name"),
            "location": obj.get("location"),
            "symbol": obj.get("symbol")
        })
        return _obj


