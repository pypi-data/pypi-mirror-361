# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ViewChannel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ViewChannel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsViewChannel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ViewChannel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ViewChannel
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ViewChannel
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ViewChannel
    def Visible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ViewChannel
    def ConnectionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def ViewChannelStart(builder): builder.StartObject(4)
def Start(builder):
    return ViewChannelStart(builder)
def ViewChannelAddSource(builder, source): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)
def AddSource(builder, source):
    return ViewChannelAddSource(builder, source)
def ViewChannelAddColor(builder, color): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)
def AddColor(builder, color):
    return ViewChannelAddColor(builder, color)
def ViewChannelAddVisible(builder, visible): builder.PrependBoolSlot(2, visible, 0)
def AddVisible(builder, visible):
    return ViewChannelAddVisible(builder, visible)
def ViewChannelAddConnectionType(builder, connectionType): builder.PrependInt8Slot(3, connectionType, 0)
def AddConnectionType(builder, connectionType):
    return ViewChannelAddConnectionType(builder, connectionType)
def ViewChannelEnd(builder): return builder.EndObject()
def End(builder):
    return ViewChannelEnd(builder)

class ViewChannelT(object):

    # ViewChannelT
    def __init__(self):
        self.source = None  # type: str
        self.color = None  # type: str
        self.visible = False  # type: bool
        self.connectionType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        viewChannel = ViewChannel()
        viewChannel.Init(buf, pos)
        return cls.InitFromObj(viewChannel)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, viewChannel):
        x = ViewChannelT()
        x._UnPack(viewChannel)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.source == other.source and \
            self.color == other.color and \
            self.visible == other.visible and \
            self.connectionType == other.connectionType

    # ViewChannelT
    def _UnPack(self, viewChannel):
        if viewChannel is None:
            return
        self.source = viewChannel.Source()
        self.color = viewChannel.Color()
        self.visible = viewChannel.Visible()
        self.connectionType = viewChannel.ConnectionType()

    # ViewChannelT
    def Pack(self, builder):
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.color is not None:
            color = builder.CreateString(self.color)
        ViewChannelStart(builder)
        if self.source is not None:
            ViewChannelAddSource(builder, source)
        if self.color is not None:
            ViewChannelAddColor(builder, color)
        ViewChannelAddVisible(builder, self.visible)
        ViewChannelAddConnectionType(builder, self.connectionType)
        viewChannel = ViewChannelEnd(builder)
        return viewChannel
