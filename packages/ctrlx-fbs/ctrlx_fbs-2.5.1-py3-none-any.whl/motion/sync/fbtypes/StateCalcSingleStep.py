# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# a single supported calculation step
class StateCalcSingleStep(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StateCalcSingleStep()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStateCalcSingleStep(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StateCalcSingleStep
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the calculation step (indicated by its type ID)
    # StateCalcSingleStep
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # what the calculation step does
    # StateCalcSingleStep
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # reference to user manual
    # StateCalcSingleStep
    def DocuRef(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # vector of required input types
    # StateCalcSingleStep
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # StateCalcSingleStep
    def InputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # StateCalcSingleStep
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StateCalcSingleStep
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # vector of required output types
    # StateCalcSingleStep
    def Outputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # StateCalcSingleStep
    def OutputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # StateCalcSingleStep
    def OutputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StateCalcSingleStep
    def OutputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # parameters of the calculation step
    # StateCalcSingleStep
    def Parameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.StateCalcStepParams import StateCalcStepParams
            obj = StateCalcStepParams()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # mutex groups of parameters (identified by the names), that are optional and exclude each other
    # StateCalcSingleStep
    def MutexParameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.StateCalcStepMutexParam import StateCalcStepMutexParam
            obj = StateCalcStepMutexParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def StateCalcSingleStepStart(builder): builder.StartObject(7)
def Start(builder):
    return StateCalcSingleStepStart(builder)
def StateCalcSingleStepAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return StateCalcSingleStepAddName(builder, name)
def StateCalcSingleStepAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return StateCalcSingleStepAddDescription(builder, description)
def StateCalcSingleStepAddDocuRef(builder, docuRef): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(docuRef), 0)
def AddDocuRef(builder, docuRef):
    return StateCalcSingleStepAddDocuRef(builder, docuRef)
def StateCalcSingleStepAddInputs(builder, inputs): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)
def AddInputs(builder, inputs):
    return StateCalcSingleStepAddInputs(builder, inputs)
def StateCalcSingleStepStartInputsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartInputsVector(builder, numElems):
    return StateCalcSingleStepStartInputsVector(builder, numElems)
def StateCalcSingleStepAddOutputs(builder, outputs): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(outputs), 0)
def AddOutputs(builder, outputs):
    return StateCalcSingleStepAddOutputs(builder, outputs)
def StateCalcSingleStepStartOutputsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartOutputsVector(builder, numElems):
    return StateCalcSingleStepStartOutputsVector(builder, numElems)
def StateCalcSingleStepAddParameter(builder, parameter): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(parameter), 0)
def AddParameter(builder, parameter):
    return StateCalcSingleStepAddParameter(builder, parameter)
def StateCalcSingleStepAddMutexParameter(builder, mutexParameter): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(mutexParameter), 0)
def AddMutexParameter(builder, mutexParameter):
    return StateCalcSingleStepAddMutexParameter(builder, mutexParameter)
def StateCalcSingleStepEnd(builder): return builder.EndObject()
def End(builder):
    return StateCalcSingleStepEnd(builder)
import motion.sync.fbtypes.StateCalcStepMutexParam
import motion.sync.fbtypes.StateCalcStepParams
try:
    from typing import List, Optional
except:
    pass

class StateCalcSingleStepT(object):

    # StateCalcSingleStepT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str
        self.docuRef = None  # type: str
        self.inputs = None  # type: List[int]
        self.outputs = None  # type: List[int]
        self.parameter = None  # type: Optional[motion.sync.fbtypes.StateCalcStepParams.StateCalcStepParamsT]
        self.mutexParameter = None  # type: Optional[motion.sync.fbtypes.StateCalcStepMutexParam.StateCalcStepMutexParamT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateCalcSingleStep = StateCalcSingleStep()
        stateCalcSingleStep.Init(buf, pos)
        return cls.InitFromObj(stateCalcSingleStep)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateCalcSingleStep):
        x = StateCalcSingleStepT()
        x._UnPack(stateCalcSingleStep)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.description == other.description and \
            self.docuRef == other.docuRef and \
            self.inputs == other.inputs and \
            self.outputs == other.outputs and \
            self.parameter == other.parameter and \
            self.mutexParameter == other.mutexParameter

    # StateCalcSingleStepT
    def _UnPack(self, stateCalcSingleStep):
        if stateCalcSingleStep is None:
            return
        self.name = stateCalcSingleStep.Name()
        self.description = stateCalcSingleStep.Description()
        self.docuRef = stateCalcSingleStep.DocuRef()
        if not stateCalcSingleStep.InputsIsNone():
            if np is None:
                self.inputs = []
                for i in range(stateCalcSingleStep.InputsLength()):
                    self.inputs.append(stateCalcSingleStep.Inputs(i))
            else:
                self.inputs = stateCalcSingleStep.InputsAsNumpy()
        if not stateCalcSingleStep.OutputsIsNone():
            if np is None:
                self.outputs = []
                for i in range(stateCalcSingleStep.OutputsLength()):
                    self.outputs.append(stateCalcSingleStep.Outputs(i))
            else:
                self.outputs = stateCalcSingleStep.OutputsAsNumpy()
        if stateCalcSingleStep.Parameter() is not None:
            self.parameter = motion.sync.fbtypes.StateCalcStepParams.StateCalcStepParamsT.InitFromObj(stateCalcSingleStep.Parameter())
        if stateCalcSingleStep.MutexParameter() is not None:
            self.mutexParameter = motion.sync.fbtypes.StateCalcStepMutexParam.StateCalcStepMutexParamT.InitFromObj(stateCalcSingleStep.MutexParameter())

    # StateCalcSingleStepT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.docuRef is not None:
            docuRef = builder.CreateString(self.docuRef)
        if self.inputs is not None:
            if np is not None and type(self.inputs) is np.ndarray:
                inputs = builder.CreateNumpyVector(self.inputs)
            else:
                StateCalcSingleStepStartInputsVector(builder, len(self.inputs))
                for i in reversed(range(len(self.inputs))):
                    builder.PrependByte(self.inputs[i])
                inputs = builder.EndVector()
        if self.outputs is not None:
            if np is not None and type(self.outputs) is np.ndarray:
                outputs = builder.CreateNumpyVector(self.outputs)
            else:
                StateCalcSingleStepStartOutputsVector(builder, len(self.outputs))
                for i in reversed(range(len(self.outputs))):
                    builder.PrependByte(self.outputs[i])
                outputs = builder.EndVector()
        if self.parameter is not None:
            parameter = self.parameter.Pack(builder)
        if self.mutexParameter is not None:
            mutexParameter = self.mutexParameter.Pack(builder)
        StateCalcSingleStepStart(builder)
        if self.name is not None:
            StateCalcSingleStepAddName(builder, name)
        if self.description is not None:
            StateCalcSingleStepAddDescription(builder, description)
        if self.docuRef is not None:
            StateCalcSingleStepAddDocuRef(builder, docuRef)
        if self.inputs is not None:
            StateCalcSingleStepAddInputs(builder, inputs)
        if self.outputs is not None:
            StateCalcSingleStepAddOutputs(builder, outputs)
        if self.parameter is not None:
            StateCalcSingleStepAddParameter(builder, parameter)
        if self.mutexParameter is not None:
            StateCalcSingleStepAddMutexParameter(builder, mutexParameter)
        stateCalcSingleStep = StateCalcSingleStepEnd(builder)
        return stateCalcSingleStep
