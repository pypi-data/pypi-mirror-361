# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#DC slave configuration response
class DcSlaveConfigInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DcSlaveConfigInfoResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDcSlaveConfigInfoResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DcSlaveConfigInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Slave supports DC (Distributed Clock)
    # DcSlaveConfigInfoResponse
    def DcSupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #Slave is reference clock
    # DcSlaveConfigInfoResponse
    def DcReferenceClock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #Cycle time of Sync0 event (as defined in ETG.2100) in nanoseconds
    # DcSlaveConfigInfoResponse
    def CycleTime0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Cycle time of Sync1 (calculated value as defined in ETG.2100) event in nanoseconds
    # DcSlaveConfigInfoResponse
    def CycleTime1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Shift time of Sync 0 event (as defined in ETG.2100) in nanoseconds
    # DcSlaveConfigInfoResponse
    def ShiftTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def DcSlaveConfigInfoResponseStart(builder): builder.StartObject(5)
def Start(builder):
    return DcSlaveConfigInfoResponseStart(builder)
def DcSlaveConfigInfoResponseAddDcSupport(builder, dcSupport): builder.PrependBoolSlot(0, dcSupport, 0)
def AddDcSupport(builder, dcSupport):
    return DcSlaveConfigInfoResponseAddDcSupport(builder, dcSupport)
def DcSlaveConfigInfoResponseAddDcReferenceClock(builder, dcReferenceClock): builder.PrependBoolSlot(1, dcReferenceClock, 0)
def AddDcReferenceClock(builder, dcReferenceClock):
    return DcSlaveConfigInfoResponseAddDcReferenceClock(builder, dcReferenceClock)
def DcSlaveConfigInfoResponseAddCycleTime0(builder, cycleTime0): builder.PrependUint32Slot(2, cycleTime0, 0)
def AddCycleTime0(builder, cycleTime0):
    return DcSlaveConfigInfoResponseAddCycleTime0(builder, cycleTime0)
def DcSlaveConfigInfoResponseAddCycleTime1(builder, cycleTime1): builder.PrependUint32Slot(3, cycleTime1, 0)
def AddCycleTime1(builder, cycleTime1):
    return DcSlaveConfigInfoResponseAddCycleTime1(builder, cycleTime1)
def DcSlaveConfigInfoResponseAddShiftTime(builder, shiftTime): builder.PrependInt32Slot(4, shiftTime, 0)
def AddShiftTime(builder, shiftTime):
    return DcSlaveConfigInfoResponseAddShiftTime(builder, shiftTime)
def DcSlaveConfigInfoResponseEnd(builder): return builder.EndObject()
def End(builder):
    return DcSlaveConfigInfoResponseEnd(builder)

class DcSlaveConfigInfoResponseT(object):

    # DcSlaveConfigInfoResponseT
    def __init__(self):
        self.dcSupport = False  # type: bool
        self.dcReferenceClock = False  # type: bool
        self.cycleTime0 = 0  # type: int
        self.cycleTime1 = 0  # type: int
        self.shiftTime = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dcSlaveConfigInfoResponse = DcSlaveConfigInfoResponse()
        dcSlaveConfigInfoResponse.Init(buf, pos)
        return cls.InitFromObj(dcSlaveConfigInfoResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dcSlaveConfigInfoResponse):
        x = DcSlaveConfigInfoResponseT()
        x._UnPack(dcSlaveConfigInfoResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dcSupport == other.dcSupport and \
            self.dcReferenceClock == other.dcReferenceClock and \
            self.cycleTime0 == other.cycleTime0 and \
            self.cycleTime1 == other.cycleTime1 and \
            self.shiftTime == other.shiftTime

    # DcSlaveConfigInfoResponseT
    def _UnPack(self, dcSlaveConfigInfoResponse):
        if dcSlaveConfigInfoResponse is None:
            return
        self.dcSupport = dcSlaveConfigInfoResponse.DcSupport()
        self.dcReferenceClock = dcSlaveConfigInfoResponse.DcReferenceClock()
        self.cycleTime0 = dcSlaveConfigInfoResponse.CycleTime0()
        self.cycleTime1 = dcSlaveConfigInfoResponse.CycleTime1()
        self.shiftTime = dcSlaveConfigInfoResponse.ShiftTime()

    # DcSlaveConfigInfoResponseT
    def Pack(self, builder):
        DcSlaveConfigInfoResponseStart(builder)
        DcSlaveConfigInfoResponseAddDcSupport(builder, self.dcSupport)
        DcSlaveConfigInfoResponseAddDcReferenceClock(builder, self.dcReferenceClock)
        DcSlaveConfigInfoResponseAddCycleTime0(builder, self.cycleTime0)
        DcSlaveConfigInfoResponseAddCycleTime1(builder, self.cycleTime1)
        DcSlaveConfigInfoResponseAddShiftTime(builder, self.shiftTime)
        dcSlaveConfigInfoResponse = DcSlaveConfigInfoResponseEnd(builder)
        return dcSlaveConfigInfoResponse
