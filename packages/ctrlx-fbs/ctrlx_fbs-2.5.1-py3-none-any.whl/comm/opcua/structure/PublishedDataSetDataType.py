# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PublishedDataSetDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PublishedDataSetDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPublishedDataSetDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PublishedDataSetDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PublishedDataSetDataType
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PublishedDataSetDataType
    def DataSetFolder(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # PublishedDataSetDataType
    def DataSetFolderLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PublishedDataSetDataType
    def DataSetFolderIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # PublishedDataSetDataType
    def DataSetMetaData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.structure.DataSetMetaDataType import DataSetMetaDataType
            obj = DataSetMetaDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PublishedDataSetDataType
    def ExtensionFields(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.KeyValuePair import KeyValuePair
            obj = KeyValuePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PublishedDataSetDataType
    def ExtensionFieldsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PublishedDataSetDataType
    def ExtensionFieldsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # PublishedDataSetDataType
    def DataSetSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.PublishedDataSetSourceDataType import PublishedDataSetSourceDataType
            obj = PublishedDataSetSourceDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PublishedDataSetDataTypeStart(builder): builder.StartObject(5)
def Start(builder):
    return PublishedDataSetDataTypeStart(builder)
def PublishedDataSetDataTypeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return PublishedDataSetDataTypeAddName(builder, name)
def PublishedDataSetDataTypeAddDataSetFolder(builder, dataSetFolder): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetFolder), 0)
def AddDataSetFolder(builder, dataSetFolder):
    return PublishedDataSetDataTypeAddDataSetFolder(builder, dataSetFolder)
def PublishedDataSetDataTypeStartDataSetFolderVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDataSetFolderVector(builder, numElems):
    return PublishedDataSetDataTypeStartDataSetFolderVector(builder, numElems)
def PublishedDataSetDataTypeAddDataSetMetaData(builder, dataSetMetaData): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetMetaData), 0)
def AddDataSetMetaData(builder, dataSetMetaData):
    return PublishedDataSetDataTypeAddDataSetMetaData(builder, dataSetMetaData)
def PublishedDataSetDataTypeAddExtensionFields(builder, extensionFields): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(extensionFields), 0)
def AddExtensionFields(builder, extensionFields):
    return PublishedDataSetDataTypeAddExtensionFields(builder, extensionFields)
def PublishedDataSetDataTypeStartExtensionFieldsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartExtensionFieldsVector(builder, numElems):
    return PublishedDataSetDataTypeStartExtensionFieldsVector(builder, numElems)
def PublishedDataSetDataTypeAddDataSetSource(builder, dataSetSource): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetSource), 0)
def AddDataSetSource(builder, dataSetSource):
    return PublishedDataSetDataTypeAddDataSetSource(builder, dataSetSource)
def PublishedDataSetDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return PublishedDataSetDataTypeEnd(builder)
import comm.opcua.structure.DataSetMetaDataType
import comm.opcua.structure.KeyValuePair
import comm.opcua.subtypes.PublishedDataSetSourceDataType
try:
    from typing import List, Optional
except:
    pass

class PublishedDataSetDataTypeT(object):

    # PublishedDataSetDataTypeT
    def __init__(self):
        self.name = None  # type: str
        self.dataSetFolder = None  # type: List[str]
        self.dataSetMetaData = None  # type: Optional[comm.opcua.structure.DataSetMetaDataType.DataSetMetaDataTypeT]
        self.extensionFields = None  # type: List[comm.opcua.structure.KeyValuePair.KeyValuePairT]
        self.dataSetSource = None  # type: Optional[comm.opcua.subtypes.PublishedDataSetSourceDataType.PublishedDataSetSourceDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        publishedDataSetDataType = PublishedDataSetDataType()
        publishedDataSetDataType.Init(buf, pos)
        return cls.InitFromObj(publishedDataSetDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, publishedDataSetDataType):
        x = PublishedDataSetDataTypeT()
        x._UnPack(publishedDataSetDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.dataSetFolder == other.dataSetFolder and \
            self.dataSetMetaData == other.dataSetMetaData and \
            self.extensionFields == other.extensionFields and \
            self.dataSetSource == other.dataSetSource

    # PublishedDataSetDataTypeT
    def _UnPack(self, publishedDataSetDataType):
        if publishedDataSetDataType is None:
            return
        self.name = publishedDataSetDataType.Name()
        if not publishedDataSetDataType.DataSetFolderIsNone():
            self.dataSetFolder = []
            for i in range(publishedDataSetDataType.DataSetFolderLength()):
                self.dataSetFolder.append(publishedDataSetDataType.DataSetFolder(i))
        if publishedDataSetDataType.DataSetMetaData() is not None:
            self.dataSetMetaData = comm.opcua.structure.DataSetMetaDataType.DataSetMetaDataTypeT.InitFromObj(publishedDataSetDataType.DataSetMetaData())
        if not publishedDataSetDataType.ExtensionFieldsIsNone():
            self.extensionFields = []
            for i in range(publishedDataSetDataType.ExtensionFieldsLength()):
                if publishedDataSetDataType.ExtensionFields(i) is None:
                    self.extensionFields.append(None)
                else:
                    keyValuePair_ = comm.opcua.structure.KeyValuePair.KeyValuePairT.InitFromObj(publishedDataSetDataType.ExtensionFields(i))
                    self.extensionFields.append(keyValuePair_)
        if publishedDataSetDataType.DataSetSource() is not None:
            self.dataSetSource = comm.opcua.subtypes.PublishedDataSetSourceDataType.PublishedDataSetSourceDataTypeT.InitFromObj(publishedDataSetDataType.DataSetSource())

    # PublishedDataSetDataTypeT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.dataSetFolder is not None:
            dataSetFolderlist = []
            for i in range(len(self.dataSetFolder)):
                dataSetFolderlist.append(builder.CreateString(self.dataSetFolder[i]))
            PublishedDataSetDataTypeStartDataSetFolderVector(builder, len(self.dataSetFolder))
            for i in reversed(range(len(self.dataSetFolder))):
                builder.PrependUOffsetTRelative(dataSetFolderlist[i])
            dataSetFolder = builder.EndVector()
        if self.dataSetMetaData is not None:
            dataSetMetaData = self.dataSetMetaData.Pack(builder)
        if self.extensionFields is not None:
            extensionFieldslist = []
            for i in range(len(self.extensionFields)):
                extensionFieldslist.append(self.extensionFields[i].Pack(builder))
            PublishedDataSetDataTypeStartExtensionFieldsVector(builder, len(self.extensionFields))
            for i in reversed(range(len(self.extensionFields))):
                builder.PrependUOffsetTRelative(extensionFieldslist[i])
            extensionFields = builder.EndVector()
        if self.dataSetSource is not None:
            dataSetSource = self.dataSetSource.Pack(builder)
        PublishedDataSetDataTypeStart(builder)
        if self.name is not None:
            PublishedDataSetDataTypeAddName(builder, name)
        if self.dataSetFolder is not None:
            PublishedDataSetDataTypeAddDataSetFolder(builder, dataSetFolder)
        if self.dataSetMetaData is not None:
            PublishedDataSetDataTypeAddDataSetMetaData(builder, dataSetMetaData)
        if self.extensionFields is not None:
            PublishedDataSetDataTypeAddExtensionFields(builder, extensionFields)
        if self.dataSetSource is not None:
            PublishedDataSetDataTypeAddDataSetSource(builder, dataSetSource)
        publishedDataSetDataType = PublishedDataSetDataTypeEnd(builder)
        return publishedDataSetDataType
