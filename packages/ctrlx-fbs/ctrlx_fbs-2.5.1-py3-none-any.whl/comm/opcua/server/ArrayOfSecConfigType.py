# automatically generated by the FlatBuffers compiler, do not modify

# namespace: server

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArrayOfSecConfigType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArrayOfSecConfigType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArrayOfSecConfigType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ArrayOfSecConfigType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The endpoint security configurations of the OPC UA Server in an array
    # Each array element describes one security configuration of OPC UA Server endpoint
    # ArrayOfSecConfigType
    def SecConfigArray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.server.SecConfigType import SecConfigType
            obj = SecConfigType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ArrayOfSecConfigType
    def SecConfigArrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArrayOfSecConfigType
    def SecConfigArrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ArrayOfSecConfigTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return ArrayOfSecConfigTypeStart(builder)
def ArrayOfSecConfigTypeAddSecConfigArray(builder, secConfigArray): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(secConfigArray), 0)
def AddSecConfigArray(builder, secConfigArray):
    return ArrayOfSecConfigTypeAddSecConfigArray(builder, secConfigArray)
def ArrayOfSecConfigTypeStartSecConfigArrayVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSecConfigArrayVector(builder, numElems):
    return ArrayOfSecConfigTypeStartSecConfigArrayVector(builder, numElems)
def ArrayOfSecConfigTypeEnd(builder): return builder.EndObject()
def End(builder):
    return ArrayOfSecConfigTypeEnd(builder)
import comm.opcua.server.SecConfigType
try:
    from typing import List
except:
    pass

class ArrayOfSecConfigTypeT(object):

    # ArrayOfSecConfigTypeT
    def __init__(self):
        self.secConfigArray = None  # type: List[comm.opcua.server.SecConfigType.SecConfigTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        arrayOfSecConfigType = ArrayOfSecConfigType()
        arrayOfSecConfigType.Init(buf, pos)
        return cls.InitFromObj(arrayOfSecConfigType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, arrayOfSecConfigType):
        x = ArrayOfSecConfigTypeT()
        x._UnPack(arrayOfSecConfigType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.secConfigArray == other.secConfigArray

    # ArrayOfSecConfigTypeT
    def _UnPack(self, arrayOfSecConfigType):
        if arrayOfSecConfigType is None:
            return
        if not arrayOfSecConfigType.SecConfigArrayIsNone():
            self.secConfigArray = []
            for i in range(arrayOfSecConfigType.SecConfigArrayLength()):
                if arrayOfSecConfigType.SecConfigArray(i) is None:
                    self.secConfigArray.append(None)
                else:
                    secConfigType_ = comm.opcua.server.SecConfigType.SecConfigTypeT.InitFromObj(arrayOfSecConfigType.SecConfigArray(i))
                    self.secConfigArray.append(secConfigType_)

    # ArrayOfSecConfigTypeT
    def Pack(self, builder):
        if self.secConfigArray is not None:
            secConfigArraylist = []
            for i in range(len(self.secConfigArray)):
                secConfigArraylist.append(self.secConfigArray[i].Pack(builder))
            ArrayOfSecConfigTypeStartSecConfigArrayVector(builder, len(self.secConfigArray))
            for i in reversed(range(len(self.secConfigArray))):
                builder.PrependUOffsetTRelative(secConfigArraylist[i])
            secConfigArray = builder.EndVector()
        ArrayOfSecConfigTypeStart(builder)
        if self.secConfigArray is not None:
            ArrayOfSecConfigTypeAddSecConfigArray(builder, secConfigArray)
        arrayOfSecConfigType = ArrayOfSecConfigTypeEnd(builder)
        return arrayOfSecConfigType
