# automatically generated by the FlatBuffers compiler, do not modify

# namespace: device

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DeviceDetails(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeviceDetails()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeviceDetails(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DeviceDetails
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DeviceDetails
    def Driver(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DeviceDetails
    def Interface(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DeviceDetails
    def LastSeen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DeviceDetails
    def LastAccess(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def DeviceDetailsStart(builder): builder.StartObject(4)
def Start(builder):
    return DeviceDetailsStart(builder)
def DeviceDetailsAddDriver(builder, driver): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(driver), 0)
def AddDriver(builder, driver):
    return DeviceDetailsAddDriver(builder, driver)
def DeviceDetailsAddInterface(builder, interface): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(interface), 0)
def AddInterface(builder, interface):
    return DeviceDetailsAddInterface(builder, interface)
def DeviceDetailsAddLastSeen(builder, lastSeen): builder.PrependUint64Slot(2, lastSeen, 0)
def AddLastSeen(builder, lastSeen):
    return DeviceDetailsAddLastSeen(builder, lastSeen)
def DeviceDetailsAddLastAccess(builder, lastAccess): builder.PrependUint64Slot(3, lastAccess, 0)
def AddLastAccess(builder, lastAccess):
    return DeviceDetailsAddLastAccess(builder, lastAccess)
def DeviceDetailsEnd(builder): return builder.EndObject()
def End(builder):
    return DeviceDetailsEnd(builder)

class DeviceDetailsT(object):

    # DeviceDetailsT
    def __init__(self):
        self.driver = None  # type: str
        self.interface = None  # type: str
        self.lastSeen = 0  # type: int
        self.lastAccess = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        deviceDetails = DeviceDetails()
        deviceDetails.Init(buf, pos)
        return cls.InitFromObj(deviceDetails)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, deviceDetails):
        x = DeviceDetailsT()
        x._UnPack(deviceDetails)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.driver == other.driver and \
            self.interface == other.interface and \
            self.lastSeen == other.lastSeen and \
            self.lastAccess == other.lastAccess

    # DeviceDetailsT
    def _UnPack(self, deviceDetails):
        if deviceDetails is None:
            return
        self.driver = deviceDetails.Driver()
        self.interface = deviceDetails.Interface()
        self.lastSeen = deviceDetails.LastSeen()
        self.lastAccess = deviceDetails.LastAccess()

    # DeviceDetailsT
    def Pack(self, builder):
        if self.driver is not None:
            driver = builder.CreateString(self.driver)
        if self.interface is not None:
            interface = builder.CreateString(self.interface)
        DeviceDetailsStart(builder)
        if self.driver is not None:
            DeviceDetailsAddDriver(builder, driver)
        if self.interface is not None:
            DeviceDetailsAddInterface(builder, interface)
        DeviceDetailsAddLastSeen(builder, self.lastSeen)
        DeviceDetailsAddLastAccess(builder, self.lastAccess)
        deviceDetails = DeviceDetailsEnd(builder)
        return deviceDetails
