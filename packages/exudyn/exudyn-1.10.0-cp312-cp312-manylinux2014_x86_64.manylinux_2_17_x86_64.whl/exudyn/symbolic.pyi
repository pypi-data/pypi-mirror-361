#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# This is the EXUDYN stub file initialization
#
# Author:   Johannes Gerstmayr
# Date:     2023-05-09
#
# Notes:    Under development; see https://peps.python.org/pep-0484/#stub-files
#
# Copyright:This file is part of Exudyn. Exudyn is free software. You can redistribute it and/or modify it under the terms of the Exudyn license. See 'LICENSE.txt' for more details.
#
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#from typing import Dict, List, Optional

from typing import (
    Annotated, 
    Any,
    # ByteString,
    # Callable,
    # Container,
    Callable,
    Dict,
    # Generic,
    # IO,
    # Iterable,
    # Iterator,
    List,
    Literal,
    # Mapping,
    # NoReturn,
    # Optional,
    overload,
    # Sequence,
    # Sized,
    # SupportsComplex,
    # SupportsFloat,
    # SupportsInt,
    # Text,
    Tuple, #for Tuple[int, int]
    # Type,
    TypeVar,
    Union,
)
from numpy.typing import ArrayLike, NDArray
from enum import Enum
import numpy as np


#DType = TypeVar("DType", bound=np.generic)
# NPreal3D = Annotated[NDArray[float], Literal[3]]
# NPint3D = Annotated[NDArray[int], Literal[3]]

#type variables for size in numpy arrays
T1 = TypeVar("T1", bound=int)
T2 = TypeVar("T2", bound=int)

# Dimension types represented as typles
Shape = Tuple
Shape1D = Shape[T1]
Shape2D = Shape[T1, T2]
# Shape3D = Shape[T1, T2, T3]
# ShapeND = Shape[T1, ...]
# ShapeNDType = TypeVar("ShapeNDType", bound=ShapeND)

#LENGTH = Literal[2]
#NDArray[Shape2D[3,3], np.float64]


import exudyn
from exudyn import (ObjectIndex, NodeIndex, MarkerIndex, LoadIndex, SensorIndex)

#from exudyn.graphicsDataUtilities import color4red, color4default #now accessible as e.g. exudyn.graphics.color.default



#stub information for class Real functions
class Real:
    @overload
    def __init__(self, value: float) -> None: ...
    @overload
    def __init__(self, name: str, value: float) -> None: ...
    @overload
    def SetValue(self, valueInit: float) -> None: ...
    @overload
    def Evaluate(self) -> float: ...
    @overload
    def Diff(self, var: Real) -> float: ...
    value:float
    @overload
    def __float__(self) -> float: ...
    @overload
    def __str__(self) -> str: ...
    @overload
    def __repr__(self) -> str: ...

#functions directly in symbolic module:
@overload
def isfinite(x: Real) -> Real: ...
@overload
def abs(x: Real) -> Real: ...
@overload
def round(x: Real) -> Real: ...
@overload
def ceil(x: Real) -> Real: ...
@overload
def floor(x: Real) -> Real: ...
@overload
def sqrt(x: Real) -> Real: ...
@overload
def exp(x: Real) -> Real: ...
@overload
def log(x: Real) -> Real: ...
@overload
def sin(x: Real) -> Real: ...
@overload
def cos(x: Real) -> Real: ...
@overload
def tan(x: Real) -> Real: ...
@overload
def asin(x: Real) -> Real: ...
@overload
def acos(x: Real) -> Real: ...
@overload
def atan(x: Real) -> Real: ...
@overload
def sinh(x: Real) -> Real: ...
@overload
def cosh(x: Real) -> Real: ...
@overload
def tanh(x: Real) -> Real: ...
@overload
def asinh(x: Real) -> Real: ...
@overload
def acosh(x: Real) -> Real: ...
@overload
def atanh(x: Real) -> Real: ...
@overload
def sign(x: Real) -> Real: ...
@overload
def Not(x: Real) -> Real: ...
@overload
def min(x: Real, y: Real) -> Real: ...
@overload
def max(x: Real, y: Real) -> Real: ...
@overload
def mod(x: Real, y: Real) -> Real: ...
@overload
def pow(x: Real, y: Real) -> Real: ...
@overload
def max(x: Real, y: Real) -> Real: ...
@overload
def IfThenElse(condition: Real, ifTrue: Real, ifFalse: Real) -> Real: ...
@overload
def SetRecording(flag: bool) -> None: ...
@overload
def GetRecording() -> bool: ...


#stub information for class Vector functions
class Vector:
    @overload
    def __init__(self, vector: List[float]) -> None: ...
    @overload
    def __init__(self, name: str, vector: List[float]) -> None: ...
    @overload
    def Evaluate(self) -> List[float]: ...
    @overload
    def SetVector(self, vector: Vector) -> None: ...
    @overload
    def NumberOfItems(self) -> int: ...
    @overload
    def __setitem__(self, index: Real) -> Real: ...
    @overload
    def NormL2(self) -> Real: ...
    @overload
    def MultComponents(self, other: Vector) -> Real: ...
    @overload
    def __getitem__(self, index: Real) -> Real: ...
    @overload
    def __str__(self) -> str: ...
    @overload
    def __repr__(self) -> str: ...

#stub information for class Matrix functions
class Matrix:
    @overload
    def __init__(self, matrix: List[List[float]]) -> None: ...
    @overload
    def __init__(self, name: str, matrix: List[List[float]]) -> None: ...
    @overload
    def Evaluate(self) -> List[float]: ...
    @overload
    def SetMatrix(self, matrix: NDArray[Any, float]) -> None: ...
    @overload
    def NumberOfRows(self) -> int: ...
    @overload
    def NumberOfColumns(self) -> int: ...
    @overload
    def __setitem__(self, row: Real, column: Real) -> Real: ...
    @overload
    def __getitem__(self, row: Real, column: Real) -> Real: ...
    @overload
    def __str__(self) -> str: ...
    @overload
    def __repr__(self) -> str: ...

#stub information for class VariableSet functions
class VariableSet:
    @overload
    def Add(self, name: str, value: float) -> None: ...
    @overload
    def Add(self, namedReal: Real) -> None: ...
    @overload
    def Set(self, name: str, value: float) -> None: ...
    @overload
    def Get(self, name: str) -> Real: ...
    @overload
    def Exists(self, name: str) -> bool: ...
    @overload
    def Reset(self) -> None: ...
    @overload
    def NumberOfItems(self, name: str) -> bool: ...
    @overload
    def GetNames(self) -> List[str]: ...
    @overload
    def __setitem__(self, name: str, value: float) -> None: ...
    @overload
    def __getitem__(self, name: str) -> Real: ...
    @overload
    def __str__(self) -> str: ...
    @overload
    def __repr__(self) -> str: ...

#stub information for class UserFunction functions
class UserFunction:
    @overload
    def SetUserFunctionFromDict(self, mainSystem: MainSystem, fcnDict: dict, itemIndex: ItemIndex, userFunctionName: str) -> None: ...
    @overload
    def __repr__(self) -> str: ...
    @overload
    def __str__(self) -> str: ...
