# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.1.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Argument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref_entity_id': 'EntityId',
        'ref_entity_key': 'ReferencedEntityKey',
        'default_value': 'str',
        'limit': 'int',
        'time_window': 'int'
    }

    attribute_map = {
        'ref_entity_id': 'refEntityId',
        'ref_entity_key': 'refEntityKey',
        'default_value': 'defaultValue',
        'limit': 'limit',
        'time_window': 'timeWindow'
    }

    def __init__(self, ref_entity_id=None, ref_entity_key=None, default_value=None, limit=None, time_window=None):  # noqa: E501
        """Argument - a model defined in Swagger"""  # noqa: E501
        self._ref_entity_id = None
        self._ref_entity_key = None
        self._default_value = None
        self._limit = None
        self._time_window = None
        self.discriminator = None
        if ref_entity_id is not None:
            self.ref_entity_id = ref_entity_id
        if ref_entity_key is not None:
            self.ref_entity_key = ref_entity_key
        if default_value is not None:
            self.default_value = default_value
        if limit is not None:
            self.limit = limit
        if time_window is not None:
            self.time_window = time_window

    @property
    def ref_entity_id(self):
        """Gets the ref_entity_id of this Argument.  # noqa: E501


        :return: The ref_entity_id of this Argument.  # noqa: E501
        :rtype: EntityId
        """
        return self._ref_entity_id

    @ref_entity_id.setter
    def ref_entity_id(self, ref_entity_id):
        """Sets the ref_entity_id of this Argument.


        :param ref_entity_id: The ref_entity_id of this Argument.  # noqa: E501
        :type: EntityId
        """

        self._ref_entity_id = ref_entity_id

    @property
    def ref_entity_key(self):
        """Gets the ref_entity_key of this Argument.  # noqa: E501


        :return: The ref_entity_key of this Argument.  # noqa: E501
        :rtype: ReferencedEntityKey
        """
        return self._ref_entity_key

    @ref_entity_key.setter
    def ref_entity_key(self, ref_entity_key):
        """Sets the ref_entity_key of this Argument.


        :param ref_entity_key: The ref_entity_key of this Argument.  # noqa: E501
        :type: ReferencedEntityKey
        """

        self._ref_entity_key = ref_entity_key

    @property
    def default_value(self):
        """Gets the default_value of this Argument.  # noqa: E501


        :return: The default_value of this Argument.  # noqa: E501
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this Argument.


        :param default_value: The default_value of this Argument.  # noqa: E501
        :type: object
        """

        self._default_value = default_value

    @property
    def limit(self):
        """Gets the limit of this Argument.  # noqa: E501


        :return: The limit of this Argument.  # noqa: E501
        :rtype: object
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Argument.


        :param limit: The limit of this Argument.  # noqa: E501
        :type: object
        """

        self._limit = limit

    @property
    def time_window(self):
        """Gets the time_window of this Argument.  # noqa: E501


        :return: The time_window of this Argument.  # noqa: E501
        :rtype: object
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this Argument.


        :param time_window: The time_window of this Argument.  # noqa: E501
        :type: object
        """

        self._time_window = time_window

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Argument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Argument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
