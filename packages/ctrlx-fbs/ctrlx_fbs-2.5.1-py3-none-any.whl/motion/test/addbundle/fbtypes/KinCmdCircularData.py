# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# just for test of additional bundle (motion extension API)
class KinCmdCircularData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdCircularData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmdCircularData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmdCircularData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KinCmdCircularData
    def CmdPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinCmdCircularData
    def CmdPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinCmdCircularData
    def CmdPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCmdCircularData
    def CmdPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # KinCmdCircularData
    def CenterPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinCmdCircularData
    def CenterPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinCmdCircularData
    def CenterPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCmdCircularData
    def CenterPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # KinCmdCircularData
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # KinCmdCircularData
    def Limits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCmdCircularDataStart(builder): builder.StartObject(4)
def Start(builder):
    return KinCmdCircularDataStart(builder)
def KinCmdCircularDataAddCmdPos(builder, cmdPos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cmdPos), 0)
def AddCmdPos(builder, cmdPos):
    return KinCmdCircularDataAddCmdPos(builder, cmdPos)
def KinCmdCircularDataStartCmdPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartCmdPosVector(builder, numElems):
    return KinCmdCircularDataStartCmdPosVector(builder, numElems)
def KinCmdCircularDataAddCenterPos(builder, centerPos): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(centerPos), 0)
def AddCenterPos(builder, centerPos):
    return KinCmdCircularDataAddCenterPos(builder, centerPos)
def KinCmdCircularDataStartCenterPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartCenterPosVector(builder, numElems):
    return KinCmdCircularDataStartCenterPosVector(builder, numElems)
def KinCmdCircularDataAddDirection(builder, direction): builder.PrependBoolSlot(2, direction, 0)
def AddDirection(builder, direction):
    return KinCmdCircularDataAddDirection(builder, direction)
def KinCmdCircularDataAddLimits(builder, limits): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(limits), 0)
def AddLimits(builder, limits):
    return KinCmdCircularDataAddLimits(builder, limits)
def KinCmdCircularDataEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmdCircularDataEnd(builder)
import motion.core.fbtypes.DynamicLimits
try:
    from typing import List, Optional
except:
    pass

class KinCmdCircularDataT(object):

    # KinCmdCircularDataT
    def __init__(self):
        self.cmdPos = None  # type: List[float]
        self.centerPos = None  # type: List[float]
        self.direction = False  # type: bool
        self.limits = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdCircularData = KinCmdCircularData()
        kinCmdCircularData.Init(buf, pos)
        return cls.InitFromObj(kinCmdCircularData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmdCircularData):
        x = KinCmdCircularDataT()
        x._UnPack(kinCmdCircularData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cmdPos == other.cmdPos and \
            self.centerPos == other.centerPos and \
            self.direction == other.direction and \
            self.limits == other.limits

    # KinCmdCircularDataT
    def _UnPack(self, kinCmdCircularData):
        if kinCmdCircularData is None:
            return
        if not kinCmdCircularData.CmdPosIsNone():
            if np is None:
                self.cmdPos = []
                for i in range(kinCmdCircularData.CmdPosLength()):
                    self.cmdPos.append(kinCmdCircularData.CmdPos(i))
            else:
                self.cmdPos = kinCmdCircularData.CmdPosAsNumpy()
        if not kinCmdCircularData.CenterPosIsNone():
            if np is None:
                self.centerPos = []
                for i in range(kinCmdCircularData.CenterPosLength()):
                    self.centerPos.append(kinCmdCircularData.CenterPos(i))
            else:
                self.centerPos = kinCmdCircularData.CenterPosAsNumpy()
        self.direction = kinCmdCircularData.Direction()
        if kinCmdCircularData.Limits() is not None:
            self.limits = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(kinCmdCircularData.Limits())

    # KinCmdCircularDataT
    def Pack(self, builder):
        if self.cmdPos is not None:
            if np is not None and type(self.cmdPos) is np.ndarray:
                cmdPos = builder.CreateNumpyVector(self.cmdPos)
            else:
                KinCmdCircularDataStartCmdPosVector(builder, len(self.cmdPos))
                for i in reversed(range(len(self.cmdPos))):
                    builder.PrependFloat64(self.cmdPos[i])
                cmdPos = builder.EndVector()
        if self.centerPos is not None:
            if np is not None and type(self.centerPos) is np.ndarray:
                centerPos = builder.CreateNumpyVector(self.centerPos)
            else:
                KinCmdCircularDataStartCenterPosVector(builder, len(self.centerPos))
                for i in reversed(range(len(self.centerPos))):
                    builder.PrependFloat64(self.centerPos[i])
                centerPos = builder.EndVector()
        if self.limits is not None:
            limits = self.limits.Pack(builder)
        KinCmdCircularDataStart(builder)
        if self.cmdPos is not None:
            KinCmdCircularDataAddCmdPos(builder, cmdPos)
        if self.centerPos is not None:
            KinCmdCircularDataAddCenterPos(builder, centerPos)
        KinCmdCircularDataAddDirection(builder, self.direction)
        if self.limits is not None:
            KinCmdCircularDataAddLimits(builder, limits)
        kinCmdCircularData = KinCmdCircularDataEnd(builder)
        return kinCmdCircularData
