# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

import unittest
from citypay.models.auth_response import AuthResponse  # noqa: E501
from citypay import ApiClient


class TestAuthResponse(unittest.TestCase):
    """AuthResponse unit test stubs"""

    def setUp(self):
        self.data = """
        {
          "amount": 5500,
          "atrn": "atrn1",
          "atsd": "a",
          "authcode": "12345",
          "authen_result": "R",
          "authorised": true,
          "avs_result": "G",
          "bin_commercial": false,
          "bin_debit": false,
          "bin_description": "bin_desc",
          "cavv": "cavvvvvvvvvvvvv",
          "context": "20200812075906AAAGV4",
          "csc_result": "C",
          "currency": "GBP",
          "datetime": "2020-08-12T07:59:11Z",
          "eci": "0",
          "identifier": "ident1",
          "live": true,
          "maskedpan": "400000******0002",
          "merchantid": 12345,
          "result": 1,
          "result_code": "000",
          "result_message": "System: Accepted Transaction",
          "scheme": "VISA_BUSINESS",
          "sha256": "abcdefg",
          "trans_status": "P",
          "transno": 74875
        }
        """

        self.data_no_ident = """
        {
            "amount": 0,
            "atrn": "",
            "atsd": "",
            "authcode": "",
            "authen_result": "",
            "authorised": false,
            "avs_result": " ",
            "bin_commercial": false,
            "bin_debit": false,
            "bin_description": "",
            "cavv": "",
            "context": "PC.0.A5298ef695b",
            "csc_result": " ",
            "currency": "---",
            "datetime": "1969-12-31T23:59:59Z",
            "eci": "0",
            "identifier": "",
            "live": true,
            "maskedpan": "N/A",
            "merchantid": 0,
            "result": 3,
            "result_code": "P030",
            "result_message": "Request Error: Authorisation invalid (203: Data element not in the required format or value is invalid as defined in Table A.1. threeDSSessionData)",
            "scheme": "",
            "sha256": "",
            "trans_status": "_",
            "transno": -1
        }
        """

        self.instance = ApiClient().deserialize(self.data, "AuthResponse", "application/json")
        self.instance_no_ident = ApiClient().deserialize(self.data_no_ident, AuthResponse, "application/json")

    def tearDown(self):
        pass

    def testAuthResponse(self):
        """Test AuthResponse"""
        self.assertEqual(self.instance.amount, 5500)
        self.assertEqual(self.instance.atrn, "atrn1")
        self.assertEqual(self.instance.atsd, "a")
        self.assertEqual(self.instance.authcode, "12345")
        self.assertEqual(self.instance.authen_result, "R")
        self.assertEqual(self.instance.authorised, True)
        self.assertEqual(self.instance.avs_result, "G")
        self.assertEqual(self.instance.bin_commercial, False)
        self.assertEqual(self.instance.bin_debit, False)
        self.assertEqual(self.instance.bin_description, "bin_desc")
        self.assertEqual(self.instance.cavv, "cavvvvvvvvvvvvv")
        self.assertEqual(self.instance.context, "20200812075906AAAGV4")
        self.assertEqual(self.instance.csc_result, "C")
        self.assertEqual(self.instance.currency, "GBP")
        self.assertEqual(self.instance.datetime.isoformat(), "2020-08-12T07:59:11+00:00")
        self.assertEqual(self.instance.eci, "0")
        self.assertEqual(self.instance.identifier, "ident1")
        self.assertEqual(self.instance.live, True)
        self.assertEqual(self.instance.maskedpan, "400000******0002")
        self.assertEqual(self.instance.merchantid, 12345)
        self.assertEqual(self.instance.result, 1)
        self.assertEqual(self.instance.result_code, "000")
        self.assertEqual(self.instance.result_message, "System: Accepted Transaction")
        self.assertEqual(self.instance.scheme, "VISA_BUSINESS")
        self.assertEqual(self.instance.sha256, "abcdefg")
        self.assertEqual(self.instance.trans_status, "P")
        self.assertEqual(self.instance.transno, 74875)
        self.assertEqual(self.instance_no_ident.result_code, "P030")
        self.assertEqual(self.instance_no_ident.result, 3)


if __name__ == '__main__':
    unittest.main()
