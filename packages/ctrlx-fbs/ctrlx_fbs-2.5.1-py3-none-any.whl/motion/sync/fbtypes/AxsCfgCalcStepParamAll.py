# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of all parameters of a single calculation step
class AxsCfgCalcStepParamAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgCalcStepParamAll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgCalcStepParamAll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgCalcStepParamAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all params
    # AxsCfgCalcStepParamAll
    def Params(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.AxsCfgCalcStepParam import AxsCfgCalcStepParam
            obj = AxsCfgCalcStepParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AxsCfgCalcStepParamAll
    def ParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsCfgCalcStepParamAll
    def ParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def AxsCfgCalcStepParamAllStart(builder): builder.StartObject(1)
def Start(builder):
    return AxsCfgCalcStepParamAllStart(builder)
def AxsCfgCalcStepParamAllAddParams(builder, params): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(params), 0)
def AddParams(builder, params):
    return AxsCfgCalcStepParamAllAddParams(builder, params)
def AxsCfgCalcStepParamAllStartParamsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartParamsVector(builder, numElems):
    return AxsCfgCalcStepParamAllStartParamsVector(builder, numElems)
def AxsCfgCalcStepParamAllEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgCalcStepParamAllEnd(builder)
import motion.sync.fbtypes.AxsCfgCalcStepParam
try:
    from typing import List
except:
    pass

class AxsCfgCalcStepParamAllT(object):

    # AxsCfgCalcStepParamAllT
    def __init__(self):
        self.params = None  # type: List[motion.sync.fbtypes.AxsCfgCalcStepParam.AxsCfgCalcStepParamT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgCalcStepParamAll = AxsCfgCalcStepParamAll()
        axsCfgCalcStepParamAll.Init(buf, pos)
        return cls.InitFromObj(axsCfgCalcStepParamAll)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgCalcStepParamAll):
        x = AxsCfgCalcStepParamAllT()
        x._UnPack(axsCfgCalcStepParamAll)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.params == other.params

    # AxsCfgCalcStepParamAllT
    def _UnPack(self, axsCfgCalcStepParamAll):
        if axsCfgCalcStepParamAll is None:
            return
        if not axsCfgCalcStepParamAll.ParamsIsNone():
            self.params = []
            for i in range(axsCfgCalcStepParamAll.ParamsLength()):
                if axsCfgCalcStepParamAll.Params(i) is None:
                    self.params.append(None)
                else:
                    axsCfgCalcStepParam_ = motion.sync.fbtypes.AxsCfgCalcStepParam.AxsCfgCalcStepParamT.InitFromObj(axsCfgCalcStepParamAll.Params(i))
                    self.params.append(axsCfgCalcStepParam_)

    # AxsCfgCalcStepParamAllT
    def Pack(self, builder):
        if self.params is not None:
            paramslist = []
            for i in range(len(self.params)):
                paramslist.append(self.params[i].Pack(builder))
            AxsCfgCalcStepParamAllStartParamsVector(builder, len(self.params))
            for i in reversed(range(len(self.params))):
                builder.PrependUOffsetTRelative(paramslist[i])
            params = builder.EndVector()
        AxsCfgCalcStepParamAllStart(builder)
        if self.params is not None:
            AxsCfgCalcStepParamAllAddParams(builder, params)
        axsCfgCalcStepParamAll = AxsCfgCalcStepParamAllEnd(builder)
        return axsCfgCalcStepParamAll
