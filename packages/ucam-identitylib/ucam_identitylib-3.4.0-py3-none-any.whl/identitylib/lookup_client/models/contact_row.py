# coding: utf-8

"""
    Lookup/Ibis web service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from identitylib.lookup_client.models.contact_phone_number import ContactPhoneNumber
from identitylib.lookup_client.models.contact_web_page import ContactWebPage
from typing import Optional, Set
from typing_extensions import Self

class ContactRow(BaseModel):
    """
    Class representing an institution contact row, for use by the web services API.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The contact row's text.")
    bold: Optional[StrictBool] = Field(default=None, description="Flag indicating if the contact row's text is normally displayed in bold.")
    italic: Optional[StrictBool] = Field(default=None, description="Flag indicating if the contact row's text is normally displayed in italics.")
    addresses: Optional[List[StrictStr]] = Field(default=None, description="A list of the contact row's addresses. This will always be non-null, but may be an empty list.")
    emails: Optional[List[StrictStr]] = Field(default=None, description="A list of the contact row's email addresses. This will always be non-null, but may be an empty list.")
    people: Optional[List[Person]] = Field(default=None, description="A list of the people referred to by the contact row. This will always be non-null, but may be an empty list.")
    phone_numbers: Optional[List[ContactPhoneNumber]] = Field(default=None, description="A list of the contact row's phone numbers. This will always be non-null, but may be an empty list.", alias="phoneNumbers")
    web_pages: Optional[List[ContactWebPage]] = Field(default=None, description="A list of the contact row's web pages. This will always be non-null, but may be an empty list.", alias="webPages")
    __properties: ClassVar[List[str]] = ["description", "bold", "italic", "addresses", "emails", "people", "phoneNumbers", "webPages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in people (list)
        _items = []
        if self.people:
            for _item in self.people:
                if _item:
                    _items.append(_item.to_dict())
            _dict['people'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_numbers (list)
        _items = []
        if self.phone_numbers:
            for _item in self.phone_numbers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['phoneNumbers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in web_pages (list)
        _items = []
        if self.web_pages:
            for _item in self.web_pages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['webPages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "bold": obj.get("bold"),
            "italic": obj.get("italic"),
            "addresses": obj.get("addresses"),
            "emails": obj.get("emails"),
            "people": [Person.from_dict(_item) for _item in obj["people"]] if obj.get("people") is not None else None,
            "phoneNumbers": [ContactPhoneNumber.from_dict(_item) for _item in obj["phoneNumbers"]] if obj.get("phoneNumbers") is not None else None,
            "webPages": [ContactWebPage.from_dict(_item) for _item in obj["webPages"]] if obj.get("webPages") is not None else None
        })
        return _obj

from identitylib.lookup_client.models.person import Person
# TODO: Rewrite to not use raise_errors
ContactRow.model_rebuild(raise_errors=False)

