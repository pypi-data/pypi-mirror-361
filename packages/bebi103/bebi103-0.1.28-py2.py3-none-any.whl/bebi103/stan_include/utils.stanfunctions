    /**
     * Return index in sorted array `x` where `y` would appear if inserted.
     * In the case of ties, `y` is placed to the left.
     * Uses binary search.
     *
     * @param x Sorted array of reals.
     * @param y Real value
     * @return If x has n elements, integer index between 1 and n + 1 where 
     *         y would appear if inserted into x.
     */
    int searchsorted(array[] real x, real y) {
        int n = num_elements(x);

        // Special cases
        if (y <= x[1]) return 1;
        if (y > x[n]) return n + 1;

        int left = 1;
        int right = n + 1;
        int middle;

        while (left < right) {
            middle = (left + right) %/% 2;
            if (x[middle] > y) {
                right = middle;
            }
            else {
                left = middle + 1;
            }
        }

        return left;
    }


    /**
     * Return index in sorted array `x` where `y` would appear if inserted.
     * In the case of ties, `y` is placed to the left.
     * Uses binary search.
     *
     * @param x Sorted array of ints.
     * @param y Int value
     * @return If x has n elements, integer index between 1 and n + 1 where 
     *         y would appear if inserted into x.
     */
    int searchsorted(array[] int x, int y) {
        int n = num_elements(x);

        // Special cases
        if (y <= x[1]) return 1;
        if (y > x[n]) return n + 1;

        int left = 1;
        int right = n + 1;
        int middle;

        while (left < right) {
            middle = (left + right) %/% 2;
            if (x[middle] > y) {
                right = middle;
            }
            else {
                left = middle + 1;
            }
        }

        return left;
    }



    /**
     * Compute log(-exp(neg_term) + sum(exp(pos_terms))).
     * Note that neg_terms and post_terms both are arrays with all 
     * positive values.
     *
     * @param neg_term Positive real number
     * @param pos_terms Array of positive reals
     * @return log(-exp(neg_term) + sum(exp(pos_terms)))
     */
    real log_sum_exp_neg(real neg_term, array[] real pos_terms) {
        real log_sum_exp_pos = log_sum_exp(pos_terms);

        if (log_sum_exp_pos < neg_term) {
            reject("Error encountered in logsumexp calculation with negative terms.");
        }

        return log_sum_exp_pos + log1m_exp(neg_term - log_sum_exp_pos);
    }
