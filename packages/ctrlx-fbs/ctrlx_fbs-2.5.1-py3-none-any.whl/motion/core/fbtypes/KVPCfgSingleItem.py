# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Data of a single value/set of a key-value-pair
class KVPCfgSingleItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KVPCfgSingleItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKVPCfgSingleItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KVPCfgSingleItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # key of the item
    # KVPCfgSingleItem
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # KVPCfgSingleItem
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # entry contains a single value
    # KVPCfgSingleItem
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def KVPCfgSingleItemStart(builder): builder.StartObject(3)
def Start(builder):
    return KVPCfgSingleItemStart(builder)
def KVPCfgSingleItemAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def AddKey(builder, key):
    return KVPCfgSingleItemAddKey(builder, key)
def KVPCfgSingleItemAddValueType(builder, valueType): builder.PrependUint8Slot(1, valueType, 0)
def AddValueType(builder, valueType):
    return KVPCfgSingleItemAddValueType(builder, valueType)
def KVPCfgSingleItemAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return KVPCfgSingleItemAddValue(builder, value)
def KVPCfgSingleItemEnd(builder): return builder.EndObject()
def End(builder):
    return KVPCfgSingleItemEnd(builder)
import motion.core.fbtypes.KVPCfgBool
import motion.core.fbtypes.KVPCfgBoolVector
import motion.core.fbtypes.KVPCfgDouble
import motion.core.fbtypes.KVPCfgDoubleUnit
import motion.core.fbtypes.KVPCfgDoubleUnitVector
import motion.core.fbtypes.KVPCfgDoubleVector
import motion.core.fbtypes.KVPCfgInt64
import motion.core.fbtypes.KVPCfgInt64Vector
import motion.core.fbtypes.KVPCfgSingleItemValue
import motion.core.fbtypes.KVPCfgString
import motion.core.fbtypes.KVPCfgStringVector
try:
    from typing import Union
except:
    pass

class KVPCfgSingleItemT(object):

    # KVPCfgSingleItemT
    def __init__(self):
        self.key = None  # type: str
        self.valueType = 0  # type: int
        self.value = None  # type: Union[None, motion.core.fbtypes.KVPCfgInt64.KVPCfgInt64T, motion.core.fbtypes.KVPCfgDouble.KVPCfgDoubleT, motion.core.fbtypes.KVPCfgBool.KVPCfgBoolT, motion.core.fbtypes.KVPCfgString.KVPCfgStringT, motion.core.fbtypes.KVPCfgDoubleUnit.KVPCfgDoubleUnitT, motion.core.fbtypes.KVPCfgInt64Vector.KVPCfgInt64VectorT, motion.core.fbtypes.KVPCfgDoubleVector.KVPCfgDoubleVectorT, motion.core.fbtypes.KVPCfgBoolVector.KVPCfgBoolVectorT, motion.core.fbtypes.KVPCfgStringVector.KVPCfgStringVectorT, motion.core.fbtypes.KVPCfgDoubleUnitVector.KVPCfgDoubleUnitVectorT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kvpcfgSingleItem = KVPCfgSingleItem()
        kvpcfgSingleItem.Init(buf, pos)
        return cls.InitFromObj(kvpcfgSingleItem)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kvpcfgSingleItem):
        x = KVPCfgSingleItemT()
        x._UnPack(kvpcfgSingleItem)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.key == other.key and \
            self.valueType == other.valueType and \
            self.value == other.value

    # KVPCfgSingleItemT
    def _UnPack(self, kvpcfgSingleItem):
        if kvpcfgSingleItem is None:
            return
        self.key = kvpcfgSingleItem.Key()
        self.valueType = kvpcfgSingleItem.ValueType()
        self.value = motion.core.fbtypes.KVPCfgSingleItemValue.KVPCfgSingleItemValueCreator(self.valueType, kvpcfgSingleItem.Value())

    # KVPCfgSingleItemT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            value = self.value.Pack(builder)
        KVPCfgSingleItemStart(builder)
        if self.key is not None:
            KVPCfgSingleItemAddKey(builder, key)
        KVPCfgSingleItemAddValueType(builder, self.valueType)
        if self.value is not None:
            KVPCfgSingleItemAddValue(builder, value)
        kvpcfgSingleItem = KVPCfgSingleItemEnd(builder)
        return kvpcfgSingleItem
