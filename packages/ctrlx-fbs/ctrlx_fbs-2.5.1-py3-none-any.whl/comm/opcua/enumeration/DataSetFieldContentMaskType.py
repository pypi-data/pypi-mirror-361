# automatically generated by the FlatBuffers compiler, do not modify

# namespace: enumeration

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DataSetFieldContentMaskType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataSetFieldContentMaskType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataSetFieldContentMaskType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DataSetFieldContentMaskType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DataSetFieldContentMaskType
    def Mask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def DataSetFieldContentMaskTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return DataSetFieldContentMaskTypeStart(builder)
def DataSetFieldContentMaskTypeAddMask(builder, mask): builder.PrependUint32Slot(0, mask, 0)
def AddMask(builder, mask):
    return DataSetFieldContentMaskTypeAddMask(builder, mask)
def DataSetFieldContentMaskTypeEnd(builder): return builder.EndObject()
def End(builder):
    return DataSetFieldContentMaskTypeEnd(builder)

class DataSetFieldContentMaskTypeT(object):

    # DataSetFieldContentMaskTypeT
    def __init__(self):
        self.mask = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataSetFieldContentMaskType = DataSetFieldContentMaskType()
        dataSetFieldContentMaskType.Init(buf, pos)
        return cls.InitFromObj(dataSetFieldContentMaskType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataSetFieldContentMaskType):
        x = DataSetFieldContentMaskTypeT()
        x._UnPack(dataSetFieldContentMaskType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mask == other.mask

    # DataSetFieldContentMaskTypeT
    def _UnPack(self, dataSetFieldContentMaskType):
        if dataSetFieldContentMaskType is None:
            return
        self.mask = dataSetFieldContentMaskType.Mask()

    # DataSetFieldContentMaskTypeT
    def Pack(self, builder):
        DataSetFieldContentMaskTypeStart(builder)
        DataSetFieldContentMaskTypeAddMask(builder, self.mask)
        dataSetFieldContentMaskType = DataSetFieldContentMaskTypeEnd(builder)
        return dataSetFieldContentMaskType
