# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#This node provide access to VoE data of an EtherCAT slave device.
#A write request will send data to the slave device.
#A read request read previously received data from a EtherCAT slave device out of master buffer.
#The slave must support the mailbox protocol “Vendor specific protocol over EtherCAT” (VoE).
#Note: the Slave must be in EtherCAT state PreOP, SafeOP or OP for mailbox communication.
class VoeDataRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VoeDataRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVoeDataRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VoeDataRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Address type:
    #undefined: Undefined - do not use
    #autoincrement: Auto increment address
    #fixedphysical: EtherCAT address (fixed physical address)
    # VoeDataRequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Address depending on addressType.
    # VoeDataRequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Data buffer for write data, include VoE header
    # VoeDataRequest
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # VoeDataRequest
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # VoeDataRequest
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VoeDataRequest
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    #Size in Bytes of buffer or variable provided for data reception
    # VoeDataRequest
    def MaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def VoeDataRequestStart(builder): builder.StartObject(4)
def Start(builder):
    return VoeDataRequestStart(builder)
def VoeDataRequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def AddAddressType(builder, addressType):
    return VoeDataRequestAddAddressType(builder, addressType)
def VoeDataRequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def AddAddress(builder, address):
    return VoeDataRequestAddAddress(builder, address)
def VoeDataRequestAddData(builder, data): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return VoeDataRequestAddData(builder, data)
def VoeDataRequestStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDataVector(builder, numElems):
    return VoeDataRequestStartDataVector(builder, numElems)
def VoeDataRequestAddMaxLength(builder, maxLength): builder.PrependUint32Slot(3, maxLength, 0)
def AddMaxLength(builder, maxLength):
    return VoeDataRequestAddMaxLength(builder, maxLength)
def VoeDataRequestEnd(builder): return builder.EndObject()
def End(builder):
    return VoeDataRequestEnd(builder)
try:
    from typing import List
except:
    pass

class VoeDataRequestT(object):

    # VoeDataRequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int
        self.data = None  # type: List[int]
        self.maxLength = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        voeDataRequest = VoeDataRequest()
        voeDataRequest.Init(buf, pos)
        return cls.InitFromObj(voeDataRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, voeDataRequest):
        x = VoeDataRequestT()
        x._UnPack(voeDataRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.addressType == other.addressType and \
            self.address == other.address and \
            self.data == other.data and \
            self.maxLength == other.maxLength

    # VoeDataRequestT
    def _UnPack(self, voeDataRequest):
        if voeDataRequest is None:
            return
        self.addressType = voeDataRequest.AddressType()
        self.address = voeDataRequest.Address()
        if not voeDataRequest.DataIsNone():
            if np is None:
                self.data = []
                for i in range(voeDataRequest.DataLength()):
                    self.data.append(voeDataRequest.Data(i))
            else:
                self.data = voeDataRequest.DataAsNumpy()
        self.maxLength = voeDataRequest.MaxLength()

    # VoeDataRequestT
    def Pack(self, builder):
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                VoeDataRequestStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector()
        VoeDataRequestStart(builder)
        VoeDataRequestAddAddressType(builder, self.addressType)
        VoeDataRequestAddAddress(builder, self.address)
        if self.data is not None:
            VoeDataRequestAddData(builder, data)
        VoeDataRequestAddMaxLength(builder, self.maxLength)
        voeDataRequest = VoeDataRequestEnd(builder)
        return voeDataRequest
