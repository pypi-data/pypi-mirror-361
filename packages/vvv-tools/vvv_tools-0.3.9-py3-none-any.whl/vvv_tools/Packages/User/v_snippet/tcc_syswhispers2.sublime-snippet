<snippet>
    <content>
        <![CDATA[
// Code below is adapted from @modexpblog. Read linked article for more details.
// https://www.mdsec.co.uk/2020/12/bypassing-user-mode-hooks-and-direct-invocation-of-system-calls-for-red-teams

#ifndef SW2_HEADER_H_
#define SW2_HEADER_H_

#include <stdio.h>
#include <windows.h>
#define NTSTATUS LONG
#define PENCLAVE_ROUTINE DWORD
#define NOTIFICATION_MASK DWORD
typedef struct _GROUP_AFFINITY {
  KAFFINITY Mask;
  USHORT    Group;
  USHORT    Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;
typedef struct _TOKEN_MANDATORY_POLICY {
  DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;
typedef enum _KTMOBJECT_TYPE {
  KTMOBJECT_TRANSACTION,
  KTMOBJECT_TRANSACTION_MANAGER,
  KTMOBJECT_RESOURCE_MANAGER,
  KTMOBJECT_ENLISTMENT,
  KTMOBJECT_INVALID
} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;
typedef struct _KTMOBJECT_CURSOR {
  GUID  LastQuery;
  ULONG ObjectIdCount;
  GUID  ObjectIds[1];
} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;
typedef struct _TRANSACTION_NOTIFICATION {
    PVOID         TransactionKey;
    ULONG         TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG         ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;
typedef enum _ENLISTMENT_INFORMATION_CLASS {
  EnlistmentBasicInformation,
  EnlistmentRecoveryInformation,
  EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;
typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
  ResourceManagerBasicInformation,
  ResourceManagerCompletionInformation
} RESOURCEMANAGER_INFORMATION_CLASS;
typedef enum _TRANSACTION_INFORMATION_CLASS {
  TransactionBasicInformation,
  TransactionPropertiesInformation,
  TransactionEnlistmentInformation,
  TransactionSuperiorEnlistmentInformation
} TRANSACTION_INFORMATION_CLASS;
typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
  TransactionManagerBasicInformation,
  TransactionManagerLogInformation,
  TransactionManagerLogPathInformation,
  TransactionManagerRecoveryInformation
} TRANSACTIONMANAGER_INFORMATION_CLASS;
typedef struct _IMAGE_INFO {
  union {
    ULONG Properties;
    struct {
      ULONG ImageAddressingMode : 8;
      ULONG SystemModeImage : 1;
      ULONG ImageMappedToAllPids : 1;
      ULONG ExtendedInfoPresent : 1;
      ULONG MachineTypeMismatch : 1;
      ULONG ImageSignatureLevel : 4;
      ULONG ImageSignatureType : 3;
      ULONG ImagePartialMap : 1;
      ULONG Reserved : 12;
    };
  };
  PVOID  ImageBase;
  ULONG  ImageSelector;
  SIZE_T ImageSize;
  ULONG  ImageSectionNumber;
} IMAGE_INFO, *PIMAGE_INFO;

#define MEM_EXTENDED_PARAMETER_TYPE_BITS    8
typedef struct MEM_EXTENDED_PARAMETER {
  struct {
    DWORD64 Type : MEM_EXTENDED_PARAMETER_TYPE_BITS;
    DWORD64 Reserved : 64 - MEM_EXTENDED_PARAMETER_TYPE_BITS;
  } DUMMYSTRUCTNAME;
  union {
    DWORD64 ULong64;
    PVOID   Pointer;
    SIZE_T  Size;
    HANDLE  Handle;
    DWORD   ULong;
  } DUMMYUNIONNAME;
} MEM_EXTENDED_PARAMETER, *PMEM_EXTENDED_PARAMETER;
typedef UCHAR SE_SIGNING_LEVEL, *PSE_SIGNING_LEVEL;
typedef ULONG EXECUTION_STATE, *PEXECUTION_STATE;
#ifndef __readfsdword
    #define __readfsdword(offset) \
            __readfsdword_implementation(offset)
    __attribute__((always_inline)) static inline unsigned long __readfsdword_implementation(unsigned long Offset)
    {
        unsigned long value;
        __asm__ __volatile__(
            "movl %1, %%eax\n"
            "movl %%fs:(%%eax), %0\n"
            : "=r" (value) 
            : "r" (Offset)
            : "eax"
        );
        return value;
    }
#endif












#define SW2_SEED 0x285E0FAD
#define SW2_ROL8(v) (v << 8 | v >> 24)
#define SW2_ROR8(v) (v >> 8 | v << 24)
#define SW2_ROX8(v) ((SW2_SEED % 2) ? SW2_ROL8(v) : SW2_ROR8(v))
#define SW2_MAX_ENTRIES 500
#define SW2_RVA2VA(Type, DllBase, Rva) (Type)((ULONG_PTR) DllBase + Rva)

// Typedefs are prefixed to avoid pollution.

typedef struct _SW2_SYSCALL_ENTRY
{
    DWORD Hash;
    DWORD Address;
} SW2_SYSCALL_ENTRY, *PSW2_SYSCALL_ENTRY;

typedef struct _SW2_SYSCALL_LIST
{
    DWORD Count;
    SW2_SYSCALL_ENTRY Entries[SW2_MAX_ENTRIES];
} SW2_SYSCALL_LIST, *PSW2_SYSCALL_LIST;

typedef struct _SW2_PEB_LDR_DATA {
    BYTE Reserved1[8];
    PVOID Reserved2[3];
    LIST_ENTRY InMemoryOrderModuleList;
} SW2_PEB_LDR_DATA, *PSW2_PEB_LDR_DATA;

typedef struct _SW2_LDR_DATA_TABLE_ENTRY {
    PVOID Reserved1[2];
    LIST_ENTRY InMemoryOrderLinks;
    PVOID Reserved2[2];
    PVOID DllBase;
} SW2_LDR_DATA_TABLE_ENTRY, *PSW2_LDR_DATA_TABLE_ENTRY;

typedef struct _SW2_PEB {
    BYTE Reserved1[2];
    BYTE BeingDebugged;
    BYTE Reserved2[1];
    PVOID Reserved3[2];
    PSW2_PEB_LDR_DATA Ldr;
} SW2_PEB, *PSW2_PEB;

DWORD SW2_HashSyscall(PCSTR FunctionName);
BOOL SW2_PopulateSyscallList(void);
EXTERN_C DWORD SW2_GetSyscallNumber(DWORD FunctionHash);

typedef struct _UNICODE_STRING
{
    USHORT Length;
    USHORT MaximumLength;
    PWSTR  Buffer;
} UNICODE_STRING, *PUNICODE_STRING;

typedef struct _SYSTEM_HANDLE
{
    ULONG ProcessId;
    BYTE ObjectTypeNumber;
    BYTE Flags;
    USHORT Handle;
    PVOID Object;
    ACCESS_MASK GrantedAccess;
} SYSTEM_HANDLE, *PSYSTEM_HANDLE;

typedef struct _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE
{
    ULONG64        Version;
    UNICODE_STRING Name;
} TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE, *PTOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE;

typedef struct _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
{
    PVOID pValue;
    ULONG ValueLength;
} TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE, *PTOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;

typedef struct _WNF_TYPE_ID
{
    GUID TypeId;
} WNF_TYPE_ID, *PWNF_TYPE_ID;

typedef enum _KCONTINUE_TYPE
{
    KCONTINUE_UNWIND,
    KCONTINUE_RESUME,
    KCONTINUE_LONGJUMP,
    KCONTINUE_SET,
    KCONTINUE_LAST
} KCONTINUE_TYPE;

typedef struct _IO_STATUS_BLOCK
{
    union
    {
        NTSTATUS Status;
        VOID*    Pointer;
    };
    ULONG_PTR Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;

typedef enum _PS_CREATE_STATE
{
    PsCreateInitialState,
    PsCreateFailOnFileOpen,
    PsCreateFailOnSectionCreate,
    PsCreateFailExeFormat,
    PsCreateFailMachineMismatch,
    PsCreateFailExeName,
    PsCreateSuccess,
    PsCreateMaximumStates
} PS_CREATE_STATE, *PPS_CREATE_STATE;

typedef struct _SYSTEM_HANDLE_INFORMATION
{
    ULONG HandleCount;
    SYSTEM_HANDLE Handles[1];
} SYSTEM_HANDLE_INFORMATION, *PSYSTEM_HANDLE_INFORMATION;

typedef struct _CLIENT_ID
{
    HANDLE UniqueProcess;
    HANDLE UniqueThread;
} CLIENT_ID, *PCLIENT_ID;

typedef enum _PLUGPLAY_EVENT_CATEGORY
{
    HardwareProfileChangeEvent,
    TargetDeviceChangeEvent,
    DeviceClassChangeEvent,
    CustomDeviceEvent,
    DeviceInstallEvent,
    DeviceArrivalEvent,
    PowerEvent,
    VetoEvent,
    BlockedDriverEvent,
    InvalidIDEvent,
    MaxPlugEventCategory
} PLUGPLAY_EVENT_CATEGORY, *PPLUGPLAY_EVENT_CATEGORY;

typedef enum _PNP_VETO_TYPE
{
    PNP_VetoTypeUnknown, // unspecified
    PNP_VetoLegacyDevice, // instance path
    PNP_VetoPendingClose, // instance path
    PNP_VetoWindowsApp, // module
    PNP_VetoWindowsService, // service
    PNP_VetoOutstandingOpen, // instance path
    PNP_VetoDevice, // instance path
    PNP_VetoDriver, // driver service name
    PNP_VetoIllegalDeviceRequest, // instance path
    PNP_VetoInsufficientPower, // unspecified
    PNP_VetoNonDisableable, // instance path
    PNP_VetoLegacyDriver, // service
    PNP_VetoInsufficientRights  // unspecified
} PNP_VETO_TYPE, *PPNP_VETO_TYPE;

typedef struct _TOKEN_SECURITY_ATTRIBUTE_V1
{
    UNICODE_STRING Name;
    USHORT         ValueType;
    USHORT         Reserved;
    ULONG          Flags;
    ULONG          ValueCount;
    union
    {
        PLONG64                                      pInt64;
        PULONG64                                     pUint64;
        PUNICODE_STRING                              pString;
        PTOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE         pFqbn;
        PTOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
    } Values;
} TOKEN_SECURITY_ATTRIBUTE_V1, *PTOKEN_SECURITY_ATTRIBUTE_V1;

typedef VOID(KNORMAL_ROUTINE) (
    IN PVOID NormalContext,
    IN PVOID SystemArgument1,
    IN PVOID SystemArgument2);

typedef struct _PS_ATTRIBUTE
{
    ULONG  Attribute;
    SIZE_T Size;
    union
    {
        ULONG Value;
        PVOID ValuePtr;
    } u1;
    PSIZE_T ReturnLength;
} PS_ATTRIBUTE, *PPS_ATTRIBUTE;

#ifndef InitializeObjectAttributes
#define InitializeObjectAttributes( p, n, a, r, s ) { \
    (p)->Length = sizeof( OBJECT_ATTRIBUTES );        \
    (p)->RootDirectory = r;                           \
    (p)->Attributes = a;                              \
    (p)->ObjectName = n;                              \
    (p)->SecurityDescriptor = s;                      \
    (p)->SecurityQualityOfService = NULL;             \
}
#endif

typedef struct _WNF_STATE_NAME
{
    ULONG Data[2];
} WNF_STATE_NAME, *PWNF_STATE_NAME;

typedef struct _KEY_VALUE_ENTRY
{
    PUNICODE_STRING ValueName;
    ULONG           DataLength;
    ULONG           DataOffset;
    ULONG           Type;
} KEY_VALUE_ENTRY, *PKEY_VALUE_ENTRY;

typedef enum _KEY_SET_INFORMATION_CLASS
{
    KeyWriteTimeInformation,
    KeyWow64FlagsInformation,
    KeyControlFlagsInformation,
    KeySetVirtualizationInformation,
    KeySetDebugInformation,
    KeySetHandleTagsInformation,
    MaxKeySetInfoClass  // MaxKeySetInfoClass should always be the last enum.
} KEY_SET_INFORMATION_CLASS, *PKEY_SET_INFORMATION_CLASS;

typedef enum _SYSTEM_INFORMATION_CLASS
{
    SystemBasicInformation = 0,
    SystemPerformanceInformation = 2,
    SystemTimeOfDayInformation = 3,
    SystemProcessInformation = 5,
    SystemProcessorPerformanceInformation = 8,
    SystemHandleInformation = 16,
    SystemInterruptInformation = 23,
    SystemExceptionInformation = 33,
    SystemRegistryQuotaInformation = 37,
    SystemLookasideInformation = 45,
    SystemCodeIntegrityInformation = 103,
    SystemPolicyInformation = 134,
} SYSTEM_INFORMATION_CLASS, *PSYSTEM_INFORMATION_CLASS;

typedef enum _PROCESSINFOCLASS
{
    ProcessBasicInformation = 0,
    ProcessDebugPort = 7,
    ProcessWow64Information = 26,
    ProcessImageFileName = 27,
    ProcessBreakOnTermination = 29
} PROCESSINFOCLASS, *PPROCESSINFOCLASS;

typedef struct _MEMORY_RANGE_ENTRY
{
    PVOID  VirtualAddress;
    SIZE_T NumberOfBytes;
} MEMORY_RANGE_ENTRY, *PMEMORY_RANGE_ENTRY;

typedef struct _T2_SET_PARAMETERS_V0
{
    ULONG    Version;
    ULONG    Reserved;
    LONGLONG NoWakeTolerance;
} T2_SET_PARAMETERS, *PT2_SET_PARAMETERS;

typedef struct _FILE_PATH
{
    ULONG Version;
    ULONG Length;
    ULONG Type;
    CHAR  FilePath[1];
} FILE_PATH, *PFILE_PATH;

typedef struct _FILE_USER_QUOTA_INFORMATION
{
    ULONG         NextEntryOffset;
    ULONG         SidLength;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER QuotaUsed;
    LARGE_INTEGER QuotaThreshold;
    LARGE_INTEGER QuotaLimit;
    SID           Sid[1];
} FILE_USER_QUOTA_INFORMATION, *PFILE_USER_QUOTA_INFORMATION;

typedef struct _FILE_QUOTA_LIST_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG SidLength;
    SID   Sid[1];
} FILE_QUOTA_LIST_INFORMATION, *PFILE_QUOTA_LIST_INFORMATION;

typedef struct _FILE_NETWORK_OPEN_INFORMATION
{
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG         FileAttributes;
    ULONG         Unknown;
} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION;

typedef enum _FILTER_BOOT_OPTION_OPERATION
{
    FilterBootOptionOperationOpenSystemStore,
    FilterBootOptionOperationSetElement,
    FilterBootOptionOperationDeleteElement,
    FilterBootOptionOperationMax
} FILTER_BOOT_OPTION_OPERATION, *PFILTER_BOOT_OPTION_OPERATION;

typedef enum _EVENT_TYPE
{
    NotificationEvent = 0,
    SynchronizationEvent = 1,
} EVENT_TYPE, *PEVENT_TYPE;

typedef struct _FILE_FULL_EA_INFORMATION
{
    ULONG  NextEntryOffset;
    UCHAR  Flags;
    UCHAR  EaNameLength;
    USHORT EaValueLength;
    CHAR   EaName[1];
} FILE_FULL_EA_INFORMATION, *PFILE_FULL_EA_INFORMATION;

typedef struct _FILE_GET_EA_INFORMATION
{
    ULONG NextEntryOffset;
    BYTE  EaNameLength;
    CHAR  EaName[1];
} FILE_GET_EA_INFORMATION, *PFILE_GET_EA_INFORMATION;

typedef struct _BOOT_OPTIONS
{
    ULONG Version;
    ULONG Length;
    ULONG Timeout;
    ULONG CurrentBootEntryId;
    ULONG NextBootEntryId;
    WCHAR HeadlessRedirection[1];
} BOOT_OPTIONS, *PBOOT_OPTIONS;

typedef ULONG WNF_CHANGE_STAMP, *PWNF_CHANGE_STAMP;

typedef enum _WNF_DATA_SCOPE
{
    WnfDataScopeSystem = 0,
    WnfDataScopeSession = 1,
    WnfDataScopeUser = 2,
    WnfDataScopeProcess = 3,
    WnfDataScopeMachine = 4
} WNF_DATA_SCOPE, *PWNF_DATA_SCOPE;

typedef enum _WNF_STATE_NAME_LIFETIME
{
    WnfWellKnownStateName = 0,
    WnfPermanentStateName = 1,
    WnfPersistentStateName = 2,
    WnfTemporaryStateName = 3
} WNF_STATE_NAME_LIFETIME, *PWNF_STATE_NAME_LIFETIME;

typedef enum _VIRTUAL_MEMORY_INFORMATION_CLASS
{
    VmPrefetchInformation,
    VmPagePriorityInformation,
    VmCfgCallTargetInformation
} VIRTUAL_MEMORY_INFORMATION_CLASS, *PVIRTUAL_MEMORY_INFORMATION_CLASS;

typedef enum _IO_SESSION_EVENT
{
    IoSessionEventIgnore,
    IoSessionEventCreated,
    IoSessionEventTerminated,
    IoSessionEventConnected,
    IoSessionEventDisconnected,
    IoSessionEventLogon,
    IoSessionEventLogoff,
    IoSessionEventMax
} IO_SESSION_EVENT, *PIO_SESSION_EVENT;

typedef enum _PORT_INFORMATION_CLASS
{
    PortBasicInformation,
#if DEVL
    PortDumpInformation
#endif
} PORT_INFORMATION_CLASS, *PPORT_INFORMATION_CLASS;

typedef enum _PLUGPLAY_CONTROL_CLASS
{
    PlugPlayControlEnumerateDevice,
    PlugPlayControlRegisterNewDevice,
    PlugPlayControlDeregisterDevice,
    PlugPlayControlInitializeDevice,
    PlugPlayControlStartDevice,
    PlugPlayControlUnlockDevice,
    PlugPlayControlQueryAndRemoveDevice,
    PlugPlayControlUserResponse,
    PlugPlayControlGenerateLegacyDevice,
    PlugPlayControlGetInterfaceDeviceList,
    PlugPlayControlProperty,
    PlugPlayControlDeviceClassAssociation,
    PlugPlayControlGetRelatedDevice,
    PlugPlayControlGetInterfaceDeviceAlias,
    PlugPlayControlDeviceStatus,
    PlugPlayControlGetDeviceDepth,
    PlugPlayControlQueryDeviceRelations,
    PlugPlayControlTargetDeviceRelation,
    PlugPlayControlQueryConflictList,
    PlugPlayControlRetrieveDock,
    PlugPlayControlResetDevice,
    PlugPlayControlHaltDevice,
    PlugPlayControlGetBlockedDriverList,
    MaxPlugPlayControl
} PLUGPLAY_CONTROL_CLASS, *PPLUGPLAY_CONTROL_CLASS;

typedef enum _IO_COMPLETION_INFORMATION_CLASS
{
    IoCompletionBasicInformation
} IO_COMPLETION_INFORMATION_CLASS, *PIO_COMPLETION_INFORMATION_CLASS;

typedef enum _SECTION_INHERIT
{
    ViewShare = 1,
    ViewUnmap = 2
} SECTION_INHERIT, *PSECTION_INHERIT;

typedef enum _DEBUGOBJECTINFOCLASS
{
    DebugObjectFlags = 1,
    MaxDebugObjectInfoClass
} DEBUGOBJECTINFOCLASS, *PDEBUGOBJECTINFOCLASS;

typedef enum _SEMAPHORE_INFORMATION_CLASS
{
    SemaphoreBasicInformation
} SEMAPHORE_INFORMATION_CLASS, *PSEMAPHORE_INFORMATION_CLASS;

typedef struct _PS_ATTRIBUTE_LIST
{
    SIZE_T       TotalLength;
    PS_ATTRIBUTE Attributes[1];
} PS_ATTRIBUTE_LIST, *PPS_ATTRIBUTE_LIST;

typedef enum _VDMSERVICECLASS
{
    VdmStartExecution,
    VdmQueueInterrupt,
    VdmDelayInterrupt,
    VdmInitialize,
    VdmFeatures,
    VdmSetInt21Handler,
    VdmQueryDir,
    VdmPrinterDirectIoOpen,
    VdmPrinterDirectIoClose,
    VdmPrinterInitialize,
    VdmSetLdtEntries,
    VdmSetProcessLdtInfo,
    VdmAdlibEmulation,
    VdmPMCliControl,
    VdmQueryVdmProcess
} VDMSERVICECLASS, *PVDMSERVICECLASS;

typedef struct _PS_CREATE_INFO
{
    SIZE_T Size;
    PS_CREATE_STATE State;
    union
    {
        // PsCreateInitialState
        struct {
            union {
                ULONG InitFlags;
                struct {
                    UCHAR  WriteOutputOnExit : 1;
                    UCHAR  DetectManifest : 1;
                    UCHAR  IFEOSkipDebugger : 1;
                    UCHAR  IFEODoNotPropagateKeyState : 1;
                    UCHAR  SpareBits1 : 4;
                    UCHAR  SpareBits2 : 8;
                    USHORT ProhibitedImageCharacteristics : 16;
                };
            };
            ACCESS_MASK AdditionalFileAccess;
        } InitState;
        // PsCreateFailOnSectionCreate
        struct {
            HANDLE FileHandle;
        } FailSection;
        // PsCreateFailExeFormat
        struct {
            USHORT DllCharacteristics;
        } ExeFormat;
        // PsCreateFailExeName
        struct {
            HANDLE IFEOKey;
        } ExeName;
        // PsCreateSuccess
        struct {
            union {
                ULONG OutputFlags;
                struct {
                    UCHAR  ProtectedProcess : 1;
                    UCHAR  AddressSpaceOverride : 1;
                    UCHAR  DevOverrideEnabled : 1; // from Image File Execution Options
                    UCHAR  ManifestDetected : 1;
                    UCHAR  ProtectedProcessLight : 1;
                    UCHAR  SpareBits1 : 3;
                    UCHAR  SpareBits2 : 8;
                    USHORT SpareBits3 : 16;
                };
            };
            HANDLE    FileHandle;
            HANDLE    SectionHandle;
            ULONGLONG UserProcessParametersNative;
            ULONG     UserProcessParametersWow64;
            ULONG     CurrentParameterFlags;
            ULONGLONG PebAddressNative;
            ULONG     PebAddressWow64;
            ULONGLONG ManifestAddress;
            ULONG     ManifestSize;
        } SuccessState;
    };
} PS_CREATE_INFO, *PPS_CREATE_INFO;

typedef enum _MEMORY_INFORMATION_CLASS
{
    MemoryBasicInformation,
    MemoryWorkingSetInformation,
    MemoryMappedFilenameInformation,
    MemoryRegionInformation,
    MemoryWorkingSetExInformation,
    MemorySharedCommitInformation,
    MemoryImageInformation,
    MemoryRegionInformationEx,
    MemoryPrivilegedBasicInformation,
    MemoryEnclaveImageInformation,
    MemoryBasicInformationCapped
} MEMORY_INFORMATION_CLASS, *PMEMORY_INFORMATION_CLASS;

typedef enum _MEMORY_RESERVE_TYPE
{
    MemoryReserveUserApc,
    MemoryReserveIoCompletion,
    MemoryReserveTypeMax
} MEMORY_RESERVE_TYPE, *PMEMORY_RESERVE_TYPE;

typedef enum _ALPC_PORT_INFORMATION_CLASS
{
    AlpcBasicInformation,
    AlpcPortInformation,
    AlpcAssociateCompletionPortInformation,
    AlpcConnectedSIDInformation,
    AlpcServerInformation,
    AlpcMessageZoneInformation,
    AlpcRegisterCompletionListInformation,
    AlpcUnregisterCompletionListInformation,
    AlpcAdjustCompletionListConcurrencyCountInformation,
    AlpcRegisterCallbackInformation,
    AlpcCompletionListRundownInformation
} ALPC_PORT_INFORMATION_CLASS, *PALPC_PORT_INFORMATION_CLASS;

typedef struct _ALPC_CONTEXT_ATTR
{
    PVOID PortContext;
    PVOID MessageContext;
    ULONG SequenceNumber;
    ULONG MessageID;
    ULONG CallbackID;
} ALPC_CONTEXT_ATTR, *PALPC_CONTEXT_ATTR;

typedef struct _ALPC_DATA_VIEW_ATTR
{
    ULONG  Flags;
    HANDLE SectionHandle;
    PVOID  ViewBase;
    SIZE_T ViewSize;
} ALPC_DATA_VIEW_ATTR, *PALPC_DATA_VIEW_ATTR;

typedef struct _ALPC_SECURITY_ATTR
{
    ULONG                        Flags;
    PSECURITY_QUALITY_OF_SERVICE SecurityQos;
    HANDLE                       ContextHandle;
    ULONG                        Reserved1;
    ULONG                        Reserved2;
} ALPC_SECURITY_ATTR, *PALPC_SECURITY_ATTR;

typedef PVOID* PPVOID;

typedef enum _KPROFILE_SOURCE
{
    ProfileTime = 0,
    ProfileAlignmentFixup = 1,
    ProfileTotalIssues = 2,
    ProfilePipelineDry = 3,
    ProfileLoadInstructions = 4,
    ProfilePipelineFrozen = 5,
    ProfileBranchInstructions = 6,
    ProfileTotalNonissues = 7,
    ProfileDcacheMisses = 8,
    ProfileIcacheMisses = 9,
    ProfileCacheMisses = 10,
    ProfileBranchMispredictions = 11,
    ProfileStoreInstructions = 12,
    ProfileFpInstructions = 13,
    ProfileIntegerInstructions = 14,
    Profile2Issue = 15,
    Profile3Issue = 16,
    Profile4Issue = 17,
    ProfileSpecialInstructions = 18,
    ProfileTotalCycles = 19,
    ProfileIcacheIssues = 20,
    ProfileDcacheAccesses = 21,
    ProfileMemoryBarrierCycles = 22,
    ProfileLoadLinkedIssues = 23,
    ProfileMaximum = 24,
} KPROFILE_SOURCE, *PKPROFILE_SOURCE;

typedef enum _ALPC_MESSAGE_INFORMATION_CLASS
{
    AlpcMessageSidInformation,
    AlpcMessageTokenModifiedIdInformation
} ALPC_MESSAGE_INFORMATION_CLASS, *PALPC_MESSAGE_INFORMATION_CLASS;

typedef enum _WORKERFACTORYINFOCLASS
{
    WorkerFactoryTimeout,
    WorkerFactoryRetryTimeout,
    WorkerFactoryIdleTimeout,
    WorkerFactoryBindingCount,
    WorkerFactoryThreadMinimum,
    WorkerFactoryThreadMaximum,
    WorkerFactoryPaused,
    WorkerFactoryBasicInformation,
    WorkerFactoryAdjustThreadGoal,
    WorkerFactoryCallbackType,
    WorkerFactoryStackInformation,
    MaxWorkerFactoryInfoClass
} WORKERFACTORYINFOCLASS, *PWORKERFACTORYINFOCLASS;

typedef enum _MEMORY_PARTITION_INFORMATION_CLASS
{
    SystemMemoryPartitionInformation,
    SystemMemoryPartitionMoveMemory,
    SystemMemoryPartitionAddPagefile,
    SystemMemoryPartitionCombineMemory,
    SystemMemoryPartitionInitialAddMemory,
    SystemMemoryPartitionGetMemoryEvents,
    SystemMemoryPartitionMax
} MEMORY_PARTITION_INFORMATION_CLASS, *PMEMORY_PARTITION_INFORMATION_CLASS;

typedef enum _MUTANT_INFORMATION_CLASS
{
    MutantBasicInformation,
    MutantOwnerInformation
} MUTANT_INFORMATION_CLASS, *PMUTANT_INFORMATION_CLASS;

typedef enum _ATOM_INFORMATION_CLASS
{
    AtomBasicInformation,
    AtomTableInformation
} ATOM_INFORMATION_CLASS, *PATOM_INFORMATION_CLASS;

typedef enum _SHUTDOWN_ACTION {
    ShutdownNoReboot,
    ShutdownReboot,
    ShutdownPowerOff
} SHUTDOWN_ACTION;

typedef VOID(CALLBACK* PTIMER_APC_ROUTINE)(
    IN PVOID TimerContext,
    IN ULONG TimerLowValue,
    IN LONG TimerHighValue);

typedef enum _KEY_VALUE_INFORMATION_CLASS {
    KeyValueBasicInformation = 0,
    KeyValueFullInformation,
    KeyValuePartialInformation,
    KeyValueFullInformationAlign64,
    KeyValuePartialInformationAlign64,
    MaxKeyValueInfoClass
} KEY_VALUE_INFORMATION_CLASS;

typedef LANGID* PLANGID;

typedef struct _PLUGPLAY_EVENT_BLOCK
{
    GUID EventGuid;
    PLUGPLAY_EVENT_CATEGORY EventCategory;
    PULONG Result;
    ULONG Flags;
    ULONG TotalSize;
    PVOID DeviceObject;

    union
    {
        struct
        {
            GUID ClassGuid;
            WCHAR SymbolicLinkName[1];
        } DeviceClass;
        struct
        {
            WCHAR DeviceIds[1];
        } TargetDevice;
        struct
        {
            WCHAR DeviceId[1];
        } InstallDevice;
        struct
        {
            PVOID NotificationStructure;
            WCHAR DeviceIds[1];
        } CustomNotification;
        struct
        {
            PVOID Notification;
        } ProfileNotification;
        struct
        {
            ULONG NotificationCode;
            ULONG NotificationData;
        } PowerNotification;
        struct
        {
            PNP_VETO_TYPE VetoType;
            WCHAR DeviceIdVetoNameBuffer[1]; // DeviceId<null>VetoName<null><null>
        } VetoNotification;
        struct
        {
            GUID BlockedDriverGuid;
        } BlockedDriverNotification;
        struct
        {
            WCHAR ParentId[1];
        } InvalidIDNotification;
    } u;
} PLUGPLAY_EVENT_BLOCK, *PPLUGPLAY_EVENT_BLOCK;

typedef VOID(NTAPI* PIO_APC_ROUTINE) (
    IN PVOID            ApcContext,
    IN PIO_STATUS_BLOCK IoStatusBlock,
    IN ULONG            Reserved);

typedef KNORMAL_ROUTINE* PKNORMAL_ROUTINE;

typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS
{
    DirectoryNotifyInformation = 1,
    DirectoryNotifyExtendedInformation = 2,
} DIRECTORY_NOTIFY_INFORMATION_CLASS, *PDIRECTORY_NOTIFY_INFORMATION_CLASS;

typedef enum _EVENT_INFORMATION_CLASS
{
    EventBasicInformation
} EVENT_INFORMATION_CLASS, *PEVENT_INFORMATION_CLASS;

typedef struct _ALPC_MESSAGE_ATTRIBUTES
{
    unsigned long AllocatedAttributes;
    unsigned long ValidAttributes;
} ALPC_MESSAGE_ATTRIBUTES, *PALPC_MESSAGE_ATTRIBUTES;

typedef struct _ALPC_PORT_ATTRIBUTES
{
    ULONG                       Flags;
    SECURITY_QUALITY_OF_SERVICE SecurityQos;
    SIZE_T                      MaxMessageLength;
    SIZE_T                      MemoryBandwidth;
    SIZE_T                      MaxPoolUsage;
    SIZE_T                      MaxSectionSize;
    SIZE_T                      MaxViewSize;
    SIZE_T                      MaxTotalSectionSize;
    ULONG                       DupObjectTypes;
#ifdef _WIN64
    ULONG                       Reserved;
#endif
} ALPC_PORT_ATTRIBUTES, *PALPC_PORT_ATTRIBUTES;

typedef enum _IO_SESSION_STATE
{
    IoSessionStateCreated = 1,
    IoSessionStateInitialized = 2,
    IoSessionStateConnected = 3,
    IoSessionStateDisconnected = 4,
    IoSessionStateDisconnectedLoggedOn = 5,
    IoSessionStateLoggedOn = 6,
    IoSessionStateLoggedOff = 7,
    IoSessionStateTerminated = 8,
    IoSessionStateMax = 9,
} IO_SESSION_STATE, *PIO_SESSION_STATE;

typedef const WNF_STATE_NAME *PCWNF_STATE_NAME;

typedef const WNF_TYPE_ID *PCWNF_TYPE_ID;

typedef struct _WNF_DELIVERY_DESCRIPTOR
{
    unsigned __int64 SubscriptionId;
    WNF_STATE_NAME   StateName;
    unsigned long    ChangeStamp;
    unsigned long    StateDataSize;
    unsigned long    EventMask;
    WNF_TYPE_ID      TypeId;
    unsigned long    StateDataOffset;
} WNF_DELIVERY_DESCRIPTOR, *PWNF_DELIVERY_DESCRIPTOR;

typedef enum _DEBUG_CONTROL_CODE
{
    SysDbgQueryModuleInformation = 0,
    SysDbgQueryTraceInformation = 1,
    SysDbgSetTracePoint = 2,
    SysDbgSetSpecialCall = 3,
    SysDbgClearSpecialCalls = 4,
    SysDbgQuerySpecialCalls = 5,
    SysDbgBreakPoint = 6,
    SysDbgQueryVersion = 7,
    SysDbgReadVirtual = 8,
    SysDbgWriteVirtual = 9,
    SysDbgReadPhysical = 10,
    SysDbgWritePhysical = 11,
    SysDbgReadControlSpace = 12,
    SysDbgWriteControlSpace = 13,
    SysDbgReadIoSpace = 14,
    SysDbgWriteIoSpace = 15,
    SysDbgReadMsr = 16,
    SysDbgWriteMsr = 17,
    SysDbgReadBusData = 18,
    SysDbgWriteBusData = 19,
    SysDbgCheckLowMemory = 20,
    SysDbgEnableKernelDebugger = 21,
    SysDbgDisableKernelDebugger = 22,
    SysDbgGetAutoKdEnable = 23,
    SysDbgSetAutoKdEnable = 24,
    SysDbgGetPrintBufferSize = 25,
    SysDbgSetPrintBufferSize = 26,
    SysDbgGetKdUmExceptionEnable = 27,
    SysDbgSetKdUmExceptionEnable = 28,
    SysDbgGetTriageDump = 29,
    SysDbgGetKdBlockEnable = 30,
    SysDbgSetKdBlockEnable = 31
} DEBUG_CONTROL_CODE, *PDEBUG_CONTROL_CODE;

typedef struct _PORT_MESSAGE
{
    union
    {
        union
        {
            struct
            {
                short DataLength;
                short TotalLength;
            } s1;
            unsigned long Length;
        };
    } u1;
    union
    {
        union
        {
            struct
            {
                short Type;
                short DataInfoOffset;
            } s2;
            unsigned long ZeroInit;
        };
    } u2;
    union
    {
        CLIENT_ID ClientId;
        double    DoNotUseThisField;
    };
    unsigned long MessageId;
    union
    {
        unsigned __int64 ClientViewSize;
        struct
        {
            unsigned long CallbackId;
            long          __PADDING__[1];
        };
    };
} PORT_MESSAGE, *PPORT_MESSAGE;

typedef struct FILE_BASIC_INFORMATION
{
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    ULONG         FileAttributes;
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION;

typedef struct _PORT_SECTION_READ
{
    ULONG Length;
    ULONG ViewSize;
    ULONG ViewBase;
} PORT_SECTION_READ, *PPORT_SECTION_READ;

typedef struct _PORT_SECTION_WRITE
{
    ULONG  Length;
    HANDLE SectionHandle;
    ULONG  SectionOffset;
    ULONG  ViewSize;
    PVOID  ViewBase;
    PVOID  TargetViewBase;
} PORT_SECTION_WRITE, *PPORT_SECTION_WRITE;

typedef enum _TIMER_TYPE
{
    NotificationTimer,
    SynchronizationTimer
} TIMER_TYPE, *PTIMER_TYPE;

typedef struct _BOOT_ENTRY
{
    ULONG Version;
    ULONG Length;
    ULONG Id;
    ULONG Attributes;
    ULONG FriendlyNameOffset;
    ULONG BootFilePathOffset;
    ULONG OsOptionsLength;
    UCHAR OsOptions[ANYSIZE_ARRAY];
} BOOT_ENTRY, *PBOOT_ENTRY;

typedef struct _EFI_DRIVER_ENTRY
{
    ULONG Version;
    ULONG Length;
    ULONG Id;
    ULONG Attributes;
    ULONG FriendlyNameOffset;
    ULONG DriverFilePathOffset;
} EFI_DRIVER_ENTRY, *PEFI_DRIVER_ENTRY;

typedef USHORT RTL_ATOM, *PRTL_ATOM;

typedef enum _TIMER_SET_INFORMATION_CLASS
{
    TimerSetCoalescableTimer,
    MaxTimerInfoClass
} TIMER_SET_INFORMATION_CLASS, *PTIMER_SET_INFORMATION_CLASS;

typedef enum _FSINFOCLASS
{
    FileFsVolumeInformation = 1,
    FileFsLabelInformation = 2,
    FileFsSizeInformation = 3,
    FileFsDeviceInformation = 4,
    FileFsAttributeInformation = 5,
    FileFsControlInformation = 6,
    FileFsFullSizeInformation = 7,
    FileFsObjectIdInformation = 8,
    FileFsDriverPathInformation = 9,
    FileFsVolumeFlagsInformation = 10,
    FileFsSectorSizeInformation = 11,
    FileFsDataCopyInformation = 12,
    FileFsMetadataSizeInformation = 13,
    FileFsFullSizeInformationEx = 14,
    FileFsMaximumInformation = 15,
} FSINFOCLASS, *PFSINFOCLASS;

typedef enum _WAIT_TYPE
{
    WaitAll = 0,
    WaitAny = 1
} WAIT_TYPE, *PWAIT_TYPE;

typedef struct _USER_STACK
{
    PVOID FixedStackBase;
    PVOID FixedStackLimit;
    PVOID ExpandableStackBase;
    PVOID ExpandableStackLimit;
    PVOID ExpandableStackBottom;
} USER_STACK, *PUSER_STACK;

typedef enum _SECTION_INFORMATION_CLASS
{
    SectionBasicInformation,
    SectionImageInformation,
} SECTION_INFORMATION_CLASS, *PSECTION_INFORMATION_CLASS;

typedef enum _APPHELPCACHESERVICECLASS
{
    ApphelpCacheServiceLookup = 0,
    ApphelpCacheServiceRemove = 1,
    ApphelpCacheServiceUpdate = 2,
    ApphelpCacheServiceFlush = 3,
    ApphelpCacheServiceDump = 4,
    ApphelpDBGReadRegistry = 0x100,
    ApphelpDBGWriteRegistry = 0x101,
} APPHELPCACHESERVICECLASS, *PAPPHELPCACHESERVICECLASS;

typedef struct _TOKEN_SECURITY_ATTRIBUTES_INFORMATION
{
    USHORT Version;
    USHORT Reserved;
    ULONG  AttributeCount;
    union
    {
        PTOKEN_SECURITY_ATTRIBUTE_V1 pAttributeV1;
    } Attribute;
} TOKEN_SECURITY_ATTRIBUTES_INFORMATION, *PTOKEN_SECURITY_ATTRIBUTES_INFORMATION;

typedef struct _FILE_IO_COMPLETION_INFORMATION
{
    PVOID           KeyContext;
    PVOID           ApcContext;
    IO_STATUS_BLOCK IoStatusBlock;
} FILE_IO_COMPLETION_INFORMATION, *PFILE_IO_COMPLETION_INFORMATION;

typedef PVOID PT2_CANCEL_PARAMETERS;

typedef enum _THREADINFOCLASS
{
    ThreadBasicInformation,
    ThreadTimes,
    ThreadPriority,
    ThreadBasePriority,
    ThreadAffinityMask,
    ThreadImpersonationToken,
    ThreadDescriptorTableEntry,
    ThreadEnableAlignmentFaultFixup,
    ThreadEventPair_Reusable,
    ThreadQuerySetWin32StartAddress,
    ThreadZeroTlsCell,
    ThreadPerformanceCount,
    ThreadAmILastThread,
    ThreadIdealProcessor,
    ThreadPriorityBoost,
    ThreadSetTlsArrayAddress,
    ThreadIsIoPending,
    ThreadHideFromDebugger,
    ThreadBreakOnTermination,
    MaxThreadInfoClass
} THREADINFOCLASS, *PTHREADINFOCLASS;

typedef enum _OBJECT_INFORMATION_CLASS
{
    ObjectBasicInformation,
    ObjectNameInformation,
    ObjectTypeInformation,
    ObjectAllTypesInformation,
    ObjectHandleInformation
} OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;

typedef enum _FILE_INFORMATION_CLASS
{
    FileDirectoryInformation = 1,
    FileFullDirectoryInformation = 2,
    FileBothDirectoryInformation = 3,
    FileBasicInformation = 4,
    FileStandardInformation = 5,
    FileInternalInformation = 6,
    FileEaInformation = 7,
    FileAccessInformation = 8,
    FileNameInformation = 9,
    FileRenameInformation = 10,
    FileLinkInformation = 11,
    FileNamesInformation = 12,
    FileDispositionInformation = 13,
    FilePositionInformation = 14,
    FileFullEaInformation = 15,
    FileModeInformation = 16,
    FileAlignmentInformation = 17,
    FileAllInformation = 18,
    FileAllocationInformation = 19,
    FileEndOfFileInformation = 20,
    FileAlternateNameInformation = 21,
    FileStreamInformation = 22,
    FilePipeInformation = 23,
    FilePipeLocalInformation = 24,
    FilePipeRemoteInformation = 25,
    FileMailslotQueryInformation = 26,
    FileMailslotSetInformation = 27,
    FileCompressionInformation = 28,
    FileObjectIdInformation = 29,
    FileCompletionInformation = 30,
    FileMoveClusterInformation = 31,
    FileQuotaInformation = 32,
    FileReparsePointInformation = 33,
    FileNetworkOpenInformation = 34,
    FileAttributeTagInformation = 35,
    FileTrackingInformation = 36,
    FileIdBothDirectoryInformation = 37,
    FileIdFullDirectoryInformation = 38,
    FileValidDataLengthInformation = 39,
    FileShortNameInformation = 40,
    FileIoCompletionNotificationInformation = 41,
    FileIoStatusBlockRangeInformation = 42,
    FileIoPriorityHintInformation = 43,
    FileSfioReserveInformation = 44,
    FileSfioVolumeInformation = 45,
    FileHardLinkInformation = 46,
    FileProcessIdsUsingFileInformation = 47,
    FileNormalizedNameInformation = 48,
    FileNetworkPhysicalNameInformation = 49,
    FileIdGlobalTxDirectoryInformation = 50,
    FileIsRemoteDeviceInformation = 51,
    FileUnusedInformation = 52,
    FileNumaNodeInformation = 53,
    FileStandardLinkInformation = 54,
    FileRemoteProtocolInformation = 55,
    FileRenameInformationBypassAccessCheck = 56,
    FileLinkInformationBypassAccessCheck = 57,
    FileVolumeNameInformation = 58,
    FileIdInformation = 59,
    FileIdExtdDirectoryInformation = 60,
    FileReplaceCompletionInformation = 61,
    FileHardLinkFullIdInformation = 62,
    FileIdExtdBothDirectoryInformation = 63,
    FileDispositionInformationEx = 64,
    FileRenameInformationEx = 65,
    FileRenameInformationExBypassAccessCheck = 66,
    FileMaximumInformation = 67,
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef enum _KEY_INFORMATION_CLASS
{
    KeyBasicInformation = 0,
    KeyNodeInformation = 1,
    KeyFullInformation = 2,
    KeyNameInformation = 3,
    KeyCachedInformation = 4,
    KeyFlagsInformation = 5,
    KeyVirtualizationInformation = 6,
    KeyHandleTagsInformation = 7,
    MaxKeyInfoClass = 8
} KEY_INFORMATION_CLASS, *PKEY_INFORMATION_CLASS;

typedef struct _OBJECT_ATTRIBUTES
{
    ULONG           Length;
    HANDLE          RootDirectory;
    PUNICODE_STRING ObjectName;
    ULONG           Attributes;
    PVOID           SecurityDescriptor;
    PVOID           SecurityQualityOfService;
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;

typedef enum _TIMER_INFORMATION_CLASS
{
    TimerBasicInformation
} TIMER_INFORMATION_CLASS, *PTIMER_INFORMATION_CLASS;

typedef struct _KCONTINUE_ARGUMENT
{
    KCONTINUE_TYPE ContinueType;
    ULONG          ContinueFlags;
    ULONGLONG      Reserved[2];
} KCONTINUE_ARGUMENT, *PKCONTINUE_ARGUMENT;
EXTERN_C NTSTATUS NtAccessCheck(IN PSECURITY_DESCRIPTOR pSecurityDescriptor,IN HANDLE ClientToken,IN ACCESS_MASK DesiaredAccess,IN PGENERIC_MAPPING GenericMapping,OUT PPRIVILEGE_SET PrivilegeSet OPTIONAL,IN OUT PULONG PrivilegeSetLength,OUT PACCESS_MASK GrantedAccess,OUT PBOOLEAN AccessStatus);
EXTERN_C NTSTATUS NtWorkerFactoryWorkerReady(IN HANDLE WorkerFactoryHandle);
EXTERN_C NTSTATUS NtAcceptConnectPort(OUT PHANDLE ServerPortHandle,IN ULONG AlternativeReceivePortHandle OPTIONAL,IN PPORT_MESSAGE ConnectionReply,IN BOOLEAN AcceptConnection,IN OUT PPORT_SECTION_WRITE ServerSharedMemory OPTIONAL,OUT PPORT_SECTION_READ ClientSharedMemory OPTIONAL);
EXTERN_C NTSTATUS NtMapUserPhysicalPagesScatter(IN PVOID VirtualAddresses,IN PULONG NumberOfPages,IN PULONG UserPfnArray OPTIONAL);
EXTERN_C NTSTATUS NtWaitForSingleObject(IN HANDLE ObjectHandle,IN BOOLEAN Alertable,IN PLARGE_INTEGER TimeOut OPTIONAL);
EXTERN_C NTSTATUS NtCallbackReturn(IN PVOID OutputBuffer OPTIONAL,IN ULONG OutputLength,IN NTSTATUS Status);
EXTERN_C NTSTATUS NtReadFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,OUT PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PVOID Buffer,IN ULONG Length,IN PLARGE_INTEGER ByteOffset OPTIONAL,IN PULONG Key OPTIONAL);
EXTERN_C NTSTATUS NtDeviceIoControlFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG IoControlCode,IN PVOID InputBuffer OPTIONAL,IN ULONG InputBufferLength,OUT PVOID OutputBuffer OPTIONAL,IN ULONG OutputBufferLength);
EXTERN_C NTSTATUS NtWriteFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PVOID Buffer,IN ULONG Length,IN PLARGE_INTEGER ByteOffset OPTIONAL,IN PULONG Key OPTIONAL);
EXTERN_C NTSTATUS NtRemoveIoCompletion(IN HANDLE IoCompletionHandle,OUT PULONG KeyContext,OUT PULONG ApcContext,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PLARGE_INTEGER Timeout OPTIONAL);
EXTERN_C NTSTATUS NtReleaseSemaphore(IN HANDLE SemaphoreHandle,IN LONG ReleaseCount,OUT PLONG PreviousCount OPTIONAL);
EXTERN_C NTSTATUS NtReplyWaitReceivePort(IN HANDLE PortHandle,OUT PVOID PortContext OPTIONAL,IN PPORT_MESSAGE ReplyMessage OPTIONAL,OUT PPORT_MESSAGE ReceiveMessage);
EXTERN_C NTSTATUS NtReplyPort(IN HANDLE PortHandle,IN PPORT_MESSAGE ReplyMessage);
EXTERN_C NTSTATUS NtSetInformationThread(IN HANDLE ThreadHandle,IN THREADINFOCLASS ThreadInformationClass,IN PVOID ThreadInformation,IN ULONG ThreadInformationLength);
EXTERN_C NTSTATUS NtSetEvent(IN HANDLE EventHandle,OUT PULONG PreviousState OPTIONAL);
EXTERN_C NTSTATUS NtClose(IN HANDLE Handle);
EXTERN_C NTSTATUS NtQueryObject(IN HANDLE Handle,IN OBJECT_INFORMATION_CLASS ObjectInformationClass,OUT PVOID ObjectInformation OPTIONAL,IN ULONG ObjectInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID FileInformation,IN ULONG Length,IN FILE_INFORMATION_CLASS FileInformationClass);
EXTERN_C NTSTATUS NtOpenKey(OUT PHANDLE KeyHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtEnumerateValueKey(IN HANDLE KeyHandle,IN ULONG Index,IN KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,OUT PVOID KeyValueInformation OPTIONAL,IN ULONG Length,OUT PULONG ResultLength);
EXTERN_C NTSTATUS NtFindAtom(IN PWSTR AtomName OPTIONAL,IN ULONG Length,OUT PUSHORT Atom OPTIONAL);
EXTERN_C NTSTATUS NtQueryDefaultLocale(IN BOOLEAN UserProfile,OUT PLCID DefaultLocaleId);
EXTERN_C NTSTATUS NtQueryKey(IN HANDLE KeyHandle,IN KEY_INFORMATION_CLASS KeyInformationClass,OUT PVOID KeyInformation OPTIONAL,IN ULONG Length,OUT PULONG ResultLength);
EXTERN_C NTSTATUS NtQueryValueKey(IN HANDLE KeyHandle,IN PUNICODE_STRING ValueName,IN KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,OUT PVOID KeyValueInformation OPTIONAL,IN ULONG Length,OUT PULONG ResultLength);
EXTERN_C NTSTATUS NtAllocateVirtualMemory(IN HANDLE ProcessHandle,IN OUT PVOID * BaseAddress,IN ULONG ZeroBits,IN OUT PSIZE_T RegionSize,IN ULONG AllocationType,IN ULONG Protect);
EXTERN_C NTSTATUS NtQueryInformationProcess(IN HANDLE ProcessHandle,IN PROCESSINFOCLASS ProcessInformationClass,OUT PVOID ProcessInformation,IN ULONG ProcessInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtWaitForMultipleObjects32(IN ULONG ObjectCount,IN PHANDLE Handles,IN WAIT_TYPE WaitType,IN BOOLEAN Alertable,IN PLARGE_INTEGER Timeout OPTIONAL);
EXTERN_C NTSTATUS NtWriteFileGather(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PFILE_SEGMENT_ELEMENT SegmentArray,IN ULONG Length,IN PLARGE_INTEGER ByteOffset,IN PULONG Key OPTIONAL);
EXTERN_C NTSTATUS NtCreateKey(OUT PHANDLE KeyHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN ULONG TitleIndex,IN PUNICODE_STRING Class OPTIONAL,IN ULONG CreateOptions,OUT PULONG Disposition OPTIONAL);
EXTERN_C NTSTATUS NtFreeVirtualMemory(IN HANDLE ProcessHandle,IN OUT PVOID * BaseAddress,IN OUT PSIZE_T RegionSize,IN ULONG FreeType);
EXTERN_C NTSTATUS NtImpersonateClientOfPort(IN HANDLE PortHandle,IN PPORT_MESSAGE Message);
EXTERN_C NTSTATUS NtReleaseMutant(IN HANDLE MutantHandle,OUT PULONG PreviousCount OPTIONAL);
EXTERN_C NTSTATUS NtQueryInformationToken(IN HANDLE TokenHandle,IN TOKEN_INFORMATION_CLASS TokenInformationClass,OUT PVOID TokenInformation,IN ULONG TokenInformationLength,OUT PULONG ReturnLength);
EXTERN_C NTSTATUS NtRequestWaitReplyPort(IN HANDLE PortHandle,IN PPORT_MESSAGE RequestMessage,OUT PPORT_MESSAGE ReplyMessage);
EXTERN_C NTSTATUS NtQueryVirtualMemory(IN HANDLE ProcessHandle,IN PVOID BaseAddress,IN MEMORY_INFORMATION_CLASS MemoryInformationClass,OUT PVOID MemoryInformation,IN SIZE_T MemoryInformationLength,OUT PSIZE_T ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtOpenThreadToken(IN HANDLE ThreadHandle,IN ACCESS_MASK DesiredAccess,IN BOOLEAN OpenAsSelf,OUT PHANDLE TokenHandle);
EXTERN_C NTSTATUS NtQueryInformationThread(IN HANDLE ThreadHandle,IN THREADINFOCLASS ThreadInformationClass,OUT PVOID ThreadInformation,IN ULONG ThreadInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtOpenProcess(OUT PHANDLE ProcessHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN PCLIENT_ID ClientId OPTIONAL);
EXTERN_C NTSTATUS NtSetInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PVOID FileInformation,IN ULONG Length,IN FILE_INFORMATION_CLASS FileInformationClass);
EXTERN_C NTSTATUS NtMapViewOfSection(IN HANDLE SectionHandle,IN HANDLE ProcessHandle,IN OUT PVOID BaseAddress,IN ULONG ZeroBits,IN SIZE_T CommitSize,IN OUT PLARGE_INTEGER SectionOffset OPTIONAL,IN OUT PSIZE_T ViewSize,IN SECTION_INHERIT InheritDisposition,IN ULONG AllocationType,IN ULONG Win32Protect);
EXTERN_C NTSTATUS NtAccessCheckAndAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN PUNICODE_STRING ObjectTypeName,IN PUNICODE_STRING ObjectName,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN ACCESS_MASK DesiredAccess,IN PGENERIC_MAPPING GenericMapping,IN BOOLEAN ObjectCreation,OUT PACCESS_MASK GrantedAccess,OUT PBOOLEAN AccessStatus,OUT PBOOLEAN GenerateOnClose);
EXTERN_C NTSTATUS NtUnmapViewOfSection(IN HANDLE ProcessHandle,IN PVOID BaseAddress);
EXTERN_C NTSTATUS NtReplyWaitReceivePortEx(IN HANDLE PortHandle,OUT PULONG PortContext OPTIONAL,IN PPORT_MESSAGE ReplyMessage OPTIONAL,OUT PPORT_MESSAGE ReceiveMessage,IN PLARGE_INTEGER Timeout OPTIONAL);
EXTERN_C NTSTATUS NtTerminateProcess(IN HANDLE ProcessHandle OPTIONAL,IN NTSTATUS ExitStatus);
EXTERN_C NTSTATUS NtSetEventBoostPriority(IN HANDLE EventHandle);
EXTERN_C NTSTATUS NtReadFileScatter(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PFILE_SEGMENT_ELEMENT SegmentArray,IN ULONG Length,IN PLARGE_INTEGER ByteOffset OPTIONAL,IN PULONG Key OPTIONAL);
EXTERN_C NTSTATUS NtOpenThreadTokenEx(IN HANDLE ThreadHandle,IN ACCESS_MASK DesiredAccess,IN BOOLEAN OpenAsSelf,IN ULONG HandleAttributes,OUT PHANDLE TokenHandle);
EXTERN_C NTSTATUS NtOpenProcessTokenEx(IN HANDLE ProcessHandle,IN ACCESS_MASK DesiredAccess,IN ULONG HandleAttributes,OUT PHANDLE TokenHandle);
EXTERN_C NTSTATUS NtQueryPerformanceCounter(OUT PLARGE_INTEGER PerformanceCounter,OUT PLARGE_INTEGER PerformanceFrequency OPTIONAL);
EXTERN_C NTSTATUS NtEnumerateKey(IN HANDLE KeyHandle,IN ULONG Index,IN KEY_INFORMATION_CLASS KeyInformationClass,OUT PVOID KeyInformation OPTIONAL,IN ULONG Length,OUT PULONG ResultLength);
EXTERN_C NTSTATUS NtOpenFile(OUT PHANDLE FileHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG ShareAccess,IN ULONG OpenOptions);
EXTERN_C NTSTATUS NtDelayExecution(IN BOOLEAN Alertable,IN PLARGE_INTEGER DelayInterval);
EXTERN_C NTSTATUS NtQueryDirectoryFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID FileInformation,IN ULONG Length,IN FILE_INFORMATION_CLASS FileInformationClass,IN BOOLEAN ReturnSingleEntry,IN PUNICODE_STRING FileName OPTIONAL,IN BOOLEAN RestartScan);
EXTERN_C NTSTATUS NtQuerySystemInformation(IN SYSTEM_INFORMATION_CLASS SystemInformationClass,IN OUT PVOID SystemInformation,IN ULONG SystemInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtOpenSection(OUT PHANDLE SectionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtQueryTimer(IN HANDLE TimerHandle,IN TIMER_INFORMATION_CLASS TimerInformationClass,OUT PVOID TimerInformation,IN ULONG TimerInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtFsControlFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG FsControlCode,IN PVOID InputBuffer OPTIONAL,IN ULONG InputBufferLength,OUT PVOID OutputBuffer OPTIONAL,IN ULONG OutputBufferLength);
EXTERN_C NTSTATUS NtWriteVirtualMemory(IN HANDLE ProcessHandle,IN PVOID BaseAddress,IN PVOID Buffer,IN SIZE_T NumberOfBytesToWrite,OUT PSIZE_T NumberOfBytesWritten OPTIONAL);
EXTERN_C NTSTATUS NtCloseObjectAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN BOOLEAN GenerateOnClose);
EXTERN_C NTSTATUS NtDuplicateObject(IN HANDLE SourceProcessHandle,IN HANDLE SourceHandle,IN HANDLE TargetProcessHandle OPTIONAL,OUT PHANDLE TargetHandle OPTIONAL,IN ACCESS_MASK DesiredAccess,IN ULONG HandleAttributes,IN ULONG Options);
EXTERN_C NTSTATUS NtQueryAttributesFile(IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PFILE_BASIC_INFORMATION FileInformation);
EXTERN_C NTSTATUS NtClearEvent(IN HANDLE EventHandle);
EXTERN_C NTSTATUS NtReadVirtualMemory(IN HANDLE ProcessHandle,IN PVOID BaseAddress OPTIONAL,OUT PVOID Buffer,IN SIZE_T BufferSize,OUT PSIZE_T NumberOfBytesRead OPTIONAL);
EXTERN_C NTSTATUS NtOpenEvent(OUT PHANDLE EventHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtAdjustPrivilegesToken(IN HANDLE TokenHandle,IN BOOLEAN DisableAllPrivileges,IN PTOKEN_PRIVILEGES NewState OPTIONAL,IN ULONG BufferLength,OUT PTOKEN_PRIVILEGES PreviousState OPTIONAL,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtDuplicateToken(IN HANDLE ExistingTokenHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN BOOLEAN EffectiveOnly,IN TOKEN_TYPE TokenType,OUT PHANDLE NewTokenHandle);
EXTERN_C NTSTATUS NtContinue(IN PCONTEXT ContextRecord,IN BOOLEAN TestAlert);
EXTERN_C NTSTATUS NtQueryDefaultUILanguage(OUT PLANGID DefaultUILanguageId);
EXTERN_C NTSTATUS NtQueueApcThread(IN HANDLE ThreadHandle,IN PKNORMAL_ROUTINE ApcRoutine,IN PVOID ApcArgument1 OPTIONAL,IN PVOID ApcArgument2 OPTIONAL,IN PVOID ApcArgument3 OPTIONAL);
EXTERN_C NTSTATUS NtYieldExecution();
EXTERN_C NTSTATUS NtAddAtom(IN PWSTR AtomName OPTIONAL,IN ULONG Length,OUT PUSHORT Atom OPTIONAL);
EXTERN_C NTSTATUS NtCreateEvent(OUT PHANDLE EventHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN EVENT_TYPE EventType,IN BOOLEAN InitialState);
EXTERN_C NTSTATUS NtQueryVolumeInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID FsInformation,IN ULONG Length,IN FSINFOCLASS FsInformationClass);
EXTERN_C NTSTATUS NtCreateSection(OUT PHANDLE SectionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PLARGE_INTEGER MaximumSize OPTIONAL,IN ULONG SectionPageProtection,IN ULONG AllocationAttributes,IN HANDLE FileHandle OPTIONAL);
EXTERN_C NTSTATUS NtFlushBuffersFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock);
EXTERN_C NTSTATUS NtApphelpCacheControl(IN APPHELPCACHESERVICECLASS Service,IN PVOID ServiceData);
EXTERN_C NTSTATUS NtCreateProcessEx(OUT PHANDLE ProcessHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN HANDLE ParentProcess,IN ULONG Flags,IN HANDLE SectionHandle OPTIONAL,IN HANDLE DebugPort OPTIONAL,IN HANDLE ExceptionPort OPTIONAL,IN ULONG JobMemberLevel);
EXTERN_C NTSTATUS NtCreateThread(OUT PHANDLE ThreadHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN HANDLE ProcessHandle,OUT PCLIENT_ID ClientId,IN PCONTEXT ThreadContext,IN PUSER_STACK InitialTeb,IN BOOLEAN CreateSuspended);
EXTERN_C NTSTATUS NtIsProcessInJob(IN HANDLE ProcessHandle,IN HANDLE JobHandle OPTIONAL);
EXTERN_C NTSTATUS NtProtectVirtualMemory(IN HANDLE ProcessHandle,IN OUT PVOID * BaseAddress,IN OUT PSIZE_T RegionSize,IN ULONG NewProtect,OUT PULONG OldProtect);
EXTERN_C NTSTATUS NtQuerySection(IN HANDLE SectionHandle,IN SECTION_INFORMATION_CLASS SectionInformationClass,OUT PVOID SectionInformation,IN ULONG SectionInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtResumeThread(IN HANDLE ThreadHandle,IN OUT PULONG PreviousSuspendCount OPTIONAL);
EXTERN_C NTSTATUS NtTerminateThread(IN HANDLE ThreadHandle,IN NTSTATUS ExitStatus);
EXTERN_C NTSTATUS NtReadRequestData(IN HANDLE PortHandle,IN PPORT_MESSAGE Message,IN ULONG DataEntryIndex,OUT PVOID Buffer,IN ULONG BufferSize,OUT PULONG NumberOfBytesRead OPTIONAL);
EXTERN_C NTSTATUS NtCreateFile(OUT PHANDLE FileHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PLARGE_INTEGER AllocationSize OPTIONAL,IN ULONG FileAttributes,IN ULONG ShareAccess,IN ULONG CreateDisposition,IN ULONG CreateOptions,IN PVOID EaBuffer OPTIONAL,IN ULONG EaLength);
EXTERN_C NTSTATUS NtQueryEvent(IN HANDLE EventHandle,IN EVENT_INFORMATION_CLASS EventInformationClass,OUT PVOID EventInformation,IN ULONG EventInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtWriteRequestData(IN HANDLE PortHandle,IN PPORT_MESSAGE Request,IN ULONG DataIndex,IN PVOID Buffer,IN ULONG Length,OUT PULONG ResultLength OPTIONAL);
EXTERN_C NTSTATUS NtOpenDirectoryObject(OUT PHANDLE DirectoryHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtAccessCheckByTypeAndAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN PUNICODE_STRING ObjectTypeName,IN PUNICODE_STRING ObjectName,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSID PrincipalSelfSid OPTIONAL,IN ACCESS_MASK DesiredAccess,IN AUDIT_EVENT_TYPE AuditType,IN ULONG Flags,IN POBJECT_TYPE_LIST ObjectTypeList OPTIONAL,IN ULONG ObjectTypeListLength,IN PGENERIC_MAPPING GenericMapping,IN BOOLEAN ObjectCreation,OUT PACCESS_MASK GrantedAccess,OUT PULONG AccessStatus,OUT PBOOLEAN GenerateOnClose);
EXTERN_C NTSTATUS NtWaitForMultipleObjects(IN ULONG Count,IN PHANDLE Handles,IN WAIT_TYPE WaitType,IN BOOLEAN Alertable,IN PLARGE_INTEGER Timeout OPTIONAL);
EXTERN_C NTSTATUS NtSetInformationObject(IN HANDLE Handle,IN OBJECT_INFORMATION_CLASS ObjectInformationClass,IN PVOID ObjectInformation,IN ULONG ObjectInformationLength);
EXTERN_C NTSTATUS NtCancelIoFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock);
EXTERN_C NTSTATUS NtTraceEvent(IN HANDLE TraceHandle,IN ULONG Flags,IN ULONG FieldSize,IN PVOID Fields);
EXTERN_C NTSTATUS NtPowerInformation(IN POWER_INFORMATION_LEVEL InformationLevel,IN PVOID InputBuffer OPTIONAL,IN ULONG InputBufferLength,OUT PVOID OutputBuffer OPTIONAL,IN ULONG OutputBufferLength);
EXTERN_C NTSTATUS NtSetValueKey(IN HANDLE KeyHandle,IN PUNICODE_STRING ValueName,IN ULONG TitleIndex OPTIONAL,IN ULONG Type,IN PVOID SystemData,IN ULONG DataSize);
EXTERN_C NTSTATUS NtCancelTimer(IN HANDLE TimerHandle,OUT PBOOLEAN CurrentState OPTIONAL);
EXTERN_C NTSTATUS NtSetTimer(IN HANDLE TimerHandle,IN PLARGE_INTEGER DueTime,IN PTIMER_APC_ROUTINE TimerApcRoutine OPTIONAL,IN PVOID TimerContext OPTIONAL,IN BOOLEAN ResumeTimer,IN LONG Period OPTIONAL,OUT PBOOLEAN PreviousState OPTIONAL);
EXTERN_C NTSTATUS NtAccessCheckByType(IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSID PrincipalSelfSid OPTIONAL,IN HANDLE ClientToken,IN ULONG DesiredAccess,IN POBJECT_TYPE_LIST ObjectTypeList,IN ULONG ObjectTypeListLength,IN PGENERIC_MAPPING GenericMapping,OUT PPRIVILEGE_SET PrivilegeSet,IN OUT PULONG PrivilegeSetLength,OUT PACCESS_MASK GrantedAccess,OUT PULONG AccessStatus);
EXTERN_C NTSTATUS NtAccessCheckByTypeResultList(IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSID PrincipalSelfSid OPTIONAL,IN HANDLE ClientToken,IN ACCESS_MASK DesiredAccess,IN POBJECT_TYPE_LIST ObjectTypeList,IN ULONG ObjectTypeListLength,IN PGENERIC_MAPPING GenericMapping,OUT PPRIVILEGE_SET PrivilegeSet,IN OUT PULONG PrivilegeSetLength,OUT PACCESS_MASK GrantedAccess,OUT PULONG AccessStatus);
EXTERN_C NTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN PUNICODE_STRING ObjectTypeName,IN PUNICODE_STRING ObjectName,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSID PrincipalSelfSid OPTIONAL,IN ACCESS_MASK DesiredAccess,IN AUDIT_EVENT_TYPE AuditType,IN ULONG Flags,IN POBJECT_TYPE_LIST ObjectTypeList OPTIONAL,IN ULONG ObjectTypeListLength,IN PGENERIC_MAPPING GenericMapping,IN BOOLEAN ObjectCreation,OUT PACCESS_MASK GrantedAccess,OUT PULONG AccessStatus,OUT PULONG GenerateOnClose);
EXTERN_C NTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN HANDLE ClientToken,IN PUNICODE_STRING ObjectTypeName,IN PUNICODE_STRING ObjectName,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSID PrincipalSelfSid OPTIONAL,IN ACCESS_MASK DesiredAccess,IN AUDIT_EVENT_TYPE AuditType,IN ULONG Flags,IN POBJECT_TYPE_LIST ObjectTypeList OPTIONAL,IN ULONG ObjectTypeListLength,IN PGENERIC_MAPPING GenericMapping,IN BOOLEAN ObjectCreation,OUT PACCESS_MASK GrantedAccess,OUT PULONG AccessStatus,OUT PULONG GenerateOnClose);
EXTERN_C NTSTATUS NtAcquireProcessActivityReference();
EXTERN_C NTSTATUS NtAddAtomEx(IN PWSTR AtomName,IN ULONG Length,IN PRTL_ATOM Atom,IN ULONG Flags);
EXTERN_C NTSTATUS NtAddBootEntry(IN PBOOT_ENTRY BootEntry,OUT PULONG Id OPTIONAL);
EXTERN_C NTSTATUS NtAddDriverEntry(IN PEFI_DRIVER_ENTRY DriverEntry,OUT PULONG Id OPTIONAL);
EXTERN_C NTSTATUS NtAdjustGroupsToken(IN HANDLE TokenHandle,IN BOOLEAN ResetToDefault,IN PTOKEN_GROUPS NewState OPTIONAL,IN ULONG BufferLength OPTIONAL,OUT PTOKEN_GROUPS PreviousState OPTIONAL,OUT PULONG ReturnLength);
EXTERN_C NTSTATUS NtAdjustTokenClaimsAndDeviceGroups(IN HANDLE TokenHandle,IN BOOLEAN UserResetToDefault,IN BOOLEAN DeviceResetToDefault,IN BOOLEAN DeviceGroupsResetToDefault,IN PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewUserState OPTIONAL,IN PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewDeviceState OPTIONAL,IN PTOKEN_GROUPS NewDeviceGroupsState OPTIONAL,IN ULONG UserBufferLength,OUT PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousUserState OPTIONAL,IN ULONG DeviceBufferLength,OUT PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousDeviceState OPTIONAL,IN ULONG DeviceGroupsBufferLength,OUT PTOKEN_GROUPS PreviousDeviceGroups OPTIONAL,OUT PULONG UserReturnLength OPTIONAL,OUT PULONG DeviceReturnLength OPTIONAL,OUT PULONG DeviceGroupsReturnBufferLength OPTIONAL);
EXTERN_C NTSTATUS NtAlertResumeThread(IN HANDLE ThreadHandle,OUT PULONG PreviousSuspendCount OPTIONAL);
EXTERN_C NTSTATUS NtAlertThread(IN HANDLE ThreadHandle);
EXTERN_C NTSTATUS NtAlertThreadByThreadId(IN ULONG ThreadId);
EXTERN_C NTSTATUS NtAllocateLocallyUniqueId(OUT PLUID Luid);
EXTERN_C NTSTATUS NtAllocateReserveObject(OUT PHANDLE MemoryReserveHandle,IN POBJECT_ATTRIBUTES ObjectAttributes,IN MEMORY_RESERVE_TYPE Type);
EXTERN_C NTSTATUS NtAllocateUserPhysicalPages(IN HANDLE ProcessHandle,IN OUT PULONG NumberOfPages,OUT PULONG UserPfnArray);
EXTERN_C NTSTATUS NtAllocateUuids(OUT PLARGE_INTEGER Time,OUT PULONG Range,OUT PULONG Sequence,OUT PUCHAR Seed);
EXTERN_C NTSTATUS NtAllocateVirtualMemoryEx(IN HANDLE ProcessHandle,IN OUT PPVOID lpAddress,IN ULONG_PTR ZeroBits,IN OUT PSIZE_T pSize,IN ULONG flAllocationType,IN OUT PVOID DataBuffer OPTIONAL,IN ULONG DataCount);
EXTERN_C NTSTATUS NtAlpcAcceptConnectPort(OUT PHANDLE PortHandle,IN HANDLE ConnectionPortHandle,IN ULONG Flags,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PALPC_PORT_ATTRIBUTES PortAttributes OPTIONAL,IN PVOID PortContext OPTIONAL,IN PPORT_MESSAGE ConnectionRequest,IN OUT PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes OPTIONAL,IN BOOLEAN AcceptConnection);
EXTERN_C NTSTATUS NtAlpcCancelMessage(IN HANDLE PortHandle,IN ULONG Flags,IN PALPC_CONTEXT_ATTR MessageContext);
EXTERN_C NTSTATUS NtAlpcConnectPort(OUT PHANDLE PortHandle,IN PUNICODE_STRING PortName,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PALPC_PORT_ATTRIBUTES PortAttributes OPTIONAL,IN ULONG Flags,IN PSID RequiredServerSid OPTIONAL,IN OUT PPORT_MESSAGE ConnectionMessage OPTIONAL,IN OUT PULONG BufferLength OPTIONAL,IN OUT PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes OPTIONAL,IN OUT PALPC_MESSAGE_ATTRIBUTES InMessageAttributes OPTIONAL,IN PLARGE_INTEGER Timeout OPTIONAL);
EXTERN_C NTSTATUS NtAlpcConnectPortEx(OUT PHANDLE PortHandle,IN POBJECT_ATTRIBUTES ConnectionPortObjectAttributes,IN POBJECT_ATTRIBUTES ClientPortObjectAttributes OPTIONAL,IN PALPC_PORT_ATTRIBUTES PortAttributes OPTIONAL,IN ULONG Flags,IN PSECURITY_DESCRIPTOR ServerSecurityRequirements OPTIONAL,IN OUT PPORT_MESSAGE ConnectionMessage OPTIONAL,IN OUT PSIZE_T BufferLength OPTIONAL,IN OUT PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes OPTIONAL,IN OUT PALPC_MESSAGE_ATTRIBUTES InMessageAttributes OPTIONAL,IN PLARGE_INTEGER Timeout OPTIONAL);
EXTERN_C NTSTATUS NtAlpcCreatePort(OUT PHANDLE PortHandle,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PALPC_PORT_ATTRIBUTES PortAttributes OPTIONAL);
EXTERN_C NTSTATUS NtAlpcCreatePortSection(IN HANDLE PortHandle,IN ULONG Flags,IN HANDLE SectionHandle OPTIONAL,IN SIZE_T SectionSize,OUT PHANDLE AlpcSectionHandle,OUT PSIZE_T ActualSectionSize);
EXTERN_C NTSTATUS NtAlpcCreateResourceReserve(IN HANDLE PortHandle,IN ULONG Flags,IN SIZE_T MessageSize,OUT PHANDLE ResourceId);
EXTERN_C NTSTATUS NtAlpcCreateSectionView(IN HANDLE PortHandle,IN ULONG Flags,IN OUT PALPC_DATA_VIEW_ATTR ViewAttributes);
EXTERN_C NTSTATUS NtAlpcCreateSecurityContext(IN HANDLE PortHandle,IN ULONG Flags,IN OUT PALPC_SECURITY_ATTR SecurityAttribute);
EXTERN_C NTSTATUS NtAlpcDeletePortSection(IN HANDLE PortHandle,IN ULONG Flags,IN HANDLE SectionHandle);
EXTERN_C NTSTATUS NtAlpcDeleteResourceReserve(IN HANDLE PortHandle,IN ULONG Flags,IN HANDLE ResourceId);
EXTERN_C NTSTATUS NtAlpcDeleteSectionView(IN HANDLE PortHandle,IN ULONG Flags,IN PVOID ViewBase);
EXTERN_C NTSTATUS NtAlpcDeleteSecurityContext(IN HANDLE PortHandle,IN ULONG Flags,IN HANDLE ContextHandle);
EXTERN_C NTSTATUS NtAlpcDisconnectPort(IN HANDLE PortHandle,IN ULONG Flags);
EXTERN_C NTSTATUS NtAlpcImpersonateClientContainerOfPort(IN HANDLE PortHandle,IN PPORT_MESSAGE Message,IN ULONG Flags);
EXTERN_C NTSTATUS NtAlpcImpersonateClientOfPort(IN HANDLE PortHandle,IN PPORT_MESSAGE Message,IN PVOID Flags);
EXTERN_C NTSTATUS NtAlpcOpenSenderProcess(OUT PHANDLE ProcessHandle,IN HANDLE PortHandle,IN PPORT_MESSAGE PortMessage,IN ULONG Flags,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtAlpcOpenSenderThread(OUT PHANDLE ThreadHandle,IN HANDLE PortHandle,IN PPORT_MESSAGE PortMessage,IN ULONG Flags,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtAlpcQueryInformation(IN HANDLE PortHandle OPTIONAL,IN ALPC_PORT_INFORMATION_CLASS PortInformationClass,IN OUT PVOID PortInformation,IN ULONG Length,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtAlpcQueryInformationMessage(IN HANDLE PortHandle,IN PPORT_MESSAGE PortMessage,IN ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass,OUT PVOID MessageInformation OPTIONAL,IN ULONG Length,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtAlpcRevokeSecurityContext(IN HANDLE PortHandle,IN ULONG Flags,IN HANDLE ContextHandle);
EXTERN_C NTSTATUS NtAlpcSendWaitReceivePort(IN HANDLE PortHandle,IN ULONG Flags,IN PPORT_MESSAGE SendMessage OPTIONAL,IN OUT PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes OPTIONAL,OUT PPORT_MESSAGE ReceiveMessage OPTIONAL,IN OUT PSIZE_T BufferLength OPTIONAL,IN OUT PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes OPTIONAL,IN PLARGE_INTEGER Timeout OPTIONAL);
EXTERN_C NTSTATUS NtAlpcSetInformation(IN HANDLE PortHandle,IN ALPC_PORT_INFORMATION_CLASS PortInformationClass,IN PVOID PortInformation OPTIONAL,IN ULONG Length);
EXTERN_C NTSTATUS NtAreMappedFilesTheSame(IN PVOID File1MappedAsAnImage,IN PVOID File2MappedAsFile);
EXTERN_C NTSTATUS NtAssignProcessToJobObject(IN HANDLE JobHandle,IN HANDLE ProcessHandle);
EXTERN_C NTSTATUS NtAssociateWaitCompletionPacket(IN HANDLE WaitCompletionPacketHandle,IN HANDLE IoCompletionHandle,IN HANDLE TargetObjectHandle,IN PVOID KeyContext OPTIONAL,IN PVOID ApcContext OPTIONAL,IN NTSTATUS IoStatus,IN ULONG_PTR IoStatusInformation,OUT PBOOLEAN AlreadySignaled OPTIONAL);
EXTERN_C NTSTATUS NtCallEnclave(IN PENCLAVE_ROUTINE Routine,IN PVOID Parameter,IN BOOLEAN WaitForThread,IN OUT PVOID ReturnValue OPTIONAL);
EXTERN_C NTSTATUS NtCancelIoFileEx(IN HANDLE FileHandle,IN PIO_STATUS_BLOCK IoRequestToCancel OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock);
EXTERN_C NTSTATUS NtCancelSynchronousIoFile(IN HANDLE ThreadHandle,IN PIO_STATUS_BLOCK IoRequestToCancel OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock);
EXTERN_C NTSTATUS NtCancelTimer2(IN HANDLE TimerHandle,IN PT2_CANCEL_PARAMETERS Parameters);
EXTERN_C NTSTATUS NtCancelWaitCompletionPacket(IN HANDLE WaitCompletionPacketHandle,IN BOOLEAN RemoveSignaledPacket);
EXTERN_C NTSTATUS NtCommitComplete(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL);
EXTERN_C NTSTATUS NtCommitEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL);
EXTERN_C NTSTATUS NtCommitRegistryTransaction(IN HANDLE RegistryHandle,IN BOOL Wait);
EXTERN_C NTSTATUS NtCommitTransaction(IN HANDLE TransactionHandle,IN BOOLEAN Wait);
EXTERN_C NTSTATUS NtCompactKeys(IN ULONG Count,IN HANDLE KeyArray);
EXTERN_C NTSTATUS NtCompareObjects(IN HANDLE FirstObjectHandle,IN HANDLE SecondObjectHandle);
EXTERN_C NTSTATUS NtCompareSigningLevels(IN ULONG UnknownParameter1,IN ULONG UnknownParameter2);
EXTERN_C NTSTATUS NtCompareTokens(IN HANDLE FirstTokenHandle,IN HANDLE SecondTokenHandle,OUT PBOOLEAN Equal);
EXTERN_C NTSTATUS NtCompleteConnectPort(IN HANDLE PortHandle);
EXTERN_C NTSTATUS NtCompressKey(IN HANDLE Key);
EXTERN_C NTSTATUS NtConnectPort(OUT PHANDLE PortHandle,IN PUNICODE_STRING PortName,IN PSECURITY_QUALITY_OF_SERVICE SecurityQos,IN OUT PPORT_SECTION_WRITE ClientView OPTIONAL,IN OUT PPORT_SECTION_READ ServerView OPTIONAL,OUT PULONG MaxMessageLength OPTIONAL,IN OUT PVOID ConnectionInformation OPTIONAL,IN OUT PULONG ConnectionInformationLength OPTIONAL);
EXTERN_C NTSTATUS NtConvertBetweenAuxiliaryCounterAndPerformanceCounter(IN ULONG UnknownParameter1,IN ULONG UnknownParameter2,IN ULONG UnknownParameter3,IN ULONG UnknownParameter4);
EXTERN_C NTSTATUS NtCreateDebugObject(OUT PHANDLE DebugObjectHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN ULONG Flags);
EXTERN_C NTSTATUS NtCreateDirectoryObject(OUT PHANDLE DirectoryHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtCreateDirectoryObjectEx(OUT PHANDLE DirectoryHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN HANDLE ShadowDirectoryHandle,IN ULONG Flags);
EXTERN_C NTSTATUS NtCreateEnclave(IN HANDLE ProcessHandle,IN OUT PVOID BaseAddress,IN ULONG_PTR ZeroBits,IN SIZE_T Size,IN SIZE_T InitialCommitment,IN ULONG EnclaveType,IN PVOID EnclaveInformation,IN ULONG EnclaveInformationLength,OUT PULONG EnclaveError OPTIONAL);
EXTERN_C NTSTATUS NtCreateEnlistment(OUT PHANDLE EnlistmentHandle,IN ACCESS_MASK DesiredAccess,IN HANDLE ResourceManagerHandle,IN HANDLE TransactionHandle,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN ULONG CreateOptions OPTIONAL,IN NOTIFICATION_MASK NotificationMask,IN PVOID EnlistmentKey OPTIONAL);
EXTERN_C NTSTATUS NtCreateEventPair(OUT PHANDLE EventPairHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL);
EXTERN_C NTSTATUS NtCreateIRTimer(OUT PHANDLE TimerHandle,IN ACCESS_MASK DesiredAccess);
EXTERN_C NTSTATUS NtCreateIoCompletion(OUT PHANDLE IoCompletionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN ULONG Count OPTIONAL);
EXTERN_C NTSTATUS NtCreateJobObject(OUT PHANDLE JobHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL);
EXTERN_C NTSTATUS NtCreateJobSet(IN ULONG NumJob,IN PJOB_SET_ARRAY UserJobSet,IN ULONG Flags);
EXTERN_C NTSTATUS NtCreateKeyTransacted(OUT PHANDLE KeyHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN ULONG TitleIndex,IN PUNICODE_STRING Class OPTIONAL,IN ULONG CreateOptions,IN HANDLE TransactionHandle,OUT PULONG Disposition OPTIONAL);
EXTERN_C NTSTATUS NtCreateKeyedEvent(OUT PHANDLE KeyedEventHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN ULONG Flags);
EXTERN_C NTSTATUS NtCreateLowBoxToken(OUT PHANDLE TokenHandle,IN HANDLE ExistingTokenHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PSID PackageSid,IN ULONG CapabilityCount,IN PSID_AND_ATTRIBUTES Capabilities OPTIONAL,IN ULONG HandleCount,IN HANDLE Handles OPTIONAL);
EXTERN_C NTSTATUS NtCreateMailslotFile(OUT PHANDLE FileHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG CreateOptions,IN ULONG MailslotQuota,IN ULONG MaximumMessageSize,IN PLARGE_INTEGER ReadTimeout);
EXTERN_C NTSTATUS NtCreateMutant(OUT PHANDLE MutantHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN BOOLEAN InitialOwner);
EXTERN_C NTSTATUS NtCreateNamedPipeFile(OUT PHANDLE FileHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG ShareAccess,IN ULONG CreateDisposition,IN ULONG CreateOptions,IN BOOLEAN NamedPipeType,IN BOOLEAN ReadMode,IN BOOLEAN CompletionMode,IN ULONG MaximumInstances,IN ULONG InboundQuota,IN ULONG OutboundQuota,IN PLARGE_INTEGER DefaultTimeout OPTIONAL);
EXTERN_C NTSTATUS NtCreatePagingFile(IN PUNICODE_STRING PageFileName,IN PULARGE_INTEGER MinimumSize,IN PULARGE_INTEGER MaximumSize,IN ULONG Priority);
EXTERN_C NTSTATUS NtCreatePartition(OUT PHANDLE PartitionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN ULONG PreferredNode);
EXTERN_C NTSTATUS NtCreatePort(OUT PHANDLE PortHandle,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN ULONG MaxConnectionInfoLength,IN ULONG MaxMessageLength,IN ULONG MaxPoolUsage OPTIONAL);
EXTERN_C NTSTATUS NtCreatePrivateNamespace(OUT PHANDLE NamespaceHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN PVOID BoundaryDescriptor);
EXTERN_C NTSTATUS NtCreateProcess(OUT PHANDLE ProcessHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN HANDLE ParentProcess,IN BOOLEAN InheritObjectTable,IN HANDLE SectionHandle OPTIONAL,IN HANDLE DebugPort OPTIONAL,IN HANDLE ExceptionPort OPTIONAL);
EXTERN_C NTSTATUS NtCreateProfile(OUT PHANDLE ProfileHandle,IN HANDLE Process OPTIONAL,IN PVOID ProfileBase,IN ULONG ProfileSize,IN ULONG BucketSize,IN PULONG Buffer,IN ULONG BufferSize,IN KPROFILE_SOURCE ProfileSource,IN ULONG Affinity);
EXTERN_C NTSTATUS NtCreateProfileEx(OUT PHANDLE ProfileHandle,IN HANDLE Process OPTIONAL,IN PVOID ProfileBase,IN SIZE_T ProfileSize,IN ULONG BucketSize,IN PULONG Buffer,IN ULONG BufferSize,IN KPROFILE_SOURCE ProfileSource,IN USHORT GroupCount,IN PGROUP_AFFINITY GroupAffinity);
EXTERN_C NTSTATUS NtCreateRegistryTransaction(OUT PHANDLE Handle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN DWORD Flags);
EXTERN_C NTSTATUS NtCreateResourceManager(OUT PHANDLE ResourceManagerHandle,IN ACCESS_MASK DesiredAccess,IN HANDLE TmHandle,IN LPGUID RmGuid,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN ULONG CreateOptions OPTIONAL,IN PUNICODE_STRING Description OPTIONAL);
EXTERN_C NTSTATUS NtCreateSemaphore(OUT PHANDLE SemaphoreHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN LONG InitialCount,IN LONG MaximumCount);
EXTERN_C NTSTATUS NtCreateSymbolicLinkObject(OUT PHANDLE LinkHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN PUNICODE_STRING LinkTarget);
EXTERN_C NTSTATUS NtCreateThreadEx(OUT PHANDLE ThreadHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN HANDLE ProcessHandle,IN PVOID StartRoutine,IN PVOID Argument OPTIONAL,IN ULONG CreateFlags,IN SIZE_T ZeroBits,IN SIZE_T StackSize,IN SIZE_T MaximumStackSize,IN PPS_ATTRIBUTE_LIST AttributeList OPTIONAL);
EXTERN_C NTSTATUS NtCreateTimer(OUT PHANDLE TimerHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN TIMER_TYPE TimerType);
EXTERN_C NTSTATUS NtCreateTimer2(OUT PHANDLE TimerHandle,IN PVOID Reserved1 OPTIONAL,IN PVOID Reserved2 OPTIONAL,IN ULONG Attributes,IN ACCESS_MASK DesiredAccess);
EXTERN_C NTSTATUS NtCreateToken(OUT PHANDLE TokenHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN TOKEN_TYPE TokenType,IN PLUID AuthenticationId,IN PLARGE_INTEGER ExpirationTime,IN PTOKEN_USER User,IN PTOKEN_GROUPS Groups,IN PTOKEN_PRIVILEGES Privileges,IN PTOKEN_OWNER Owner OPTIONAL,IN PTOKEN_PRIMARY_GROUP PrimaryGroup,IN PTOKEN_DEFAULT_DACL DefaultDacl OPTIONAL,IN PTOKEN_SOURCE TokenSource);
EXTERN_C NTSTATUS NtCreateTokenEx(OUT PHANDLE TokenHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN TOKEN_TYPE TokenType,IN PLUID AuthenticationId,IN PLARGE_INTEGER ExpirationTime,IN PTOKEN_USER User,IN PTOKEN_GROUPS Groups,IN PTOKEN_PRIVILEGES Privileges,IN PTOKEN_SECURITY_ATTRIBUTES_INFORMATION UserAttributes OPTIONAL,IN PTOKEN_SECURITY_ATTRIBUTES_INFORMATION DeviceAttributes OPTIONAL,IN PTOKEN_GROUPS DeviceGroups OPTIONAL,IN PTOKEN_MANDATORY_POLICY TokenMandatoryPolicy OPTIONAL,IN PTOKEN_OWNER Owner OPTIONAL,IN PTOKEN_PRIMARY_GROUP PrimaryGroup,IN PTOKEN_DEFAULT_DACL DefaultDacl OPTIONAL,IN PTOKEN_SOURCE TokenSource);
EXTERN_C NTSTATUS NtCreateTransaction(OUT PHANDLE TransactionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN LPGUID Uow OPTIONAL,IN HANDLE TmHandle OPTIONAL,IN ULONG CreateOptions OPTIONAL,IN ULONG IsolationLevel OPTIONAL,IN ULONG IsolationFlags OPTIONAL,IN PLARGE_INTEGER Timeout OPTIONAL,IN PUNICODE_STRING Description OPTIONAL);
EXTERN_C NTSTATUS NtCreateTransactionManager(OUT PHANDLE TmHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PUNICODE_STRING LogFileName OPTIONAL,IN ULONG CreateOptions OPTIONAL,IN ULONG CommitStrength OPTIONAL);
EXTERN_C NTSTATUS NtCreateUserProcess(OUT PHANDLE ProcessHandle,OUT PHANDLE ThreadHandle,IN ACCESS_MASK ProcessDesiredAccess,IN ACCESS_MASK ThreadDesiredAccess,IN POBJECT_ATTRIBUTES ProcessObjectAttributes OPTIONAL,IN POBJECT_ATTRIBUTES ThreadObjectAttributes OPTIONAL,IN ULONG ProcessFlags,IN ULONG ThreadFlags,IN PVOID ProcessParameters OPTIONAL,IN OUT PPS_CREATE_INFO CreateInfo,IN PPS_ATTRIBUTE_LIST AttributeList OPTIONAL);
EXTERN_C NTSTATUS NtCreateWaitCompletionPacket(OUT PHANDLE WaitCompletionPacketHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL);
EXTERN_C NTSTATUS NtCreateWaitablePort(OUT PHANDLE PortHandle,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN ULONG MaxConnectionInfoLength,IN ULONG MaxMessageLength,IN ULONG MaxPoolUsage OPTIONAL);
EXTERN_C NTSTATUS NtCreateWnfStateName(OUT PCWNF_STATE_NAME StateName,IN WNF_STATE_NAME_LIFETIME NameLifetime,IN WNF_DATA_SCOPE DataScope,IN BOOLEAN PersistData,IN PCWNF_TYPE_ID TypeId OPTIONAL,IN ULONG MaximumStateSize,IN PSECURITY_DESCRIPTOR SecurityDescriptor);
EXTERN_C NTSTATUS NtCreateWorkerFactory(OUT PHANDLE WorkerFactoryHandleReturn,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN HANDLE CompletionPortHandle,IN HANDLE WorkerProcessHandle,IN PVOID StartRoutine,IN PVOID StartParameter OPTIONAL,IN ULONG MaxThreadCount OPTIONAL,IN SIZE_T StackReserve OPTIONAL,IN SIZE_T StackCommit OPTIONAL);
EXTERN_C NTSTATUS NtDebugActiveProcess(IN HANDLE ProcessHandle,IN HANDLE DebugObjectHandle);
EXTERN_C NTSTATUS NtDebugContinue(IN HANDLE DebugObjectHandle,IN PCLIENT_ID ClientId,IN NTSTATUS ContinueStatus);
EXTERN_C NTSTATUS NtDeleteAtom(IN USHORT Atom);
EXTERN_C NTSTATUS NtDeleteBootEntry(IN ULONG Id);
EXTERN_C NTSTATUS NtDeleteDriverEntry(IN ULONG Id);
EXTERN_C NTSTATUS NtDeleteFile(IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtDeleteKey(IN HANDLE KeyHandle);
EXTERN_C NTSTATUS NtDeleteObjectAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN BOOLEAN GenerateOnClose);
EXTERN_C NTSTATUS NtDeletePrivateNamespace(IN HANDLE NamespaceHandle);
EXTERN_C NTSTATUS NtDeleteValueKey(IN HANDLE KeyHandle,IN PUNICODE_STRING ValueName);
EXTERN_C NTSTATUS NtDeleteWnfStateData(IN PCWNF_STATE_NAME StateName,IN PVOID ExplicitScope OPTIONAL);
EXTERN_C NTSTATUS NtDeleteWnfStateName(IN PCWNF_STATE_NAME StateName);
EXTERN_C NTSTATUS NtDisableLastKnownGood();
EXTERN_C NTSTATUS NtDisplayString(IN PUNICODE_STRING String);
EXTERN_C NTSTATUS NtDrawText(IN PUNICODE_STRING String);
EXTERN_C NTSTATUS NtEnableLastKnownGood();
EXTERN_C NTSTATUS NtEnumerateBootEntries(OUT PVOID Buffer OPTIONAL,IN OUT PULONG BufferLength);
EXTERN_C NTSTATUS NtEnumerateDriverEntries(OUT PVOID Buffer OPTIONAL,IN OUT PULONG BufferLength);
EXTERN_C NTSTATUS NtEnumerateSystemEnvironmentValuesEx(IN ULONG InformationClass,OUT PVOID Buffer,IN OUT PULONG BufferLength);
EXTERN_C NTSTATUS NtEnumerateTransactionObject(IN HANDLE RootObjectHandle OPTIONAL,IN KTMOBJECT_TYPE QueryType,IN OUT PKTMOBJECT_CURSOR ObjectCursor,IN ULONG ObjectCursorLength,OUT PULONG ReturnLength);
EXTERN_C NTSTATUS NtExtendSection(IN HANDLE SectionHandle,IN OUT PLARGE_INTEGER NewSectionSize);
EXTERN_C NTSTATUS NtFilterBootOption(IN FILTER_BOOT_OPTION_OPERATION FilterOperation,IN ULONG ObjectType,IN ULONG ElementType,IN PVOID SystemData OPTIONAL,IN ULONG DataSize);
EXTERN_C NTSTATUS NtFilterToken(IN HANDLE ExistingTokenHandle,IN ULONG Flags,IN PTOKEN_GROUPS SidsToDisable OPTIONAL,IN PTOKEN_PRIVILEGES PrivilegesToDelete OPTIONAL,IN PTOKEN_GROUPS RestrictedSids OPTIONAL,OUT PHANDLE NewTokenHandle);
EXTERN_C NTSTATUS NtFilterTokenEx(IN HANDLE TokenHandle,IN ULONG Flags,IN PTOKEN_GROUPS SidsToDisable OPTIONAL,IN PTOKEN_PRIVILEGES PrivilegesToDelete OPTIONAL,IN PTOKEN_GROUPS RestrictedSids OPTIONAL,IN ULONG DisableUserClaimsCount,IN PUNICODE_STRING UserClaimsToDisable OPTIONAL,IN ULONG DisableDeviceClaimsCount,IN PUNICODE_STRING DeviceClaimsToDisable OPTIONAL,IN PTOKEN_GROUPS DeviceGroupsToDisable OPTIONAL,IN PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedUserAttributes OPTIONAL,IN PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedDeviceAttributes OPTIONAL,IN PTOKEN_GROUPS RestrictedDeviceGroups OPTIONAL,OUT PHANDLE NewTokenHandle);
EXTERN_C NTSTATUS NtFlushBuffersFileEx(IN HANDLE FileHandle,IN ULONG Flags,IN PVOID Parameters,IN ULONG ParametersSize,OUT PIO_STATUS_BLOCK IoStatusBlock);
EXTERN_C NTSTATUS NtFlushInstallUILanguage(IN LANGID InstallUILanguage,IN ULONG SetComittedFlag);
EXTERN_C NTSTATUS NtFlushInstructionCache(IN HANDLE ProcessHandle,IN PVOID BaseAddress OPTIONAL,IN ULONG Length);
EXTERN_C NTSTATUS NtFlushKey(IN HANDLE KeyHandle);
EXTERN_C NTSTATUS NtFlushProcessWriteBuffers();
EXTERN_C NTSTATUS NtFlushVirtualMemory(IN HANDLE ProcessHandle,IN OUT PVOID BaseAddress,IN OUT PULONG RegionSize,OUT PIO_STATUS_BLOCK IoStatusBlock);
EXTERN_C NTSTATUS NtFlushWriteBuffer();
EXTERN_C NTSTATUS NtFreeUserPhysicalPages(IN HANDLE ProcessHandle,IN OUT PULONG NumberOfPages,IN PULONG UserPfnArray);
EXTERN_C NTSTATUS NtFreezeRegistry(IN ULONG TimeOutInSeconds);
EXTERN_C NTSTATUS NtFreezeTransactions(IN PLARGE_INTEGER FreezeTimeout,IN PLARGE_INTEGER ThawTimeout);
EXTERN_C NTSTATUS NtGetCachedSigningLevel(IN HANDLE File,OUT PULONG Flags,OUT PSE_SIGNING_LEVEL SigningLevel,OUT PUCHAR Thumbprint OPTIONAL,IN OUT PULONG ThumbprintSize OPTIONAL,OUT PULONG ThumbprintAlgorithm OPTIONAL);
EXTERN_C NTSTATUS NtGetCompleteWnfStateSubscription(IN PCWNF_STATE_NAME OldDescriptorStateName OPTIONAL,IN PLARGE_INTEGER OldSubscriptionId OPTIONAL,IN ULONG OldDescriptorEventMask OPTIONAL,IN ULONG OldDescriptorStatus OPTIONAL,OUT PWNF_DELIVERY_DESCRIPTOR NewDeliveryDescriptor,IN ULONG DescriptorSize);
EXTERN_C NTSTATUS NtGetContextThread(IN HANDLE ThreadHandle,IN OUT PCONTEXT ThreadContext);
EXTERN_C NTSTATUS NtGetCurrentProcessorNumber();
EXTERN_C NTSTATUS NtGetCurrentProcessorNumberEx(OUT PULONG ProcNumber OPTIONAL);
EXTERN_C NTSTATUS NtGetDevicePowerState(IN HANDLE Device,OUT PDEVICE_POWER_STATE State);
EXTERN_C NTSTATUS NtGetMUIRegistryInfo(IN ULONG Flags,IN OUT PULONG DataSize,OUT PVOID SystemData);
EXTERN_C NTSTATUS NtGetNextProcess(IN HANDLE ProcessHandle,IN ACCESS_MASK DesiredAccess,IN ULONG HandleAttributes,IN ULONG Flags,OUT PHANDLE NewProcessHandle);
EXTERN_C NTSTATUS NtGetNextThread(IN HANDLE ProcessHandle,IN HANDLE ThreadHandle,IN ACCESS_MASK DesiredAccess,IN ULONG HandleAttributes,IN ULONG Flags,OUT PHANDLE NewThreadHandle);
EXTERN_C NTSTATUS NtGetNlsSectionPtr(IN ULONG SectionType,IN ULONG SectionData,IN PVOID ContextData,OUT PVOID SectionPointer,OUT PULONG SectionSize);
EXTERN_C NTSTATUS NtGetNotificationResourceManager(IN HANDLE ResourceManagerHandle,OUT PTRANSACTION_NOTIFICATION TransactionNotification,IN ULONG NotificationLength,IN PLARGE_INTEGER Timeout OPTIONAL,OUT PULONG ReturnLength OPTIONAL,IN ULONG Asynchronous,IN ULONG AsynchronousContext OPTIONAL);
EXTERN_C NTSTATUS NtGetWriteWatch(IN HANDLE ProcessHandle,IN ULONG Flags,IN PVOID BaseAddress,IN ULONG RegionSize,OUT PULONG UserAddressArray,IN OUT PULONG EntriesInUserAddressArray,OUT PULONG Granularity);
EXTERN_C NTSTATUS NtImpersonateAnonymousToken(IN HANDLE ThreadHandle);
EXTERN_C NTSTATUS NtImpersonateThread(IN HANDLE ServerThreadHandle,IN HANDLE ClientThreadHandle,IN PSECURITY_QUALITY_OF_SERVICE SecurityQos);
EXTERN_C NTSTATUS NtInitializeEnclave(IN HANDLE ProcessHandle,IN PVOID BaseAddress,IN PVOID EnclaveInformation,IN ULONG EnclaveInformationLength,OUT PULONG EnclaveError OPTIONAL);
EXTERN_C NTSTATUS NtInitializeNlsFiles(OUT PVOID BaseAddress,OUT PLCID DefaultLocaleId,OUT PLARGE_INTEGER DefaultCasingTableSize);
EXTERN_C NTSTATUS NtInitializeRegistry(IN USHORT BootCondition);
EXTERN_C NTSTATUS NtInitiatePowerAction(IN POWER_ACTION SystemAction,IN SYSTEM_POWER_STATE LightestSystemState,IN ULONG Flags,IN BOOLEAN Asynchronous);
EXTERN_C NTSTATUS NtIsSystemResumeAutomatic();
EXTERN_C NTSTATUS NtIsUILanguageComitted();
EXTERN_C NTSTATUS NtListenPort(IN HANDLE PortHandle,OUT PPORT_MESSAGE ConnectionRequest);
EXTERN_C NTSTATUS NtLoadDriver(IN PUNICODE_STRING DriverServiceName);
EXTERN_C NTSTATUS NtLoadEnclaveData(IN HANDLE ProcessHandle,IN PVOID BaseAddress,IN PVOID Buffer,IN SIZE_T BufferSize,IN ULONG Protect,IN PVOID PageInformation,IN ULONG PageInformationLength,OUT PSIZE_T NumberOfBytesWritten OPTIONAL,OUT PULONG EnclaveError OPTIONAL);
EXTERN_C NTSTATUS NtLoadHotPatch(IN PUNICODE_STRING HotPatchName,IN ULONG LoadFlag);
EXTERN_C NTSTATUS NtLoadKey(IN POBJECT_ATTRIBUTES TargetKey,IN POBJECT_ATTRIBUTES SourceFile);
EXTERN_C NTSTATUS NtLoadKey2(IN POBJECT_ATTRIBUTES TargetKey,IN POBJECT_ATTRIBUTES SourceFile,IN ULONG Flags);
EXTERN_C NTSTATUS NtLoadKeyEx(IN POBJECT_ATTRIBUTES TargetKey,IN POBJECT_ATTRIBUTES SourceFile,IN ULONG Flags,IN HANDLE TrustClassKey OPTIONAL,IN HANDLE Event OPTIONAL,IN ACCESS_MASK DesiredAccess OPTIONAL,OUT PHANDLE RootHandle OPTIONAL,OUT PIO_STATUS_BLOCK IoStatus OPTIONAL);
EXTERN_C NTSTATUS NtLockFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PULARGE_INTEGER ByteOffset,IN PULARGE_INTEGER Length,IN ULONG Key,IN BOOLEAN FailImmediately,IN BOOLEAN ExclusiveLock);
EXTERN_C NTSTATUS NtLockProductActivationKeys(IN OUT PULONG pPrivateVer OPTIONAL,OUT PULONG pSafeMode OPTIONAL);
EXTERN_C NTSTATUS NtLockRegistryKey(IN HANDLE KeyHandle);
EXTERN_C NTSTATUS NtLockVirtualMemory(IN HANDLE ProcessHandle,IN PVOID BaseAddress,IN PULONG RegionSize,IN ULONG MapType);
EXTERN_C NTSTATUS NtMakePermanentObject(IN HANDLE Handle);
EXTERN_C NTSTATUS NtMakeTemporaryObject(IN HANDLE Handle);
EXTERN_C NTSTATUS NtManagePartition(IN HANDLE TargetHandle,IN HANDLE SourceHandle,IN MEMORY_PARTITION_INFORMATION_CLASS PartitionInformationClass,IN OUT PVOID PartitionInformation,IN ULONG PartitionInformationLength);
EXTERN_C NTSTATUS NtMapCMFModule(IN ULONG What,IN ULONG Index,OUT PULONG CacheIndexOut OPTIONAL,OUT PULONG CacheFlagsOut OPTIONAL,OUT PULONG ViewSizeOut OPTIONAL,OUT PVOID BaseAddress OPTIONAL);
EXTERN_C NTSTATUS NtMapUserPhysicalPages(IN PVOID VirtualAddress,IN PULONG NumberOfPages,IN PULONG UserPfnArray OPTIONAL);
EXTERN_C NTSTATUS NtMapViewOfSectionEx(IN HANDLE SectionHandle,IN HANDLE ProcessHandle,IN OUT PLARGE_INTEGER SectionOffset,IN OUT PPVOID BaseAddress,IN OUT PSIZE_T ViewSize,IN ULONG AllocationType,IN ULONG Protect,IN OUT PVOID DataBuffer OPTIONAL,IN ULONG DataCount);
EXTERN_C NTSTATUS NtModifyBootEntry(IN PBOOT_ENTRY BootEntry);
EXTERN_C NTSTATUS NtModifyDriverEntry(IN PEFI_DRIVER_ENTRY DriverEntry);
EXTERN_C NTSTATUS NtNotifyChangeDirectoryFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PFILE_NOTIFY_INFORMATION Buffer,IN ULONG Length,IN ULONG CompletionFilter,IN BOOLEAN WatchTree);
EXTERN_C NTSTATUS NtNotifyChangeDirectoryFileEx(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID Buffer,IN ULONG Length,IN ULONG CompletionFilter,IN BOOLEAN WatchTree,IN DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass OPTIONAL);
EXTERN_C NTSTATUS NtNotifyChangeKey(IN HANDLE KeyHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG CompletionFilter,IN BOOLEAN WatchTree,OUT PVOID Buffer OPTIONAL,IN ULONG BufferSize,IN BOOLEAN Asynchronous);
EXTERN_C NTSTATUS NtNotifyChangeMultipleKeys(IN HANDLE MasterKeyHandle,IN ULONG Count OPTIONAL,IN POBJECT_ATTRIBUTES SubordinateObjects OPTIONAL,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG CompletionFilter,IN BOOLEAN WatchTree,OUT PVOID Buffer OPTIONAL,IN ULONG BufferSize,IN BOOLEAN Asynchronous);
EXTERN_C NTSTATUS NtNotifyChangeSession(IN HANDLE SessionHandle,IN ULONG ChangeSequenceNumber,IN PLARGE_INTEGER ChangeTimeStamp,IN IO_SESSION_EVENT Event,IN IO_SESSION_STATE NewState,IN IO_SESSION_STATE PreviousState,IN PVOID Payload OPTIONAL,IN ULONG PayloadSize);
EXTERN_C NTSTATUS NtOpenEnlistment(OUT PHANDLE EnlistmentHandle,IN ACCESS_MASK DesiredAccess,IN HANDLE ResourceManagerHandle,IN LPGUID EnlistmentGuid,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL);
EXTERN_C NTSTATUS NtOpenEventPair(OUT PHANDLE EventPairHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtOpenIoCompletion(OUT PHANDLE IoCompletionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtOpenJobObject(OUT PHANDLE JobHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtOpenKeyEx(OUT PHANDLE KeyHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN ULONG OpenOptions);
EXTERN_C NTSTATUS NtOpenKeyTransacted(OUT PHANDLE KeyHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN HANDLE TransactionHandle);
EXTERN_C NTSTATUS NtOpenKeyTransactedEx(OUT PHANDLE KeyHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN ULONG OpenOptions,IN HANDLE TransactionHandle);
EXTERN_C NTSTATUS NtOpenKeyedEvent(OUT PHANDLE KeyedEventHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtOpenMutant(OUT PHANDLE MutantHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtOpenObjectAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN PUNICODE_STRING ObjectTypeName,IN PUNICODE_STRING ObjectName,IN PSECURITY_DESCRIPTOR SecurityDescriptor OPTIONAL,IN HANDLE ClientToken,IN ACCESS_MASK DesiredAccess,IN ACCESS_MASK GrantedAccess,IN PPRIVILEGE_SET Privileges OPTIONAL,IN BOOLEAN ObjectCreation,IN BOOLEAN AccessGranted,OUT PBOOLEAN GenerateOnClose);
EXTERN_C NTSTATUS NtOpenPartition(OUT PHANDLE PartitionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtOpenPrivateNamespace(OUT PHANDLE NamespaceHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PVOID BoundaryDescriptor);
EXTERN_C NTSTATUS NtOpenProcessToken(IN HANDLE ProcessHandle,IN ACCESS_MASK DesiredAccess,OUT PHANDLE TokenHandle);
EXTERN_C NTSTATUS NtOpenRegistryTransaction(OUT PHANDLE RegistryHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtOpenResourceManager(OUT PHANDLE ResourceManagerHandle,IN ACCESS_MASK DesiredAccess,IN HANDLE TmHandle,IN LPGUID ResourceManagerGuid OPTIONAL,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL);
EXTERN_C NTSTATUS NtOpenSemaphore(OUT PHANDLE SemaphoreHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtOpenSession(OUT PHANDLE SessionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtOpenSymbolicLinkObject(OUT PHANDLE LinkHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtOpenThread(OUT PHANDLE ThreadHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN PCLIENT_ID ClientId OPTIONAL);
EXTERN_C NTSTATUS NtOpenTimer(OUT PHANDLE TimerHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes);
EXTERN_C NTSTATUS NtOpenTransaction(OUT PHANDLE TransactionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN LPGUID Uow,IN HANDLE TmHandle OPTIONAL);
EXTERN_C NTSTATUS NtOpenTransactionManager(OUT PHANDLE TmHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PUNICODE_STRING LogFileName OPTIONAL,IN LPGUID TmIdentity OPTIONAL,IN ULONG OpenOptions OPTIONAL);
EXTERN_C NTSTATUS NtPlugPlayControl(IN PLUGPLAY_CONTROL_CLASS PnPControlClass,IN OUT PVOID PnPControlData,IN ULONG PnPControlDataLength);
EXTERN_C NTSTATUS NtPrePrepareComplete(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL);
EXTERN_C NTSTATUS NtPrePrepareEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL);
EXTERN_C NTSTATUS NtPrepareComplete(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL);
EXTERN_C NTSTATUS NtPrepareEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL);
EXTERN_C NTSTATUS NtPrivilegeCheck(IN HANDLE ClientToken,IN OUT PPRIVILEGE_SET RequiredPrivileges,OUT PBOOLEAN Result);
EXTERN_C NTSTATUS NtPrivilegeObjectAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN HANDLE ClientToken,IN ACCESS_MASK DesiredAccess,IN PPRIVILEGE_SET Privileges,IN BOOLEAN AccessGranted);
EXTERN_C NTSTATUS NtPrivilegedServiceAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PUNICODE_STRING ServiceName,IN HANDLE ClientToken,IN PPRIVILEGE_SET Privileges,IN BOOLEAN AccessGranted);
EXTERN_C NTSTATUS NtPropagationComplete(IN HANDLE ResourceManagerHandle,IN ULONG RequestCookie,IN ULONG BufferLength,IN PVOID Buffer);
EXTERN_C NTSTATUS NtPropagationFailed(IN HANDLE ResourceManagerHandle,IN ULONG RequestCookie,IN NTSTATUS PropStatus);
EXTERN_C NTSTATUS NtPulseEvent(IN HANDLE EventHandle,OUT PULONG PreviousState OPTIONAL);
EXTERN_C NTSTATUS NtQueryAuxiliaryCounterFrequency(OUT PULONGLONG lpAuxiliaryCounterFrequency);
EXTERN_C NTSTATUS NtQueryBootEntryOrder(OUT PULONG Ids OPTIONAL,IN OUT PULONG Count);
EXTERN_C NTSTATUS NtQueryBootOptions(OUT PBOOT_OPTIONS BootOptions OPTIONAL,IN OUT PULONG BootOptionsLength);
EXTERN_C NTSTATUS NtQueryDebugFilterState(IN ULONG ComponentId,IN ULONG Level);
EXTERN_C NTSTATUS NtQueryDirectoryFileEx(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID FileInformation,IN ULONG Length,IN FILE_INFORMATION_CLASS FileInformationClass,IN ULONG QueryFlags,IN PUNICODE_STRING FileName OPTIONAL);
EXTERN_C NTSTATUS NtQueryDirectoryObject(IN HANDLE DirectoryHandle,OUT PVOID Buffer OPTIONAL,IN ULONG Length,IN BOOLEAN ReturnSingleEntry,IN BOOLEAN RestartScan,IN OUT PULONG Context,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryDriverEntryOrder(IN PULONG Ids OPTIONAL,IN OUT PULONG Count);
EXTERN_C NTSTATUS NtQueryEaFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PFILE_FULL_EA_INFORMATION Buffer,IN ULONG Length,IN BOOLEAN ReturnSingleEntry,IN PFILE_GET_EA_INFORMATION EaList OPTIONAL,IN ULONG EaListLength,IN PULONG EaIndex OPTIONAL,IN BOOLEAN RestartScan);
EXTERN_C NTSTATUS NtQueryFullAttributesFile(IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PFILE_NETWORK_OPEN_INFORMATION FileInformation);
EXTERN_C NTSTATUS NtQueryInformationAtom(IN USHORT Atom,IN ATOM_INFORMATION_CLASS AtomInformationClass,OUT PVOID AtomInformation,IN ULONG AtomInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryInformationByName(IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID FileInformation,IN ULONG Length,IN FILE_INFORMATION_CLASS FileInformationClass);
EXTERN_C NTSTATUS NtQueryInformationEnlistment(IN HANDLE EnlistmentHandle,IN ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,OUT PVOID EnlistmentInformation,IN ULONG EnlistmentInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryInformationJobObject(IN HANDLE JobHandle,IN JOBOBJECTINFOCLASS JobObjectInformationClass,OUT PVOID JobObjectInformation,IN ULONG JobObjectInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryInformationPort(IN HANDLE PortHandle,IN PORT_INFORMATION_CLASS PortInformationClass,OUT PVOID PortInformation,IN ULONG Length,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryInformationResourceManager(IN HANDLE ResourceManagerHandle,IN RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,OUT PVOID ResourceManagerInformation,IN ULONG ResourceManagerInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryInformationTransaction(IN HANDLE TransactionHandle,IN TRANSACTION_INFORMATION_CLASS TransactionInformationClass,OUT PVOID TransactionInformation,IN ULONG TransactionInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryInformationTransactionManager(IN HANDLE TransactionManagerHandle,IN TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,OUT PVOID TransactionManagerInformation,IN ULONG TransactionManagerInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryInformationWorkerFactory(IN HANDLE WorkerFactoryHandle,IN WORKERFACTORYINFOCLASS WorkerFactoryInformationClass,OUT PVOID WorkerFactoryInformation,IN ULONG WorkerFactoryInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryInstallUILanguage(OUT PLANGID InstallUILanguageId);
EXTERN_C NTSTATUS NtQueryIntervalProfile(IN KPROFILE_SOURCE ProfileSource,OUT PULONG Interval);
EXTERN_C NTSTATUS NtQueryIoCompletion(IN HANDLE IoCompletionHandle,IN IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass,OUT PVOID IoCompletionInformation,IN ULONG IoCompletionInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryLicenseValue(IN PUNICODE_STRING ValueName,OUT PULONG Type OPTIONAL,OUT PVOID SystemData OPTIONAL,IN ULONG DataSize,OUT PULONG ResultDataSize);
EXTERN_C NTSTATUS NtQueryMultipleValueKey(IN HANDLE KeyHandle,IN OUT PKEY_VALUE_ENTRY ValueEntries,IN ULONG EntryCount,OUT PVOID ValueBuffer,IN PULONG BufferLength,OUT PULONG RequiredBufferLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryMutant(IN HANDLE MutantHandle,IN MUTANT_INFORMATION_CLASS MutantInformationClass,OUT PVOID MutantInformation,IN ULONG MutantInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryOpenSubKeys(IN POBJECT_ATTRIBUTES TargetKey,OUT PULONG HandleCount);
EXTERN_C NTSTATUS NtQueryOpenSubKeysEx(IN POBJECT_ATTRIBUTES TargetKey,IN ULONG BufferLength,OUT PVOID Buffer,OUT PULONG RequiredSize);
EXTERN_C NTSTATUS NtQueryPortInformationProcess();
EXTERN_C NTSTATUS NtQueryQuotaInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PFILE_USER_QUOTA_INFORMATION Buffer,IN ULONG Length,IN BOOLEAN ReturnSingleEntry,IN PFILE_QUOTA_LIST_INFORMATION SidList OPTIONAL,IN ULONG SidListLength,IN PSID StartSid OPTIONAL,IN BOOLEAN RestartScan);
EXTERN_C NTSTATUS NtQuerySecurityAttributesToken(IN HANDLE TokenHandle,IN PUNICODE_STRING Attributes OPTIONAL,IN ULONG NumberOfAttributes,OUT PVOID Buffer,IN ULONG Length,OUT PULONG ReturnLength);
EXTERN_C NTSTATUS NtQuerySecurityObject(IN HANDLE Handle,IN SECURITY_INFORMATION SecurityInformation,OUT PSECURITY_DESCRIPTOR SecurityDescriptor OPTIONAL,IN ULONG Length,OUT PULONG LengthNeeded);
EXTERN_C NTSTATUS NtQuerySecurityPolicy(IN ULONG_PTR UnknownParameter1,IN ULONG_PTR UnknownParameter2,IN ULONG_PTR UnknownParameter3,IN ULONG_PTR UnknownParameter4,IN ULONG_PTR UnknownParameter5,IN ULONG_PTR UnknownParameter6);
EXTERN_C NTSTATUS NtQuerySemaphore(IN HANDLE SemaphoreHandle,IN SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass,OUT PVOID SemaphoreInformation,IN ULONG SemaphoreInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQuerySymbolicLinkObject(IN HANDLE LinkHandle,IN OUT PUNICODE_STRING LinkTarget,OUT PULONG ReturnedLength OPTIONAL);
EXTERN_C NTSTATUS NtQuerySystemEnvironmentValue(IN PUNICODE_STRING VariableName,OUT PVOID VariableValue,IN ULONG ValueLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQuerySystemEnvironmentValueEx(IN PUNICODE_STRING VariableName,IN LPGUID VendorGuid,OUT PVOID Value OPTIONAL,IN OUT PULONG ValueLength,OUT PULONG Attributes OPTIONAL);
EXTERN_C NTSTATUS NtQuerySystemInformationEx(IN SYSTEM_INFORMATION_CLASS SystemInformationClass,IN PVOID InputBuffer,IN ULONG InputBufferLength,OUT PVOID SystemInformation OPTIONAL,IN ULONG SystemInformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtQueryTimerResolution(OUT PULONG MaximumTime,OUT PULONG MinimumTime,OUT PULONG CurrentTime);
EXTERN_C NTSTATUS NtQueryWnfStateData(IN PCWNF_STATE_NAME StateName,IN PCWNF_TYPE_ID TypeId OPTIONAL,IN PVOID ExplicitScope OPTIONAL,OUT PWNF_CHANGE_STAMP ChangeStamp,OUT PVOID Buffer OPTIONAL,IN OUT PULONG BufferSize);
EXTERN_C NTSTATUS NtQueryWnfStateNameInformation(IN PCWNF_STATE_NAME StateName,IN PCWNF_TYPE_ID NameInfoClass,IN PVOID ExplicitScope OPTIONAL,OUT PVOID InfoBuffer,IN ULONG InfoBufferSize);
EXTERN_C NTSTATUS NtQueueApcThreadEx(IN HANDLE ThreadHandle,IN HANDLE UserApcReserveHandle OPTIONAL,IN PKNORMAL_ROUTINE ApcRoutine,IN PVOID ApcArgument1 OPTIONAL,IN PVOID ApcArgument2 OPTIONAL,IN PVOID ApcArgument3 OPTIONAL);
EXTERN_C NTSTATUS NtRaiseException(IN PEXCEPTION_RECORD ExceptionRecord,IN PCONTEXT ContextRecord,IN BOOLEAN FirstChance);
EXTERN_C NTSTATUS NtRaiseHardError(IN NTSTATUS ErrorStatus,IN ULONG NumberOfParameters,IN ULONG UnicodeStringParameterMask,IN PULONG_PTR Parameters,IN ULONG ValidResponseOptions,OUT PULONG Response);
EXTERN_C NTSTATUS NtReadOnlyEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL);
EXTERN_C NTSTATUS NtRecoverEnlistment(IN HANDLE EnlistmentHandle,IN PVOID EnlistmentKey OPTIONAL);
EXTERN_C NTSTATUS NtRecoverResourceManager(IN HANDLE ResourceManagerHandle);
EXTERN_C NTSTATUS NtRecoverTransactionManager(IN HANDLE TransactionManagerHandle);
EXTERN_C NTSTATUS NtRegisterProtocolAddressInformation(IN HANDLE ResourceManager,IN LPGUID ProtocolId,IN ULONG ProtocolInformationSize,IN PVOID ProtocolInformation,IN ULONG CreateOptions OPTIONAL);
EXTERN_C NTSTATUS NtRegisterThreadTerminatePort(IN HANDLE PortHandle);
EXTERN_C NTSTATUS NtReleaseKeyedEvent(IN HANDLE KeyedEventHandle,IN PVOID KeyValue,IN BOOLEAN Alertable,IN PLARGE_INTEGER Timeout OPTIONAL);
EXTERN_C NTSTATUS NtReleaseWorkerFactoryWorker(IN HANDLE WorkerFactoryHandle);
EXTERN_C NTSTATUS NtRemoveIoCompletionEx(IN HANDLE IoCompletionHandle,OUT PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation,IN ULONG Count,OUT PULONG NumEntriesRemoved,IN PLARGE_INTEGER Timeout OPTIONAL,IN BOOLEAN Alertable);
EXTERN_C NTSTATUS NtRemoveProcessDebug(IN HANDLE ProcessHandle,IN HANDLE DebugObjectHandle);
EXTERN_C NTSTATUS NtRenameKey(IN HANDLE KeyHandle,IN PUNICODE_STRING NewName);
EXTERN_C NTSTATUS NtRenameTransactionManager(IN PUNICODE_STRING LogFileName,IN LPGUID ExistingTransactionManagerGuid);
EXTERN_C NTSTATUS NtReplaceKey(IN POBJECT_ATTRIBUTES NewFile,IN HANDLE TargetHandle,IN POBJECT_ATTRIBUTES OldFile);
EXTERN_C NTSTATUS NtReplacePartitionUnit(IN PUNICODE_STRING TargetInstancePath,IN PUNICODE_STRING SpareInstancePath,IN ULONG Flags);
EXTERN_C NTSTATUS NtReplyWaitReplyPort(IN HANDLE PortHandle,IN OUT PPORT_MESSAGE ReplyMessage);
EXTERN_C NTSTATUS NtRequestPort(IN HANDLE PortHandle,IN PPORT_MESSAGE RequestMessage);
EXTERN_C NTSTATUS NtResetEvent(IN HANDLE EventHandle,OUT PULONG PreviousState OPTIONAL);
EXTERN_C NTSTATUS NtResetWriteWatch(IN HANDLE ProcessHandle,IN PVOID BaseAddress,IN ULONG RegionSize);
EXTERN_C NTSTATUS NtRestoreKey(IN HANDLE KeyHandle,IN HANDLE FileHandle,IN ULONG Flags);
EXTERN_C NTSTATUS NtResumeProcess(IN HANDLE ProcessHandle);
EXTERN_C NTSTATUS NtRevertContainerImpersonation();
EXTERN_C NTSTATUS NtRollbackComplete(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL);
EXTERN_C NTSTATUS NtRollbackEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL);
EXTERN_C NTSTATUS NtRollbackRegistryTransaction(IN HANDLE RegistryHandle,IN BOOL Wait);
EXTERN_C NTSTATUS NtRollbackTransaction(IN HANDLE TransactionHandle,IN BOOLEAN Wait);
EXTERN_C NTSTATUS NtRollforwardTransactionManager(IN HANDLE TransactionManagerHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL);
EXTERN_C NTSTATUS NtSaveKey(IN HANDLE KeyHandle,IN HANDLE FileHandle);
EXTERN_C NTSTATUS NtSaveKeyEx(IN HANDLE KeyHandle,IN HANDLE FileHandle,IN ULONG Format);
EXTERN_C NTSTATUS NtSaveMergedKeys(IN HANDLE HighPrecedenceKeyHandle,IN HANDLE LowPrecedenceKeyHandle,IN HANDLE FileHandle);
EXTERN_C NTSTATUS NtSecureConnectPort(OUT PHANDLE PortHandle,IN PUNICODE_STRING PortName,IN PSECURITY_QUALITY_OF_SERVICE SecurityQos,IN OUT PPORT_SECTION_WRITE ClientView OPTIONAL,IN PSID RequiredServerSid OPTIONAL,IN OUT PPORT_SECTION_READ ServerView OPTIONAL,OUT PULONG MaxMessageLength OPTIONAL,IN OUT PVOID ConnectionInformation OPTIONAL,IN OUT PULONG ConnectionInformationLength OPTIONAL);
EXTERN_C NTSTATUS NtSerializeBoot();
EXTERN_C NTSTATUS NtSetBootEntryOrder(IN PULONG Ids,IN ULONG Count);
EXTERN_C NTSTATUS NtSetBootOptions(IN PBOOT_OPTIONS BootOptions,IN ULONG FieldsToChange);
EXTERN_C NTSTATUS NtSetCachedSigningLevel(IN ULONG Flags,IN SE_SIGNING_LEVEL InputSigningLevel,IN PHANDLE SourceFiles,IN ULONG SourceFileCount,IN HANDLE TargetFile OPTIONAL);
EXTERN_C NTSTATUS NtSetCachedSigningLevel2(IN ULONG Flags,IN ULONG InputSigningLevel,IN PHANDLE SourceFiles,IN ULONG SourceFileCount,IN HANDLE TargetFile OPTIONAL,IN PVOID LevelInformation OPTIONAL);
EXTERN_C NTSTATUS NtSetContextThread(IN HANDLE ThreadHandle,IN PCONTEXT Context);
EXTERN_C NTSTATUS NtSetDebugFilterState(IN ULONG ComponentId,IN ULONG Level,IN BOOLEAN State);
EXTERN_C NTSTATUS NtSetDefaultHardErrorPort(IN HANDLE PortHandle);
EXTERN_C NTSTATUS NtSetDefaultLocale(IN BOOLEAN UserProfile,IN LCID DefaultLocaleId);
EXTERN_C NTSTATUS NtSetDefaultUILanguage(IN LANGID DefaultUILanguageId);
EXTERN_C NTSTATUS NtSetDriverEntryOrder(IN PULONG Ids,IN PULONG Count);
EXTERN_C NTSTATUS NtSetEaFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PFILE_FULL_EA_INFORMATION EaBuffer,IN ULONG EaBufferSize);
EXTERN_C NTSTATUS NtSetHighEventPair(IN HANDLE EventPairHandle);
EXTERN_C NTSTATUS NtSetHighWaitLowEventPair(IN HANDLE EventPairHandle);
EXTERN_C NTSTATUS NtSetIRTimer(IN HANDLE TimerHandle,IN PLARGE_INTEGER DueTime OPTIONAL);
EXTERN_C NTSTATUS NtSetInformationDebugObject(IN HANDLE DebugObject,IN DEBUGOBJECTINFOCLASS InformationClass,IN PVOID Information,IN ULONG InformationLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtSetInformationEnlistment(IN HANDLE EnlistmentHandle,IN ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,IN PVOID EnlistmentInformation,IN ULONG EnlistmentInformationLength);
EXTERN_C NTSTATUS NtSetInformationJobObject(IN HANDLE JobHandle,IN JOBOBJECTINFOCLASS JobObjectInformationClass,IN PVOID JobObjectInformation,IN ULONG JobObjectInformationLength);
EXTERN_C NTSTATUS NtSetInformationKey(IN HANDLE KeyHandle,IN KEY_SET_INFORMATION_CLASS KeySetInformationClass,IN PVOID KeySetInformation,IN ULONG KeySetInformationLength);
EXTERN_C NTSTATUS NtSetInformationResourceManager(IN HANDLE ResourceManagerHandle,IN RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,IN PVOID ResourceManagerInformation,IN ULONG ResourceManagerInformationLength);
EXTERN_C NTSTATUS NtSetInformationSymbolicLink(IN HANDLE Handle,IN ULONG Class,IN PVOID Buffer,IN ULONG BufferLength);
EXTERN_C NTSTATUS NtSetInformationToken(IN HANDLE TokenHandle,IN TOKEN_INFORMATION_CLASS TokenInformationClass,IN PVOID TokenInformation,IN ULONG TokenInformationLength);
EXTERN_C NTSTATUS NtSetInformationTransaction(IN HANDLE TransactionHandle,IN TRANSACTIONMANAGER_INFORMATION_CLASS TransactionInformationClass,IN PVOID TransactionInformation,IN ULONG TransactionInformationLength);
EXTERN_C NTSTATUS NtSetInformationTransactionManager(IN HANDLE TransactionHandle,IN TRANSACTION_INFORMATION_CLASS TransactionInformationClass,IN PVOID TransactionInformation,IN ULONG TransactionInformationLength);
EXTERN_C NTSTATUS NtSetInformationVirtualMemory(IN HANDLE ProcessHandle,IN VIRTUAL_MEMORY_INFORMATION_CLASS VmInformationClass,IN ULONG_PTR NumberOfEntries,IN PMEMORY_RANGE_ENTRY VirtualAddresses,IN PVOID VmInformation,IN ULONG VmInformationLength);
EXTERN_C NTSTATUS NtSetInformationWorkerFactory(IN HANDLE WorkerFactoryHandle,IN WORKERFACTORYINFOCLASS WorkerFactoryInformationClass,IN PVOID WorkerFactoryInformation,IN ULONG WorkerFactoryInformationLength);
EXTERN_C NTSTATUS NtSetIntervalProfile(IN ULONG Interval,IN KPROFILE_SOURCE Source);
EXTERN_C NTSTATUS NtSetIoCompletion(IN HANDLE IoCompletionHandle,IN ULONG CompletionKey,OUT PIO_STATUS_BLOCK IoStatusBlock,IN NTSTATUS CompletionStatus,IN ULONG NumberOfBytesTransfered);
EXTERN_C NTSTATUS NtSetIoCompletionEx(IN HANDLE IoCompletionHandle,IN HANDLE IoCompletionPacketHandle,IN PVOID KeyContext OPTIONAL,IN PVOID ApcContext OPTIONAL,IN NTSTATUS IoStatus,IN ULONG_PTR IoStatusInformation);
EXTERN_C NTSTATUS NtSetLdtEntries(IN ULONG Selector0,IN ULONG Entry0Low,IN ULONG Entry0Hi,IN ULONG Selector1,IN ULONG Entry1Low,IN ULONG Entry1Hi);
EXTERN_C NTSTATUS NtSetLowEventPair(IN HANDLE EventPairHandle);
EXTERN_C NTSTATUS NtSetLowWaitHighEventPair(IN HANDLE EventPairHandle);
EXTERN_C NTSTATUS NtSetQuotaInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PFILE_USER_QUOTA_INFORMATION Buffer,IN ULONG Length);
EXTERN_C NTSTATUS NtSetSecurityObject(IN HANDLE ObjectHandle,IN SECURITY_INFORMATION SecurityInformationClass,IN PSECURITY_DESCRIPTOR DescriptorBuffer);
EXTERN_C NTSTATUS NtSetSystemEnvironmentValue(IN PUNICODE_STRING VariableName,IN PUNICODE_STRING Value);
EXTERN_C NTSTATUS NtSetSystemEnvironmentValueEx(IN PUNICODE_STRING VariableName,IN LPGUID VendorGuid,IN PVOID Value OPTIONAL,IN ULONG ValueLength,IN ULONG Attributes);
EXTERN_C NTSTATUS NtSetSystemInformation(IN SYSTEM_INFORMATION_CLASS SystemInformationClass,IN PVOID SystemInformation,IN ULONG SystemInformationLength);
EXTERN_C NTSTATUS NtSetSystemPowerState(IN POWER_ACTION SystemAction,IN SYSTEM_POWER_STATE MinSystemState,IN ULONG Flags);
EXTERN_C NTSTATUS NtSetSystemTime(IN PLARGE_INTEGER SystemTime,OUT PLARGE_INTEGER PreviousTime OPTIONAL);
EXTERN_C NTSTATUS NtSetThreadExecutionState(IN EXECUTION_STATE ExecutionState,OUT PEXECUTION_STATE PreviousExecutionState);
EXTERN_C NTSTATUS NtSetTimer2(IN HANDLE TimerHandle,IN PLARGE_INTEGER DueTime,IN PLARGE_INTEGER Period OPTIONAL,IN PT2_SET_PARAMETERS Parameters);
EXTERN_C NTSTATUS NtSetTimerEx(IN HANDLE TimerHandle,IN TIMER_SET_INFORMATION_CLASS TimerSetInformationClass,IN OUT PVOID TimerSetInformation OPTIONAL,IN ULONG TimerSetInformationLength);
EXTERN_C NTSTATUS NtSetTimerResolution(IN ULONG DesiredResolution,IN BOOLEAN SetResolution,OUT PULONG CurrentResolution);
EXTERN_C NTSTATUS NtSetUuidSeed(IN PUCHAR Seed);
EXTERN_C NTSTATUS NtSetVolumeInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PVOID FileSystemInformation,IN ULONG Length,IN FSINFOCLASS FileSystemInformationClass);
EXTERN_C NTSTATUS NtSetWnfProcessNotificationEvent(IN HANDLE NotificationEvent);
EXTERN_C NTSTATUS NtShutdownSystem(IN SHUTDOWN_ACTION Action);
EXTERN_C NTSTATUS NtShutdownWorkerFactory(IN HANDLE WorkerFactoryHandle,IN OUT PLONG PendingWorkerCount);
EXTERN_C NTSTATUS NtSignalAndWaitForSingleObject(IN HANDLE hObjectToSignal,IN HANDLE hObjectToWaitOn,IN BOOLEAN bAlertable,IN PLARGE_INTEGER dwMilliseconds OPTIONAL);
EXTERN_C NTSTATUS NtSinglePhaseReject(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL);
EXTERN_C NTSTATUS NtStartProfile(IN HANDLE ProfileHandle);
EXTERN_C NTSTATUS NtStopProfile(IN HANDLE ProfileHandle);
EXTERN_C NTSTATUS NtSubscribeWnfStateChange(IN PCWNF_STATE_NAME StateName,IN WNF_CHANGE_STAMP ChangeStamp OPTIONAL,IN ULONG EventMask,OUT PLARGE_INTEGER SubscriptionId OPTIONAL);
EXTERN_C NTSTATUS NtSuspendProcess(IN HANDLE ProcessHandle);
EXTERN_C NTSTATUS NtSuspendThread(IN HANDLE ThreadHandle,OUT PULONG PreviousSuspendCount);
EXTERN_C NTSTATUS NtSystemDebugControl(IN DEBUG_CONTROL_CODE Command,IN PVOID InputBuffer OPTIONAL,IN ULONG InputBufferLength,OUT PVOID OutputBuffer OPTIONAL,IN ULONG OutputBufferLength,OUT PULONG ReturnLength OPTIONAL);
EXTERN_C NTSTATUS NtTerminateEnclave(IN PVOID BaseAddress,IN BOOLEAN WaitForThread);
EXTERN_C NTSTATUS NtTerminateJobObject(IN HANDLE JobHandle,IN NTSTATUS ExitStatus);
EXTERN_C NTSTATUS NtTestAlert();
EXTERN_C NTSTATUS NtThawRegistry();
EXTERN_C NTSTATUS NtThawTransactions();
EXTERN_C NTSTATUS NtTraceControl(IN ULONG FunctionCode,IN PVOID InputBuffer OPTIONAL,IN ULONG InputBufferLength,OUT PVOID OutputBuffer OPTIONAL,IN ULONG OutputBufferLength,OUT PULONG ReturnLength);
EXTERN_C NTSTATUS NtTranslateFilePath(IN PFILE_PATH InputFilePath,IN ULONG OutputType,OUT PFILE_PATH OutputFilePath OPTIONAL,IN OUT PULONG OutputFilePathLength OPTIONAL);
EXTERN_C NTSTATUS NtUmsThreadYield(IN PVOID SchedulerParam);
EXTERN_C NTSTATUS NtUnloadDriver(IN PUNICODE_STRING DriverServiceName);
EXTERN_C NTSTATUS NtUnloadKey(IN POBJECT_ATTRIBUTES DestinationKeyName);
EXTERN_C NTSTATUS NtUnloadKey2(IN POBJECT_ATTRIBUTES TargetKey,IN ULONG Flags);
EXTERN_C NTSTATUS NtUnloadKeyEx(IN POBJECT_ATTRIBUTES TargetKey,IN HANDLE Event OPTIONAL);
EXTERN_C NTSTATUS NtUnlockFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PULARGE_INTEGER ByteOffset,IN PULARGE_INTEGER Length,IN ULONG Key);
EXTERN_C NTSTATUS NtUnlockVirtualMemory(IN HANDLE ProcessHandle,IN PVOID * BaseAddress,IN PSIZE_T NumberOfBytesToUnlock,IN ULONG LockType);
EXTERN_C NTSTATUS NtUnmapViewOfSectionEx(IN HANDLE ProcessHandle,IN PVOID BaseAddress OPTIONAL,IN ULONG Flags);
EXTERN_C NTSTATUS NtUnsubscribeWnfStateChange(IN PCWNF_STATE_NAME StateName);
EXTERN_C NTSTATUS NtUpdateWnfStateData(IN PCWNF_STATE_NAME StateName,IN PVOID Buffer OPTIONAL,IN ULONG Length OPTIONAL,IN PCWNF_TYPE_ID TypeId OPTIONAL,IN PVOID ExplicitScope OPTIONAL,IN WNF_CHANGE_STAMP MatchingChangeStamp,IN ULONG CheckStamp);
EXTERN_C NTSTATUS NtVdmControl(IN VDMSERVICECLASS Service,IN OUT PVOID ServiceData);
EXTERN_C NTSTATUS NtWaitForAlertByThreadId(IN HANDLE Handle,IN PLARGE_INTEGER Timeout OPTIONAL);
EXTERN_C NTSTATUS NtWaitForDebugEvent(IN HANDLE DebugObjectHandle,IN BOOLEAN Alertable,IN PLARGE_INTEGER Timeout OPTIONAL,OUT PVOID WaitStateChange);
EXTERN_C NTSTATUS NtWaitForKeyedEvent(IN HANDLE KeyedEventHandle,IN PVOID Key,IN BOOLEAN Alertable,IN PLARGE_INTEGER Timeout OPTIONAL);
EXTERN_C NTSTATUS NtWaitForWorkViaWorkerFactory(IN HANDLE WorkerFactoryHandle,OUT PVOID MiniPacket);
EXTERN_C NTSTATUS NtWaitHighEventPair(IN HANDLE EventHandle);
EXTERN_C NTSTATUS NtWaitLowEventPair(IN HANDLE EventHandle);
EXTERN_C NTSTATUS NtAcquireCMFViewOwnership(OUT BOOLEAN TimeStamp,OUT BOOLEAN TokenTaken,IN BOOLEAN ReplaceExisting);
EXTERN_C NTSTATUS NtCancelDeviceWakeupRequest(IN HANDLE DeviceHandle);
EXTERN_C NTSTATUS NtClearAllSavepointsTransaction(IN HANDLE TransactionHandle);
EXTERN_C NTSTATUS NtClearSavepointTransaction(IN HANDLE TransactionHandle,IN ULONG SavePointId);
EXTERN_C NTSTATUS NtRollbackSavepointTransaction(IN HANDLE TransactionHandle,IN ULONG SavePointId);
EXTERN_C NTSTATUS NtSavepointTransaction(IN HANDLE TransactionHandle,IN BOOLEAN Flag,OUT ULONG SavePointId);
EXTERN_C NTSTATUS NtSavepointComplete(IN HANDLE TransactionHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL);
EXTERN_C NTSTATUS NtCreateSectionEx(OUT PHANDLE SectionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PLARGE_INTEGER MaximumSize OPTIONAL,IN ULONG SectionPageProtection,IN ULONG AllocationAttributes,IN HANDLE FileHandle OPTIONAL,IN PMEM_EXTENDED_PARAMETER ExtendedParameters,IN ULONG ExtendedParametersCount);
EXTERN_C NTSTATUS NtCreateCrossVmEvent();
EXTERN_C NTSTATUS NtGetPlugPlayEvent(IN HANDLE EventHandle,IN PVOID Context OPTIONAL,OUT PPLUGPLAY_EVENT_BLOCK EventBlock,IN ULONG EventBufferSize);
EXTERN_C NTSTATUS NtListTransactions();
EXTERN_C NTSTATUS NtMarshallTransaction();
EXTERN_C NTSTATUS NtPullTransaction();
EXTERN_C NTSTATUS NtReleaseCMFViewOwnership();
EXTERN_C NTSTATUS NtWaitForWnfNotifications();
EXTERN_C NTSTATUS NtStartTm();
EXTERN_C NTSTATUS NtSetInformationProcess(IN HANDLE DeviceHandle,IN PROCESSINFOCLASS ProcessInformationClass,IN PVOID ProcessInformation,IN ULONG Length);
EXTERN_C NTSTATUS NtRequestDeviceWakeup(IN HANDLE DeviceHandle);
EXTERN_C NTSTATUS NtRequestWakeupLatency(IN ULONG LatencyTime);
EXTERN_C NTSTATUS NtQuerySystemTime(OUT PLARGE_INTEGER SystemTime);
EXTERN_C NTSTATUS NtManageHotPatch(IN ULONG UnknownParameter1,IN ULONG UnknownParameter2,IN ULONG UnknownParameter3,IN ULONG UnknownParameter4);
EXTERN_C NTSTATUS NtContinueEx(IN PCONTEXT ContextRecord,IN PKCONTINUE_ARGUMENT ContinueArgument);
#endif



#include <time.h>
#include <stdint.h>

// Code below is adapted from @modexpblog. Read linked article for more details.
// https://www.mdsec.co.uk/2020/12/bypassing-user-mode-hooks-and-direct-invocation-of-system-calls-for-red-teams

SW2_SYSCALL_LIST SW2_SyscallList = { 0, 1 };

#ifdef RANDSYSCALL
#ifndef _WIN64
uint32_t ntdllBase = 0;
#else
uint64_t ntdllBase = 0;
#endif
#endif

DWORD SW2_HashSyscall(PCSTR FunctionName)
{
    DWORD i = 0;
    DWORD Hash = SW2_SEED;

    while (FunctionName[i])
    {
        WORD PartialName = *(WORD*)((ULONG64)FunctionName + i++);
        Hash ^= PartialName + SW2_ROR8(Hash);
    }

    return Hash;
}

BOOL SW2_PopulateSyscallList(void)
{
    // Return early if the list is already populated.
    if (SW2_SyscallList.Count) return TRUE;

#if defined(_WIN64)
    PSW2_PEB Peb = (PSW2_PEB)__readgsqword(0x60);
#else
    PSW2_PEB Peb = (PSW2_PEB)__readfsdword(0x30);
#endif
    PSW2_PEB_LDR_DATA Ldr = Peb->Ldr;
    PIMAGE_EXPORT_DIRECTORY ExportDirectory = NULL;
    PVOID DllBase = NULL;

    // Get the DllBase address of NTDLL.dll. NTDLL is not guaranteed to be the second
    // in the list, so it's safer to loop through the full list and find it.
    PSW2_LDR_DATA_TABLE_ENTRY LdrEntry;
    for (LdrEntry = (PSW2_LDR_DATA_TABLE_ENTRY)Ldr->Reserved2[1]; LdrEntry->DllBase != NULL; LdrEntry = (PSW2_LDR_DATA_TABLE_ENTRY)LdrEntry->Reserved1[0])
    {
        DllBase = LdrEntry->DllBase;
        PIMAGE_DOS_HEADER DosHeader = (PIMAGE_DOS_HEADER)DllBase;
        PIMAGE_NT_HEADERS NtHeaders = SW2_RVA2VA(PIMAGE_NT_HEADERS, DllBase, DosHeader->e_lfanew);
        PIMAGE_DATA_DIRECTORY DataDirectory = (PIMAGE_DATA_DIRECTORY)NtHeaders->OptionalHeader.DataDirectory;
        DWORD VirtualAddress = DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;
        if (VirtualAddress == 0) continue;

        ExportDirectory = (PIMAGE_EXPORT_DIRECTORY)SW2_RVA2VA(ULONG_PTR, DllBase, VirtualAddress);

        // If this is NTDLL.dll, exit loop.
        PCHAR DllName = SW2_RVA2VA(PCHAR, DllBase, ExportDirectory->Name);

        // 'ldtn' 1818522734
        if ((*(ULONG*)DllName | 0x20202020) != 1818522734) continue;
        // 'ld.l' 1818504812
        if ((*(ULONG*)(DllName + 4) | 0x20202020) == 1818504812) break;
    }

    if (!ExportDirectory) return FALSE;
    
#ifdef RANDSYSCALL
#ifdef _WIN64
    ntdllBase = (uint64_t)DllBase;
#else
    ntdllBase = (uint64_t)DllBase;
#endif
#endif

    DWORD NumberOfNames = ExportDirectory->NumberOfNames;
    PDWORD Functions = SW2_RVA2VA(PDWORD, DllBase, ExportDirectory->AddressOfFunctions);
    PDWORD Names = SW2_RVA2VA(PDWORD, DllBase, ExportDirectory->AddressOfNames);
    PWORD Ordinals = SW2_RVA2VA(PWORD, DllBase, ExportDirectory->AddressOfNameOrdinals);

    // Populate SW2_SyscallList with unsorted Zw* entries.
    DWORD i = 0;
    PSW2_SYSCALL_ENTRY Entries = SW2_SyscallList.Entries;
    do
    {
        PCHAR FunctionName = SW2_RVA2VA(PCHAR, DllBase, Names[NumberOfNames - 1]);

        // Is this a system call?
        // 'wZ' 30554
        if (*(USHORT*)FunctionName == 30554)
        {
            Entries[i].Hash = SW2_HashSyscall(FunctionName);
            Entries[i].Address = Functions[Ordinals[NumberOfNames - 1]];
            // printf("%s %p\n", FunctionName, Entries[i].Hash);

            i++;
            if (i == SW2_MAX_ENTRIES) break;
        }
    } while (--NumberOfNames);

    // Save total number of system calls found.
    SW2_SyscallList.Count = i;

    // Sort the list by address in ascending order.
    for (i = 0; i < SW2_SyscallList.Count - 1; i++)
    {
        for (DWORD j = 0; j < SW2_SyscallList.Count - i - 1; j++)
        {
            if (Entries[j].Address > Entries[j + 1].Address)
            {
                // Swap entries.
                SW2_SYSCALL_ENTRY TempEntry;

                TempEntry.Hash = Entries[j].Hash;
                TempEntry.Address = Entries[j].Address;

                Entries[j].Hash = Entries[j + 1].Hash;
                Entries[j].Address = Entries[j + 1].Address;

                Entries[j + 1].Hash = TempEntry.Hash;
                Entries[j + 1].Address = TempEntry.Address;
            }
        }
    }

    return TRUE;
}

EXTERN_C DWORD SW2_GetSyscallNumber(DWORD FunctionHash)
{
    // Ensure SW2_SyscallList is populated.
    if (!SW2_PopulateSyscallList()) return -1;

    for (DWORD i = 0; i < SW2_SyscallList.Count; i++)
    {
        if (FunctionHash == SW2_SyscallList.Entries[i].Hash)
        {
            return i;
        }
    }

    return -1;
}

#ifdef RANDSYSCALL
#ifdef _WIN64
EXTERN_C uint64_t SW2_GetRandomSyscallAddress(void)
#else
EXTERN_C DWORD SW2_GetRandomSyscallAddress(int callType)
#endif
{
    int instructOffset = 0;
    int instructValue = 0;
#ifndef _WIN64
    // Wow64
    if (callType == 0)
    {
        instructOffset = 0x05;
        instructValue = 0x0E8;
    }
    // x86
    else if (callType == 1)
    {
        instructOffset = 0x05;
        instructValue = 0x0BA;
    }
#else
    instructOffset = 0x12;
    instructValue = 0x0F;
#endif
    srand(time(0));
    do
    {
        int randNum = (rand() % (SW2_SyscallList.Count + 1));
        if (*(unsigned char*)(ntdllBase + SW2_SyscallList.Entries[randNum].Address + instructOffset) == instructValue)
            return (ntdllBase + SW2_SyscallList.Entries[randNum].Address + instructOffset);
    } while(1);
}
#endif

#ifdef _WIN64
    #define WhisperMain
    __asm__(".global WhisperMain \n\
    WhisperMain: \n\
        popq %rax \n\
        movq %rcx, 8(%rsp) \n\
        movq %rdx, 16(%rsp) \n\
        movq %r8, 24(%rsp) \n\
        movq %r9, 32(%rsp) \n\
        subq \$0x28, %rsp \n\
        movq %r10, %rcx \n\
        call SW2_GetSyscallNumber \n\
        addq \$0x28, %rsp \n\
        movq 8(%rsp), %rcx \n\
        movq 16(%rsp), %rdx \n\
        movq 24(%rsp), %r8 \n\
        movq 32(%rsp), %r9 \n\
        movq %rcx, %r10 \n\
        syscall \n\
        ret \n\
    ");
    __asm__(" \n NtAccessCheck: \n mov \$0x018A0737D, %r10 \n call WhisperMain \n ret \n NtWorkerFactoryWorkerReady: \n mov \$0x09BA97DB3, %r10 \n call WhisperMain \n ret \n NtAcceptConnectPort: \n mov \$0x068B11B5E, %r10 \n call WhisperMain \n ret \n NtMapUserPhysicalPagesScatter: \n mov \$0x07FEE1137, %r10 \n call WhisperMain \n ret \n NtWaitForSingleObject: \n mov \$0x090BFA003, %r10 \n call WhisperMain \n ret \n NtCallbackReturn: \n mov \$0x01E941D38, %r10 \n call WhisperMain \n ret \n NtReadFile: \n mov \$0x0EA79D8E0, %r10 \n call WhisperMain \n ret \n NtDeviceIoControlFile: \n mov \$0x07CF8ADCC, %r10 \n call WhisperMain \n ret \n NtWriteFile: \n mov \$0x059C9C8FD, %r10 \n call WhisperMain \n ret \n NtRemoveIoCompletion: \n mov \$0x00E886E1F, %r10 \n call WhisperMain \n ret \n NtReleaseSemaphore: \n mov \$0x044960E3A, %r10 \n call WhisperMain \n ret \n NtReplyWaitReceivePort: \n mov \$0x05930A25F, %r10 \n call WhisperMain \n ret \n NtReplyPort: \n mov \$0x02EBC2B22, %r10 \n call WhisperMain \n ret \n NtSetInformationThread: \n mov \$0x0340FF225, %r10 \n call WhisperMain \n ret \n NtSetEvent: \n mov \$0x008921512, %r10 \n call WhisperMain \n ret \n NtClose: \n mov \$0x04495DDA1, %r10 \n call WhisperMain \n ret \n NtQueryObject: \n mov \$0x006286085, %r10 \n call WhisperMain \n ret \n NtQueryInformationFile: \n mov \$0x093356B21, %r10 \n call WhisperMain \n ret \n NtOpenKey: \n mov \$0x0720A7393, %r10 \n call WhisperMain \n ret \n NtEnumerateValueKey: \n mov \$0x0DA9ADD04, %r10 \n call WhisperMain \n ret \n NtFindAtom: \n mov \$0x0322317BA, %r10 \n call WhisperMain \n ret \n NtQueryDefaultLocale: \n mov \$0x011287BAF, %r10 \n call WhisperMain \n ret \n NtQueryKey: \n mov \$0x0A672CB80, %r10 \n call WhisperMain \n ret \n NtQueryValueKey: \n mov \$0x0982089B9, %r10 \n call WhisperMain \n ret \n NtAllocateVirtualMemory: \n mov \$0x0C1512DC6, %r10 \n call WhisperMain \n ret \n NtQueryInformationProcess: \n mov \$0x0519E7C0E, %r10 \n call WhisperMain \n ret \n NtWaitForMultipleObjects32: \n mov \$0x03EAC1F7B, %r10 \n call WhisperMain \n ret \n NtWriteFileGather: \n mov \$0x0318CE8A7, %r10 \n call WhisperMain \n ret \n NtCreateKey: \n mov \$0x0104523FE, %r10 \n call WhisperMain \n ret \n NtFreeVirtualMemory: \n mov \$0x001930F05, %r10 \n call WhisperMain \n ret \n NtImpersonateClientOfPort: \n mov \$0x0396D26E6, %r10 \n call WhisperMain \n ret \n NtReleaseMutant: \n mov \$0x0BB168A93, %r10 \n call WhisperMain \n ret \n NtQueryInformationToken: \n mov \$0x08B9FF70C, %r10 \n call WhisperMain \n ret \n NtRequestWaitReplyPort: \n mov \$0x020B04558, %r10 \n call WhisperMain \n ret \n NtQueryVirtualMemory: \n mov \$0x079917101, %r10 \n call WhisperMain \n ret \n NtOpenThreadToken: \n mov \$0x0FB531910, %r10 \n call WhisperMain \n ret \n NtQueryInformationThread: \n mov \$0x0144CD773, %r10 \n call WhisperMain \n ret \n NtOpenProcess: \n mov \$0x0CE2CC5B1, %r10 \n call WhisperMain \n ret \n NtSetInformationFile: \n mov \$0x02D7D51A9, %r10 \n call WhisperMain \n ret \n NtMapViewOfSection: \n mov \$0x060C9AE95, %r10 \n call WhisperMain \n ret \n NtAccessCheckAndAuditAlarm: \n mov \$0x030971C08, %r10 \n call WhisperMain \n ret \n NtUnmapViewOfSection: \n mov \$0x008E02671, %r10 \n call WhisperMain \n ret \n NtReplyWaitReceivePortEx: \n mov \$0x0756F27B5, %r10 \n call WhisperMain \n ret \n NtTerminateProcess: \n mov \$0x0C337DE9E, %r10 \n call WhisperMain \n ret \n NtSetEventBoostPriority: \n mov \$0x0D88FCC04, %r10 \n call WhisperMain \n ret \n NtReadFileScatter: \n mov \$0x005AC0D37, %r10 \n call WhisperMain \n ret \n NtOpenThreadTokenEx: \n mov \$0x05A433EBE, %r10 \n call WhisperMain \n ret \n NtOpenProcessTokenEx: \n mov \$0x064B1500C, %r10 \n call WhisperMain \n ret \n NtQueryPerformanceCounter: \n mov \$0x07BED8581, %r10 \n call WhisperMain \n ret \n NtEnumerateKey: \n mov \$0x0761F6184, %r10 \n call WhisperMain \n ret \n NtOpenFile: \n mov \$0x0EA58F2EA, %r10 \n call WhisperMain \n ret \n NtDelayExecution: \n mov \$0x01AB51B26, %r10 \n call WhisperMain \n ret \n NtQueryDirectoryFile: \n mov \$0x0A8E240B0, %r10 \n call WhisperMain \n ret \n NtQuerySystemInformation: \n mov \$0x0228A241F, %r10 \n call WhisperMain \n ret \n NtOpenSection: \n mov \$0x08B23AB8E, %r10 \n call WhisperMain \n ret \n NtQueryTimer: \n mov \$0x0C99AF150, %r10 \n call WhisperMain \n ret \n NtFsControlFile: \n mov \$0x03895E81C, %r10 \n call WhisperMain \n ret \n NtWriteVirtualMemory: \n mov \$0x09B70CDAF, %r10 \n call WhisperMain \n ret \n NtCloseObjectAuditAlarm: \n mov \$0x016DB99C4, %r10 \n call WhisperMain \n ret \n NtDuplicateObject: \n mov \$0x02C050459, %r10 \n call WhisperMain \n ret \n NtQueryAttributesFile: \n mov \$0x0A6B5C6B2, %r10 \n call WhisperMain \n ret \n NtClearEvent: \n mov \$0x07EA59CF0, %r10 \n call WhisperMain \n ret \n NtReadVirtualMemory: \n mov \$0x03191351D, %r10 \n call WhisperMain \n ret \n NtOpenEvent: \n mov \$0x0183371AE, %r10 \n call WhisperMain \n ret \n NtAdjustPrivilegesToken: \n mov \$0x06DDD5958, %r10 \n call WhisperMain \n ret \n NtDuplicateToken: \n mov \$0x08350ADCC, %r10 \n call WhisperMain \n ret \n NtContinue: \n mov \$0x02EA07164, %r10 \n call WhisperMain \n ret \n NtQueryDefaultUILanguage: \n mov \$0x055D63014, %r10 \n call WhisperMain \n ret \n NtQueueApcThread: \n mov \$0x03CA43609, %r10 \n call WhisperMain \n ret \n NtYieldExecution: \n mov \$0x018B23A23, %r10 \n call WhisperMain \n ret \n NtAddAtom: \n mov \$0x03FB57C63, %r10 \n call WhisperMain \n ret \n NtCreateEvent: \n mov \$0x011B0FFAA, %r10 \n call WhisperMain \n ret \n NtQueryVolumeInformationFile: \n mov \$0x03575CE31, %r10 \n call WhisperMain \n ret \n NtCreateSection: \n mov \$0x0249304C1, %r10 \n call WhisperMain \n ret \n NtFlushBuffersFile: \n mov \$0x01D5C1AC4, %r10 \n call WhisperMain \n ret \n NtApphelpCacheControl: \n mov \$0x034624AA3, %r10 \n call WhisperMain \n ret \n NtCreateProcessEx: \n mov \$0x011B3E1CB, %r10 \n call WhisperMain \n ret \n NtCreateThread: \n mov \$0x0922FDC85, %r10 \n call WhisperMain \n ret \n NtIsProcessInJob: \n mov \$0x0A8D15C80, %r10 \n call WhisperMain \n ret \n NtProtectVirtualMemory: \n mov \$0x08792CB57, %r10 \n call WhisperMain \n ret \n NtQuerySection: \n mov \$0x01A8C5E27, %r10 \n call WhisperMain \n ret \n NtResumeThread: \n mov \$0x06AC0665F, %r10 \n call WhisperMain \n ret \n NtTerminateThread: \n mov \$0x02A0B34A9, %r10 \n call WhisperMain \n ret \n NtReadRequestData: \n mov \$0x02E83F03C, %r10 \n call WhisperMain \n ret \n NtCreateFile: \n mov \$0x06756F762, %r10 \n call WhisperMain \n ret \n NtQueryEvent: \n mov \$0x08000E5E6, %r10 \n call WhisperMain \n ret \n NtWriteRequestData: \n mov \$0x0621E52D0, %r10 \n call WhisperMain \n ret \n NtOpenDirectoryObject: \n mov \$0x02A353AA9, %r10 \n call WhisperMain \n ret \n NtAccessCheckByTypeAndAuditAlarm: \n mov \$0x00C53C00C, %r10 \n call WhisperMain \n ret \n NtWaitForMultipleObjects: \n mov \$0x051256B89, %r10 \n call WhisperMain \n ret \n NtSetInformationObject: \n mov \$0x03C1704BB, %r10 \n call WhisperMain \n ret \n NtCancelIoFile: \n mov \$0x008B94C02, %r10 \n call WhisperMain \n ret \n NtTraceEvent: \n mov \$0x02EB52126, %r10 \n call WhisperMain \n ret \n NtPowerInformation: \n mov \$0x06688641D, %r10 \n call WhisperMain \n ret \n NtSetValueKey: \n mov \$0x0E9392F67, %r10 \n call WhisperMain \n ret \n NtCancelTimer: \n mov \$0x0178326C0, %r10 \n call WhisperMain \n ret \n NtSetTimer: \n mov \$0x01DC52886, %r10 \n call WhisperMain \n ret \n NtAccessCheckByType: \n mov \$0x0DC56E104, %r10 \n call WhisperMain \n ret \n NtAccessCheckByTypeResultList: \n mov \$0x0C972F3DC, %r10 \n call WhisperMain \n ret \n NtAccessCheckByTypeResultListAndAuditAlarm: \n mov \$0x0C55AC9C5, %r10 \n call WhisperMain \n ret \n NtAccessCheckByTypeResultListAndAuditAlarmByHandle: \n mov \$0x0C85426DF, %r10 \n call WhisperMain \n ret \n NtAcquireProcessActivityReference: \n mov \$0x01683D82A, %r10 \n call WhisperMain \n ret \n NtAddAtomEx: \n mov \$0x041A9E191, %r10 \n call WhisperMain \n ret \n NtAddBootEntry: \n mov \$0x0458B7B2C, %r10 \n call WhisperMain \n ret \n NtAddDriverEntry: \n mov \$0x00F972544, %r10 \n call WhisperMain \n ret \n NtAdjustGroupsToken: \n mov \$0x03D891114, %r10 \n call WhisperMain \n ret \n NtAdjustTokenClaimsAndDeviceGroups: \n mov \$0x07FE55ABD, %r10 \n call WhisperMain \n ret \n NtAlertResumeThread: \n mov \$0x01CB2020B, %r10 \n call WhisperMain \n ret \n NtAlertThread: \n mov \$0x0380734AE, %r10 \n call WhisperMain \n ret \n NtAlertThreadByThreadId: \n mov \$0x009133583, %r10 \n call WhisperMain \n ret \n NtAllocateLocallyUniqueId: \n mov \$0x049AA1A9D, %r10 \n call WhisperMain \n ret \n NtAllocateReserveObject: \n mov \$0x03C8415D9, %r10 \n call WhisperMain \n ret \n NtAllocateUserPhysicalPages: \n mov \$0x0FE65D1FF, %r10 \n call WhisperMain \n ret \n NtAllocateUuids: \n mov \$0x0110A3997, %r10 \n call WhisperMain \n ret \n NtAllocateVirtualMemoryEx: \n mov \$0x06C973072, %r10 \n call WhisperMain \n ret \n NtAlpcAcceptConnectPort: \n mov \$0x010B1033E, %r10 \n call WhisperMain \n ret \n NtAlpcCancelMessage: \n mov \$0x061550348, %r10 \n call WhisperMain \n ret \n NtAlpcConnectPort: \n mov \$0x01E8F2520, %r10 \n call WhisperMain \n ret \n NtAlpcConnectPortEx: \n mov \$0x033AE7155, %r10 \n call WhisperMain \n ret \n NtAlpcCreatePort: \n mov \$0x0E1B28661, %r10 \n call WhisperMain \n ret \n NtAlpcCreatePortSection: \n mov \$0x04ED3ADC1, %r10 \n call WhisperMain \n ret \n NtAlpcCreateResourceReserve: \n mov \$0x0FE6AE8DB, %r10 \n call WhisperMain \n ret \n NtAlpcCreateSectionView: \n mov \$0x042F6634D, %r10 \n call WhisperMain \n ret \n NtAlpcCreateSecurityContext: \n mov \$0x0FE67EBCE, %r10 \n call WhisperMain \n ret \n NtAlpcDeletePortSection: \n mov \$0x0108A121F, %r10 \n call WhisperMain \n ret \n NtAlpcDeleteResourceReserve: \n mov \$0x038BCC8D7, %r10 \n call WhisperMain \n ret \n NtAlpcDeleteSectionView: \n mov \$0x007AEFAC8, %r10 \n call WhisperMain \n ret \n NtAlpcDeleteSecurityContext: \n mov \$0x0DA41CFE8, %r10 \n call WhisperMain \n ret \n NtAlpcDisconnectPort: \n mov \$0x064F17F5E, %r10 \n call WhisperMain \n ret \n NtAlpcImpersonateClientContainerOfPort: \n mov \$0x03ABF3930, %r10 \n call WhisperMain \n ret \n NtAlpcImpersonateClientOfPort: \n mov \$0x0E073EFE8, %r10 \n call WhisperMain \n ret \n NtAlpcOpenSenderProcess: \n mov \$0x0A1BEB813, %r10 \n call WhisperMain \n ret \n NtAlpcOpenSenderThread: \n mov \$0x01CBFD609, %r10 \n call WhisperMain \n ret \n NtAlpcQueryInformation: \n mov \$0x0349C283F, %r10 \n call WhisperMain \n ret \n NtAlpcQueryInformationMessage: \n mov \$0x007BAC4E2, %r10 \n call WhisperMain \n ret \n NtAlpcRevokeSecurityContext: \n mov \$0x0D74AC2EB, %r10 \n call WhisperMain \n ret \n NtAlpcSendWaitReceivePort: \n mov \$0x026B63B3E, %r10 \n call WhisperMain \n ret \n NtAlpcSetInformation: \n mov \$0x064C9605B, %r10 \n call WhisperMain \n ret \n NtAreMappedFilesTheSame: \n mov \$0x0AF96D807, %r10 \n call WhisperMain \n ret \n NtAssignProcessToJobObject: \n mov \$0x00622F45F, %r10 \n call WhisperMain \n ret \n NtAssociateWaitCompletionPacket: \n mov \$0x01CBA4A67, %r10 \n call WhisperMain \n ret \n NtCallEnclave: \n mov \$0x02037B507, %r10 \n call WhisperMain \n ret \n NtCancelIoFileEx: \n mov \$0x058BA8AE0, %r10 \n call WhisperMain \n ret \n NtCancelSynchronousIoFile: \n mov \$0x0397931E9, %r10 \n call WhisperMain \n ret \n NtCancelTimer2: \n mov \$0x0D794D342, %r10 \n call WhisperMain \n ret \n NtCancelWaitCompletionPacket: \n mov \$0x0795C1FCE, %r10 \n call WhisperMain \n ret \n NtCommitComplete: \n mov \$0x09EC04A8E, %r10 \n call WhisperMain \n ret \n NtCommitEnlistment: \n mov \$0x07B258F42, %r10 \n call WhisperMain \n ret \n NtCommitRegistryTransaction: \n mov \$0x00AE60C77, %r10 \n call WhisperMain \n ret \n NtCommitTransaction: \n mov \$0x03AAF0A0D, %r10 \n call WhisperMain \n ret \n NtCompactKeys: \n mov \$0x026471BD0, %r10 \n call WhisperMain \n ret \n NtCompareObjects: \n mov \$0x049D54157, %r10 \n call WhisperMain \n ret \n NtCompareSigningLevels: \n mov \$0x068C56852, %r10 \n call WhisperMain \n ret \n NtCompareTokens: \n mov \$0x00D94050F, %r10 \n call WhisperMain \n ret \n NtCompleteConnectPort: \n mov \$0x030B2196C, %r10 \n call WhisperMain \n ret \n NtCompressKey: \n mov \$0x0D0A8E717, %r10 \n call WhisperMain \n ret \n NtConnectPort: \n mov \$0x03EB03B22, %r10 \n call WhisperMain \n ret \n NtConvertBetweenAuxiliaryCounterAndPerformanceCounter: \n mov \$0x03795DD89, %r10 \n call WhisperMain \n ret \n NtCreateDebugObject: \n mov \$0x07AE3022F, %r10 \n call WhisperMain \n ret \n NtCreateDirectoryObject: \n mov \$0x03AA4760B, %r10 \n call WhisperMain \n ret \n NtCreateDirectoryObjectEx: \n mov \$0x042AEB0D4, %r10 \n call WhisperMain \n ret \n NtCreateEnclave: \n mov \$0x05A1F9944, %r10 \n call WhisperMain \n ret \n NtCreateEnlistment: \n mov \$0x079DC023B, %r10 \n call WhisperMain \n ret \n NtCreateEventPair: \n mov \$0x034944A63, %r10 \n call WhisperMain \n ret \n NtCreateIRTimer: \n mov \$0x0039635D2, %r10 \n call WhisperMain \n ret \n NtCreateIoCompletion: \n mov \$0x09C929232, %r10 \n call WhisperMain \n ret \n NtCreateJobObject: \n mov \$0x02D6903F3, %r10 \n call WhisperMain \n ret \n NtCreateJobSet: \n mov \$0x0F3CEDF11, %r10 \n call WhisperMain \n ret \n NtCreateKeyTransacted: \n mov \$0x054BC1602, %r10 \n call WhisperMain \n ret \n NtCreateKeyedEvent: \n mov \$0x069329245, %r10 \n call WhisperMain \n ret \n NtCreateLowBoxToken: \n mov \$0x067D8535A, %r10 \n call WhisperMain \n ret \n NtCreateMailslotFile: \n mov \$0x02EBDB48A, %r10 \n call WhisperMain \n ret \n NtCreateMutant: \n mov \$0x0BE119B48, %r10 \n call WhisperMain \n ret \n NtCreateNamedPipeFile: \n mov \$0x096197812, %r10 \n call WhisperMain \n ret \n NtCreatePagingFile: \n mov \$0x074B2026E, %r10 \n call WhisperMain \n ret \n NtCreatePartition: \n mov \$0x014825455, %r10 \n call WhisperMain \n ret \n NtCreatePort: \n mov \$0x01CB1E5DC, %r10 \n call WhisperMain \n ret \n NtCreatePrivateNamespace: \n mov \$0x04E908625, %r10 \n call WhisperMain \n ret \n NtCreateProcess: \n mov \$0x05FDE4E52, %r10 \n call WhisperMain \n ret \n NtCreateProfile: \n mov \$0x000DAF080, %r10 \n call WhisperMain \n ret \n NtCreateProfileEx: \n mov \$0x0805BB2E1, %r10 \n call WhisperMain \n ret \n NtCreateRegistryTransaction: \n mov \$0x01E8E381B, %r10 \n call WhisperMain \n ret \n NtCreateResourceManager: \n mov \$0x0103302B8, %r10 \n call WhisperMain \n ret \n NtCreateSemaphore: \n mov \$0x01D0FC3B4, %r10 \n call WhisperMain \n ret \n NtCreateSymbolicLinkObject: \n mov \$0x09A26E8CB, %r10 \n call WhisperMain \n ret \n NtCreateThreadEx: \n mov \$0x054AA9BDD, %r10 \n call WhisperMain \n ret \n NtCreateTimer: \n mov \$0x0144622FF, %r10 \n call WhisperMain \n ret \n NtCreateTimer2: \n mov \$0x0EB52365D, %r10 \n call WhisperMain \n ret \n NtCreateToken: \n mov \$0x020482AD1, %r10 \n call WhisperMain \n ret \n NtCreateTokenEx: \n mov \$0x08A99CC66, %r10 \n call WhisperMain \n ret \n NtCreateTransaction: \n mov \$0x0168C3411, %r10 \n call WhisperMain \n ret \n NtCreateTransactionManager: \n mov \$0x0B22E98B3, %r10 \n call WhisperMain \n ret \n NtCreateUserProcess: \n mov \$0x065392CE4, %r10 \n call WhisperMain \n ret \n NtCreateWaitCompletionPacket: \n mov \$0x0393C3BA2, %r10 \n call WhisperMain \n ret \n NtCreateWaitablePort: \n mov \$0x020BD2726, %r10 \n call WhisperMain \n ret \n NtCreateWnfStateName: \n mov \$0x01CBECF89, %r10 \n call WhisperMain \n ret \n NtCreateWorkerFactory: \n mov \$0x02AA91E26, %r10 \n call WhisperMain \n ret \n NtDebugActiveProcess: \n mov \$0x08E248FAB, %r10 \n call WhisperMain \n ret \n NtDebugContinue: \n mov \$0x096119E7C, %r10 \n call WhisperMain \n ret \n NtDeleteAtom: \n mov \$0x0D27FF1E0, %r10 \n call WhisperMain \n ret \n NtDeleteBootEntry: \n mov \$0x0C99D3CE3, %r10 \n call WhisperMain \n ret \n NtDeleteDriverEntry: \n mov \$0x0DF9315D0, %r10 \n call WhisperMain \n ret \n NtDeleteFile: \n mov \$0x0E278ECDC, %r10 \n call WhisperMain \n ret \n NtDeleteKey: \n mov \$0x01FAB3208, %r10 \n call WhisperMain \n ret \n NtDeleteObjectAuditAlarm: \n mov \$0x01897120A, %r10 \n call WhisperMain \n ret \n NtDeletePrivateNamespace: \n mov \$0x01EB55799, %r10 \n call WhisperMain \n ret \n NtDeleteValueKey: \n mov \$0x0A79A9224, %r10 \n call WhisperMain \n ret \n NtDeleteWnfStateData: \n mov \$0x076BC4014, %r10 \n call WhisperMain \n ret \n NtDeleteWnfStateName: \n mov \$0x00CC22507, %r10 \n call WhisperMain \n ret \n NtDisableLastKnownGood: \n mov \$0x0F82FF685, %r10 \n call WhisperMain \n ret \n NtDisplayString: \n mov \$0x01E8E2A1E, %r10 \n call WhisperMain \n ret \n NtDrawText: \n mov \$0x0D24BD7C2, %r10 \n call WhisperMain \n ret \n NtEnableLastKnownGood: \n mov \$0x09DCEAD19, %r10 \n call WhisperMain \n ret \n NtEnumerateBootEntries: \n mov \$0x04C914109, %r10 \n call WhisperMain \n ret \n NtEnumerateDriverEntries: \n mov \$0x034844D6F, %r10 \n call WhisperMain \n ret \n NtEnumerateSystemEnvironmentValuesEx: \n mov \$0x07FD24267, %r10 \n call WhisperMain \n ret \n NtEnumerateTransactionObject: \n mov \$0x06AB56A29, %r10 \n call WhisperMain \n ret \n NtExtendSection: \n mov \$0x038A81E21, %r10 \n call WhisperMain \n ret \n NtFilterBootOption: \n mov \$0x03A92D781, %r10 \n call WhisperMain \n ret \n NtFilterToken: \n mov \$0x0E55CD3D8, %r10 \n call WhisperMain \n ret \n NtFilterTokenEx: \n mov \$0x00484F1F9, %r10 \n call WhisperMain \n ret \n NtFlushBuffersFileEx: \n mov \$0x00B9845AE, %r10 \n call WhisperMain \n ret \n NtFlushInstallUILanguage: \n mov \$0x0F557C2CE, %r10 \n call WhisperMain \n ret \n NtFlushInstructionCache: \n mov \$0x0693F9567, %r10 \n call WhisperMain \n ret \n NtFlushKey: \n mov \$0x0D461E3DF, %r10 \n call WhisperMain \n ret \n NtFlushProcessWriteBuffers: \n mov \$0x07EBC7E2C, %r10 \n call WhisperMain \n ret \n NtFlushVirtualMemory: \n mov \$0x0B31C89AF, %r10 \n call WhisperMain \n ret \n NtFlushWriteBuffer: \n mov \$0x06BC0429B, %r10 \n call WhisperMain \n ret \n NtFreeUserPhysicalPages: \n mov \$0x011BC2A12, %r10 \n call WhisperMain \n ret \n NtFreezeRegistry: \n mov \$0x026452CC5, %r10 \n call WhisperMain \n ret \n NtFreezeTransactions: \n mov \$0x013CB00AD, %r10 \n call WhisperMain \n ret \n NtGetCachedSigningLevel: \n mov \$0x0B28BB815, %r10 \n call WhisperMain \n ret \n NtGetCompleteWnfStateSubscription: \n mov \$0x044CB0A13, %r10 \n call WhisperMain \n ret \n NtGetContextThread: \n mov \$0x06B4E279E, %r10 \n call WhisperMain \n ret \n NtGetCurrentProcessorNumber: \n mov \$0x006937878, %r10 \n call WhisperMain \n ret \n NtGetCurrentProcessorNumberEx: \n mov \$0x084EAA254, %r10 \n call WhisperMain \n ret \n NtGetDevicePowerState: \n mov \$0x0B49BA434, %r10 \n call WhisperMain \n ret \n NtGetMUIRegistryInfo: \n mov \$0x084B7B211, %r10 \n call WhisperMain \n ret \n NtGetNextProcess: \n mov \$0x01B9E1E0E, %r10 \n call WhisperMain \n ret \n NtGetNextThread: \n mov \$0x0EE4B2CED, %r10 \n call WhisperMain \n ret \n NtGetNlsSectionPtr: \n mov \$0x02B12C80E, %r10 \n call WhisperMain \n ret \n NtGetNotificationResourceManager: \n mov \$0x0823CAA87, %r10 \n call WhisperMain \n ret \n NtGetWriteWatch: \n mov \$0x0105E2CDA, %r10 \n call WhisperMain \n ret \n NtImpersonateAnonymousToken: \n mov \$0x04550AA4A, %r10 \n call WhisperMain \n ret \n NtImpersonateThread: \n mov \$0x0B000BAAE, %r10 \n call WhisperMain \n ret \n NtInitializeEnclave: \n mov \$0x02C93C098, %r10 \n call WhisperMain \n ret \n NtInitializeNlsFiles: \n mov \$0x06CECA3B6, %r10 \n call WhisperMain \n ret \n NtInitializeRegistry: \n mov \$0x0BC533055, %r10 \n call WhisperMain \n ret \n NtInitiatePowerAction: \n mov \$0x0CB578F84, %r10 \n call WhisperMain \n ret \n NtIsSystemResumeAutomatic: \n mov \$0x00440C162, %r10 \n call WhisperMain \n ret \n NtIsUILanguageComitted: \n mov \$0x027AA3515, %r10 \n call WhisperMain \n ret \n NtListenPort: \n mov \$0x0E173E0FD, %r10 \n call WhisperMain \n ret \n NtLoadDriver: \n mov \$0x012B81A26, %r10 \n call WhisperMain \n ret \n NtLoadEnclaveData: \n mov \$0x0849AD429, %r10 \n call WhisperMain \n ret \n NtLoadHotPatch: \n mov \$0x0ECA229FE, %r10 \n call WhisperMain \n ret \n NtLoadKey: \n mov \$0x0083A69A3, %r10 \n call WhisperMain \n ret \n NtLoadKey2: \n mov \$0x0AB3221EE, %r10 \n call WhisperMain \n ret \n NtLoadKeyEx: \n mov \$0x07399B624, %r10 \n call WhisperMain \n ret \n NtLockFile: \n mov \$0x03A3D365A, %r10 \n call WhisperMain \n ret \n NtLockProductActivationKeys: \n mov \$0x04F3248A0, %r10 \n call WhisperMain \n ret \n NtLockRegistryKey: \n mov \$0x0DEABF13D, %r10 \n call WhisperMain \n ret \n NtLockVirtualMemory: \n mov \$0x00794EEFB, %r10 \n call WhisperMain \n ret \n NtMakePermanentObject: \n mov \$0x0A13ECFE4, %r10 \n call WhisperMain \n ret \n NtMakeTemporaryObject: \n mov \$0x01E3D74A2, %r10 \n call WhisperMain \n ret \n NtManagePartition: \n mov \$0x00AE16A33, %r10 \n call WhisperMain \n ret \n NtMapCMFModule: \n mov \$0x0169B1AFC, %r10 \n call WhisperMain \n ret \n NtMapUserPhysicalPages: \n mov \$0x029B5721E, %r10 \n call WhisperMain \n ret \n NtMapViewOfSectionEx: \n mov \$0x0365CF80A, %r10 \n call WhisperMain \n ret \n NtModifyBootEntry: \n mov \$0x0099AFCE1, %r10 \n call WhisperMain \n ret \n NtModifyDriverEntry: \n mov \$0x021C8CD98, %r10 \n call WhisperMain \n ret \n NtNotifyChangeDirectoryFile: \n mov \$0x0AA3A816E, %r10 \n call WhisperMain \n ret \n NtNotifyChangeDirectoryFileEx: \n mov \$0x08B54FFA8, %r10 \n call WhisperMain \n ret \n NtNotifyChangeKey: \n mov \$0x0F1FBD3A0, %r10 \n call WhisperMain \n ret \n NtNotifyChangeMultipleKeys: \n mov \$0x065BE7236, %r10 \n call WhisperMain \n ret \n NtNotifyChangeSession: \n mov \$0x001890314, %r10 \n call WhisperMain \n ret \n NtOpenEnlistment: \n mov \$0x05BD55E63, %r10 \n call WhisperMain \n ret \n NtOpenEventPair: \n mov \$0x020944861, %r10 \n call WhisperMain \n ret \n NtOpenIoCompletion: \n mov \$0x07067F071, %r10 \n call WhisperMain \n ret \n NtOpenJobObject: \n mov \$0x0F341013F, %r10 \n call WhisperMain \n ret \n NtOpenKeyEx: \n mov \$0x00F99C3DC, %r10 \n call WhisperMain \n ret \n NtOpenKeyTransacted: \n mov \$0x0104416DE, %r10 \n call WhisperMain \n ret \n NtOpenKeyTransactedEx: \n mov \$0x0889ABA21, %r10 \n call WhisperMain \n ret \n NtOpenKeyedEvent: \n mov \$0x0E87FEBE8, %r10 \n call WhisperMain \n ret \n NtOpenMutant: \n mov \$0x0B22DF5FE, %r10 \n call WhisperMain \n ret \n NtOpenObjectAuditAlarm: \n mov \$0x02AAD0E7C, %r10 \n call WhisperMain \n ret \n NtOpenPartition: \n mov \$0x0108DD0DF, %r10 \n call WhisperMain \n ret \n NtOpenPrivateNamespace: \n mov \$0x0785F07BD, %r10 \n call WhisperMain \n ret \n NtOpenProcessToken: \n mov \$0x0E75BFBEA, %r10 \n call WhisperMain \n ret \n NtOpenRegistryTransaction: \n mov \$0x09CC47B51, %r10 \n call WhisperMain \n ret \n NtOpenResourceManager: \n mov \$0x0F9512419, %r10 \n call WhisperMain \n ret \n NtOpenSemaphore: \n mov \$0x09306CBBB, %r10 \n call WhisperMain \n ret \n NtOpenSession: \n mov \$0x0D2053455, %r10 \n call WhisperMain \n ret \n NtOpenSymbolicLinkObject: \n mov \$0x00A943819, %r10 \n call WhisperMain \n ret \n NtOpenThread: \n mov \$0x0183F5496, %r10 \n call WhisperMain \n ret \n NtOpenTimer: \n mov \$0x00B189804, %r10 \n call WhisperMain \n ret \n NtOpenTransaction: \n mov \$0x09C089C9B, %r10 \n call WhisperMain \n ret \n NtOpenTransactionManager: \n mov \$0x005E791C6, %r10 \n call WhisperMain \n ret \n NtPlugPlayControl: \n mov \$0x0C6693A38, %r10 \n call WhisperMain \n ret \n NtPrePrepareComplete: \n mov \$0x0089003FE, %r10 \n call WhisperMain \n ret \n NtPrePrepareEnlistment: \n mov \$0x0F9A71DCC, %r10 \n call WhisperMain \n ret \n NtPrepareComplete: \n mov \$0x004D057EE, %r10 \n call WhisperMain \n ret \n NtPrepareEnlistment: \n mov \$0x0D9469E8D, %r10 \n call WhisperMain \n ret \n NtPrivilegeCheck: \n mov \$0x028950FC5, %r10 \n call WhisperMain \n ret \n NtPrivilegeObjectAuditAlarm: \n mov \$0x0E12EDD61, %r10 \n call WhisperMain \n ret \n NtPrivilegedServiceAuditAlarm: \n mov \$0x012B41622, %r10 \n call WhisperMain \n ret \n NtPropagationComplete: \n mov \$0x00E913E3A, %r10 \n call WhisperMain \n ret \n NtPropagationFailed: \n mov \$0x04ED9AF84, %r10 \n call WhisperMain \n ret \n NtPulseEvent: \n mov \$0x0000A1B9D, %r10 \n call WhisperMain \n ret \n NtQueryAuxiliaryCounterFrequency: \n mov \$0x0EAD9F64C, %r10 \n call WhisperMain \n ret \n NtQueryBootEntryOrder: \n mov \$0x0F7EEFB75, %r10 \n call WhisperMain \n ret \n NtQueryBootOptions: \n mov \$0x0178D1F1B, %r10 \n call WhisperMain \n ret \n NtQueryDebugFilterState: \n mov \$0x074CA7E6A, %r10 \n call WhisperMain \n ret \n NtQueryDirectoryFileEx: \n mov \$0x0C8530A69, %r10 \n call WhisperMain \n ret \n NtQueryDirectoryObject: \n mov \$0x0E65ACF07, %r10 \n call WhisperMain \n ret \n NtQueryDriverEntryOrder: \n mov \$0x013461DDB, %r10 \n call WhisperMain \n ret \n NtQueryEaFile: \n mov \$0x0E4A4944F, %r10 \n call WhisperMain \n ret \n NtQueryFullAttributesFile: \n mov \$0x0C6CDC662, %r10 \n call WhisperMain \n ret \n NtQueryInformationAtom: \n mov \$0x09B07BA93, %r10 \n call WhisperMain \n ret \n NtQueryInformationByName: \n mov \$0x0A80AAF91, %r10 \n call WhisperMain \n ret \n NtQueryInformationEnlistment: \n mov \$0x02FB12E23, %r10 \n call WhisperMain \n ret \n NtQueryInformationJobObject: \n mov \$0x007A5C2EB, %r10 \n call WhisperMain \n ret \n NtQueryInformationPort: \n mov \$0x0A73AA8A9, %r10 \n call WhisperMain \n ret \n NtQueryInformationResourceManager: \n mov \$0x007B6EEEE, %r10 \n call WhisperMain \n ret \n NtQueryInformationTransaction: \n mov \$0x002ED227F, %r10 \n call WhisperMain \n ret \n NtQueryInformationTransactionManager: \n mov \$0x0B32C9DB0, %r10 \n call WhisperMain \n ret \n NtQueryInformationWorkerFactory: \n mov \$0x0CC9A2E03, %r10 \n call WhisperMain \n ret \n NtQueryInstallUILanguage: \n mov \$0x04FC9365A, %r10 \n call WhisperMain \n ret \n NtQueryIntervalProfile: \n mov \$0x0D73B26AF, %r10 \n call WhisperMain \n ret \n NtQueryIoCompletion: \n mov \$0x05ED55E47, %r10 \n call WhisperMain \n ret \n NtQueryLicenseValue: \n mov \$0x0D4433CCC, %r10 \n call WhisperMain \n ret \n NtQueryMultipleValueKey: \n mov \$0x0825AF1A0, %r10 \n call WhisperMain \n ret \n NtQueryMutant: \n mov \$0x0DE19F380, %r10 \n call WhisperMain \n ret \n NtQueryOpenSubKeys: \n mov \$0x00DB3606A, %r10 \n call WhisperMain \n ret \n NtQueryOpenSubKeysEx: \n mov \$0x061DAB182, %r10 \n call WhisperMain \n ret \n NtQueryPortInformationProcess: \n mov \$0x069306CA8, %r10 \n call WhisperMain \n ret \n NtQueryQuotaInformationFile: \n mov \$0x0E2B83781, %r10 \n call WhisperMain \n ret \n NtQuerySecurityAttributesToken: \n mov \$0x07D27A48C, %r10 \n call WhisperMain \n ret \n NtQuerySecurityObject: \n mov \$0x013BCE0C3, %r10 \n call WhisperMain \n ret \n NtQuerySecurityPolicy: \n mov \$0x005AAE1D7, %r10 \n call WhisperMain \n ret \n NtQuerySemaphore: \n mov \$0x03AAA6416, %r10 \n call WhisperMain \n ret \n NtQuerySymbolicLinkObject: \n mov \$0x01702E100, %r10 \n call WhisperMain \n ret \n NtQuerySystemEnvironmentValue: \n mov \$0x0CA9129DA, %r10 \n call WhisperMain \n ret \n NtQuerySystemEnvironmentValueEx: \n mov \$0x0534A0796, %r10 \n call WhisperMain \n ret \n NtQuerySystemInformationEx: \n mov \$0x09694C44E, %r10 \n call WhisperMain \n ret \n NtQueryTimerResolution: \n mov \$0x0C24DE4D9, %r10 \n call WhisperMain \n ret \n NtQueryWnfStateData: \n mov \$0x0A3039595, %r10 \n call WhisperMain \n ret \n NtQueryWnfStateNameInformation: \n mov \$0x0FAEB18E7, %r10 \n call WhisperMain \n ret \n NtQueueApcThreadEx: \n mov \$0x0FCACFE16, %r10 \n call WhisperMain \n ret \n NtRaiseException: \n mov \$0x03F6E1A3D, %r10 \n call WhisperMain \n ret \n NtRaiseHardError: \n mov \$0x0CF5CD1CD, %r10 \n call WhisperMain \n ret \n NtReadOnlyEnlistment: \n mov \$0x09236B7A4, %r10 \n call WhisperMain \n ret \n NtRecoverEnlistment: \n mov \$0x0C8530818, %r10 \n call WhisperMain \n ret \n NtRecoverResourceManager: \n mov \$0x0605F52FC, %r10 \n call WhisperMain \n ret \n NtRecoverTransactionManager: \n mov \$0x006379837, %r10 \n call WhisperMain \n ret \n NtRegisterProtocolAddressInformation: \n mov \$0x0049326C7, %r10 \n call WhisperMain \n ret \n NtRegisterThreadTerminatePort: \n mov \$0x0EE76DE3A, %r10 \n call WhisperMain \n ret \n NtReleaseKeyedEvent: \n mov \$0x0DB88FCD3, %r10 \n call WhisperMain \n ret \n NtReleaseWorkerFactoryWorker: \n mov \$0x03E9FE8BB, %r10 \n call WhisperMain \n ret \n NtRemoveIoCompletionEx: \n mov \$0x06496A2E8, %r10 \n call WhisperMain \n ret \n NtRemoveProcessDebug: \n mov \$0x0CA5FCBF4, %r10 \n call WhisperMain \n ret \n NtRenameKey: \n mov \$0x0E9DF04AC, %r10 \n call WhisperMain \n ret \n NtRenameTransactionManager: \n mov \$0x005B75116, %r10 \n call WhisperMain \n ret \n NtReplaceKey: \n mov \$0x0DD58FCC2, %r10 \n call WhisperMain \n ret \n NtReplacePartitionUnit: \n mov \$0x0AEAF5BD5, %r10 \n call WhisperMain \n ret \n NtReplyWaitReplyPort: \n mov \$0x0E47EE1EE, %r10 \n call WhisperMain \n ret \n NtRequestPort: \n mov \$0x0E073F9F6, %r10 \n call WhisperMain \n ret \n NtResetEvent: \n mov \$0x0DC313C62, %r10 \n call WhisperMain \n ret \n NtResetWriteWatch: \n mov \$0x012DF2E5A, %r10 \n call WhisperMain \n ret \n NtRestoreKey: \n mov \$0x02BFE4615, %r10 \n call WhisperMain \n ret \n NtResumeProcess: \n mov \$0x083D37ABE, %r10 \n call WhisperMain \n ret \n NtRevertContainerImpersonation: \n mov \$0x00895C8C7, %r10 \n call WhisperMain \n ret \n NtRollbackComplete: \n mov \$0x054B85056, %r10 \n call WhisperMain \n ret \n NtRollbackEnlistment: \n mov \$0x0D9469E8D, %r10 \n call WhisperMain \n ret \n NtRollbackRegistryTransaction: \n mov \$0x010B7F7E2, %r10 \n call WhisperMain \n ret \n NtRollbackTransaction: \n mov \$0x003D73B7A, %r10 \n call WhisperMain \n ret \n NtRollforwardTransactionManager: \n mov \$0x00D339D2D, %r10 \n call WhisperMain \n ret \n NtSaveKey: \n mov \$0x077CB5654, %r10 \n call WhisperMain \n ret \n NtSaveKeyEx: \n mov \$0x01790EBE4, %r10 \n call WhisperMain \n ret \n NtSaveMergedKeys: \n mov \$0x025A32A3C, %r10 \n call WhisperMain \n ret \n NtSecureConnectPort: \n mov \$0x0128D0102, %r10 \n call WhisperMain \n ret \n NtSerializeBoot: \n mov \$0x097421756, %r10 \n call WhisperMain \n ret \n NtSetBootEntryOrder: \n mov \$0x0B16B8BC3, %r10 \n call WhisperMain \n ret \n NtSetBootOptions: \n mov \$0x007990D1D, %r10 \n call WhisperMain \n ret \n NtSetCachedSigningLevel: \n mov \$0x022BB2406, %r10 \n call WhisperMain \n ret \n NtSetCachedSigningLevel2: \n mov \$0x02499AD4E, %r10 \n call WhisperMain \n ret \n NtSetContextThread: \n mov \$0x0268C2825, %r10 \n call WhisperMain \n ret \n NtSetDebugFilterState: \n mov \$0x0D749D8ED, %r10 \n call WhisperMain \n ret \n NtSetDefaultHardErrorPort: \n mov \$0x0FB72E0FD, %r10 \n call WhisperMain \n ret \n NtSetDefaultLocale: \n mov \$0x0BC24BA98, %r10 \n call WhisperMain \n ret \n NtSetDefaultUILanguage: \n mov \$0x0A40A192F, %r10 \n call WhisperMain \n ret \n NtSetDriverEntryOrder: \n mov \$0x0B7998D35, %r10 \n call WhisperMain \n ret \n NtSetEaFile: \n mov \$0x0BD2A4348, %r10 \n call WhisperMain \n ret \n NtSetHighEventPair: \n mov \$0x044CC405D, %r10 \n call WhisperMain \n ret \n NtSetHighWaitLowEventPair: \n mov \$0x050D47445, %r10 \n call WhisperMain \n ret \n NtSetIRTimer: \n mov \$0x0FF5D1906, %r10 \n call WhisperMain \n ret \n NtSetInformationDebugObject: \n mov \$0x01C21E44D, %r10 \n call WhisperMain \n ret \n NtSetInformationEnlistment: \n mov \$0x0C054E1C2, %r10 \n call WhisperMain \n ret \n NtSetInformationJobObject: \n mov \$0x08FA0B52E, %r10 \n call WhisperMain \n ret \n NtSetInformationKey: \n mov \$0x0D859E5FD, %r10 \n call WhisperMain \n ret \n NtSetInformationResourceManager: \n mov \$0x0E3C7FF6A, %r10 \n call WhisperMain \n ret \n NtSetInformationSymbolicLink: \n mov \$0x06EF76E62, %r10 \n call WhisperMain \n ret \n NtSetInformationToken: \n mov \$0x08D088394, %r10 \n call WhisperMain \n ret \n NtSetInformationTransaction: \n mov \$0x0174BCAE0, %r10 \n call WhisperMain \n ret \n NtSetInformationTransactionManager: \n mov \$0x001B56948, %r10 \n call WhisperMain \n ret \n NtSetInformationVirtualMemory: \n mov \$0x019901D1F, %r10 \n call WhisperMain \n ret \n NtSetInformationWorkerFactory: \n mov \$0x084509CCE, %r10 \n call WhisperMain \n ret \n NtSetIntervalProfile: \n mov \$0x0EC263464, %r10 \n call WhisperMain \n ret \n NtSetIoCompletion: \n mov \$0x0C030E6A5, %r10 \n call WhisperMain \n ret \n NtSetIoCompletionEx: \n mov \$0x02695F9C2, %r10 \n call WhisperMain \n ret \n NtSetLdtEntries: \n mov \$0x08CA4FF44, %r10 \n call WhisperMain \n ret \n NtSetLowEventPair: \n mov \$0x011923702, %r10 \n call WhisperMain \n ret \n NtSetLowWaitHighEventPair: \n mov \$0x004DC004D, %r10 \n call WhisperMain \n ret \n NtSetQuotaInformationFile: \n mov \$0x09E3DA8AE, %r10 \n call WhisperMain \n ret \n NtSetSecurityObject: \n mov \$0x0D847888B, %r10 \n call WhisperMain \n ret \n NtSetSystemEnvironmentValue: \n mov \$0x01E88F888, %r10 \n call WhisperMain \n ret \n NtSetSystemEnvironmentValueEx: \n mov \$0x01C0124BE, %r10 \n call WhisperMain \n ret \n NtSetSystemInformation: \n mov \$0x0D9B6DF25, %r10 \n call WhisperMain \n ret \n NtSetSystemPowerState: \n mov \$0x0D950A7D2, %r10 \n call WhisperMain \n ret \n NtSetSystemTime: \n mov \$0x03EAB4F3F, %r10 \n call WhisperMain \n ret \n NtSetThreadExecutionState: \n mov \$0x08204E480, %r10 \n call WhisperMain \n ret \n NtSetTimer2: \n mov \$0x09BD89B16, %r10 \n call WhisperMain \n ret \n NtSetTimerEx: \n mov \$0x0B54085F8, %r10 \n call WhisperMain \n ret \n NtSetTimerResolution: \n mov \$0x054C27455, %r10 \n call WhisperMain \n ret \n NtSetUuidSeed: \n mov \$0x07458C176, %r10 \n call WhisperMain \n ret \n NtSetVolumeInformationFile: \n mov \$0x01EBFD488, %r10 \n call WhisperMain \n ret \n NtSetWnfProcessNotificationEvent: \n mov \$0x01288F19E, %r10 \n call WhisperMain \n ret \n NtShutdownSystem: \n mov \$0x0CCEDF547, %r10 \n call WhisperMain \n ret \n NtShutdownWorkerFactory: \n mov \$0x0C452D8B7, %r10 \n call WhisperMain \n ret \n NtSignalAndWaitForSingleObject: \n mov \$0x0A63B9E97, %r10 \n call WhisperMain \n ret \n NtSinglePhaseReject: \n mov \$0x0223C44CF, %r10 \n call WhisperMain \n ret \n NtStartProfile: \n mov \$0x0815AD3EF, %r10 \n call WhisperMain \n ret \n NtStopProfile: \n mov \$0x0049DCAB8, %r10 \n call WhisperMain \n ret \n NtSubscribeWnfStateChange: \n mov \$0x09E39D3E0, %r10 \n call WhisperMain \n ret \n NtSuspendProcess: \n mov \$0x0315E32C0, %r10 \n call WhisperMain \n ret \n NtSuspendThread: \n mov \$0x036932821, %r10 \n call WhisperMain \n ret \n NtSystemDebugControl: \n mov \$0x0019FF3D9, %r10 \n call WhisperMain \n ret \n NtTerminateEnclave: \n mov \$0x060BF7434, %r10 \n call WhisperMain \n ret \n NtTerminateJobObject: \n mov \$0x0049F5245, %r10 \n call WhisperMain \n ret \n NtTestAlert: \n mov \$0x0CF52DAF3, %r10 \n call WhisperMain \n ret \n NtThawRegistry: \n mov \$0x0C2A133E8, %r10 \n call WhisperMain \n ret \n NtThawTransactions: \n mov \$0x077E74B55, %r10 \n call WhisperMain \n ret \n NtTraceControl: \n mov \$0x03FA9F9F3, %r10 \n call WhisperMain \n ret \n NtTranslateFilePath: \n mov \$0x0FF56FCCD, %r10 \n call WhisperMain \n ret \n NtUmsThreadYield: \n mov \$0x08F159CA1, %r10 \n call WhisperMain \n ret \n NtUnloadDriver: \n mov \$0x0DD6A2061, %r10 \n call WhisperMain \n ret \n NtUnloadKey: \n mov \$0x068BD075B, %r10 \n call WhisperMain \n ret \n NtUnloadKey2: \n mov \$0x033D56F58, %r10 \n call WhisperMain \n ret \n NtUnloadKeyEx: \n mov \$0x029E71F58, %r10 \n call WhisperMain \n ret \n NtUnlockFile: \n mov \$0x02A7B5CEF, %r10 \n call WhisperMain \n ret \n NtUnlockVirtualMemory: \n mov \$0x0FFA8C917, %r10 \n call WhisperMain \n ret \n NtUnmapViewOfSectionEx: \n mov \$0x04A914E2C, %r10 \n call WhisperMain \n ret \n NtUnsubscribeWnfStateChange: \n mov \$0x0EA3FB7FE, %r10 \n call WhisperMain \n ret \n NtUpdateWnfStateData: \n mov \$0x0CD02DFB3, %r10 \n call WhisperMain \n ret \n NtVdmControl: \n mov \$0x08B9012A6, %r10 \n call WhisperMain \n ret \n NtWaitForAlertByThreadId: \n mov \$0x046BA6C7D, %r10 \n call WhisperMain \n ret \n NtWaitForDebugEvent: \n mov \$0x000CF1D66, %r10 \n call WhisperMain \n ret \n NtWaitForKeyedEvent: \n mov \$0x090CA6AAD, %r10 \n call WhisperMain \n ret \n NtWaitForWorkViaWorkerFactory: \n mov \$0x0F8AED47B, %r10 \n call WhisperMain \n ret \n NtWaitHighEventPair: \n mov \$0x0D34FC1D0, %r10 \n call WhisperMain \n ret \n NtWaitLowEventPair: \n mov \$0x0B4165C0B, %r10 \n call WhisperMain \n ret \n NtAcquireCMFViewOwnership: \n mov \$0x06AD32A5C, %r10 \n call WhisperMain \n ret \n NtCancelDeviceWakeupRequest: \n mov \$0x0F7BC10D7, %r10 \n call WhisperMain \n ret \n NtClearAllSavepointsTransaction: \n mov \$0x0C089E259, %r10 \n call WhisperMain \n ret \n NtClearSavepointTransaction: \n mov \$0x0F56929C7, %r10 \n call WhisperMain \n ret \n NtRollbackSavepointTransaction: \n mov \$0x0D843FA97, %r10 \n call WhisperMain \n ret \n NtSavepointTransaction: \n mov \$0x09813DAC7, %r10 \n call WhisperMain \n ret \n NtSavepointComplete: \n mov \$0x088DA86B3, %r10 \n call WhisperMain \n ret \n NtCreateSectionEx: \n mov \$0x0B053F2E9, %r10 \n call WhisperMain \n ret \n NtCreateCrossVmEvent: \n mov \$0x0FE3CC196, %r10 \n call WhisperMain \n ret \n NtGetPlugPlayEvent: \n mov \$0x000902D08, %r10 \n call WhisperMain \n ret \n NtListTransactions: \n mov \$0x08525A983, %r10 \n call WhisperMain \n ret \n NtMarshallTransaction: \n mov \$0x0905B92CF, %r10 \n call WhisperMain \n ret \n NtPullTransaction: \n mov \$0x0900BD6DB, %r10 \n call WhisperMain \n ret \n NtReleaseCMFViewOwnership: \n mov \$0x08E15828E, %r10 \n call WhisperMain \n ret \n NtWaitForWnfNotifications: \n mov \$0x0DC8FDA1C, %r10 \n call WhisperMain \n ret \n NtStartTm: \n mov \$0x0031E49A0, %r10 \n call WhisperMain \n ret \n NtSetInformationProcess: \n mov \$0x08117868C, %r10 \n call WhisperMain \n ret \n NtRequestDeviceWakeup: \n mov \$0x0359314C2, %r10 \n call WhisperMain \n ret \n NtRequestWakeupLatency: \n mov \$0x09801A1BC, %r10 \n call WhisperMain \n ret \n NtQuerySystemTime: \n mov \$0x0B9A357A9, %r10 \n call WhisperMain \n ret \n NtManageHotPatch: \n mov \$0x0A0BF2EA8, %r10 \n call WhisperMain \n ret \n NtContinueEx: \n mov \$0x05FC5BBB9, %r10 \n call WhisperMain \n ret \n");
#else
    #define WhisperMain
    __asm__(".global WhisperMain \n\
    WhisperMain: \n\
        popl %eax \n\
        call SW2_GetSyscallNumber \n\
        addl \$4, %esp \n\
        movl %fs:0xc0, %ecx \n\
        test %ecx, %ecx \n\
        jne _wow64 \n\
        leal 0x4(%esp), %edx \n\
        int \$0x2e \n\
        ret \n\
    _wow64: \n\
        xorl %ecx, %ecx \n\
        leal 0x4(%esp), %edx \n\
        movl %fs:0xc0, %ecx \n\
        call *%ecx \n\
        ret \n\
    ");
    __asm__(" \n NtAccessCheck: \n push \$0x018A0737D \n call WhisperMain \n ret \n NtWorkerFactoryWorkerReady: \n push \$0x09BA97DB3 \n call WhisperMain \n ret \n NtAcceptConnectPort: \n push \$0x068B11B5E \n call WhisperMain \n ret \n NtMapUserPhysicalPagesScatter: \n push \$0x07FEE1137 \n call WhisperMain \n ret \n NtWaitForSingleObject: \n push \$0x090BFA003 \n call WhisperMain \n ret \n NtCallbackReturn: \n push \$0x01E941D38 \n call WhisperMain \n ret \n NtReadFile: \n push \$0x0EA79D8E0 \n call WhisperMain \n ret \n NtDeviceIoControlFile: \n push \$0x07CF8ADCC \n call WhisperMain \n ret \n NtWriteFile: \n push \$0x059C9C8FD \n call WhisperMain \n ret \n NtRemoveIoCompletion: \n push \$0x00E886E1F \n call WhisperMain \n ret \n NtReleaseSemaphore: \n push \$0x044960E3A \n call WhisperMain \n ret \n NtReplyWaitReceivePort: \n push \$0x05930A25F \n call WhisperMain \n ret \n NtReplyPort: \n push \$0x02EBC2B22 \n call WhisperMain \n ret \n NtSetInformationThread: \n push \$0x0340FF225 \n call WhisperMain \n ret \n NtSetEvent: \n push \$0x008921512 \n call WhisperMain \n ret \n NtClose: \n push \$0x04495DDA1 \n call WhisperMain \n ret \n NtQueryObject: \n push \$0x006286085 \n call WhisperMain \n ret \n NtQueryInformationFile: \n push \$0x093356B21 \n call WhisperMain \n ret \n NtOpenKey: \n push \$0x0720A7393 \n call WhisperMain \n ret \n NtEnumerateValueKey: \n push \$0x0DA9ADD04 \n call WhisperMain \n ret \n NtFindAtom: \n push \$0x0322317BA \n call WhisperMain \n ret \n NtQueryDefaultLocale: \n push \$0x011287BAF \n call WhisperMain \n ret \n NtQueryKey: \n push \$0x0A672CB80 \n call WhisperMain \n ret \n NtQueryValueKey: \n push \$0x0982089B9 \n call WhisperMain \n ret \n NtAllocateVirtualMemory: \n push \$0x0C1512DC6 \n call WhisperMain \n ret \n NtQueryInformationProcess: \n push \$0x0519E7C0E \n call WhisperMain \n ret \n NtWaitForMultipleObjects32: \n push \$0x03EAC1F7B \n call WhisperMain \n ret \n NtWriteFileGather: \n push \$0x0318CE8A7 \n call WhisperMain \n ret \n NtCreateKey: \n push \$0x0104523FE \n call WhisperMain \n ret \n NtFreeVirtualMemory: \n push \$0x001930F05 \n call WhisperMain \n ret \n NtImpersonateClientOfPort: \n push \$0x0396D26E6 \n call WhisperMain \n ret \n NtReleaseMutant: \n push \$0x0BB168A93 \n call WhisperMain \n ret \n NtQueryInformationToken: \n push \$0x08B9FF70C \n call WhisperMain \n ret \n NtRequestWaitReplyPort: \n push \$0x020B04558 \n call WhisperMain \n ret \n NtQueryVirtualMemory: \n push \$0x079917101 \n call WhisperMain \n ret \n NtOpenThreadToken: \n push \$0x0FB531910 \n call WhisperMain \n ret \n NtQueryInformationThread: \n push \$0x0144CD773 \n call WhisperMain \n ret \n NtOpenProcess: \n push \$0x0CE2CC5B1 \n call WhisperMain \n ret \n NtSetInformationFile: \n push \$0x02D7D51A9 \n call WhisperMain \n ret \n NtMapViewOfSection: \n push \$0x060C9AE95 \n call WhisperMain \n ret \n NtAccessCheckAndAuditAlarm: \n push \$0x030971C08 \n call WhisperMain \n ret \n NtUnmapViewOfSection: \n push \$0x008E02671 \n call WhisperMain \n ret \n NtReplyWaitReceivePortEx: \n push \$0x0756F27B5 \n call WhisperMain \n ret \n NtTerminateProcess: \n push \$0x0C337DE9E \n call WhisperMain \n ret \n NtSetEventBoostPriority: \n push \$0x0D88FCC04 \n call WhisperMain \n ret \n NtReadFileScatter: \n push \$0x005AC0D37 \n call WhisperMain \n ret \n NtOpenThreadTokenEx: \n push \$0x05A433EBE \n call WhisperMain \n ret \n NtOpenProcessTokenEx: \n push \$0x064B1500C \n call WhisperMain \n ret \n NtQueryPerformanceCounter: \n push \$0x07BED8581 \n call WhisperMain \n ret \n NtEnumerateKey: \n push \$0x0761F6184 \n call WhisperMain \n ret \n NtOpenFile: \n push \$0x0EA58F2EA \n call WhisperMain \n ret \n NtDelayExecution: \n push \$0x01AB51B26 \n call WhisperMain \n ret \n NtQueryDirectoryFile: \n push \$0x0A8E240B0 \n call WhisperMain \n ret \n NtQuerySystemInformation: \n push \$0x0228A241F \n call WhisperMain \n ret \n NtOpenSection: \n push \$0x08B23AB8E \n call WhisperMain \n ret \n NtQueryTimer: \n push \$0x0C99AF150 \n call WhisperMain \n ret \n NtFsControlFile: \n push \$0x03895E81C \n call WhisperMain \n ret \n NtWriteVirtualMemory: \n push \$0x09B70CDAF \n call WhisperMain \n ret \n NtCloseObjectAuditAlarm: \n push \$0x016DB99C4 \n call WhisperMain \n ret \n NtDuplicateObject: \n push \$0x02C050459 \n call WhisperMain \n ret \n NtQueryAttributesFile: \n push \$0x0A6B5C6B2 \n call WhisperMain \n ret \n NtClearEvent: \n push \$0x07EA59CF0 \n call WhisperMain \n ret \n NtReadVirtualMemory: \n push \$0x03191351D \n call WhisperMain \n ret \n NtOpenEvent: \n push \$0x0183371AE \n call WhisperMain \n ret \n NtAdjustPrivilegesToken: \n push \$0x06DDD5958 \n call WhisperMain \n ret \n NtDuplicateToken: \n push \$0x08350ADCC \n call WhisperMain \n ret \n NtContinue: \n push \$0x02EA07164 \n call WhisperMain \n ret \n NtQueryDefaultUILanguage: \n push \$0x055D63014 \n call WhisperMain \n ret \n NtQueueApcThread: \n push \$0x03CA43609 \n call WhisperMain \n ret \n NtYieldExecution: \n push \$0x018B23A23 \n call WhisperMain \n ret \n NtAddAtom: \n push \$0x03FB57C63 \n call WhisperMain \n ret \n NtCreateEvent: \n push \$0x011B0FFAA \n call WhisperMain \n ret \n NtQueryVolumeInformationFile: \n push \$0x03575CE31 \n call WhisperMain \n ret \n NtCreateSection: \n push \$0x0249304C1 \n call WhisperMain \n ret \n NtFlushBuffersFile: \n push \$0x01D5C1AC4 \n call WhisperMain \n ret \n NtApphelpCacheControl: \n push \$0x034624AA3 \n call WhisperMain \n ret \n NtCreateProcessEx: \n push \$0x011B3E1CB \n call WhisperMain \n ret \n NtCreateThread: \n push \$0x0922FDC85 \n call WhisperMain \n ret \n NtIsProcessInJob: \n push \$0x0A8D15C80 \n call WhisperMain \n ret \n NtProtectVirtualMemory: \n push \$0x08792CB57 \n call WhisperMain \n ret \n NtQuerySection: \n push \$0x01A8C5E27 \n call WhisperMain \n ret \n NtResumeThread: \n push \$0x06AC0665F \n call WhisperMain \n ret \n NtTerminateThread: \n push \$0x02A0B34A9 \n call WhisperMain \n ret \n NtReadRequestData: \n push \$0x02E83F03C \n call WhisperMain \n ret \n NtCreateFile: \n push \$0x06756F762 \n call WhisperMain \n ret \n NtQueryEvent: \n push \$0x08000E5E6 \n call WhisperMain \n ret \n NtWriteRequestData: \n push \$0x0621E52D0 \n call WhisperMain \n ret \n NtOpenDirectoryObject: \n push \$0x02A353AA9 \n call WhisperMain \n ret \n NtAccessCheckByTypeAndAuditAlarm: \n push \$0x00C53C00C \n call WhisperMain \n ret \n NtWaitForMultipleObjects: \n push \$0x051256B89 \n call WhisperMain \n ret \n NtSetInformationObject: \n push \$0x03C1704BB \n call WhisperMain \n ret \n NtCancelIoFile: \n push \$0x008B94C02 \n call WhisperMain \n ret \n NtTraceEvent: \n push \$0x02EB52126 \n call WhisperMain \n ret \n NtPowerInformation: \n push \$0x06688641D \n call WhisperMain \n ret \n NtSetValueKey: \n push \$0x0E9392F67 \n call WhisperMain \n ret \n NtCancelTimer: \n push \$0x0178326C0 \n call WhisperMain \n ret \n NtSetTimer: \n push \$0x01DC52886 \n call WhisperMain \n ret \n NtAccessCheckByType: \n push \$0x0DC56E104 \n call WhisperMain \n ret \n NtAccessCheckByTypeResultList: \n push \$0x0C972F3DC \n call WhisperMain \n ret \n NtAccessCheckByTypeResultListAndAuditAlarm: \n push \$0x0C55AC9C5 \n call WhisperMain \n ret \n NtAccessCheckByTypeResultListAndAuditAlarmByHandle: \n push \$0x0C85426DF \n call WhisperMain \n ret \n NtAcquireProcessActivityReference: \n push \$0x01683D82A \n call WhisperMain \n ret \n NtAddAtomEx: \n push \$0x041A9E191 \n call WhisperMain \n ret \n NtAddBootEntry: \n push \$0x0458B7B2C \n call WhisperMain \n ret \n NtAddDriverEntry: \n push \$0x00F972544 \n call WhisperMain \n ret \n NtAdjustGroupsToken: \n push \$0x03D891114 \n call WhisperMain \n ret \n NtAdjustTokenClaimsAndDeviceGroups: \n push \$0x07FE55ABD \n call WhisperMain \n ret \n NtAlertResumeThread: \n push \$0x01CB2020B \n call WhisperMain \n ret \n NtAlertThread: \n push \$0x0380734AE \n call WhisperMain \n ret \n NtAlertThreadByThreadId: \n push \$0x009133583 \n call WhisperMain \n ret \n NtAllocateLocallyUniqueId: \n push \$0x049AA1A9D \n call WhisperMain \n ret \n NtAllocateReserveObject: \n push \$0x03C8415D9 \n call WhisperMain \n ret \n NtAllocateUserPhysicalPages: \n push \$0x0FE65D1FF \n call WhisperMain \n ret \n NtAllocateUuids: \n push \$0x0110A3997 \n call WhisperMain \n ret \n NtAllocateVirtualMemoryEx: \n push \$0x06C973072 \n call WhisperMain \n ret \n NtAlpcAcceptConnectPort: \n push \$0x010B1033E \n call WhisperMain \n ret \n NtAlpcCancelMessage: \n push \$0x061550348 \n call WhisperMain \n ret \n NtAlpcConnectPort: \n push \$0x01E8F2520 \n call WhisperMain \n ret \n NtAlpcConnectPortEx: \n push \$0x033AE7155 \n call WhisperMain \n ret \n NtAlpcCreatePort: \n push \$0x0E1B28661 \n call WhisperMain \n ret \n NtAlpcCreatePortSection: \n push \$0x04ED3ADC1 \n call WhisperMain \n ret \n NtAlpcCreateResourceReserve: \n push \$0x0FE6AE8DB \n call WhisperMain \n ret \n NtAlpcCreateSectionView: \n push \$0x042F6634D \n call WhisperMain \n ret \n NtAlpcCreateSecurityContext: \n push \$0x0FE67EBCE \n call WhisperMain \n ret \n NtAlpcDeletePortSection: \n push \$0x0108A121F \n call WhisperMain \n ret \n NtAlpcDeleteResourceReserve: \n push \$0x038BCC8D7 \n call WhisperMain \n ret \n NtAlpcDeleteSectionView: \n push \$0x007AEFAC8 \n call WhisperMain \n ret \n NtAlpcDeleteSecurityContext: \n push \$0x0DA41CFE8 \n call WhisperMain \n ret \n NtAlpcDisconnectPort: \n push \$0x064F17F5E \n call WhisperMain \n ret \n NtAlpcImpersonateClientContainerOfPort: \n push \$0x03ABF3930 \n call WhisperMain \n ret \n NtAlpcImpersonateClientOfPort: \n push \$0x0E073EFE8 \n call WhisperMain \n ret \n NtAlpcOpenSenderProcess: \n push \$0x0A1BEB813 \n call WhisperMain \n ret \n NtAlpcOpenSenderThread: \n push \$0x01CBFD609 \n call WhisperMain \n ret \n NtAlpcQueryInformation: \n push \$0x0349C283F \n call WhisperMain \n ret \n NtAlpcQueryInformationMessage: \n push \$0x007BAC4E2 \n call WhisperMain \n ret \n NtAlpcRevokeSecurityContext: \n push \$0x0D74AC2EB \n call WhisperMain \n ret \n NtAlpcSendWaitReceivePort: \n push \$0x026B63B3E \n call WhisperMain \n ret \n NtAlpcSetInformation: \n push \$0x064C9605B \n call WhisperMain \n ret \n NtAreMappedFilesTheSame: \n push \$0x0AF96D807 \n call WhisperMain \n ret \n NtAssignProcessToJobObject: \n push \$0x00622F45F \n call WhisperMain \n ret \n NtAssociateWaitCompletionPacket: \n push \$0x01CBA4A67 \n call WhisperMain \n ret \n NtCallEnclave: \n push \$0x02037B507 \n call WhisperMain \n ret \n NtCancelIoFileEx: \n push \$0x058BA8AE0 \n call WhisperMain \n ret \n NtCancelSynchronousIoFile: \n push \$0x0397931E9 \n call WhisperMain \n ret \n NtCancelTimer2: \n push \$0x0D794D342 \n call WhisperMain \n ret \n NtCancelWaitCompletionPacket: \n push \$0x0795C1FCE \n call WhisperMain \n ret \n NtCommitComplete: \n push \$0x09EC04A8E \n call WhisperMain \n ret \n NtCommitEnlistment: \n push \$0x07B258F42 \n call WhisperMain \n ret \n NtCommitRegistryTransaction: \n push \$0x00AE60C77 \n call WhisperMain \n ret \n NtCommitTransaction: \n push \$0x03AAF0A0D \n call WhisperMain \n ret \n NtCompactKeys: \n push \$0x026471BD0 \n call WhisperMain \n ret \n NtCompareObjects: \n push \$0x049D54157 \n call WhisperMain \n ret \n NtCompareSigningLevels: \n push \$0x068C56852 \n call WhisperMain \n ret \n NtCompareTokens: \n push \$0x00D94050F \n call WhisperMain \n ret \n NtCompleteConnectPort: \n push \$0x030B2196C \n call WhisperMain \n ret \n NtCompressKey: \n push \$0x0D0A8E717 \n call WhisperMain \n ret \n NtConnectPort: \n push \$0x03EB03B22 \n call WhisperMain \n ret \n NtConvertBetweenAuxiliaryCounterAndPerformanceCounter: \n push \$0x03795DD89 \n call WhisperMain \n ret \n NtCreateDebugObject: \n push \$0x07AE3022F \n call WhisperMain \n ret \n NtCreateDirectoryObject: \n push \$0x03AA4760B \n call WhisperMain \n ret \n NtCreateDirectoryObjectEx: \n push \$0x042AEB0D4 \n call WhisperMain \n ret \n NtCreateEnclave: \n push \$0x05A1F9944 \n call WhisperMain \n ret \n NtCreateEnlistment: \n push \$0x079DC023B \n call WhisperMain \n ret \n NtCreateEventPair: \n push \$0x034944A63 \n call WhisperMain \n ret \n NtCreateIRTimer: \n push \$0x0039635D2 \n call WhisperMain \n ret \n NtCreateIoCompletion: \n push \$0x09C929232 \n call WhisperMain \n ret \n NtCreateJobObject: \n push \$0x02D6903F3 \n call WhisperMain \n ret \n NtCreateJobSet: \n push \$0x0F3CEDF11 \n call WhisperMain \n ret \n NtCreateKeyTransacted: \n push \$0x054BC1602 \n call WhisperMain \n ret \n NtCreateKeyedEvent: \n push \$0x069329245 \n call WhisperMain \n ret \n NtCreateLowBoxToken: \n push \$0x067D8535A \n call WhisperMain \n ret \n NtCreateMailslotFile: \n push \$0x02EBDB48A \n call WhisperMain \n ret \n NtCreateMutant: \n push \$0x0BE119B48 \n call WhisperMain \n ret \n NtCreateNamedPipeFile: \n push \$0x096197812 \n call WhisperMain \n ret \n NtCreatePagingFile: \n push \$0x074B2026E \n call WhisperMain \n ret \n NtCreatePartition: \n push \$0x014825455 \n call WhisperMain \n ret \n NtCreatePort: \n push \$0x01CB1E5DC \n call WhisperMain \n ret \n NtCreatePrivateNamespace: \n push \$0x04E908625 \n call WhisperMain \n ret \n NtCreateProcess: \n push \$0x05FDE4E52 \n call WhisperMain \n ret \n NtCreateProfile: \n push \$0x000DAF080 \n call WhisperMain \n ret \n NtCreateProfileEx: \n push \$0x0805BB2E1 \n call WhisperMain \n ret \n NtCreateRegistryTransaction: \n push \$0x01E8E381B \n call WhisperMain \n ret \n NtCreateResourceManager: \n push \$0x0103302B8 \n call WhisperMain \n ret \n NtCreateSemaphore: \n push \$0x01D0FC3B4 \n call WhisperMain \n ret \n NtCreateSymbolicLinkObject: \n push \$0x09A26E8CB \n call WhisperMain \n ret \n NtCreateThreadEx: \n push \$0x054AA9BDD \n call WhisperMain \n ret \n NtCreateTimer: \n push \$0x0144622FF \n call WhisperMain \n ret \n NtCreateTimer2: \n push \$0x0EB52365D \n call WhisperMain \n ret \n NtCreateToken: \n push \$0x020482AD1 \n call WhisperMain \n ret \n NtCreateTokenEx: \n push \$0x08A99CC66 \n call WhisperMain \n ret \n NtCreateTransaction: \n push \$0x0168C3411 \n call WhisperMain \n ret \n NtCreateTransactionManager: \n push \$0x0B22E98B3 \n call WhisperMain \n ret \n NtCreateUserProcess: \n push \$0x065392CE4 \n call WhisperMain \n ret \n NtCreateWaitCompletionPacket: \n push \$0x0393C3BA2 \n call WhisperMain \n ret \n NtCreateWaitablePort: \n push \$0x020BD2726 \n call WhisperMain \n ret \n NtCreateWnfStateName: \n push \$0x01CBECF89 \n call WhisperMain \n ret \n NtCreateWorkerFactory: \n push \$0x02AA91E26 \n call WhisperMain \n ret \n NtDebugActiveProcess: \n push \$0x08E248FAB \n call WhisperMain \n ret \n NtDebugContinue: \n push \$0x096119E7C \n call WhisperMain \n ret \n NtDeleteAtom: \n push \$0x0D27FF1E0 \n call WhisperMain \n ret \n NtDeleteBootEntry: \n push \$0x0C99D3CE3 \n call WhisperMain \n ret \n NtDeleteDriverEntry: \n push \$0x0DF9315D0 \n call WhisperMain \n ret \n NtDeleteFile: \n push \$0x0E278ECDC \n call WhisperMain \n ret \n NtDeleteKey: \n push \$0x01FAB3208 \n call WhisperMain \n ret \n NtDeleteObjectAuditAlarm: \n push \$0x01897120A \n call WhisperMain \n ret \n NtDeletePrivateNamespace: \n push \$0x01EB55799 \n call WhisperMain \n ret \n NtDeleteValueKey: \n push \$0x0A79A9224 \n call WhisperMain \n ret \n NtDeleteWnfStateData: \n push \$0x076BC4014 \n call WhisperMain \n ret \n NtDeleteWnfStateName: \n push \$0x00CC22507 \n call WhisperMain \n ret \n NtDisableLastKnownGood: \n push \$0x0F82FF685 \n call WhisperMain \n ret \n NtDisplayString: \n push \$0x01E8E2A1E \n call WhisperMain \n ret \n NtDrawText: \n push \$0x0D24BD7C2 \n call WhisperMain \n ret \n NtEnableLastKnownGood: \n push \$0x09DCEAD19 \n call WhisperMain \n ret \n NtEnumerateBootEntries: \n push \$0x04C914109 \n call WhisperMain \n ret \n NtEnumerateDriverEntries: \n push \$0x034844D6F \n call WhisperMain \n ret \n NtEnumerateSystemEnvironmentValuesEx: \n push \$0x07FD24267 \n call WhisperMain \n ret \n NtEnumerateTransactionObject: \n push \$0x06AB56A29 \n call WhisperMain \n ret \n NtExtendSection: \n push \$0x038A81E21 \n call WhisperMain \n ret \n NtFilterBootOption: \n push \$0x03A92D781 \n call WhisperMain \n ret \n NtFilterToken: \n push \$0x0E55CD3D8 \n call WhisperMain \n ret \n NtFilterTokenEx: \n push \$0x00484F1F9 \n call WhisperMain \n ret \n NtFlushBuffersFileEx: \n push \$0x00B9845AE \n call WhisperMain \n ret \n NtFlushInstallUILanguage: \n push \$0x0F557C2CE \n call WhisperMain \n ret \n NtFlushInstructionCache: \n push \$0x0693F9567 \n call WhisperMain \n ret \n NtFlushKey: \n push \$0x0D461E3DF \n call WhisperMain \n ret \n NtFlushProcessWriteBuffers: \n push \$0x07EBC7E2C \n call WhisperMain \n ret \n NtFlushVirtualMemory: \n push \$0x0B31C89AF \n call WhisperMain \n ret \n NtFlushWriteBuffer: \n push \$0x06BC0429B \n call WhisperMain \n ret \n NtFreeUserPhysicalPages: \n push \$0x011BC2A12 \n call WhisperMain \n ret \n NtFreezeRegistry: \n push \$0x026452CC5 \n call WhisperMain \n ret \n NtFreezeTransactions: \n push \$0x013CB00AD \n call WhisperMain \n ret \n NtGetCachedSigningLevel: \n push \$0x0B28BB815 \n call WhisperMain \n ret \n NtGetCompleteWnfStateSubscription: \n push \$0x044CB0A13 \n call WhisperMain \n ret \n NtGetContextThread: \n push \$0x06B4E279E \n call WhisperMain \n ret \n NtGetCurrentProcessorNumber: \n push \$0x006937878 \n call WhisperMain \n ret \n NtGetCurrentProcessorNumberEx: \n push \$0x084EAA254 \n call WhisperMain \n ret \n NtGetDevicePowerState: \n push \$0x0B49BA434 \n call WhisperMain \n ret \n NtGetMUIRegistryInfo: \n push \$0x084B7B211 \n call WhisperMain \n ret \n NtGetNextProcess: \n push \$0x01B9E1E0E \n call WhisperMain \n ret \n NtGetNextThread: \n push \$0x0EE4B2CED \n call WhisperMain \n ret \n NtGetNlsSectionPtr: \n push \$0x02B12C80E \n call WhisperMain \n ret \n NtGetNotificationResourceManager: \n push \$0x0823CAA87 \n call WhisperMain \n ret \n NtGetWriteWatch: \n push \$0x0105E2CDA \n call WhisperMain \n ret \n NtImpersonateAnonymousToken: \n push \$0x04550AA4A \n call WhisperMain \n ret \n NtImpersonateThread: \n push \$0x0B000BAAE \n call WhisperMain \n ret \n NtInitializeEnclave: \n push \$0x02C93C098 \n call WhisperMain \n ret \n NtInitializeNlsFiles: \n push \$0x06CECA3B6 \n call WhisperMain \n ret \n NtInitializeRegistry: \n push \$0x0BC533055 \n call WhisperMain \n ret \n NtInitiatePowerAction: \n push \$0x0CB578F84 \n call WhisperMain \n ret \n NtIsSystemResumeAutomatic: \n push \$0x00440C162 \n call WhisperMain \n ret \n NtIsUILanguageComitted: \n push \$0x027AA3515 \n call WhisperMain \n ret \n NtListenPort: \n push \$0x0E173E0FD \n call WhisperMain \n ret \n NtLoadDriver: \n push \$0x012B81A26 \n call WhisperMain \n ret \n NtLoadEnclaveData: \n push \$0x0849AD429 \n call WhisperMain \n ret \n NtLoadHotPatch: \n push \$0x0ECA229FE \n call WhisperMain \n ret \n NtLoadKey: \n push \$0x0083A69A3 \n call WhisperMain \n ret \n NtLoadKey2: \n push \$0x0AB3221EE \n call WhisperMain \n ret \n NtLoadKeyEx: \n push \$0x07399B624 \n call WhisperMain \n ret \n NtLockFile: \n push \$0x03A3D365A \n call WhisperMain \n ret \n NtLockProductActivationKeys: \n push \$0x04F3248A0 \n call WhisperMain \n ret \n NtLockRegistryKey: \n push \$0x0DEABF13D \n call WhisperMain \n ret \n NtLockVirtualMemory: \n push \$0x00794EEFB \n call WhisperMain \n ret \n NtMakePermanentObject: \n push \$0x0A13ECFE4 \n call WhisperMain \n ret \n NtMakeTemporaryObject: \n push \$0x01E3D74A2 \n call WhisperMain \n ret \n NtManagePartition: \n push \$0x00AE16A33 \n call WhisperMain \n ret \n NtMapCMFModule: \n push \$0x0169B1AFC \n call WhisperMain \n ret \n NtMapUserPhysicalPages: \n push \$0x029B5721E \n call WhisperMain \n ret \n NtMapViewOfSectionEx: \n push \$0x0365CF80A \n call WhisperMain \n ret \n NtModifyBootEntry: \n push \$0x0099AFCE1 \n call WhisperMain \n ret \n NtModifyDriverEntry: \n push \$0x021C8CD98 \n call WhisperMain \n ret \n NtNotifyChangeDirectoryFile: \n push \$0x0AA3A816E \n call WhisperMain \n ret \n NtNotifyChangeDirectoryFileEx: \n push \$0x08B54FFA8 \n call WhisperMain \n ret \n NtNotifyChangeKey: \n push \$0x0F1FBD3A0 \n call WhisperMain \n ret \n NtNotifyChangeMultipleKeys: \n push \$0x065BE7236 \n call WhisperMain \n ret \n NtNotifyChangeSession: \n push \$0x001890314 \n call WhisperMain \n ret \n NtOpenEnlistment: \n push \$0x05BD55E63 \n call WhisperMain \n ret \n NtOpenEventPair: \n push \$0x020944861 \n call WhisperMain \n ret \n NtOpenIoCompletion: \n push \$0x07067F071 \n call WhisperMain \n ret \n NtOpenJobObject: \n push \$0x0F341013F \n call WhisperMain \n ret \n NtOpenKeyEx: \n push \$0x00F99C3DC \n call WhisperMain \n ret \n NtOpenKeyTransacted: \n push \$0x0104416DE \n call WhisperMain \n ret \n NtOpenKeyTransactedEx: \n push \$0x0889ABA21 \n call WhisperMain \n ret \n NtOpenKeyedEvent: \n push \$0x0E87FEBE8 \n call WhisperMain \n ret \n NtOpenMutant: \n push \$0x0B22DF5FE \n call WhisperMain \n ret \n NtOpenObjectAuditAlarm: \n push \$0x02AAD0E7C \n call WhisperMain \n ret \n NtOpenPartition: \n push \$0x0108DD0DF \n call WhisperMain \n ret \n NtOpenPrivateNamespace: \n push \$0x0785F07BD \n call WhisperMain \n ret \n NtOpenProcessToken: \n push \$0x0E75BFBEA \n call WhisperMain \n ret \n NtOpenRegistryTransaction: \n push \$0x09CC47B51 \n call WhisperMain \n ret \n NtOpenResourceManager: \n push \$0x0F9512419 \n call WhisperMain \n ret \n NtOpenSemaphore: \n push \$0x09306CBBB \n call WhisperMain \n ret \n NtOpenSession: \n push \$0x0D2053455 \n call WhisperMain \n ret \n NtOpenSymbolicLinkObject: \n push \$0x00A943819 \n call WhisperMain \n ret \n NtOpenThread: \n push \$0x0183F5496 \n call WhisperMain \n ret \n NtOpenTimer: \n push \$0x00B189804 \n call WhisperMain \n ret \n NtOpenTransaction: \n push \$0x09C089C9B \n call WhisperMain \n ret \n NtOpenTransactionManager: \n push \$0x005E791C6 \n call WhisperMain \n ret \n NtPlugPlayControl: \n push \$0x0C6693A38 \n call WhisperMain \n ret \n NtPrePrepareComplete: \n push \$0x0089003FE \n call WhisperMain \n ret \n NtPrePrepareEnlistment: \n push \$0x0F9A71DCC \n call WhisperMain \n ret \n NtPrepareComplete: \n push \$0x004D057EE \n call WhisperMain \n ret \n NtPrepareEnlistment: \n push \$0x0D9469E8D \n call WhisperMain \n ret \n NtPrivilegeCheck: \n push \$0x028950FC5 \n call WhisperMain \n ret \n NtPrivilegeObjectAuditAlarm: \n push \$0x0E12EDD61 \n call WhisperMain \n ret \n NtPrivilegedServiceAuditAlarm: \n push \$0x012B41622 \n call WhisperMain \n ret \n NtPropagationComplete: \n push \$0x00E913E3A \n call WhisperMain \n ret \n NtPropagationFailed: \n push \$0x04ED9AF84 \n call WhisperMain \n ret \n NtPulseEvent: \n push \$0x0000A1B9D \n call WhisperMain \n ret \n NtQueryAuxiliaryCounterFrequency: \n push \$0x0EAD9F64C \n call WhisperMain \n ret \n NtQueryBootEntryOrder: \n push \$0x0F7EEFB75 \n call WhisperMain \n ret \n NtQueryBootOptions: \n push \$0x0178D1F1B \n call WhisperMain \n ret \n NtQueryDebugFilterState: \n push \$0x074CA7E6A \n call WhisperMain \n ret \n NtQueryDirectoryFileEx: \n push \$0x0C8530A69 \n call WhisperMain \n ret \n NtQueryDirectoryObject: \n push \$0x0E65ACF07 \n call WhisperMain \n ret \n NtQueryDriverEntryOrder: \n push \$0x013461DDB \n call WhisperMain \n ret \n NtQueryEaFile: \n push \$0x0E4A4944F \n call WhisperMain \n ret \n NtQueryFullAttributesFile: \n push \$0x0C6CDC662 \n call WhisperMain \n ret \n NtQueryInformationAtom: \n push \$0x09B07BA93 \n call WhisperMain \n ret \n NtQueryInformationByName: \n push \$0x0A80AAF91 \n call WhisperMain \n ret \n NtQueryInformationEnlistment: \n push \$0x02FB12E23 \n call WhisperMain \n ret \n NtQueryInformationJobObject: \n push \$0x007A5C2EB \n call WhisperMain \n ret \n NtQueryInformationPort: \n push \$0x0A73AA8A9 \n call WhisperMain \n ret \n NtQueryInformationResourceManager: \n push \$0x007B6EEEE \n call WhisperMain \n ret \n NtQueryInformationTransaction: \n push \$0x002ED227F \n call WhisperMain \n ret \n NtQueryInformationTransactionManager: \n push \$0x0B32C9DB0 \n call WhisperMain \n ret \n NtQueryInformationWorkerFactory: \n push \$0x0CC9A2E03 \n call WhisperMain \n ret \n NtQueryInstallUILanguage: \n push \$0x04FC9365A \n call WhisperMain \n ret \n NtQueryIntervalProfile: \n push \$0x0D73B26AF \n call WhisperMain \n ret \n NtQueryIoCompletion: \n push \$0x05ED55E47 \n call WhisperMain \n ret \n NtQueryLicenseValue: \n push \$0x0D4433CCC \n call WhisperMain \n ret \n NtQueryMultipleValueKey: \n push \$0x0825AF1A0 \n call WhisperMain \n ret \n NtQueryMutant: \n push \$0x0DE19F380 \n call WhisperMain \n ret \n NtQueryOpenSubKeys: \n push \$0x00DB3606A \n call WhisperMain \n ret \n NtQueryOpenSubKeysEx: \n push \$0x061DAB182 \n call WhisperMain \n ret \n NtQueryPortInformationProcess: \n push \$0x069306CA8 \n call WhisperMain \n ret \n NtQueryQuotaInformationFile: \n push \$0x0E2B83781 \n call WhisperMain \n ret \n NtQuerySecurityAttributesToken: \n push \$0x07D27A48C \n call WhisperMain \n ret \n NtQuerySecurityObject: \n push \$0x013BCE0C3 \n call WhisperMain \n ret \n NtQuerySecurityPolicy: \n push \$0x005AAE1D7 \n call WhisperMain \n ret \n NtQuerySemaphore: \n push \$0x03AAA6416 \n call WhisperMain \n ret \n NtQuerySymbolicLinkObject: \n push \$0x01702E100 \n call WhisperMain \n ret \n NtQuerySystemEnvironmentValue: \n push \$0x0CA9129DA \n call WhisperMain \n ret \n NtQuerySystemEnvironmentValueEx: \n push \$0x0534A0796 \n call WhisperMain \n ret \n NtQuerySystemInformationEx: \n push \$0x09694C44E \n call WhisperMain \n ret \n NtQueryTimerResolution: \n push \$0x0C24DE4D9 \n call WhisperMain \n ret \n NtQueryWnfStateData: \n push \$0x0A3039595 \n call WhisperMain \n ret \n NtQueryWnfStateNameInformation: \n push \$0x0FAEB18E7 \n call WhisperMain \n ret \n NtQueueApcThreadEx: \n push \$0x0FCACFE16 \n call WhisperMain \n ret \n NtRaiseException: \n push \$0x03F6E1A3D \n call WhisperMain \n ret \n NtRaiseHardError: \n push \$0x0CF5CD1CD \n call WhisperMain \n ret \n NtReadOnlyEnlistment: \n push \$0x09236B7A4 \n call WhisperMain \n ret \n NtRecoverEnlistment: \n push \$0x0C8530818 \n call WhisperMain \n ret \n NtRecoverResourceManager: \n push \$0x0605F52FC \n call WhisperMain \n ret \n NtRecoverTransactionManager: \n push \$0x006379837 \n call WhisperMain \n ret \n NtRegisterProtocolAddressInformation: \n push \$0x0049326C7 \n call WhisperMain \n ret \n NtRegisterThreadTerminatePort: \n push \$0x0EE76DE3A \n call WhisperMain \n ret \n NtReleaseKeyedEvent: \n push \$0x0DB88FCD3 \n call WhisperMain \n ret \n NtReleaseWorkerFactoryWorker: \n push \$0x03E9FE8BB \n call WhisperMain \n ret \n NtRemoveIoCompletionEx: \n push \$0x06496A2E8 \n call WhisperMain \n ret \n NtRemoveProcessDebug: \n push \$0x0CA5FCBF4 \n call WhisperMain \n ret \n NtRenameKey: \n push \$0x0E9DF04AC \n call WhisperMain \n ret \n NtRenameTransactionManager: \n push \$0x005B75116 \n call WhisperMain \n ret \n NtReplaceKey: \n push \$0x0DD58FCC2 \n call WhisperMain \n ret \n NtReplacePartitionUnit: \n push \$0x0AEAF5BD5 \n call WhisperMain \n ret \n NtReplyWaitReplyPort: \n push \$0x0E47EE1EE \n call WhisperMain \n ret \n NtRequestPort: \n push \$0x0E073F9F6 \n call WhisperMain \n ret \n NtResetEvent: \n push \$0x0DC313C62 \n call WhisperMain \n ret \n NtResetWriteWatch: \n push \$0x012DF2E5A \n call WhisperMain \n ret \n NtRestoreKey: \n push \$0x02BFE4615 \n call WhisperMain \n ret \n NtResumeProcess: \n push \$0x083D37ABE \n call WhisperMain \n ret \n NtRevertContainerImpersonation: \n push \$0x00895C8C7 \n call WhisperMain \n ret \n NtRollbackComplete: \n push \$0x054B85056 \n call WhisperMain \n ret \n NtRollbackEnlistment: \n push \$0x0D9469E8D \n call WhisperMain \n ret \n NtRollbackRegistryTransaction: \n push \$0x010B7F7E2 \n call WhisperMain \n ret \n NtRollbackTransaction: \n push \$0x003D73B7A \n call WhisperMain \n ret \n NtRollforwardTransactionManager: \n push \$0x00D339D2D \n call WhisperMain \n ret \n NtSaveKey: \n push \$0x077CB5654 \n call WhisperMain \n ret \n NtSaveKeyEx: \n push \$0x01790EBE4 \n call WhisperMain \n ret \n NtSaveMergedKeys: \n push \$0x025A32A3C \n call WhisperMain \n ret \n NtSecureConnectPort: \n push \$0x0128D0102 \n call WhisperMain \n ret \n NtSerializeBoot: \n push \$0x097421756 \n call WhisperMain \n ret \n NtSetBootEntryOrder: \n push \$0x0B16B8BC3 \n call WhisperMain \n ret \n NtSetBootOptions: \n push \$0x007990D1D \n call WhisperMain \n ret \n NtSetCachedSigningLevel: \n push \$0x022BB2406 \n call WhisperMain \n ret \n NtSetCachedSigningLevel2: \n push \$0x02499AD4E \n call WhisperMain \n ret \n NtSetContextThread: \n push \$0x0268C2825 \n call WhisperMain \n ret \n NtSetDebugFilterState: \n push \$0x0D749D8ED \n call WhisperMain \n ret \n NtSetDefaultHardErrorPort: \n push \$0x0FB72E0FD \n call WhisperMain \n ret \n NtSetDefaultLocale: \n push \$0x0BC24BA98 \n call WhisperMain \n ret \n NtSetDefaultUILanguage: \n push \$0x0A40A192F \n call WhisperMain \n ret \n NtSetDriverEntryOrder: \n push \$0x0B7998D35 \n call WhisperMain \n ret \n NtSetEaFile: \n push \$0x0BD2A4348 \n call WhisperMain \n ret \n NtSetHighEventPair: \n push \$0x044CC405D \n call WhisperMain \n ret \n NtSetHighWaitLowEventPair: \n push \$0x050D47445 \n call WhisperMain \n ret \n NtSetIRTimer: \n push \$0x0FF5D1906 \n call WhisperMain \n ret \n NtSetInformationDebugObject: \n push \$0x01C21E44D \n call WhisperMain \n ret \n NtSetInformationEnlistment: \n push \$0x0C054E1C2 \n call WhisperMain \n ret \n NtSetInformationJobObject: \n push \$0x08FA0B52E \n call WhisperMain \n ret \n NtSetInformationKey: \n push \$0x0D859E5FD \n call WhisperMain \n ret \n NtSetInformationResourceManager: \n push \$0x0E3C7FF6A \n call WhisperMain \n ret \n NtSetInformationSymbolicLink: \n push \$0x06EF76E62 \n call WhisperMain \n ret \n NtSetInformationToken: \n push \$0x08D088394 \n call WhisperMain \n ret \n NtSetInformationTransaction: \n push \$0x0174BCAE0 \n call WhisperMain \n ret \n NtSetInformationTransactionManager: \n push \$0x001B56948 \n call WhisperMain \n ret \n NtSetInformationVirtualMemory: \n push \$0x019901D1F \n call WhisperMain \n ret \n NtSetInformationWorkerFactory: \n push \$0x084509CCE \n call WhisperMain \n ret \n NtSetIntervalProfile: \n push \$0x0EC263464 \n call WhisperMain \n ret \n NtSetIoCompletion: \n push \$0x0C030E6A5 \n call WhisperMain \n ret \n NtSetIoCompletionEx: \n push \$0x02695F9C2 \n call WhisperMain \n ret \n NtSetLdtEntries: \n push \$0x08CA4FF44 \n call WhisperMain \n ret \n NtSetLowEventPair: \n push \$0x011923702 \n call WhisperMain \n ret \n NtSetLowWaitHighEventPair: \n push \$0x004DC004D \n call WhisperMain \n ret \n NtSetQuotaInformationFile: \n push \$0x09E3DA8AE \n call WhisperMain \n ret \n NtSetSecurityObject: \n push \$0x0D847888B \n call WhisperMain \n ret \n NtSetSystemEnvironmentValue: \n push \$0x01E88F888 \n call WhisperMain \n ret \n NtSetSystemEnvironmentValueEx: \n push \$0x01C0124BE \n call WhisperMain \n ret \n NtSetSystemInformation: \n push \$0x0D9B6DF25 \n call WhisperMain \n ret \n NtSetSystemPowerState: \n push \$0x0D950A7D2 \n call WhisperMain \n ret \n NtSetSystemTime: \n push \$0x03EAB4F3F \n call WhisperMain \n ret \n NtSetThreadExecutionState: \n push \$0x08204E480 \n call WhisperMain \n ret \n NtSetTimer2: \n push \$0x09BD89B16 \n call WhisperMain \n ret \n NtSetTimerEx: \n push \$0x0B54085F8 \n call WhisperMain \n ret \n NtSetTimerResolution: \n push \$0x054C27455 \n call WhisperMain \n ret \n NtSetUuidSeed: \n push \$0x07458C176 \n call WhisperMain \n ret \n NtSetVolumeInformationFile: \n push \$0x01EBFD488 \n call WhisperMain \n ret \n NtSetWnfProcessNotificationEvent: \n push \$0x01288F19E \n call WhisperMain \n ret \n NtShutdownSystem: \n push \$0x0CCEDF547 \n call WhisperMain \n ret \n NtShutdownWorkerFactory: \n push \$0x0C452D8B7 \n call WhisperMain \n ret \n NtSignalAndWaitForSingleObject: \n push \$0x0A63B9E97 \n call WhisperMain \n ret \n NtSinglePhaseReject: \n push \$0x0223C44CF \n call WhisperMain \n ret \n NtStartProfile: \n push \$0x0815AD3EF \n call WhisperMain \n ret \n NtStopProfile: \n push \$0x0049DCAB8 \n call WhisperMain \n ret \n NtSubscribeWnfStateChange: \n push \$0x09E39D3E0 \n call WhisperMain \n ret \n NtSuspendProcess: \n push \$0x0315E32C0 \n call WhisperMain \n ret \n NtSuspendThread: \n push \$0x036932821 \n call WhisperMain \n ret \n NtSystemDebugControl: \n push \$0x0019FF3D9 \n call WhisperMain \n ret \n NtTerminateEnclave: \n push \$0x060BF7434 \n call WhisperMain \n ret \n NtTerminateJobObject: \n push \$0x0049F5245 \n call WhisperMain \n ret \n NtTestAlert: \n push \$0x0CF52DAF3 \n call WhisperMain \n ret \n NtThawRegistry: \n push \$0x0C2A133E8 \n call WhisperMain \n ret \n NtThawTransactions: \n push \$0x077E74B55 \n call WhisperMain \n ret \n NtTraceControl: \n push \$0x03FA9F9F3 \n call WhisperMain \n ret \n NtTranslateFilePath: \n push \$0x0FF56FCCD \n call WhisperMain \n ret \n NtUmsThreadYield: \n push \$0x08F159CA1 \n call WhisperMain \n ret \n NtUnloadDriver: \n push \$0x0DD6A2061 \n call WhisperMain \n ret \n NtUnloadKey: \n push \$0x068BD075B \n call WhisperMain \n ret \n NtUnloadKey2: \n push \$0x033D56F58 \n call WhisperMain \n ret \n NtUnloadKeyEx: \n push \$0x029E71F58 \n call WhisperMain \n ret \n NtUnlockFile: \n push \$0x02A7B5CEF \n call WhisperMain \n ret \n NtUnlockVirtualMemory: \n push \$0x0FFA8C917 \n call WhisperMain \n ret \n NtUnmapViewOfSectionEx: \n push \$0x04A914E2C \n call WhisperMain \n ret \n NtUnsubscribeWnfStateChange: \n push \$0x0EA3FB7FE \n call WhisperMain \n ret \n NtUpdateWnfStateData: \n push \$0x0CD02DFB3 \n call WhisperMain \n ret \n NtVdmControl: \n push \$0x08B9012A6 \n call WhisperMain \n ret \n NtWaitForAlertByThreadId: \n push \$0x046BA6C7D \n call WhisperMain \n ret \n NtWaitForDebugEvent: \n push \$0x000CF1D66 \n call WhisperMain \n ret \n NtWaitForKeyedEvent: \n push \$0x090CA6AAD \n call WhisperMain \n ret \n NtWaitForWorkViaWorkerFactory: \n push \$0x0F8AED47B \n call WhisperMain \n ret \n NtWaitHighEventPair: \n push \$0x0D34FC1D0 \n call WhisperMain \n ret \n NtWaitLowEventPair: \n push \$0x0B4165C0B \n call WhisperMain \n ret \n NtAcquireCMFViewOwnership: \n push \$0x06AD32A5C \n call WhisperMain \n ret \n NtCancelDeviceWakeupRequest: \n push \$0x0F7BC10D7 \n call WhisperMain \n ret \n NtClearAllSavepointsTransaction: \n push \$0x0C089E259 \n call WhisperMain \n ret \n NtClearSavepointTransaction: \n push \$0x0F56929C7 \n call WhisperMain \n ret \n NtRollbackSavepointTransaction: \n push \$0x0D843FA97 \n call WhisperMain \n ret \n NtSavepointTransaction: \n push \$0x09813DAC7 \n call WhisperMain \n ret \n NtSavepointComplete: \n push \$0x088DA86B3 \n call WhisperMain \n ret \n NtCreateSectionEx: \n push \$0x0B053F2E9 \n call WhisperMain \n ret \n NtCreateCrossVmEvent: \n push \$0x0FE3CC196 \n call WhisperMain \n ret \n NtGetPlugPlayEvent: \n push \$0x000902D08 \n call WhisperMain \n ret \n NtListTransactions: \n push \$0x08525A983 \n call WhisperMain \n ret \n NtMarshallTransaction: \n push \$0x0905B92CF \n call WhisperMain \n ret \n NtPullTransaction: \n push \$0x0900BD6DB \n call WhisperMain \n ret \n NtReleaseCMFViewOwnership: \n push \$0x08E15828E \n call WhisperMain \n ret \n NtWaitForWnfNotifications: \n push \$0x0DC8FDA1C \n call WhisperMain \n ret \n NtStartTm: \n push \$0x0031E49A0 \n call WhisperMain \n ret \n NtSetInformationProcess: \n push \$0x08117868C \n call WhisperMain \n ret \n NtRequestDeviceWakeup: \n push \$0x0359314C2 \n call WhisperMain \n ret \n NtRequestWakeupLatency: \n push \$0x09801A1BC \n call WhisperMain \n ret \n NtQuerySystemTime: \n push \$0x0B9A357A9 \n call WhisperMain \n ret \n NtManageHotPatch: \n push \$0x0A0BF2EA8 \n call WhisperMain \n ret \n NtContinueEx: \n push \$0x05FC5BBB9 \n call WhisperMain \n ret \n");
#endif




DWORD WINAPI MyThreadProc(LPVOID lpParam) {
    // 在这里编写线程的操作
    printf("This is a new thread!\n");
    return 0;
}

#include "stdio.h"
int main(int argc, char const *argv[]) {
    // int some = 'ldtn';
    // int some2 = 'ld.l';
    // int some3 = 'wZ';
    // printf("%s %d %d %d\n", "hello world.", some, some2, some3);
    // printf("%s\n", "hello world.");
    // printf("%d\n", SW2_GetSyscallNumber(-1842357115));
    // printf("%p\n", NtCreateThread);

    printf("%p\n", NtAccessCheck);
    printf("%p\n", NtWorkerFactoryWorkerReady);


    HANDLE hThread = NULL;
    NTSTATUS status = NtCreateThreadEx(&hThread, 
                                   THREAD_ALL_ACCESS,
                                   NULL, 
                                   GetCurrentProcess(), 
                                   MyThreadProc, 
                                   NULL, 
                                   FALSE, 
                                   0, 
                                   0, 
                                   0, 
                                   NULL);

    printf("%x\n", hThread);
    NtWaitForSingleObject(hThread, TRUE, (PLARGE_INTEGER)3000);

    Sleep(1000);
    
    return 0;
}
]]>
    </content>
    <tabTrigger>ccc</tabTrigger>
    <scope>source.c</scope>
</snippet>