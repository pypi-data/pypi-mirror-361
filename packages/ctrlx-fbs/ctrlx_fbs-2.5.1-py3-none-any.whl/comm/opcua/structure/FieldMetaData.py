# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldMetaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldMetaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFieldMetaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FieldMetaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldMetaData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldMetaData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.LocalizedText import LocalizedText
            obj = LocalizedText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FieldMetaData
    def FieldFlags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # FieldMetaData
    def BuiltInType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # FieldMetaData
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.NodeId import NodeId
            obj = NodeId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FieldMetaData
    def ValueRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldMetaData
    def ArrayDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FieldMetaData
    def ArrayDimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # FieldMetaData
    def ArrayDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldMetaData
    def ArrayDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # FieldMetaData
    def MaxStringLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FieldMetaData
    def DataSetFieldId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.Guid import Guid
            obj = Guid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FieldMetaData
    def Properties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.KeyValuePair import KeyValuePair
            obj = KeyValuePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FieldMetaData
    def PropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldMetaData
    def PropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def FieldMetaDataStart(builder): builder.StartObject(10)
def Start(builder):
    return FieldMetaDataStart(builder)
def FieldMetaDataAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return FieldMetaDataAddName(builder, name)
def FieldMetaDataAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return FieldMetaDataAddDescription(builder, description)
def FieldMetaDataAddFieldFlags(builder, fieldFlags): builder.PrependUint16Slot(2, fieldFlags, 0)
def AddFieldFlags(builder, fieldFlags):
    return FieldMetaDataAddFieldFlags(builder, fieldFlags)
def FieldMetaDataAddBuiltInType(builder, builtInType): builder.PrependUint8Slot(3, builtInType, 0)
def AddBuiltInType(builder, builtInType):
    return FieldMetaDataAddBuiltInType(builder, builtInType)
def FieldMetaDataAddDataType(builder, dataType): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dataType), 0)
def AddDataType(builder, dataType):
    return FieldMetaDataAddDataType(builder, dataType)
def FieldMetaDataAddValueRank(builder, valueRank): builder.PrependInt32Slot(5, valueRank, 0)
def AddValueRank(builder, valueRank):
    return FieldMetaDataAddValueRank(builder, valueRank)
def FieldMetaDataAddArrayDimensions(builder, arrayDimensions): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(arrayDimensions), 0)
def AddArrayDimensions(builder, arrayDimensions):
    return FieldMetaDataAddArrayDimensions(builder, arrayDimensions)
def FieldMetaDataStartArrayDimensionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartArrayDimensionsVector(builder, numElems):
    return FieldMetaDataStartArrayDimensionsVector(builder, numElems)
def FieldMetaDataAddMaxStringLength(builder, maxStringLength): builder.PrependUint32Slot(7, maxStringLength, 0)
def AddMaxStringLength(builder, maxStringLength):
    return FieldMetaDataAddMaxStringLength(builder, maxStringLength)
def FieldMetaDataAddDataSetFieldId(builder, dataSetFieldId): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetFieldId), 0)
def AddDataSetFieldId(builder, dataSetFieldId):
    return FieldMetaDataAddDataSetFieldId(builder, dataSetFieldId)
def FieldMetaDataAddProperties(builder, properties): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(properties), 0)
def AddProperties(builder, properties):
    return FieldMetaDataAddProperties(builder, properties)
def FieldMetaDataStartPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPropertiesVector(builder, numElems):
    return FieldMetaDataStartPropertiesVector(builder, numElems)
def FieldMetaDataEnd(builder): return builder.EndObject()
def End(builder):
    return FieldMetaDataEnd(builder)
import comm.opcua.builtin.Guid
import comm.opcua.builtin.LocalizedText
import comm.opcua.builtin.NodeId
import comm.opcua.structure.KeyValuePair
try:
    from typing import List, Optional
except:
    pass

class FieldMetaDataT(object):

    # FieldMetaDataT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: Optional[comm.opcua.builtin.LocalizedText.LocalizedTextT]
        self.fieldFlags = 0  # type: int
        self.builtInType = 0  # type: int
        self.dataType = None  # type: Optional[comm.opcua.builtin.NodeId.NodeIdT]
        self.valueRank = 0  # type: int
        self.arrayDimensions = None  # type: List[int]
        self.maxStringLength = 0  # type: int
        self.dataSetFieldId = None  # type: Optional[comm.opcua.builtin.Guid.GuidT]
        self.properties = None  # type: List[comm.opcua.structure.KeyValuePair.KeyValuePairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fieldMetaData = FieldMetaData()
        fieldMetaData.Init(buf, pos)
        return cls.InitFromObj(fieldMetaData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fieldMetaData):
        x = FieldMetaDataT()
        x._UnPack(fieldMetaData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.description == other.description and \
            self.fieldFlags == other.fieldFlags and \
            self.builtInType == other.builtInType and \
            self.dataType == other.dataType and \
            self.valueRank == other.valueRank and \
            self.arrayDimensions == other.arrayDimensions and \
            self.maxStringLength == other.maxStringLength and \
            self.dataSetFieldId == other.dataSetFieldId and \
            self.properties == other.properties

    # FieldMetaDataT
    def _UnPack(self, fieldMetaData):
        if fieldMetaData is None:
            return
        self.name = fieldMetaData.Name()
        if fieldMetaData.Description() is not None:
            self.description = comm.opcua.builtin.LocalizedText.LocalizedTextT.InitFromObj(fieldMetaData.Description())
        self.fieldFlags = fieldMetaData.FieldFlags()
        self.builtInType = fieldMetaData.BuiltInType()
        if fieldMetaData.DataType() is not None:
            self.dataType = comm.opcua.builtin.NodeId.NodeIdT.InitFromObj(fieldMetaData.DataType())
        self.valueRank = fieldMetaData.ValueRank()
        if not fieldMetaData.ArrayDimensionsIsNone():
            if np is None:
                self.arrayDimensions = []
                for i in range(fieldMetaData.ArrayDimensionsLength()):
                    self.arrayDimensions.append(fieldMetaData.ArrayDimensions(i))
            else:
                self.arrayDimensions = fieldMetaData.ArrayDimensionsAsNumpy()
        self.maxStringLength = fieldMetaData.MaxStringLength()
        if fieldMetaData.DataSetFieldId() is not None:
            self.dataSetFieldId = comm.opcua.builtin.Guid.GuidT.InitFromObj(fieldMetaData.DataSetFieldId())
        if not fieldMetaData.PropertiesIsNone():
            self.properties = []
            for i in range(fieldMetaData.PropertiesLength()):
                if fieldMetaData.Properties(i) is None:
                    self.properties.append(None)
                else:
                    keyValuePair_ = comm.opcua.structure.KeyValuePair.KeyValuePairT.InitFromObj(fieldMetaData.Properties(i))
                    self.properties.append(keyValuePair_)

    # FieldMetaDataT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = self.description.Pack(builder)
        if self.dataType is not None:
            dataType = self.dataType.Pack(builder)
        if self.arrayDimensions is not None:
            if np is not None and type(self.arrayDimensions) is np.ndarray:
                arrayDimensions = builder.CreateNumpyVector(self.arrayDimensions)
            else:
                FieldMetaDataStartArrayDimensionsVector(builder, len(self.arrayDimensions))
                for i in reversed(range(len(self.arrayDimensions))):
                    builder.PrependUint32(self.arrayDimensions[i])
                arrayDimensions = builder.EndVector()
        if self.dataSetFieldId is not None:
            dataSetFieldId = self.dataSetFieldId.Pack(builder)
        if self.properties is not None:
            propertieslist = []
            for i in range(len(self.properties)):
                propertieslist.append(self.properties[i].Pack(builder))
            FieldMetaDataStartPropertiesVector(builder, len(self.properties))
            for i in reversed(range(len(self.properties))):
                builder.PrependUOffsetTRelative(propertieslist[i])
            properties = builder.EndVector()
        FieldMetaDataStart(builder)
        if self.name is not None:
            FieldMetaDataAddName(builder, name)
        if self.description is not None:
            FieldMetaDataAddDescription(builder, description)
        FieldMetaDataAddFieldFlags(builder, self.fieldFlags)
        FieldMetaDataAddBuiltInType(builder, self.builtInType)
        if self.dataType is not None:
            FieldMetaDataAddDataType(builder, dataType)
        FieldMetaDataAddValueRank(builder, self.valueRank)
        if self.arrayDimensions is not None:
            FieldMetaDataAddArrayDimensions(builder, arrayDimensions)
        FieldMetaDataAddMaxStringLength(builder, self.maxStringLength)
        if self.dataSetFieldId is not None:
            FieldMetaDataAddDataSetFieldId(builder, dataSetFieldId)
        if self.properties is not None:
            FieldMetaDataAddProperties(builder, properties)
        fieldMetaData = FieldMetaDataEnd(builder)
        return fieldMetaData
