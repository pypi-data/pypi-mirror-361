# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StationNameResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StationNameResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStationNameResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StationNameResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StationNameResponse
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def StationNameResponseStart(builder): builder.StartObject(1)
def Start(builder):
    return StationNameResponseStart(builder)
def StationNameResponseAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return StationNameResponseAddName(builder, name)
def StationNameResponseEnd(builder): return builder.EndObject()
def End(builder):
    return StationNameResponseEnd(builder)

class StationNameResponseT(object):

    # StationNameResponseT
    def __init__(self):
        self.name = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stationNameResponse = StationNameResponse()
        stationNameResponse.Init(buf, pos)
        return cls.InitFromObj(stationNameResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stationNameResponse):
        x = StationNameResponseT()
        x._UnPack(stationNameResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name

    # StationNameResponseT
    def _UnPack(self, stationNameResponse):
        if stationNameResponse is None:
            return
        self.name = stationNameResponse.Name()

    # StationNameResponseT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        StationNameResponseStart(builder)
        if self.name is not None:
            StationNameResponseAddName(builder, name)
        stationNameResponse = StationNameResponseEnd(builder)
        return stationNameResponse
