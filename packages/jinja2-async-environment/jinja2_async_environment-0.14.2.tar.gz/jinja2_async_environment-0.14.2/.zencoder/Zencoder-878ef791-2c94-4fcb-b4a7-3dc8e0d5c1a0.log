[1m========================================================================= test session starts =========================================================================[0m
platform darwin -- Python 3.13.5, pytest-8.4.1, pluggy-1.6.0
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /Users/les/Projects/jinja2-async-environment
configfile: pyproject.toml
testpaths: tests, jinja2_async_environment
plugins: xdist-3.7.0, anyio-4.9.0, timeout-2.4.0, cov-6.2.1, mock-3.14.1, benchmark-5.1.0, asyncio-1.0.0
timeout: 300.0s
timeout method: thread
timeout func_only: False
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
[1mcollecting ... [0m[1mcollecting 53 items                                                                                                                                                   [0m[1mcollected 218 items                                                                                                                                                   [0m

tests/test_async_environment.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m                                                                                                  [ 13%][0m
tests/test_bccache.py [32m.[0m[32m.[0m[32m.[0m[32m                                                                                                                                       [ 15%][0m
tests/test_bccache_additional.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m                                                                                                                   [ 20%][0m
tests/test_choice_loader.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m                                                                                                                            [ 24%][0m
tests/test_compiler.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m                                                                                                                            [ 30%][0m
tests/test_compiler_additional.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31mF[0m[32m.[0m[32m.[0m[31mF[0m[31mF[0m[31mF[0m[32m.[0m[31mF[0m[31m                                                                                                                 [ 36%][0m
tests/test_compiler_coverage.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31m                                                                                                                       [ 40%][0m
tests/test_dict_loader.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                                               [ 43%][0m
tests/test_e2e.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                                                      [ 47%][0m
tests/test_environment.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                               [ 57%][0m
tests/test_environment_additional.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                      [ 67%][0m
tests/test_environment_coverage.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                                    [ 71%][0m
tests/test_escape_filter.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                                               [ 73%][0m
tests/test_function_loader.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                                          [ 77%][0m
tests/test_loader_adapter.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                                              [ 79%][0m
tests/test_loaders.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                                                     [ 82%][0m
tests/test_loaders_coverage.py [32m.[0m[31mF[0m[32m.[0m[32m.[0m[32m.[0m[31mF[0m[31mF[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                                       [ 86%][0m
tests/test_package_loader.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                                         [ 91%][0m
tests/test_redis_bccache.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                                        [ 96%][0m
tests/test_template_rendering.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                                                                                        [100%][0m

============================================================================== FAILURES ===============================================================================
[31m[1m_________________________________________________________________________ test_visit_include __________________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x1101934d0>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_include[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the visit_Include method."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock Include node[39;49;00m[90m[39;49;00m
        include_node = MagicMock(spec=nodes.Include)[90m[39;49;00m
        include_node.template = MagicMock(spec=nodes.Const)[90m[39;49;00m
        include_node.template.value = [33m"[39;49;00m[33mincluded.html[39;49;00m[33m"[39;49;00m[90m[39;49;00m
        include_node.ignore_missing = [94mFalse[39;49;00m[90m[39;49;00m
        include_node.with_context = [94mTrue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create a mock frame[39;49;00m[90m[39;49;00m
        frame = MagicMock(spec=AsyncFrame)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock the methods called by visit_Include[39;49;00m[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
        async_code_generator.visit = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call visit_Include[39;49;00m[90m[39;49;00m
>       async_code_generator.visit_Include(include_node, frame)[90m[39;49;00m

[1m[31mtests/test_compiler_additional.py[0m:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31mjinja2_async_environment/compiler.py[0m:494: in visit_Include
    [0m[96mself[39;49;00m.writeline([33m"[39;49;00m[33mtemplate = await environment.get_template_async([39;49;00m[33m"[39;49;00m, node)[90m[39;49;00m
[1m[31m.venv/lib/python3.13/site-packages/jinja2/compiler.py[0m:471: in writeline
    [0m[96mself[39;49;00m.newline(node, extra)[90m[39;49;00m
[1m[31m.venv/lib/python3.13/site-packages/jinja2/compiler.py[0m:477: in newline
    [0m[94mif[39;49;00m node [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m [95mand[39;49;00m node.lineno != [96mself[39;49;00m._last_line:[90m[39;49;00m
                            ^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock spec='Include' id='4567461104'>, name = 'lineno'

    [0m[94mdef[39;49;00m[90m [39;49;00m[92m__getattr__[39;49;00m([96mself[39;49;00m, name):[90m[39;49;00m
        [94mif[39;49;00m name [95min[39;49;00m {[33m'[39;49;00m[33m_mock_methods[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m_mock_unsafe[39;49;00m[33m'[39;49;00m}:[90m[39;49;00m
            [94mraise[39;49;00m [96mAttributeError[39;49;00m(name)[90m[39;49;00m
        [94melif[39;49;00m [96mself[39;49;00m._mock_methods [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m name [95mnot[39;49;00m [95min[39;49;00m [96mself[39;49;00m._mock_methods [95mor[39;49;00m name [95min[39;49;00m _all_magics:[90m[39;49;00m
>               [94mraise[39;49;00m [96mAttributeError[39;49;00m([33m"[39;49;00m[33mMock object has no attribute [39;49;00m[33m%r[39;49;00m[33m"[39;49;00m % name)[90m[39;49;00m
[1m[31mE               AttributeError: Mock object has no attribute 'lineno'[0m

[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:690: AttributeError
[31m[1m_________________________________________________________________________ test_visit_asyncfor _________________________________________________________________________[0m

self = <MagicMock id='4566337248'>, args = (<MagicMock name='mock.body' spec='Template' id='4566342624'>, <MagicMock spec='AsyncFrame' id='4566345312'>), kwargs = {}
msg = "Expected 'mock' to be called once. Called 2 times.\nCalls: [call(<MagicMock name='mock.body' spec='Template' id='4566...\n call(<MagicMock name='mock.body' spec='Template' id='4566342624'>, <MagicMock spec='AsyncFrame' id='4566345312'>)]."

    [0m[94mdef[39;49;00m[90m [39;49;00m[92massert_called_once_with[39;49;00m([96mself[39;49;00m, /, *args, **kwargs):[90m[39;49;00m
    [90m    [39;49;00m[33m"""assert that the mock was called exactly once and that that call was[39;49;00m
    [33m    with the specified arguments."""[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.call_count == [94m1[39;49;00m:[90m[39;49;00m
            msg = ([33m"[39;49;00m[33mExpected [39;49;00m[33m'[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m[33m to be called once. Called [39;49;00m[33m%s[39;49;00m[33m times.[39;49;00m[33m%s[39;49;00m[33m"[39;49;00m[90m[39;49;00m
                   % ([96mself[39;49;00m._mock_name [95mor[39;49;00m [33m'[39;49;00m[33mmock[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                      [96mself[39;49;00m.call_count,[90m[39;49;00m
                      [96mself[39;49;00m._calls_repr()))[90m[39;49;00m
>           [94mraise[39;49;00m [96mAssertionError[39;49;00m(msg)[90m[39;49;00m
[1m[31mE           AssertionError: Expected 'mock' to be called once. Called 2 times.[0m
[1m[31mE           Calls: [call(<MagicMock name='mock.body' spec='Template' id='4566342624'>, <MagicMock spec='AsyncFrame' id='4566345312'>),[0m
[1m[31mE            call(<MagicMock name='mock.body' spec='Template' id='4566342624'>, <MagicMock spec='AsyncFrame' id='4566345312'>)].[0m

[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:990: AssertionError

[33mDuring handling of the above exception, another exception occurred:[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x110420410>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_asyncfor[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the visit_For method for async behavior."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock For node with all required attributes[39;49;00m[90m[39;49;00m
        asyncfor_node = MagicMock(spec=nodes.For)[90m[39;49;00m
        asyncfor_node.target = MagicMock(spec=nodes.Name)[90m[39;49;00m
        asyncfor_node.target.name = [33m"[39;49;00m[33mitem[39;49;00m[33m"[39;49;00m[90m[39;49;00m
        asyncfor_node.iter = MagicMock(spec=nodes.Name)[90m[39;49;00m
        asyncfor_node.iter.name = [33m"[39;49;00m[33mitems[39;49;00m[33m"[39;49;00m[90m[39;49;00m
        asyncfor_node.body = MagicMock(spec=nodes.Template)[90m[39;49;00m
        asyncfor_node.else_ = [94mNone[39;49;00m[90m[39;49;00m
        asyncfor_node.recursive = [94mFalse[39;49;00m[90m[39;49;00m
        asyncfor_node.test = [94mNone[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create a mock frame with symbols[39;49;00m[90m[39;49;00m
        frame = MagicMock(spec=AsyncFrame)[90m[39;49;00m
        frame.is_async = [94mTrue[39;49;00m[90m[39;49;00m
        frame.symbols = MagicMock()[90m[39;49;00m
        frame.symbols.store = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock the methods called by visit_For[39;49;00m[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
        async_code_generator.blockvisit = MagicMock()[90m[39;49;00m
        async_code_generator.writeline = MagicMock()[90m[39;49;00m
        async_code_generator.indent = MagicMock()[90m[39;49;00m
        async_code_generator.outdent = MagicMock()[90m[39;49;00m
        async_code_generator.temporary_identifier = MagicMock(return_value=[33m"[39;49;00m[33mtmp_var[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock iter_child_nodes method[39;49;00m[90m[39;49;00m
        asyncfor_node.iter_child_nodes = MagicMock(return_value=[])[90m[39;49;00m
    [90m[39;49;00m
        [90m# Patch the visit method to handle the target and iter[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m patch.object(async_code_generator, [33m"[39;49;00m[33mvisit[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m mock_visit:[90m[39;49;00m
            [90m# Call visit_For[39;49;00m[90m[39;49;00m
            async_code_generator.visit_For(asyncfor_node, frame)[90m[39;49;00m
    [90m[39;49;00m
            [90m# Verify the method calls[39;49;00m[90m[39;49;00m
            [94massert[39;49;00m mock_visit.call_count >= [94m2[39;49;00m  [90m# Called for target and iter[39;49;00m[90m[39;49;00m
            [94massert[39;49;00m async_code_generator.write.call_count > [94m0[39;49;00m[90m[39;49;00m
>           async_code_generator.blockvisit.assert_called_once_with([90m[39;49;00m
                asyncfor_node.body, frame[90m[39;49;00m
            )[90m[39;49;00m
[1m[31mE           AssertionError: Expected 'mock' to be called once. Called 2 times.[0m
[1m[31mE           Calls: [call(<MagicMock name='mock.body' spec='Template' id='4566342624'>, <MagicMock spec='AsyncFrame' id='4566345312'>),[0m
[1m[31mE            call(<MagicMock name='mock.body' spec='Template' id='4566342624'>, <MagicMock spec='AsyncFrame' id='4566345312'>)].[0m

[1m[31mtests/test_compiler_additional.py[0m:257: AssertionError
[31m[1m________________________________________________________________________ test_visit_asynccall _________________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x110421090>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_asynccall[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the visit_Call method with async=True."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock Call node[39;49;00m[90m[39;49;00m
        call_node = MagicMock(spec=nodes.Call)[90m[39;49;00m
        call_node.node = MagicMock(spec=nodes.Name)[90m[39;49;00m
        call_node.node.name = [33m"[39;49;00m[33masync_function[39;49;00m[33m"[39;49;00m[90m[39;49;00m
        call_node.args = [][90m[39;49;00m
        call_node.kwargs = [][90m[39;49;00m
        call_node.dyn_args = [94mNone[39;49;00m[90m[39;49;00m
        call_node.dyn_kwargs = [94mNone[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create a mock frame with eval_ctx[39;49;00m[90m[39;49;00m
        frame = MagicMock(spec=AsyncFrame)[90m[39;49;00m
        frame.is_async = [94mTrue[39;49;00m[90m[39;49;00m
        frame.eval_ctx = MagicMock()[90m[39;49;00m
        frame.eval_ctx.autoescape = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock the methods called by visit_Call[39;49;00m[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
        async_code_generator.visit = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call visit_Call[39;49;00m[90m[39;49;00m
>       async_code_generator.visit_Call(call_node, frame)[90m[39;49;00m

[1m[31mtests/test_compiler_additional.py[0m:284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m.venv/lib/python3.13/site-packages/jinja2/compiler.py[0m:56: in new_func
    [0m[94mreturn[39;49;00m f([96mself[39;49;00m, node, frame, **kwargs)[90m[39;49;00m
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31m.venv/lib/python3.13/site-packages/jinja2/compiler.py[0m:1893: in visit_Call
    [0mloop_kwargs = {[33m"[39;49;00m[33m_loop_vars[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33m_loop_vars[39;49;00m[33m"[39;49;00m} [94mif[39;49;00m frame.loop_frame [94melse[39;49;00m {}[90m[39;49;00m
                                                  ^^^^^^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock spec='AsyncFrame' id='4565444528'>, name = 'loop_frame'

    [0m[94mdef[39;49;00m[90m [39;49;00m[92m__getattr__[39;49;00m([96mself[39;49;00m, name):[90m[39;49;00m
        [94mif[39;49;00m name [95min[39;49;00m {[33m'[39;49;00m[33m_mock_methods[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m_mock_unsafe[39;49;00m[33m'[39;49;00m}:[90m[39;49;00m
            [94mraise[39;49;00m [96mAttributeError[39;49;00m(name)[90m[39;49;00m
        [94melif[39;49;00m [96mself[39;49;00m._mock_methods [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m name [95mnot[39;49;00m [95min[39;49;00m [96mself[39;49;00m._mock_methods [95mor[39;49;00m name [95min[39;49;00m _all_magics:[90m[39;49;00m
>               [94mraise[39;49;00m [96mAttributeError[39;49;00m([33m"[39;49;00m[33mMock object has no attribute [39;49;00m[33m%r[39;49;00m[33m"[39;49;00m % name)[90m[39;49;00m
[1m[31mE               AttributeError: Mock object has no attribute 'loop_frame'[0m

[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:690: AttributeError
[31m[1m_____________________________________________________________________ test_visit_asyncfilterblock _____________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x1104216d0>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_asyncfilterblock[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the visit_FilterBlock method with async=True."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock FilterBlock node[39;49;00m[90m[39;49;00m
        filterblock_node = MagicMock(spec=nodes.FilterBlock)[90m[39;49;00m
        filterblock_node.filter = MagicMock(spec=nodes.Filter)[90m[39;49;00m
        filterblock_node.filter.name = [33m"[39;49;00m[33mfilter_name[39;49;00m[33m"[39;49;00m[90m[39;49;00m
        filterblock_node.filter.node = [94mNone[39;49;00m[90m[39;49;00m
        filterblock_node.filter.args = [][90m[39;49;00m
        filterblock_node.filter.kwargs = [][90m[39;49;00m
        filterblock_node.filter.dyn_args = [94mNone[39;49;00m[90m[39;49;00m
        filterblock_node.filter.dyn_kwargs = [94mNone[39;49;00m[90m[39;49;00m
        filterblock_node.body = MagicMock(spec=nodes.Template)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create a mock frame[39;49;00m[90m[39;49;00m
        frame = MagicMock(spec=AsyncFrame)[90m[39;49;00m
        frame.is_async = [94mTrue[39;49;00m[90m[39;49;00m
        frame.buffer = [][90m[39;49;00m
        frame.eval_ctx = MagicMock()[90m[39;49;00m
        frame.eval_ctx.autoescape = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock the methods called by visit_FilterBlock[39;49;00m[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
        async_code_generator.blockvisit = MagicMock()[90m[39;49;00m
        async_code_generator.visit = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call visit_FilterBlock[39;49;00m[90m[39;49;00m
>       async_code_generator.visit_FilterBlock(filterblock_node, frame)[90m[39;49;00m

[1m[31mtests/test_compiler_additional.py[0m:317: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x1104216d0>, node = <MagicMock spec='FilterBlock' id='4565448560'>
frame = <MagicMock spec='AsyncFrame' id='4567459424'>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mvisit_FilterBlock[39;49;00m([96mself[39;49;00m, node: nodes.FilterBlock, frame: Frame) -> [94mNone[39;49;00m:[90m[39;49;00m
        filter_frame = frame.inner()[90m[39;49;00m
        filter_frame.symbols.analyze_node(node)[90m[39;49;00m
        [96mself[39;49;00m.enter_frame(filter_frame)[90m[39;49;00m
>       [96mself[39;49;00m.buffer(filter_frame)[90m[39;49;00m
[1m[31mE       TypeError: 'NoneType' object is not callable[0m

[1m[31m.venv/lib/python3.13/site-packages/jinja2/compiler.py[0m:1363: TypeError
[31m[1m________________________________________________________________________ test_visit_asyncblock ________________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x110193ed0>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_asyncblock[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the visit_Block method with async=True."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock Block node[39;49;00m[90m[39;49;00m
        block_node = MagicMock(spec=nodes.Block)[90m[39;49;00m
        block_node.name = [33m"[39;49;00m[33masync_block[39;49;00m[33m"[39;49;00m[90m[39;49;00m
        block_node.body = MagicMock(spec=nodes.Template)[90m[39;49;00m
        block_node.scoped = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create a mock frame[39;49;00m[90m[39;49;00m
        frame = MagicMock(spec=AsyncFrame)[90m[39;49;00m
        frame.is_async = [94mTrue[39;49;00m[90m[39;49;00m
        frame.buffer = [][90m[39;49;00m
        frame.toplevel = [94mFalse[39;49;00m[90m[39;49;00m
        frame.rootlevel = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock the methods called by visit_Block[39;49;00m[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
        async_code_generator.blockvisit = MagicMock()[90m[39;49;00m
        async_code_generator.writeline = MagicMock()[90m[39;49;00m
        async_code_generator.indent = MagicMock()[90m[39;49;00m
        async_code_generator.outdent = MagicMock()[90m[39;49;00m
        async_code_generator.choose_async = MagicMock(return_value=[33m"[39;49;00m[33masync [39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        async_code_generator.simple_write = MagicMock()[90m[39;49;00m
        async_code_generator.get_context_ref = MagicMock(return_value=[33m"[39;49;00m[33mcontext[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call visit_Block[39;49;00m[90m[39;49;00m
>       async_code_generator.visit_Block(block_node, frame)[90m[39;49;00m

[1m[31mtests/test_compiler_additional.py[0m:384: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31mjinja2_async_environment/compiler.py[0m:437: in visit_Block
    [0m[94mif[39;49;00m node.required:[90m[39;49;00m
       ^^^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock spec='Block' id='4565443520'>, name = 'required'

    [0m[94mdef[39;49;00m[90m [39;49;00m[92m__getattr__[39;49;00m([96mself[39;49;00m, name):[90m[39;49;00m
        [94mif[39;49;00m name [95min[39;49;00m {[33m'[39;49;00m[33m_mock_methods[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m_mock_unsafe[39;49;00m[33m'[39;49;00m}:[90m[39;49;00m
            [94mraise[39;49;00m [96mAttributeError[39;49;00m(name)[90m[39;49;00m
        [94melif[39;49;00m [96mself[39;49;00m._mock_methods [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m name [95mnot[39;49;00m [95min[39;49;00m [96mself[39;49;00m._mock_methods [95mor[39;49;00m name [95min[39;49;00m _all_magics:[90m[39;49;00m
>               [94mraise[39;49;00m [96mAttributeError[39;49;00m([33m"[39;49;00m[33mMock object has no attribute [39;49;00m[33m%r[39;49;00m[33m"[39;49;00m % name)[90m[39;49;00m
[1m[31mE               AttributeError: Mock object has no attribute 'required'[0m

[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:690: AttributeError
[31m[1m_____________________________________________________________________ test_visit_asyncfilterblock _____________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x110420690>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_asyncfilterblock[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test visit_AsyncFilterBlock method."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock AsyncFilterBlock node[39;49;00m[90m[39;49;00m
        node = create_mock_node([90m[39;49;00m
            nodes.FilterBlock,[90m[39;49;00m
            [96mfilter[39;49;00m=create_mock_node(nodes.Filter, name=[33m"[39;49;00m[33masync_filter[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            body=[[90m[39;49;00m
                create_mock_node([90m[39;49;00m
                    nodes.Output, nodes=[create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mitem[39;49;00m[33m"[39;49;00m)][90m[39;49;00m
                )[90m[39;49;00m
            ],[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock the necessary methods[39;49;00m[90m[39;49;00m
        async_code_generator.visit = MagicMock()[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
        async_code_generator.blockvisit = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call the method[39;49;00m[90m[39;49;00m
>       async_code_generator.visit_FilterBlock(node)[90m[39;49;00m
[1m[31mE       TypeError: CodeGenerator.visit_FilterBlock() missing 1 required positional argument: 'frame'[0m

[1m[31mtests/test_compiler_coverage.py[0m:132: TypeError
[31m[1m________________________________________________________________________ test_visit_asyncwith _________________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x110420b90>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_asyncwith[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test visit_AsyncWith method."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock AsyncWith node[39;49;00m[90m[39;49;00m
        targets = [[90m[39;49;00m
            ([90m[39;49;00m
                create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mtarget[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
                create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mvalue[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            )[90m[39;49;00m
        ][90m[39;49;00m
        body = [[90m[39;49;00m
            create_mock_node([90m[39;49;00m
                nodes.Output, nodes=[create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mitem[39;49;00m[33m"[39;49;00m)][90m[39;49;00m
            )[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
>       async_with_node = create_mock_node(nodes.AsyncWith, targets=targets, body=body)[90m[39;49;00m
                                           ^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE       AttributeError: module 'jinja2.nodes' has no attribute 'AsyncWith'[0m

[1m[31mtests/test_compiler_coverage.py[0m:155: AttributeError
[31m[1m______________________________________________________________________ test_func_code_generator _______________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x110421950>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_func_code_generator[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the func method with async functions."""[39;49;00m[90m[39;49;00m
        [90m# Mock the necessary methods[39;49;00m[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call the method with an async function[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m patch.object(async_code_generator, [33m"[39;49;00m[33mis_async[39;49;00m[33m"[39;49;00m, return_value=[94mTrue[39;49;00m):[90m[39;49;00m
>           async_code_generator.func([33m"[39;49;00m[33mtest_func[39;49;00m[33m"[39;49;00m, [[33m"[39;49;00m[33marg1[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33marg2[39;49;00m[33m"[39;49;00m], [], [94mNone[39;49;00m, [94mFalse[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: CodeGenerator.func() takes 2 positional arguments but 6 were given[0m

[1m[31mtests/test_compiler_coverage.py[0m:178: TypeError
[31m[1m_____________________________________________________________________ test_return_buffer_contents _____________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x110420410>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_return_buffer_contents[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the return_buffer_contents method."""[39;49;00m[90m[39;49;00m
        [90m# Mock the necessary methods[39;49;00m[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call the method[39;49;00m[90m[39;49;00m
>       async_code_generator.return_buffer_contents()[90m[39;49;00m
[1m[31mE       TypeError: AsyncCodeGenerator.return_buffer_contents() missing 1 required positional argument: 'frame'[0m

[1m[31mtests/test_compiler_coverage.py[0m:192: TypeError
[31m[1m________________________________________________________________________ test_visit_asyncblock ________________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x110421bd0>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_asyncblock[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test visit_AsyncBlock method."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock AsyncBlock node[39;49;00m[90m[39;49;00m
        node = create_mock_node([90m[39;49;00m
            nodes.Block,[90m[39;49;00m
            name=[33m"[39;49;00m[33masync_block[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            body=[[90m[39;49;00m
                create_mock_node([90m[39;49;00m
                    nodes.Output, nodes=[create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mitem[39;49;00m[33m"[39;49;00m)][90m[39;49;00m
                )[90m[39;49;00m
            ],[90m[39;49;00m
            scoped=[94mFalse[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock the necessary methods[39;49;00m[90m[39;49;00m
        async_code_generator.visit = MagicMock()[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
        async_code_generator.blockvisit = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call the method[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m patch.object(async_code_generator, [33m"[39;49;00m[33mis_async[39;49;00m[33m"[39;49;00m, return_value=[94mTrue[39;49;00m):[90m[39;49;00m
>           async_code_generator.visit_Block(node)[90m[39;49;00m
[1m[31mE           TypeError: AsyncCodeGenerator.visit_Block() missing 1 required positional argument: 'frame'[0m

[1m[31mtests/test_compiler_coverage.py[0m:219: TypeError
[31m[1m______________________________________________________________ test_async_package_loader_error_handling _______________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_package_loader_error_handling[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test error handling in AsyncPackageLoader."""[39;49;00m[90m[39;49;00m
        [90m# Test with a non-existent package[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(PackageSpecNotFound):[90m[39;49;00m
>           AsyncPackageLoader([33m"[39;49;00m[33mnon_existent_package[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtemplates[39;49;00m[33m"[39;49;00m)[90m[39;49;00m

[1m[31mtests/test_loaders_coverage.py[0m:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31mjinja2_async_environment/loaders.py[0m:217: in __init__
    [0m[96mself[39;49;00m._loader, spec = [96mself[39;49;00m._initialize_loader(package_name)[90m[39;49;00m
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mjinja2_async_environment/loaders.py[0m:224: in _initialize_loader
    [0mimport_module(package_name)[90m[39;49;00m
[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py[0m:88: in import_module
    [0m[94mreturn[39;49;00m _bootstrap._gcd_import(name[level:], package, level)[90m[39;49;00m
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31m<frozen importlib._bootstrap>[0m:1387: in _gcd_import
    [0m[04m[91m?[39;49;00m[04m[91m?[39;49;00m[04m[91m?[39;49;00m[90m[39;49;00m
[1m[31m<frozen importlib._bootstrap>[0m:1360: in _find_and_load
    [0m[04m[91m?[39;49;00m[04m[91m?[39;49;00m[04m[91m?[39;49;00m[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

name = 'non_existent_package', import_ = <function _gcd_import at 0x10d8fc4a0>

>   [0m[04m[91m?[39;49;00m[04m[91m?[39;49;00m[04m[91m?[39;49;00m[90m[39;49;00m
[1m[31mE   ModuleNotFoundError: No module named 'non_existent_package'[0m

[1m[31m<frozen importlib._bootstrap>[0m:1324: ModuleNotFoundError
[31m[1m_____________________________________________________________ test_async_filesystem_loader_with_encoding ______________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_filesystem_loader_with_encoding[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test AsyncFileSystemLoader with different encodings."""[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m patch([33m"[39;49;00m[33manyio.Path.open[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m mock_open:[90m[39;49;00m
            [90m# Mock the file content[39;49;00m[90m[39;49;00m
            mock_file = AsyncMock()[90m[39;49;00m
            mock_file.[92m__aenter__[39;49;00m.return_value.read.return_value = [33m"[39;49;00m[33mtemplate content[39;49;00m[33m"[39;49;00m[90m[39;49;00m
            mock_open.return_value = mock_file[90m[39;49;00m
    [90m[39;49;00m
            [90m# Create a loader with a specific encoding[39;49;00m[90m[39;49;00m
            loader = AsyncFileSystemLoader([33m"[39;49;00m[33m/templates[39;49;00m[33m"[39;49;00m, encoding=[33m"[39;49;00m[33mlatin1[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
            [90m# Test get_source_async[39;49;00m[90m[39;49;00m
>           source, name, _ = [94mawait[39;49;00m loader.get_source_async([90m[39;49;00m
                AsyncEnvironment(), [33m"[39;49;00m[33mtemplate.html[39;49;00m[33m"[39;49;00m[90m[39;49;00m
            )[90m[39;49;00m

[1m[31mtests/test_loaders_coverage.py[0m:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <jinja2_async_environment.loaders.AsyncFileSystemLoader object at 0x110421f90>
environment_or_template = <jinja2_async_environment.environment.AsyncEnvironment object at 0x110422490>, template = 'template.html'

    [0m[94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mget_source_async[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        environment_or_template: AsyncEnvironment | [96mstr[39;49;00m | AsyncPath,[90m[39;49;00m
        template: [96mstr[39;49;00m | AsyncPath | [94mNone[39;49;00m = [94mNone[39;49;00m,[90m[39;49;00m
    ) -> SourceType:[90m[39;49;00m
        [90m# Handle both calling patterns[39;49;00m[90m[39;49;00m
        actual_template: [96mstr[39;49;00m | AsyncPath[90m[39;49;00m
        [94mif[39;49;00m [96misinstance[39;49;00m(environment_or_template, AsyncEnvironment):[90m[39;49;00m
            [94mif[39;49;00m template [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
                [94mraise[39;49;00m [96mValueError[39;49;00m([90m[39;49;00m
                    [33m"[39;49;00m[33mTemplate parameter is required when environment is provided[39;49;00m[33m"[39;49;00m[90m[39;49;00m
                )[90m[39;49;00m
            actual_template = template[90m[39;49;00m
        [94melse[39;49;00m:[90m[39;49;00m
            actual_template = environment_or_template[90m[39;49;00m
    [90m[39;49;00m
        template_path: AsyncPath = ([90m[39;49;00m
            AsyncPath(actual_template)[90m[39;49;00m
            [94mif[39;49;00m [96misinstance[39;49;00m(actual_template, [96mstr[39;49;00m)[90m[39;49;00m
            [94melse[39;49;00m actual_template[90m[39;49;00m
        )[90m[39;49;00m
        path: AsyncPath | [94mNone[39;49;00m = [94mNone[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m sp [95min[39;49;00m [96mself[39;49;00m.searchpath:[90m[39;49;00m
            candidate = sp / template_path[90m[39;49;00m
            [94mif[39;49;00m [94mawait[39;49;00m candidate.is_file():[90m[39;49;00m
                path = candidate[90m[39;49;00m
                [94mbreak[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m path [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
>           [94mraise[39;49;00m TemplateNotFound(template_path.name)[90m[39;49;00m
[1m[31mE           jinja2.exceptions.TemplateNotFound: template.html[0m

[1m[31mjinja2_async_environment/loaders.py[0m:169: TemplateNotFound
[31m[1m_______________________________________________________________ test_async_package_loader_with_encoding _______________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_package_loader_with_encoding[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test AsyncPackageLoader with different encodings."""[39;49;00m[90m[39;49;00m
        [90m# Mock the importlib.util.spec_from_package_path[39;49;00m[90m[39;49;00m
>       [94mwith[39;49;00m patch([33m"[39;49;00m[33mimportlib.util.spec_from_package_path[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m mock_spec:[90m[39;49;00m
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m

[1m[31mtests/test_loaders_coverage.py[0m:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:1497: in __enter__
    [0moriginal, local = [96mself[39;49;00m.get_original()[90m[39;49;00m
                      ^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x1105a2b30>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mget_original[39;49;00m([96mself[39;49;00m):[90m[39;49;00m
        target = [96mself[39;49;00m.getter()[90m[39;49;00m
        name = [96mself[39;49;00m.attribute[90m[39;49;00m
    [90m[39;49;00m
        original = DEFAULT[90m[39;49;00m
        local = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            original = target.[91m__dict__[39;49;00m[name][90m[39;49;00m
        [94mexcept[39;49;00m ([96mAttributeError[39;49;00m, [96mKeyError[39;49;00m):[90m[39;49;00m
            original = [96mgetattr[39;49;00m(target, name, DEFAULT)[90m[39;49;00m
        [94melse[39;49;00m:[90m[39;49;00m
            local = [94mTrue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m name [95min[39;49;00m _builtins [95mand[39;49;00m [96misinstance[39;49;00m(target, ModuleType):[90m[39;49;00m
            [96mself[39;49;00m.create = [94mTrue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.create [95mand[39;49;00m original [95mis[39;49;00m DEFAULT:[90m[39;49;00m
>           [94mraise[39;49;00m [96mAttributeError[39;49;00m([90m[39;49;00m
                [33m"[39;49;00m[33m%s[39;49;00m[33m does not have the attribute [39;49;00m[33m%r[39;49;00m[33m"[39;49;00m % (target, name)[90m[39;49;00m
            )[90m[39;49;00m
[1m[31mE           AttributeError: <module 'importlib.util' (frozen)> does not have the attribute 'spec_from_package_path'[0m

[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:1467: AttributeError
[33m========================================================================== warnings summary ===========================================================================[0m
tests/test_environment_additional.py::test_get_template_async_with_cache_hit_and_async_is_up_to_date
  /Users/les/Projects/jinja2-async-environment/tests/test_environment_additional.py:328: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    result = await async_env._get_template_async("template.html", None)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/test_environment_coverage.py::test_get_template_async_with_cache
  /Users/les/Projects/jinja2-async-environment/tests/test_environment_coverage.py:251: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    result = await async_env._get_template_async("template.html", None)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================================================================== tests coverage ============================================================================
__________________________________________________________ coverage: platform darwin, python 3.13.5-final-0 ___________________________________________________________

Name                                      Stmts   Miss  Cover
-------------------------------------------------------------
jinja2_async_environment/bccache.py          56      0   100%
jinja2_async_environment/compiler.py        385    104    73%
jinja2_async_environment/environment.py     135     10    93%
jinja2_async_environment/loaders.py         320     93    71%
-------------------------------------------------------------
TOTAL                                       896    207    77%
[32mRequired test coverage of 42% reached. Total coverage: 76.90%
[0m[36m[1m======================================================================= short test summary info =======================================================================[0m
[31mFAILED[0m tests/test_compiler_additional.py::[1mtest_visit_include[0m - AttributeError: Mock object has no attribute 'lineno'
[31mFAILED[0m tests/test_compiler_additional.py::[1mtest_visit_asyncfor[0m - AssertionError: Expected 'mock' to be called once. Called 2 times.
[31mFAILED[0m tests/test_compiler_additional.py::[1mtest_visit_asynccall[0m - AttributeError: Mock object has no attribute 'loop_frame'
[31mFAILED[0m tests/test_compiler_additional.py::[1mtest_visit_asyncfilterblock[0m - TypeError: 'NoneType' object is not callable
[31mFAILED[0m tests/test_compiler_additional.py::[1mtest_visit_asyncblock[0m - AttributeError: Mock object has no attribute 'required'
[31mFAILED[0m tests/test_compiler_coverage.py::[1mtest_visit_asyncfilterblock[0m - TypeError: CodeGenerator.visit_FilterBlock() missing 1 required positional argument: 'frame'
[31mFAILED[0m tests/test_compiler_coverage.py::[1mtest_visit_asyncwith[0m - AttributeError: module 'jinja2.nodes' has no attribute 'AsyncWith'
[31mFAILED[0m tests/test_compiler_coverage.py::[1mtest_func_code_generator[0m - TypeError: CodeGenerator.func() takes 2 positional arguments but 6 were given
[31mFAILED[0m tests/test_compiler_coverage.py::[1mtest_return_buffer_contents[0m - TypeError: AsyncCodeGenerator.return_buffer_contents() missing 1 required positional argument: 'frame'
[31mFAILED[0m tests/test_compiler_coverage.py::[1mtest_visit_asyncblock[0m - TypeError: AsyncCodeGenerator.visit_Block() missing 1 required positional argument: 'frame'
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_package_loader_error_handling[0m - ModuleNotFoundError: No module named 'non_existent_package'
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_filesystem_loader_with_encoding[0m - jinja2.exceptions.TemplateNotFound: template.html
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_package_loader_with_encoding[0m - AttributeError: <module 'importlib.util' (frozen)> does not have the attribute 'spec_from_package_path'
[31m============================================================= [31m[1m13 failed[0m, [32m205 passed[0m, [33m2 warnings[0m[31m in 4.29s[0m[31m ==============================================================[0m
