# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_AxsTorque(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_AxsTorque()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_AxsTorque(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_AxsTorque
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_AxsTorque
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_AxsTorque
    def TargetTrq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_AxsTorque
    def TrqRamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_AxsTorque
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_DynLimits import Cmd_DynLimits
            obj = Cmd_DynLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Cmd_AxsTorqueStart(builder): builder.StartObject(4)
def Start(builder):
    return Cmd_AxsTorqueStart(builder)
def Cmd_AxsTorqueAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Cmd_AxsTorqueAddBase(builder, base)
def Cmd_AxsTorqueAddTargetTrq(builder, targetTrq): builder.PrependFloat64Slot(1, targetTrq, 0.0)
def AddTargetTrq(builder, targetTrq):
    return Cmd_AxsTorqueAddTargetTrq(builder, targetTrq)
def Cmd_AxsTorqueAddTrqRamp(builder, trqRamp): builder.PrependFloat64Slot(2, trqRamp, 0.0)
def AddTrqRamp(builder, trqRamp):
    return Cmd_AxsTorqueAddTrqRamp(builder, trqRamp)
def Cmd_AxsTorqueAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return Cmd_AxsTorqueAddLim(builder, lim)
def Cmd_AxsTorqueEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_AxsTorqueEnd(builder)
import script.manager.fbtypes.Cmd_Base
import script.manager.fbtypes.Cmd_DynLimits
try:
    from typing import Optional
except:
    pass

class Cmd_AxsTorqueT(object):

    # Cmd_AxsTorqueT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.targetTrq = 0.0  # type: float
        self.trqRamp = 0.0  # type: float
        self.lim = None  # type: Optional[script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdAxsTorque = Cmd_AxsTorque()
        cmdAxsTorque.Init(buf, pos)
        return cls.InitFromObj(cmdAxsTorque)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdAxsTorque):
        x = Cmd_AxsTorqueT()
        x._UnPack(cmdAxsTorque)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.targetTrq == other.targetTrq and \
            self.trqRamp == other.trqRamp and \
            self.lim == other.lim

    # Cmd_AxsTorqueT
    def _UnPack(self, cmdAxsTorque):
        if cmdAxsTorque is None:
            return
        if cmdAxsTorque.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdAxsTorque.Base())
        self.targetTrq = cmdAxsTorque.TargetTrq()
        self.trqRamp = cmdAxsTorque.TrqRamp()
        if cmdAxsTorque.Lim() is not None:
            self.lim = script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT.InitFromObj(cmdAxsTorque.Lim())

    # Cmd_AxsTorqueT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        Cmd_AxsTorqueStart(builder)
        if self.base is not None:
            Cmd_AxsTorqueAddBase(builder, base)
        Cmd_AxsTorqueAddTargetTrq(builder, self.targetTrq)
        Cmd_AxsTorqueAddTrqRamp(builder, self.trqRamp)
        if self.lim is not None:
            Cmd_AxsTorqueAddLim(builder, lim)
        cmdAxsTorque = Cmd_AxsTorqueEnd(builder)
        return cmdAxsTorque
