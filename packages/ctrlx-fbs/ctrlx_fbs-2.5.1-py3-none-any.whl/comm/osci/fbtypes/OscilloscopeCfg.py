# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OscilloscopeCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OscilloscopeCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOscilloscopeCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OscilloscopeCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OscilloscopeCfg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OscilloscopeCfg
    def Channels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.osci.fbtypes.ChannelCfg import ChannelCfg
            obj = ChannelCfg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OscilloscopeCfg
    def ChannelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OscilloscopeCfg
    def ChannelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # OscilloscopeCfg
    def Buffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.BufferCfg import BufferCfg
            obj = BufferCfg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OscilloscopeCfg
    def Trigger(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TriggerCfg import TriggerCfg
            obj = TriggerCfg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OscilloscopeCfg
    def Diagramview(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.osci.fbtypes.DiagramCfg import DiagramCfg
            obj = DiagramCfg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OscilloscopeCfg
    def DiagramviewLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OscilloscopeCfg
    def DiagramviewIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # OscilloscopeCfg
    def SignalType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OscilloscopeCfgStart(builder): builder.StartObject(6)
def Start(builder):
    return OscilloscopeCfgStart(builder)
def OscilloscopeCfgAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return OscilloscopeCfgAddName(builder, name)
def OscilloscopeCfgAddChannels(builder, channels): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(channels), 0)
def AddChannels(builder, channels):
    return OscilloscopeCfgAddChannels(builder, channels)
def OscilloscopeCfgStartChannelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartChannelsVector(builder, numElems):
    return OscilloscopeCfgStartChannelsVector(builder, numElems)
def OscilloscopeCfgAddBuffer(builder, buffer): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(buffer), 0)
def AddBuffer(builder, buffer):
    return OscilloscopeCfgAddBuffer(builder, buffer)
def OscilloscopeCfgAddTrigger(builder, trigger): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(trigger), 0)
def AddTrigger(builder, trigger):
    return OscilloscopeCfgAddTrigger(builder, trigger)
def OscilloscopeCfgAddDiagramview(builder, diagramview): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(diagramview), 0)
def AddDiagramview(builder, diagramview):
    return OscilloscopeCfgAddDiagramview(builder, diagramview)
def OscilloscopeCfgStartDiagramviewVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDiagramviewVector(builder, numElems):
    return OscilloscopeCfgStartDiagramviewVector(builder, numElems)
def OscilloscopeCfgAddSignalType(builder, signalType): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(signalType), 0)
def AddSignalType(builder, signalType):
    return OscilloscopeCfgAddSignalType(builder, signalType)
def OscilloscopeCfgEnd(builder): return builder.EndObject()
def End(builder):
    return OscilloscopeCfgEnd(builder)
import comm.osci.fbtypes.BufferCfg
import comm.osci.fbtypes.ChannelCfg
import comm.osci.fbtypes.DiagramCfg
import comm.osci.fbtypes.TriggerCfg
try:
    from typing import List, Optional
except:
    pass

class OscilloscopeCfgT(object):

    # OscilloscopeCfgT
    def __init__(self):
        self.name = None  # type: str
        self.channels = None  # type: List[comm.osci.fbtypes.ChannelCfg.ChannelCfgT]
        self.buffer = None  # type: Optional[comm.osci.fbtypes.BufferCfg.BufferCfgT]
        self.trigger = None  # type: Optional[comm.osci.fbtypes.TriggerCfg.TriggerCfgT]
        self.diagramview = None  # type: List[comm.osci.fbtypes.DiagramCfg.DiagramCfgT]
        self.signalType = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        oscilloscopeCfg = OscilloscopeCfg()
        oscilloscopeCfg.Init(buf, pos)
        return cls.InitFromObj(oscilloscopeCfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, oscilloscopeCfg):
        x = OscilloscopeCfgT()
        x._UnPack(oscilloscopeCfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.channels == other.channels and \
            self.buffer == other.buffer and \
            self.trigger == other.trigger and \
            self.diagramview == other.diagramview and \
            self.signalType == other.signalType

    # OscilloscopeCfgT
    def _UnPack(self, oscilloscopeCfg):
        if oscilloscopeCfg is None:
            return
        self.name = oscilloscopeCfg.Name()
        if not oscilloscopeCfg.ChannelsIsNone():
            self.channels = []
            for i in range(oscilloscopeCfg.ChannelsLength()):
                if oscilloscopeCfg.Channels(i) is None:
                    self.channels.append(None)
                else:
                    channelCfg_ = comm.osci.fbtypes.ChannelCfg.ChannelCfgT.InitFromObj(oscilloscopeCfg.Channels(i))
                    self.channels.append(channelCfg_)
        if oscilloscopeCfg.Buffer() is not None:
            self.buffer = comm.osci.fbtypes.BufferCfg.BufferCfgT.InitFromObj(oscilloscopeCfg.Buffer())
        if oscilloscopeCfg.Trigger() is not None:
            self.trigger = comm.osci.fbtypes.TriggerCfg.TriggerCfgT.InitFromObj(oscilloscopeCfg.Trigger())
        if not oscilloscopeCfg.DiagramviewIsNone():
            self.diagramview = []
            for i in range(oscilloscopeCfg.DiagramviewLength()):
                if oscilloscopeCfg.Diagramview(i) is None:
                    self.diagramview.append(None)
                else:
                    diagramCfg_ = comm.osci.fbtypes.DiagramCfg.DiagramCfgT.InitFromObj(oscilloscopeCfg.Diagramview(i))
                    self.diagramview.append(diagramCfg_)
        self.signalType = oscilloscopeCfg.SignalType()

    # OscilloscopeCfgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.channels is not None:
            channelslist = []
            for i in range(len(self.channels)):
                channelslist.append(self.channels[i].Pack(builder))
            OscilloscopeCfgStartChannelsVector(builder, len(self.channels))
            for i in reversed(range(len(self.channels))):
                builder.PrependUOffsetTRelative(channelslist[i])
            channels = builder.EndVector()
        if self.buffer is not None:
            buffer = self.buffer.Pack(builder)
        if self.trigger is not None:
            trigger = self.trigger.Pack(builder)
        if self.diagramview is not None:
            diagramviewlist = []
            for i in range(len(self.diagramview)):
                diagramviewlist.append(self.diagramview[i].Pack(builder))
            OscilloscopeCfgStartDiagramviewVector(builder, len(self.diagramview))
            for i in reversed(range(len(self.diagramview))):
                builder.PrependUOffsetTRelative(diagramviewlist[i])
            diagramview = builder.EndVector()
        if self.signalType is not None:
            signalType = builder.CreateString(self.signalType)
        OscilloscopeCfgStart(builder)
        if self.name is not None:
            OscilloscopeCfgAddName(builder, name)
        if self.channels is not None:
            OscilloscopeCfgAddChannels(builder, channels)
        if self.buffer is not None:
            OscilloscopeCfgAddBuffer(builder, buffer)
        if self.trigger is not None:
            OscilloscopeCfgAddTrigger(builder, trigger)
        if self.diagramview is not None:
            OscilloscopeCfgAddDiagramview(builder, diagramview)
        if self.signalType is not None:
            OscilloscopeCfgAddSignalType(builder, signalType)
        oscilloscopeCfg = OscilloscopeCfgEnd(builder)
        return oscilloscopeCfg
