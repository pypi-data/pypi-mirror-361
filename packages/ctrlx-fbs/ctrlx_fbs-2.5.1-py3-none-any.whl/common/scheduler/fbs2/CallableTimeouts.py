# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs2

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# General settings for timeouts when switching callable operation states
class CallableTimeouts(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CallableTimeouts()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCallableTimeouts(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CallableTimeouts
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # General settings for timeouts when switching callable operation states - phase BEGIN
    # CallableTimeouts
    def Begin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1000

    # General settings for timeouts when switching callable operation states - phase EXECUTE
    # CallableTimeouts
    def Execute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 60000

    # General settings for timeouts when switching callable operation states - phase END
    # CallableTimeouts
    def End(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1000

def CallableTimeoutsStart(builder): builder.StartObject(3)
def Start(builder):
    return CallableTimeoutsStart(builder)
def CallableTimeoutsAddBegin(builder, begin): builder.PrependUint32Slot(0, begin, 1000)
def AddBegin(builder, begin):
    return CallableTimeoutsAddBegin(builder, begin)
def CallableTimeoutsAddExecute(builder, execute): builder.PrependUint32Slot(1, execute, 60000)
def AddExecute(builder, execute):
    return CallableTimeoutsAddExecute(builder, execute)
def CallableTimeoutsAddEnd(builder, end): builder.PrependUint32Slot(2, end, 1000)
def AddEnd(builder, end):
    return CallableTimeoutsAddEnd(builder, end)
def CallableTimeoutsEnd(builder): return builder.EndObject()
def End(builder):
    return CallableTimeoutsEnd(builder)

class CallableTimeoutsT(object):

    # CallableTimeoutsT
    def __init__(self):
        self.begin = 1000  # type: int
        self.execute = 60000  # type: int
        self.end = 1000  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        callableTimeouts = CallableTimeouts()
        callableTimeouts.Init(buf, pos)
        return cls.InitFromObj(callableTimeouts)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, callableTimeouts):
        x = CallableTimeoutsT()
        x._UnPack(callableTimeouts)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.begin == other.begin and \
            self.execute == other.execute and \
            self.end == other.end

    # CallableTimeoutsT
    def _UnPack(self, callableTimeouts):
        if callableTimeouts is None:
            return
        self.begin = callableTimeouts.Begin()
        self.execute = callableTimeouts.Execute()
        self.end = callableTimeouts.End()

    # CallableTimeoutsT
    def Pack(self, builder):
        CallableTimeoutsStart(builder)
        CallableTimeoutsAddBegin(builder, self.begin)
        CallableTimeoutsAddExecute(builder, self.execute)
        CallableTimeoutsAddEnd(builder, self.end)
        callableTimeouts = CallableTimeoutsEnd(builder)
        return callableTimeouts
