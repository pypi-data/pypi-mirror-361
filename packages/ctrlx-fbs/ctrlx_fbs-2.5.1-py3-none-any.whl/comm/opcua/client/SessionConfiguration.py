# automatically generated by the FlatBuffers compiler, do not modify

# namespace: client

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SessionConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SessionConfiguration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSessionConfiguration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SessionConfiguration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserToken to be used, e.g. for Anonymous or Username, Password
    # SessionConfiguration
    def UserToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.client.UserIdentityToken import UserIdentityToken
            obj = UserIdentityToken()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # The OPC UA Server to connect has to support the selected MessageSecurityMode
    # SessionConfiguration
    def MessageSecurityMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.client.MessageSecurityMode import MessageSecurityMode
            obj = MessageSecurityMode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # The OPC UA Server to connect has to support the selected SecurityPolicy
    # SessionConfiguration
    def SecurityPolicy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.client.SecurityPolicy import SecurityPolicy
            obj = SecurityPolicy()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Define the LocalId establish a connection to the OPC UA Server (ActivateSession service)
    # SessionConfiguration
    def LocaleIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SessionConfiguration
    def LocaleIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SessionConfiguration
    def LocaleIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def SessionConfigurationStart(builder): builder.StartObject(4)
def Start(builder):
    return SessionConfigurationStart(builder)
def SessionConfigurationAddUserToken(builder, userToken): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(userToken), 0)
def AddUserToken(builder, userToken):
    return SessionConfigurationAddUserToken(builder, userToken)
def SessionConfigurationAddMessageSecurityMode(builder, messageSecurityMode): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(messageSecurityMode), 0)
def AddMessageSecurityMode(builder, messageSecurityMode):
    return SessionConfigurationAddMessageSecurityMode(builder, messageSecurityMode)
def SessionConfigurationAddSecurityPolicy(builder, securityPolicy): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(securityPolicy), 0)
def AddSecurityPolicy(builder, securityPolicy):
    return SessionConfigurationAddSecurityPolicy(builder, securityPolicy)
def SessionConfigurationAddLocaleIds(builder, localeIds): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(localeIds), 0)
def AddLocaleIds(builder, localeIds):
    return SessionConfigurationAddLocaleIds(builder, localeIds)
def SessionConfigurationStartLocaleIdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartLocaleIdsVector(builder, numElems):
    return SessionConfigurationStartLocaleIdsVector(builder, numElems)
def SessionConfigurationEnd(builder): return builder.EndObject()
def End(builder):
    return SessionConfigurationEnd(builder)
import comm.opcua.client.MessageSecurityMode
import comm.opcua.client.SecurityPolicy
import comm.opcua.client.UserIdentityToken
try:
    from typing import List, Optional
except:
    pass

class SessionConfigurationT(object):

    # SessionConfigurationT
    def __init__(self):
        self.userToken = None  # type: Optional[comm.opcua.client.UserIdentityToken.UserIdentityTokenT]
        self.messageSecurityMode = None  # type: Optional[comm.opcua.client.MessageSecurityMode.MessageSecurityModeT]
        self.securityPolicy = None  # type: Optional[comm.opcua.client.SecurityPolicy.SecurityPolicyT]
        self.localeIds = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sessionConfiguration = SessionConfiguration()
        sessionConfiguration.Init(buf, pos)
        return cls.InitFromObj(sessionConfiguration)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sessionConfiguration):
        x = SessionConfigurationT()
        x._UnPack(sessionConfiguration)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.userToken == other.userToken and \
            self.messageSecurityMode == other.messageSecurityMode and \
            self.securityPolicy == other.securityPolicy and \
            self.localeIds == other.localeIds

    # SessionConfigurationT
    def _UnPack(self, sessionConfiguration):
        if sessionConfiguration is None:
            return
        if sessionConfiguration.UserToken() is not None:
            self.userToken = comm.opcua.client.UserIdentityToken.UserIdentityTokenT.InitFromObj(sessionConfiguration.UserToken())
        if sessionConfiguration.MessageSecurityMode() is not None:
            self.messageSecurityMode = comm.opcua.client.MessageSecurityMode.MessageSecurityModeT.InitFromObj(sessionConfiguration.MessageSecurityMode())
        if sessionConfiguration.SecurityPolicy() is not None:
            self.securityPolicy = comm.opcua.client.SecurityPolicy.SecurityPolicyT.InitFromObj(sessionConfiguration.SecurityPolicy())
        if not sessionConfiguration.LocaleIdsIsNone():
            self.localeIds = []
            for i in range(sessionConfiguration.LocaleIdsLength()):
                self.localeIds.append(sessionConfiguration.LocaleIds(i))

    # SessionConfigurationT
    def Pack(self, builder):
        if self.userToken is not None:
            userToken = self.userToken.Pack(builder)
        if self.messageSecurityMode is not None:
            messageSecurityMode = self.messageSecurityMode.Pack(builder)
        if self.securityPolicy is not None:
            securityPolicy = self.securityPolicy.Pack(builder)
        if self.localeIds is not None:
            localeIdslist = []
            for i in range(len(self.localeIds)):
                localeIdslist.append(builder.CreateString(self.localeIds[i]))
            SessionConfigurationStartLocaleIdsVector(builder, len(self.localeIds))
            for i in reversed(range(len(self.localeIds))):
                builder.PrependUOffsetTRelative(localeIdslist[i])
            localeIds = builder.EndVector()
        SessionConfigurationStart(builder)
        if self.userToken is not None:
            SessionConfigurationAddUserToken(builder, userToken)
        if self.messageSecurityMode is not None:
            SessionConfigurationAddMessageSecurityMode(builder, messageSecurityMode)
        if self.securityPolicy is not None:
            SessionConfigurationAddSecurityPolicy(builder, securityPolicy)
        if self.localeIds is not None:
            SessionConfigurationAddLocaleIds(builder, localeIds)
        sessionConfiguration = SessionConfigurationEnd(builder)
        return sessionConfiguration
