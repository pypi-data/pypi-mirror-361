{
    "FastADK Agent Class": {
        "prefix": "fastadk-agent",
        "body": [
            "from fastadk.core.agent import BaseAgent",
            "",
            "",
            "class ${1:Name}Agent(BaseAgent):",
            "    \"\"\"${2:Description of the agent and its capabilities.}\"\"\"",
            "    ",
            "    _description = \"${3:Agent description for API documentation}\"",
            "    _model_name = \"${4:gemini-1.5-pro}\"",
            "    _provider = \"${5:gemini}\"",
            "    ",
            "    async def run(self, prompt: str) -> str:",
            "        \"\"\"",
            "        Process the user input and generate a response.",
            "        ",
            "        Args:",
            "            prompt: The user's input prompt",
            "            ",
            "        Returns:",
            "            The agent's response",
            "        \"\"\"",
            "        # You can add pre-processing logic here",
            "        response = await self.llm.generate(prompt)",
            "        # You can add post-processing logic here",
            "        return response",
            ""
        ],
        "description": "Create a new FastADK agent class"
    },
    "FastADK Tool Implementation": {
        "prefix": "fastadk-tool",
        "body": [
            "from fastadk.core.agent import BaseTool",
            "",
            "",
            "class ${1:Name}Tool(BaseTool):",
            "    \"\"\"${2:Description of the tool and its capabilities.}\"\"\"",
            "    ",
            "    def __init__(self):",
            "        super().__init__(",
            "            name=\"${3:tool_name}\",",
            "            description=\"${4:Tool description for LLM}\",",
            "            parameters={",
            "                \"${5:param_name}\": {",
            "                    \"type\": \"${6:string}\",",
            "                    \"description\": \"${7:Parameter description}\"",
            "                }",
            "            }",
            "        )",
            "    ",
            "    async def _run(",
            "        self, ${5:param_name}: ${8:str}, **kwargs",
            "    ) -> ${9:str}:",
            "        \"\"\"",
            "        Execute the tool logic.",
            "        ",
            "        Args:",
            "            ${5:param_name}: ${7:Parameter description}",
            "            **kwargs: Additional parameters",
            "            ",
            "        Returns:",
            "            ${10:Description of the return value}",
            "        \"\"\"",
            "        # Implement your tool logic here",
            "        result = f\"Tool executed with parameter: {${5:param_name}}\"",
            "        return result",
            ""
        ],
        "description": "Create a new FastADK tool implementation"
    },
    "FastADK Test Case": {
        "prefix": "fastadk-test",
        "body": [
            "import pytest",
            "from fastadk.core.agent import BaseAgent",
            "from fastadk.testing.utils import AgentTest, test_scenario",
            "from fastadk.testing.mock_tools import MockLLM, MockTool",
            "",
            "",
            "class Test${1:Agent}(AgentTest):",
            "    \"\"\"Test suite for ${1:Agent}.\"\"\"",
            "    ",
            "    agent_class = ${1:Agent}",
            "    ",
            "    async def setup(self):",
            "        \"\"\"Set up the test environment before each test.\"\"\"",
            "        self.agent = self.agent_class()",
            "        ",
            "        # Replace the agent's LLM with a mock for testing",
            "        self.agent.llm = MockLLM(",
            "            responses={",
            "                \"${2:test query}\": \"${3:mock response}\"",
            "            }",
            "        )",
            "    ",
            "    @test_scenario(",
            "        name=\"${4:Test scenario name}\",",
            "        prompt=\"${5:Test prompt}\",",
            "        expected_response=\"${6:Expected response pattern}\",",
            "        expected_tools=[${7:\"tool_name\"}],",
            "        mock_responses={",
            "            \"${8:query pattern}\": \"${9:response}\"",
            "        }",
            "    )",
            "    async def test_${10:scenario_name}(self, result):",
            "        \"\"\"${11:Test scenario description.}\"\"\"",
            "        assert result.success, result.error",
            "        assert \"${12:expected text}\" in result.response",
            "        ${13:# Add more assertions here}",
            ""
        ],
        "description": "Create a new FastADK test case"
    },
    "FastADK Main Script": {
        "prefix": "fastadk-main",
        "body": [
            "#!/usr/bin/env python",
            "\"\"\"",
            "${1:Script description}",
            "\"\"\"",
            "",
            "import asyncio",
            "import os",
            "from dotenv import load_dotenv",
            "",
            "from fastadk.core.agent import BaseAgent",
            "",
            "",
            "class ${2:Name}Agent(BaseAgent):",
            "    \"\"\"${3:Agent description}\"\"\"",
            "    ",
            "    _description = \"${4:Agent description for API}\"",
            "    _model_name = \"${5:gemini-1.5-pro}\"",
            "    _provider = \"${6:gemini}\"",
            "    ",
            "    async def run(self, prompt: str) -> str:",
            "        \"\"\"Process the user input and generate a response.\"\"\"",
            "        response = await self.llm.generate(prompt)",
            "        return response",
            "",
            "",
            "async def main():",
            "    \"\"\"Main entry point for the script.\"\"\"",
            "    # Load environment variables from .env file",
            "    load_dotenv()",
            "    ",
            "    # Create and initialize the agent",
            "    agent = ${2:Name}Agent()",
            "    ",
            "    # Interactive mode",
            "    print(f\"${7:Welcome message}\\n\")",
            "    ",
            "    while True:",
            "        try:",
            "            prompt = input(\"\\nYou: \")",
            "            if prompt.lower() in (\"exit\", \"quit\", \"q\"):",
            "                break",
            "                ",
            "            response = await agent.run(prompt)",
            "            print(f\"\\nAgent: {response}\")",
            "        except KeyboardInterrupt:",
            "            break",
            "        except Exception as e:",
            "            print(f\"Error: {e}\")",
            "    ",
            "    print(\"\\nGoodbye!\")",
            "",
            "",
            "if __name__ == \"__main__\":",
            "    asyncio.run(main())",
            ""
        ],
        "description": "Create a new FastADK main script with interactive mode"
    },
    "FastADK Config Validation": {
        "prefix": "fastadk-config-validation",
        "body": [
            "from pydantic import field_validator",
            "",
            "@field_validator(\"${1:field_name}\")",
            "@classmethod",
            "def validate_${1:field_name}(cls, v: ${2:str}) -> ${2:str}:",
            "    \"\"\"",
            "    Validate the ${1:field_name} field.",
            "    ",
            "    Args:",
            "        v: The field value to validate",
            "        ",
            "    Returns:",
            "        The validated value",
            "        ",
            "    Raises:",
            "        ValueError: If validation fails",
            "    \"\"\"",
            "    if ${3:validation_condition}:",
            "        raise ValueError(f\"${4:Error message}: {v}\")",
            "    return v",
            ""
        ],
        "description": "Add a Pydantic field validator for FastADK configuration"
    },
    "FastADK Memory Implementation": {
        "prefix": "fastadk-memory",
        "body": [
            "from typing import Any, Dict, List, Optional",
            "",
            "from fastadk.memory.base import MemoryBackend",
            "",
            "",
            "class ${1:Custom}MemoryBackend(MemoryBackend):",
            "    \"\"\"",
            "    ${2:Description of the custom memory backend.}",
            "    \"\"\"",
            "    ",
            "    def __init__(self, connection_string: Optional[str] = None, **kwargs: Any):",
            "        \"\"\"",
            "        Initialize the memory backend.",
            "        ",
            "        Args:",
            "            connection_string: Connection string for the storage backend",
            "            **kwargs: Additional configuration options",
            "        \"\"\"",
            "        super().__init__(**kwargs)",
            "        self.connection_string = connection_string",
            "        ${3:# Add initialization logic here}",
            "    ",
            "    async def store(self, key: str, value: Any, ttl: Optional[int] = None) -> None:",
            "        \"\"\"",
            "        Store a value with the given key.",
            "        ",
            "        Args:",
            "            key: The key to store the value under",
            "            value: The value to store",
            "            ttl: Time-to-live in seconds (optional)",
            "        \"\"\"",
            "        ${4:# Implement storage logic}",
            "        pass",
            "    ",
            "    async def retrieve(self, key: str) -> Any:",
            "        \"\"\"",
            "        Retrieve a value by its key.",
            "        ",
            "        Args:",
            "            key: The key to retrieve",
            "            ",
            "        Returns:",
            "            The stored value, or None if not found",
            "        \"\"\"",
            "        ${5:# Implement retrieval logic}",
            "        return None",
            "    ",
            "    async def delete(self, key: str) -> None:",
            "        \"\"\"",
            "        Delete a value by its key.",
            "        ",
            "        Args:",
            "            key: The key to delete",
            "        \"\"\"",
            "        ${6:# Implement deletion logic}",
            "        pass",
            "    ",
            "    async def list_keys(self, prefix: Optional[str] = None) -> List[str]:",
            "        \"\"\"",
            "        List all keys, optionally filtered by prefix.",
            "        ",
            "        Args:",
            "            prefix: Optional prefix to filter keys",
            "            ",
            "        Returns:",
            "            List of keys",
            "        \"\"\"",
            "        ${7:# Implement key listing logic}",
            "        return []",
            "    ",
            "    async def clear(self) -> None:",
            "        \"\"\"Clear all stored data.\"\"\"",
            "        ${8:# Implement clearing logic}",
            "        pass",
            ""
        ],
        "description": "Create a new FastADK memory backend implementation"
    },
    "FastADK Register Tool": {
        "prefix": "fastadk-register-tool",
        "body": [
            "self.register_tool(",
            "    name=\"${1:tool_name}\",",
            "    description=\"${2:Description of what the tool does}\",",
            "    function=${3:tool_function},",
            "    parameters={",
            "        \"${4:parameter_name}\": {",
            "            \"type\": \"${5:string}\",",
            "            \"description\": \"${6:Description of the parameter}\"",
            "        }$0",
            "    }",
            ")"
        ],
        "description": "Register a tool with a FastADK agent"
    },
    "FastADK Context Policy": {
        "prefix": "fastadk-context-policy",
        "body": [
            "from fastadk.core.context_policy import ContextPolicy",
            "from fastadk.core.context import Context",
            "",
            "",
            "class ${1:CustomContextPolicy}(ContextPolicy):",
            "    \"\"\"${2:Custom context policy for controlling how context is managed.}\"\"\"",
            "",
            "    def __init__(self, ${3:options}):",
            "        \"\"\"Initialize the context policy.\"\"\"",
            "        super().__init__()",
            "        ${4:# Initialize your context policy}",
            "",
            "    async def apply(self, context: Context) -> Context:",
            "        \"\"\"Apply the policy to the given context.\"\"\"",
            "        ${5:# Implement your context policy logic}",
            "        return context",
            ""
        ],
        "description": "Create a custom context policy for FastADK"
    },
    "FastADK Test Scenario": {
        "prefix": "fastadk-test-scenario",
        "body": [
            "from fastadk.testing.utils import AgentTest, scenario",
            "from fastadk.testing.mock_tools import MockLLM, test_scenario, create_test_scenario",
            "from ${1:your_agent_module} import ${2:YourAgent}",
            "",
            "",
            "class ${3:YourAgentTest}(AgentTest):",
            "    \"\"\"Test suite for ${2:YourAgent}.\"\"\"",
            "",
            "    agent_class = ${2:YourAgent}",
            "",
            "    async def setup(self):",
            "        \"\"\"Set up the test environment.\"\"\"",
            "        self.agent = self.agent_class()",
            "        # Replace the agent's model with a mock",
            "        self.agent.model = MockLLM(responses={",
            "            \"${4:test prompt pattern}\": \"${5:test response}\"",
            "        })",
            "",
            "    @test_scenario(create_test_scenario(",
            "        description=\"${6:Test basic agent functionality}\",",
            "        inputs=[\"${7:Hello, how are you?}\"],",
            "        expected_outputs=[\"${8:I'm doing well, thank you for asking!}\"],",
            "        expected_tools=[]",
            "    ))",
            "    async def test_basic_interaction(self):",
            "        \"\"\"Test a basic interaction with the agent.\"\"\"",
            "        response = await self.agent.run(\"${7:Hello, how are you?}\")",
            "        assert \"${9:well}\" in response.lower()",
            "        return response",
            ""
        ],
        "description": "Create a test scenario for a FastADK agent"
    }
}