# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SelectableDeviceConfigs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SelectableDeviceConfigs()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSelectableDeviceConfigs(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SelectableDeviceConfigs
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SelectableDeviceConfigs
    def DeviceConfigsList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.profinet.device.fbs.DeviceConfig import DeviceConfig
            obj = DeviceConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SelectableDeviceConfigs
    def DeviceConfigsListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SelectableDeviceConfigs
    def DeviceConfigsListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def SelectableDeviceConfigsStart(builder): builder.StartObject(1)
def Start(builder):
    return SelectableDeviceConfigsStart(builder)
def SelectableDeviceConfigsAddDeviceConfigsList(builder, deviceConfigsList): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(deviceConfigsList), 0)
def AddDeviceConfigsList(builder, deviceConfigsList):
    return SelectableDeviceConfigsAddDeviceConfigsList(builder, deviceConfigsList)
def SelectableDeviceConfigsStartDeviceConfigsListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDeviceConfigsListVector(builder, numElems):
    return SelectableDeviceConfigsStartDeviceConfigsListVector(builder, numElems)
def SelectableDeviceConfigsEnd(builder): return builder.EndObject()
def End(builder):
    return SelectableDeviceConfigsEnd(builder)
import comm.profinet.device.fbs.DeviceConfig
try:
    from typing import List
except:
    pass

class SelectableDeviceConfigsT(object):

    # SelectableDeviceConfigsT
    def __init__(self):
        self.deviceConfigsList = None  # type: List[comm.profinet.device.fbs.DeviceConfig.DeviceConfigT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        selectableDeviceConfigs = SelectableDeviceConfigs()
        selectableDeviceConfigs.Init(buf, pos)
        return cls.InitFromObj(selectableDeviceConfigs)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, selectableDeviceConfigs):
        x = SelectableDeviceConfigsT()
        x._UnPack(selectableDeviceConfigs)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.deviceConfigsList == other.deviceConfigsList

    # SelectableDeviceConfigsT
    def _UnPack(self, selectableDeviceConfigs):
        if selectableDeviceConfigs is None:
            return
        if not selectableDeviceConfigs.DeviceConfigsListIsNone():
            self.deviceConfigsList = []
            for i in range(selectableDeviceConfigs.DeviceConfigsListLength()):
                if selectableDeviceConfigs.DeviceConfigsList(i) is None:
                    self.deviceConfigsList.append(None)
                else:
                    deviceConfig_ = comm.profinet.device.fbs.DeviceConfig.DeviceConfigT.InitFromObj(selectableDeviceConfigs.DeviceConfigsList(i))
                    self.deviceConfigsList.append(deviceConfig_)

    # SelectableDeviceConfigsT
    def Pack(self, builder):
        if self.deviceConfigsList is not None:
            deviceConfigsListlist = []
            for i in range(len(self.deviceConfigsList)):
                deviceConfigsListlist.append(self.deviceConfigsList[i].Pack(builder))
            SelectableDeviceConfigsStartDeviceConfigsListVector(builder, len(self.deviceConfigsList))
            for i in reversed(range(len(self.deviceConfigsList))):
                builder.PrependUOffsetTRelative(deviceConfigsListlist[i])
            deviceConfigsList = builder.EndVector()
        SelectableDeviceConfigsStart(builder)
        if self.deviceConfigsList is not None:
            SelectableDeviceConfigsAddDeviceConfigsList(builder, deviceConfigsList)
        selectableDeviceConfigs = SelectableDeviceConfigsEnd(builder)
        return selectableDeviceConfigs
