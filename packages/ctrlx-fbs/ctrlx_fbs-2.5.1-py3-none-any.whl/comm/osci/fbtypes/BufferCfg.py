# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BufferCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BufferCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBufferCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BufferCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BufferCfg
    def RecordingTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.Time import Time
            obj = Time()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BufferCfg
    def BufferType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # BufferCfg
    def RecordingInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.Time import Time
            obj = Time()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BufferCfgStart(builder): builder.StartObject(3)
def Start(builder):
    return BufferCfgStart(builder)
def BufferCfgAddRecordingTime(builder, recordingTime): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(recordingTime), 0)
def AddRecordingTime(builder, recordingTime):
    return BufferCfgAddRecordingTime(builder, recordingTime)
def BufferCfgAddBufferType(builder, bufferType): builder.PrependInt8Slot(1, bufferType, 0)
def AddBufferType(builder, bufferType):
    return BufferCfgAddBufferType(builder, bufferType)
def BufferCfgAddRecordingInterval(builder, recordingInterval): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(recordingInterval), 0)
def AddRecordingInterval(builder, recordingInterval):
    return BufferCfgAddRecordingInterval(builder, recordingInterval)
def BufferCfgEnd(builder): return builder.EndObject()
def End(builder):
    return BufferCfgEnd(builder)
import comm.osci.fbtypes.Time
try:
    from typing import Optional
except:
    pass

class BufferCfgT(object):

    # BufferCfgT
    def __init__(self):
        self.recordingTime = None  # type: Optional[comm.osci.fbtypes.Time.TimeT]
        self.bufferType = 0  # type: int
        self.recordingInterval = None  # type: Optional[comm.osci.fbtypes.Time.TimeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        bufferCfg = BufferCfg()
        bufferCfg.Init(buf, pos)
        return cls.InitFromObj(bufferCfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, bufferCfg):
        x = BufferCfgT()
        x._UnPack(bufferCfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.recordingTime == other.recordingTime and \
            self.bufferType == other.bufferType and \
            self.recordingInterval == other.recordingInterval

    # BufferCfgT
    def _UnPack(self, bufferCfg):
        if bufferCfg is None:
            return
        if bufferCfg.RecordingTime() is not None:
            self.recordingTime = comm.osci.fbtypes.Time.TimeT.InitFromObj(bufferCfg.RecordingTime())
        self.bufferType = bufferCfg.BufferType()
        if bufferCfg.RecordingInterval() is not None:
            self.recordingInterval = comm.osci.fbtypes.Time.TimeT.InitFromObj(bufferCfg.RecordingInterval())

    # BufferCfgT
    def Pack(self, builder):
        if self.recordingTime is not None:
            recordingTime = self.recordingTime.Pack(builder)
        if self.recordingInterval is not None:
            recordingInterval = self.recordingInterval.Pack(builder)
        BufferCfgStart(builder)
        if self.recordingTime is not None:
            BufferCfgAddRecordingTime(builder, recordingTime)
        BufferCfgAddBufferType(builder, self.bufferType)
        if self.recordingInterval is not None:
            BufferCfgAddRecordingInterval(builder, recordingInterval)
        bufferCfg = BufferCfgEnd(builder)
        return bufferCfg
