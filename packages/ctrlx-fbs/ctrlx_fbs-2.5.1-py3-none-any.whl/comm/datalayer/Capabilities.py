# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Capabilities(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Capabilities()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCapabilities(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Capabilities
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Capabilities
    def BulkMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Capabilities
    def MultiRegister(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Capabilities
    def MaximumMessageSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def CapabilitiesStart(builder): builder.StartObject(3)
def Start(builder):
    return CapabilitiesStart(builder)
def CapabilitiesAddBulkMax(builder, bulkMax): builder.PrependUint32Slot(0, bulkMax, 0)
def AddBulkMax(builder, bulkMax):
    return CapabilitiesAddBulkMax(builder, bulkMax)
def CapabilitiesAddMultiRegister(builder, multiRegister): builder.PrependBoolSlot(1, multiRegister, 0)
def AddMultiRegister(builder, multiRegister):
    return CapabilitiesAddMultiRegister(builder, multiRegister)
def CapabilitiesAddMaximumMessageSize(builder, maximumMessageSize): builder.PrependUint32Slot(2, maximumMessageSize, 0)
def AddMaximumMessageSize(builder, maximumMessageSize):
    return CapabilitiesAddMaximumMessageSize(builder, maximumMessageSize)
def CapabilitiesEnd(builder): return builder.EndObject()
def End(builder):
    return CapabilitiesEnd(builder)

class CapabilitiesT(object):

    # CapabilitiesT
    def __init__(self):
        self.bulkMax = 0  # type: int
        self.multiRegister = False  # type: bool
        self.maximumMessageSize = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        capabilities = Capabilities()
        capabilities.Init(buf, pos)
        return cls.InitFromObj(capabilities)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, capabilities):
        x = CapabilitiesT()
        x._UnPack(capabilities)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.bulkMax == other.bulkMax and \
            self.multiRegister == other.multiRegister and \
            self.maximumMessageSize == other.maximumMessageSize

    # CapabilitiesT
    def _UnPack(self, capabilities):
        if capabilities is None:
            return
        self.bulkMax = capabilities.BulkMax()
        self.multiRegister = capabilities.MultiRegister()
        self.maximumMessageSize = capabilities.MaximumMessageSize()

    # CapabilitiesT
    def Pack(self, builder):
        CapabilitiesStart(builder)
        CapabilitiesAddBulkMax(builder, self.bulkMax)
        CapabilitiesAddMultiRegister(builder, self.multiRegister)
        CapabilitiesAddMaximumMessageSize(builder, self.maximumMessageSize)
        capabilities = CapabilitiesEnd(builder)
        return capabilities
