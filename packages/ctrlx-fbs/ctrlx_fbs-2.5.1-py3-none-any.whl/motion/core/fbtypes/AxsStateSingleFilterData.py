# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of single filter
class AxsStateSingleFilterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsStateSingleFilterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsStateSingleFilterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsStateSingleFilterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the filter
    # AxsStateSingleFilterData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type ID of the filter
    # AxsStateSingleFilterData
    def TypeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Supported axes of current filter in vector
    # AxsStateSingleFilterData
    def SupportedCategory(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.AxsCategory import AxsCategory
            obj = AxsCategory()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AxsStateSingleFilterData
    def SupportedCategoryLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsStateSingleFilterData
    def SupportedCategoryIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Parameters of filter
    # AxsStateSingleFilterData
    def FilterDescribParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DescribeParam import DescribeParam
            obj = DescribeParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Description of the filter
    # AxsStateSingleFilterData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsStateSingleFilterDataStart(builder): builder.StartObject(5)
def Start(builder):
    return AxsStateSingleFilterDataStart(builder)
def AxsStateSingleFilterDataAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return AxsStateSingleFilterDataAddName(builder, name)
def AxsStateSingleFilterDataAddTypeId(builder, typeId): builder.PrependInt8Slot(1, typeId, 0)
def AddTypeId(builder, typeId):
    return AxsStateSingleFilterDataAddTypeId(builder, typeId)
def AxsStateSingleFilterDataAddSupportedCategory(builder, supportedCategory): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(supportedCategory), 0)
def AddSupportedCategory(builder, supportedCategory):
    return AxsStateSingleFilterDataAddSupportedCategory(builder, supportedCategory)
def AxsStateSingleFilterDataStartSupportedCategoryVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSupportedCategoryVector(builder, numElems):
    return AxsStateSingleFilterDataStartSupportedCategoryVector(builder, numElems)
def AxsStateSingleFilterDataAddFilterDescribParam(builder, filterDescribParam): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(filterDescribParam), 0)
def AddFilterDescribParam(builder, filterDescribParam):
    return AxsStateSingleFilterDataAddFilterDescribParam(builder, filterDescribParam)
def AxsStateSingleFilterDataAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return AxsStateSingleFilterDataAddDescription(builder, description)
def AxsStateSingleFilterDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsStateSingleFilterDataEnd(builder)
import motion.core.fbtypes.AxsCategory
import motion.core.fbtypes.DescribeParam
try:
    from typing import List, Optional
except:
    pass

class AxsStateSingleFilterDataT(object):

    # AxsStateSingleFilterDataT
    def __init__(self):
        self.name = None  # type: str
        self.typeId = 0  # type: int
        self.supportedCategory = None  # type: List[motion.core.fbtypes.AxsCategory.AxsCategoryT]
        self.filterDescribParam = None  # type: Optional[motion.core.fbtypes.DescribeParam.DescribeParamT]
        self.description = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsStateSingleFilterData = AxsStateSingleFilterData()
        axsStateSingleFilterData.Init(buf, pos)
        return cls.InitFromObj(axsStateSingleFilterData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsStateSingleFilterData):
        x = AxsStateSingleFilterDataT()
        x._UnPack(axsStateSingleFilterData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.typeId == other.typeId and \
            self.supportedCategory == other.supportedCategory and \
            self.filterDescribParam == other.filterDescribParam and \
            self.description == other.description

    # AxsStateSingleFilterDataT
    def _UnPack(self, axsStateSingleFilterData):
        if axsStateSingleFilterData is None:
            return
        self.name = axsStateSingleFilterData.Name()
        self.typeId = axsStateSingleFilterData.TypeId()
        if not axsStateSingleFilterData.SupportedCategoryIsNone():
            self.supportedCategory = []
            for i in range(axsStateSingleFilterData.SupportedCategoryLength()):
                if axsStateSingleFilterData.SupportedCategory(i) is None:
                    self.supportedCategory.append(None)
                else:
                    axsCategory_ = motion.core.fbtypes.AxsCategory.AxsCategoryT.InitFromObj(axsStateSingleFilterData.SupportedCategory(i))
                    self.supportedCategory.append(axsCategory_)
        if axsStateSingleFilterData.FilterDescribParam() is not None:
            self.filterDescribParam = motion.core.fbtypes.DescribeParam.DescribeParamT.InitFromObj(axsStateSingleFilterData.FilterDescribParam())
        self.description = axsStateSingleFilterData.Description()

    # AxsStateSingleFilterDataT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.supportedCategory is not None:
            supportedCategorylist = []
            for i in range(len(self.supportedCategory)):
                supportedCategorylist.append(self.supportedCategory[i].Pack(builder))
            AxsStateSingleFilterDataStartSupportedCategoryVector(builder, len(self.supportedCategory))
            for i in reversed(range(len(self.supportedCategory))):
                builder.PrependUOffsetTRelative(supportedCategorylist[i])
            supportedCategory = builder.EndVector()
        if self.filterDescribParam is not None:
            filterDescribParam = self.filterDescribParam.Pack(builder)
        if self.description is not None:
            description = builder.CreateString(self.description)
        AxsStateSingleFilterDataStart(builder)
        if self.name is not None:
            AxsStateSingleFilterDataAddName(builder, name)
        AxsStateSingleFilterDataAddTypeId(builder, self.typeId)
        if self.supportedCategory is not None:
            AxsStateSingleFilterDataAddSupportedCategory(builder, supportedCategory)
        if self.filterDescribParam is not None:
            AxsStateSingleFilterDataAddFilterDescribParam(builder, filterDescribParam)
        if self.description is not None:
            AxsStateSingleFilterDataAddDescription(builder, description)
        axsStateSingleFilterData = AxsStateSingleFilterDataEnd(builder)
        return axsStateSingleFilterData
