# Este archivo ha sido generado automáticamente por tai-sql
# No modifiques este archivo directamente

{{ imports|join('\n') }}

# General Enum class

class EnumModel:

    def __init__(self, name: str, values: List[str]):
        self.name = name
        self.values = values
    
    def find_many(self) -> List[str]:
        """
        Devuelve una lista de los valores del Enum.
        
        Returns:
            List[str]: Lista de valores del Enum
        """
        return self.values

{% for model in models %}
class {{ model.name }}DTO(BaseModel):
    """Data Transfer Object para {{ model.name }}"""
    {% for column in model.columns -%}
    {% if not column.args.get('autoincrement', False) and column.default is none and not column.nullable and not column.is_foreign_key %}
    {{ column.name }}: {{ column.type }}
    {% endif %}
    {% endfor %}
    {% for column in model.columns -%}
    {% if column.args.get('autoincrement', False) or column.is_foreign_key %}
    {{ column.name }}: Optional[{{ column.type }}] = None
    {% elif column.default is none and column.nullable %}
    {{ column.name }}: Optional[{{ column.type }}] = None
    {% elif column.default is not none %}
        {% if column.default == "datetime.now" %}
    {{ column.name }}: {{ column.type }} = Field(default_factory=datetime.now)
        {% elif column.default == "datetime.today" %}
    {{ column.name }}: {{ column.type }} = Field(default_factory=datetime.today)
        {% elif column.default in [True, False, None] %}
    {{ column.name }}: {{ column.type }} = {{ column.default }}
        {% elif column.default is string %}
            {% if column.default.isdigit() %}
    {{ column.name }}: {{ column.type }} = {{ column.default }}
            {% elif column.default.replace(" ", "").isalnum() %}
    {{ column.name }}: {{ column.type }} = "{{ column.default }}"
            {% else %}
    {{ column.name }}: {{ column.type }} = "{{ column.default | replace('"', '\\"') }}"
            {% endif %}
        {% else %}
    {{ column.name }}: {{ column.type }} = {{ column.default }}
        {% endif %}
    {% endif %}
    {% endfor %}

    {% for relation in model.relations %}
    {% if relation.direction == 'one-to-many' %}
    {{ relation.name }}: Optional[List[{{ relation.target }}DTO]] = None
    {% elif relation.direction == 'many-to-one' %}
    {{ relation.name }}: Optional[{{ relation.target }}DTO] = None
    {% endif %}
    {% endfor %}

    class Config:
        # Performance optimizations
        arbitrary_types_allowed = False  # Más rápido al validar tipos estrictos
        use_enum_values = True
        validate_assignment = True  # Evita validación en cada asignación
        frozen = False  # Hace el objeto inmutable y más rápido
        str_strip_whitespace = False  # Evita procesamiento innecesario de strings
        validate_default = False  # No valida valores por defecto
        extra = "forbid"  # Más rápido que "allow" o "ignore"
    
    @classmethod
    def from_model(cls, instance: {{ model.name }}, includes: List[str]=None) -> {{ model.name }}DTO:
        """
        Crea un DTO desde una instancia del modelo SQLAlchemy
        
        Args:
            instance: Instancia del modelo {{ model.name }}
            includes: Lista de relaciones a incluir
            
        Returns:
            {{ model.name }}DTO: Instancia del DTO
        """

        {% if model.relations %}
        if includes is None:
            includes = []

        # Evaluación lazy de relaciones costosas
        {% for relation in model.relations %}
        {{ relation.name }} = None
        if '{{ relation.name }}' in includes:
            {% if relation.direction == 'one-to-many' %}
            {{ relation.name }} = [{{ relation.target }}DTO.from_model(reg, includes) for reg in instance.{{ relation.name }}]
            {% elif relation.direction == 'many-to-one' %}
            {{ relation.name }} = {{ relation.target }}DTO.from_model(instance.{{ relation.name }}, includes)
            {% endif %}
        {% endfor %}

        {% endif %}
        return cls(
            {% for column in model.columns %}
            {{ column.name }}=instance.{{ column.name }},
            {% endfor %}
            {% for relation in model.relations %}
            {{ relation.name }}={{ relation.name }},
            {% endfor %}
        )
    
    def to_model(self) -> {{ model.name }}:
        """
        Crea una instancia del modelo SQLAlchemy desde el DTO
        
        Returns:
            {{ model.name }}: Instancia del modelo SQLAlchemy
        """
        
        # Evaluación lazy de relaciones costosas
        {% for relation in model.relations %}
        {{ relation.name }} = None
        if self.{{ relation.name }} is not None:
            {% if relation.direction == 'one-to-many' %}
            {{ relation.name }} = [{{ relation.target }}(**reg.to_dict()) for reg in self.{{ relation.name }}]
            {% elif relation.direction == 'many-to-one' %}
            {{ relation.name }} = {{ relation.target }}(**self.{{ relation.name }}.to_dict())
            {% endif %}
        {% endfor %}

        return {{ model.name }}(
            {% for column in model.columns %}
            {{ column.name }}=self.{{ column.name }},
            {% endfor %}
            {% for relation in model.relations %}
            {{ relation.name }}={{ relation.name }},
            {% endfor %}
        )
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> {{ model.name }}DTO:
        """
        Crea un DTO desde un diccionario
        
        Args:
            data: Diccionario con los datos del DTO
            
        Returns:
            {{ model.name }}DTO: Instancia del DTO
        """
        return cls(**data)
    
    def to_dict(self) -> Dict[str, Any]:
        return self.model_dump(exclude_none=True)


class {{ model.name }}AsyncCRUD:
    """
    Clase CRUD asíncrona para el modelo {{ model.name }}.
    
    Proporciona operaciones completas de Create, Read, Update y Delete
    para el modelo {{ model.name }} con soporte para gestión automática
    y manual de sesiones SQLAlchemy.
    
    Características principales:
    - Soporte dual: sesiones automáticas o compartidas
    - Type hints completos para mejor experiencia de desarrollo
    - Manejo robusto de errores con rollback automático
    - Operaciones optimizadas con flush para obtener IDs
    - Filtros flexibles en todas las operaciones de búsqueda
    
    Métodos de lectura:
        find(**filters, session=None): Busca un único registro
        find_many(limit, offset, **filters, session=None): Busca múltiples registros
        find_by_id(id, session=None): Busca por clave primaria
        count(**filters, session=None): Cuenta registros

    {% if not model.is_view %}
    Métodos de escritura:
        create(**data, session=None): Crea un nuevo registro
        create_many(records, session=None): Crea múltiples registros
        update(filters, **data, session=None): Actualiza registros existentes
        delete(**filters, session=None): Elimina registros

    {% endif %}
    Parámetros de sesión:
        Todos los métodos aceptan un parámetro opcional 'session':
        - Si session=None: Se crea una sesión automática con commit
        - Si session=AsyncSession: Se usa la sesión proporcionada (para transacciones)
    
    Ejemplos de uso:
        ```python
        # Operaciones simples (sesión automática)
        crud = {{ model.name }}CRUD(session_manager)
        {% if model.columns %}
        {% set first_column = model.columns[0] %}
        {% if not first_column.args.get('autoincrement', False) %}
        record = await crud.create({{ first_column.name }}="valor")
        {% endif %}
        {% endif %}
        found = await crud.find_by_id(1)
        
        # Operaciones transaccionales (sesión compartida)
        async with session_manager.transaction() as session:
            record1 = await crud.create(data="valor1", session=session)
            record2 = await crud.create(data="valor2", session=session)
            # Ambos se crean en la misma transacción
        ```
    """
    
    def __init__(self, session_manager: AsyncSessionManager):
        """
        Inicializa el CRUD con un gestor de sesiones.
        
        Args:
            session_manager: Gestor de sesiones asíncronas
        """
        self.session_manager = session_manager
    
    {% if not model.is_view %}
    async def find(
        self,
        {% for column in model.columns %}
        {% if column.args.get('primary_key', False)%}
        {{ column.name }}: {{ column.type }},
        {% endif %}
        {% endfor %}
        includes: Optional[List[str]] = None,
        session: Optional[AsyncSession] = None
    ) -> Optional[{{ model.name }}DTO]:
        """
        Busca un único registro por primary key
        
        Args:
            {% for column in model.columns %}
            {% if column.args.get('primary_key', False) %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% endif %}
            {% endfor %}
            includes: Lista de relaciones a incluir (opcional)
            session: Sesión existente (opcional)
            
        Returns:
            Instancia del modelo o None si no se encuentra
        """
        query = select({{ model.name }})

        if includes is None:
            includes = []

        {% for relation in model.relations %}
        if '{{ relation.name }}' in includes:
            query = query.options(selectinload({{ model.name}}.{{ relation.name }}))
        {% endfor %}
        
        {% for column in model.columns %}
        {% if column.args.get('primary_key', False) %}
        query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% endif %}
        {% endfor %}

        if session is not None:
            result = await session.execute(query)
            data = {{ model.name }}DTO.from_model(result.scalars().first(), includes) if result else None

        else:
            async with self.session_manager.get_session() as session:
                result = await session.execute(query)
                data = {{ model.name }}DTO.from_model(result.scalars().first(), includes) if result else None
        
        return data
    {% endif %}
    
    async def find_many(
        self,
        limit: Optional[int] = None, 
        offset: Optional[int] = None,
        {% for column in model.columns %}
        {% if column.args.get('primary_key', False) or column.is_foreign_key %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% elif 'str' == column.type or 'Text' == column.type or 'bool' == column.type %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% elif  'date' == column.type %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        min_{{ column.name }}: Optional[{{ column.type }}] = None,
        max_{{ column.name }}: Optional[{{ column.type }}] = None,
        {% elif 'int' == column.type or 'BigInteger' == column.type or 'float' == column.type or 'Numeric' == column.type or 'datetime' == column.type or 'time' == column.type %}
        min_{{ column.name }}: Optional[{{ column.type }}] = None,
        max_{{ column.name }}: Optional[{{ column.type }}] = None,
        {% else %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% endif %}
        {% endfor %}
        includes: Optional[List[str]] = None,
        session: Optional[AsyncSession] = None
    ) -> List[{{ model.name }}DTO]:
        """
        Busca múltiples registros por filtros.
        
        Args:
            limit: Límite de registros a retornar
            offset: Número de registros a saltar
            {% for column in model.columns %}
            {% if column.args.get('primary_key', False) or column.is_foreign_key %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% elif 'str' == column.type or 'Text' == column.type or 'bool' == column.type %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% elif  'date' == column.type %}
            {{ column.name }}: Filtrar por {{ column.name }},
            min_{{ column.name }}: Filtrar por fecha mínima (incluída)
            max_{{ column.name }}: Filtrar por fecha máxima (incluída)
            {% elif 'int' == column.type or 'BigInteger' == column.type or 'float' == column.type or 'Numeric' == column.type or 'datetime' == column.type or 'time' == column.type %}
            min_{{ column.name }}: Filtrar por valor mínimo de {{ column.name }} (incluído)
            max_{{ column.name }}: Filtrar por valor máximo de {{ column.name }} (incluído)
            {% else %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% endif %}
            {% endfor %}
            includes: Lista de relaciones a incluir (opcional)
            session: Sesión existente (opcional)
            
        Returns:
            Lista de instancias del modelo
        """
        query = select({{ model.name }})

        if includes is None:
            includes = []

        {% for relation in model.relations %}
        if '{{ relation.name }}' in includes:
            query = query.options(selectinload({{ model.name}}.{{ relation.name }}))
        {% endfor %}
        
        {% for column in model.columns %}
        {% if column.args.get('primary_key', False) or column.is_foreign_key %}
        if {{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% elif 'str' == column.type or 'Text' == column.type or 'bool' == column.type %}
        if {{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% elif 'date' == column.type %}
        if {{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        if min_{{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} >= min_{{ column.name }})
        if max_{{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} <= max_{{ column.name }})
        {% elif 'int' == column.type or 'BigInteger' == column.type or 'float' == column.type or 'Numeric' == column.type or 'datetime' == column.type or 'time' == column.type %}
        if min_{{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} >= min_{{ column.name }})
        if max_{{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} <= max_{{ column.name }})
        {% else %}
        if {{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% endif %}
        {% endfor %}
        
        if offset is not None:
            query = query.offset(offset)
        if limit is not None:
            query = query.limit(limit)
        
        if session is not None:
            results = await session.execute(query)
            data = [{{ model.name }}DTO.from_model(result, includes) for result in results.scalars().all()]
        else:
            async with self.session_manager.get_session() as session:
                results = await session.execute(query)
                data = [{{ model.name }}DTO.from_model(result, includes) for result in results.scalars().all()]

        return data
    
    {% if not model.is_view %}
    async def create(
        self, 
        {{ model.tablename }}: {{ model.name }}DTO,
        session: Optional[AsyncSession] = None
    ) -> {{ model.name }}DTO:
        """
        Crea un nuevo registro.
        
        Args:
            {{ model.tablename }}: Datos del {{ model.tablename }} a crear
            session: Sesión existente (opcional)
            
        Returns:
            Instancia del modelo creado
        """

        includes = []
        
        {% for relation in model.relations %}
        {% set non_nullable_fields = [] %}
        {% for column in model.columns %}
        {% if column.name in relation.fields and not column.nullable %}
        {% set _ = non_nullable_fields.append(column.name) %}
        {% endif %}
        {% endfor %}
        {% if non_nullable_fields %}
        if {{ model.tablename }}.{{ relation.name }} is None:
            if any([{% for fk in relation.fields %}{{ model.tablename }}.{{ fk }} is None,{% endfor %}]):
                raise Exception('Las Foreign Keys no están bien definidas para crear el registro en {{ model.tablename }}')
        else:
            includes.append('{{ relation.name }}')
        {% endif %}
        {% endfor %}
        
        instance = {{ model.tablename }}.to_model()

        if session is not None:
            session.add(instance)
            await session.flush()  # Asegura que se genere el ID si es autoincrement
            data = {{ model.name }}DTO.from_model(instance, includes)
        else:
            async with self.session_manager.get_session() as session:
                session.add(instance)
                await session.flush()  # Asegura que se genere el ID si es autoincrement
                data = {{ model.name }}DTO.from_model(instance, includes)
        
        return data
    
    async def create_many(self, records: List[{{ model.name }}DTO], session: Optional[AsyncSession] = None) -> int:
        """
        Crea múltiples registros en la tabla {{ model.tablename }}.
        
        Args:
            records: Lista de {{ model.name }}DTO con los datos de los registros
            session: Sesión existente (opcional)
            
        Returns:
            Número de registros creados

        """

        instances = []
        for record in records:
            instances.append(record.to_model())
        
        if session is not None:
            session.add_all(instances)
            await session.flush()  # Asegura que se generen los IDs si son autoincrement
        else:
            async with self.session_manager.get_session() as session:
                session.add_all(instances)
                await session.flush()  # Asegura que se generen los IDs si son autoincrement

        return len(instances)
    
    async def update(
        self, 
        {% for column in model.columns %}
        {% if column.args.get('primary_key', False) %}
        {{ column.name }}: {{ column.type }},
        {% endif -%}
        {% endfor %}
        {% for column in model.columns %}
        {% if not column.args.get('autoincrement', False) and not column.args.get('primary_key', False) %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% endif -%}
        {% endfor %}
        session: Optional[AsyncSession] = None
    ) -> int:
        """
        Actualiza registros que coincidan con los filtros.
        
        Args:
            {% for column in model.columns %}
            {% if column.args.get('primary_key', False) %}
            {{ column.name }}: Identificador del registro
            {% endif -%}
            {% endfor %}
            {% for column in model.columns %}
            {% if not column.args.get('autoincrement', False) and not column.args.get('primary_key', False) %}
            {{ column.name }}: Nuevo valor para {{ column.name }}
            {% endif %}
            {% endfor %}
            session: Sesión existente (opcional)
            
        Returns:
            Número de registros actualizados
        """

        query = update({{ model.name }})
        
        {% for column in model.columns %}
        {% if column.args.get('primary_key', False) %}
        query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% endif -%}
        {% endfor %}
        
        update_data = {}
        {% for column in model.columns %}
        {% if not column.args.get('autoincrement', False) and not column.args.get('primary_key', False) %}
        if {{ column.name }} is not None:
            update_data['{{ column.name }}'] = {{ column.name }}
        {% endif %}
        {% endfor %}
        
        if session is not None:
            if update_data:
                query = query.values(**update_data)
                result = await session.execute(query)
                return result.rowcount
        else:
            if update_data:
                query = query.values(**update_data)
                async with self.session_manager.get_session() as session:
                    result = await session.execute(query)
                    return result.rowcount

        return 0
    
    async def update_many(self, records: List[Dict[str, Any]], match_fields: List[str], session: Optional[AsyncSession] = None) -> int:
        """
        Actualiza múltiples registros basándose en campos de coincidencia.
        
        Args:
            records: Lista de diccionarios con los datos a actualizar
            match_fields: Campos a usar para encontrar los registros a actualizar
            session: Sesión existente (opcional)
            
        Returns:
            Número total de registros actualizados
        """
        total_updated = 0

        async def execute_query(session: AsyncSession) -> int:
            
            for record_data in records:
                record_copy = record_data.copy()
                # Separar campos de búsqueda de campos de actualización
                filters = {field: record_copy.pop(field) for field in match_fields if field in record_copy}
                
                if filters and record_copy:  # Solo actualizar si hay filtros y datos
                    query = update({{ model.name }})
                    
                    for key, value in filters.items():
                        if hasattr({{ model.name }}, key):
                            query = query.where(getattr({{ model.name }}, key) == value)
                    
                    query = query.values(**record_copy)
                    result = await session.execute(query)
                    total_updated += result.rowcount
                
        if session is not None:
            await execute_query(session)

        else:
            async with self.session_manager.get_session() as session:
                await execute_query(session)
        
        return total_updated
    
    async def upsert(
        self,
        record: Dict[str, Any],
        match_fields: List[str] = [
            {% for column in model.columns %}
            {% if column.args.get('primary_key', False) %}
            '{{ column.name }}'{{ ', ' if not loop.last }}
            {% endif %}
            {% endfor %}
        ],
        session: Optional[AsyncSession] = None
    ) -> {{ model.name }}DTO:
        """
        Inserta o actualiza un registro (upsert).
        
        Args:
            record: Datos del registro a insertar o actualizar
            match_fields: Campos a usar para verificar si el registro existe. 
                         Por defecto usa las claves primarias.
            session: Sesión existente (opcional)
            
        Returns:
            Instancia del modelo (creada o actualizada)
        """
        # Buscar registro existente usando los campos de coincidencia
        if not match_fields:
            raise ValueError("match_fields no puede estar vacío. Debe contener al menos un campo para identificar registros.")

        for field in match_fields:
            if field not in record:
                raise ValueError(f"El campo '{field}' debe estar presente en el registro para upsert.")

        filters = {field: record[field] for field in match_fields}

        async def execute_query(session: AsyncSession) -> Optional[{{ model.name }}]:

            query = select({{ model.name }})

            for key, value in filters.items():
                if hasattr({{ model.name }}, key):
                    query = query.where(getattr({{ model.name }}, key) == value)
            
            existing = await session.execute(query).scalars().first()
            
            if existing:
                # Actualizar registro existente
                update_data = {k: v for k, v in record.items() if k not in match_fields}
                if update_data:
                    query = update({{ model.name }})
                    
                    for key, value in filters.items():
                        if hasattr({{ model.name }}, key):
                            query = query.where(getattr({{ model.name }}, key) == value)
                    
                    query = query.values(**update_data)
                    await session.execute(query)
                    # Refrescar la instancia
                    await session.refresh(existing)
                return existing
            else:
                # Crear nuevo registro
                instance = {{ model.name }}(**record)
                session.add(instance)
                await session.flush()
                return instance

        if session is not None:
            instance = await execute_query(session)
            return {{ model.name }}DTO.from_model(instance)
        else:
            async with self.session_manager.get_session() as session:
                instance = await execute_query(session)
                return {{ model.name }}DTO.from_model(instance)
    
    async def upsert_many(
        self,
        records: List[Dict[str, Any]],
        match_fields: List[str] = [
            {% for column in model.columns %}
            {% if column.args.get('primary_key', False) %}
            '{{ column.name }}'{{ ', ' if not loop.last }}
            {% endif %}
            {% endfor %}
        ],
        session: Optional[AsyncSession] = None
    ) -> List[{{ model.name }}DTO]:
        """
        Inserta o actualiza múltiples registros.
        
        Args:
            records: Lista de diccionarios con los datos
            match_fields: Campos a usar para verificar si los registros existen
            session: Sesión existente (opcional)
            
        Returns:
            Lista de instancias (creadas o actualizadas)
        """
        results = []

        if session is not None:
            for record in records:
                result = await self.upsert(record, match_fields, session)
                results.append(result)
        else:
            async with self.session_manager.get_session() as session:
                for record in records:
                    result = await self.upsert(record, match_fields, session)
                    results.append(result)

        return results
    
    async def delete(
        self, 
        {% for column in model.columns %}
        {% if column.args.get('primary_key', False) %}
        {{ column.name }}: {{ column.type }},
        {% endif %}
        {% endfor %}
        session: Optional[AsyncSession] = None
    ) -> int:
        """
        Elimina un registro atentiendo a su primary key.
        
        Args:
            {% for column in model.columns %}
            {% if column.args.get('primary_key', False) %}
            {{ column.name }}: Filtrar por {{ column.name }} para eliminar
            {% endif %}
            {% endfor %}
            session: Sesión existente (opcional)
            
        Returns:
            Número de registros eliminados
        """

        query = delete({{ model.name }})
        
        {% for column in model.columns %}
        {% if column.args.get('primary_key', False) %}
        query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% endif %}
        {% endfor %}

        if session is not None:
            result = await session.execute(query)
        else:
            with self.session_manager.get_session() as session:
                result = await session.execute(query)

        return result.rowcount
    
    async def delete_many(self, filters_list: List[Dict[str, Any]]) -> int:
        """
        Elimina múltiples registros basándose en una lista de filtros.
        
        Args:
            filters_list: Lista de diccionarios con filtros para cada eliminación
            
        Returns:
            Número total de registros eliminados
        """

        total_deleted = 0
        async def execute_query(session: AsyncSession) -> int:
            for filters in filters_list:
                query = delete({{ model.name }})
                
                for key, value in filters.items():
                    if hasattr({{ model.name }}, key):
                        query = query.where(getattr({{ model.name }}, key) == value)
                
                result = await session.execute(query)
                total_deleted += result.rowcount
        
        if session is not None:
            await execute_query(session)
        else:
            async with self.session_manager.get_session() as session:
                await execute_query(session)
        
        return total_deleted
    
    async def count(
        self,
        {% for column in model.columns %}
        {% if column.args.get('primary_key', False) or column.is_foreign_key %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% elif 'str' == column.type or 'Text' == column.type or 'bool' == column.type %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% elif  'date' == column.type %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        min_{{ column.name }}: Optional[{{ column.type }}] = None,
        max_{{ column.name }}: Optional[{{ column.type }}] = None,
        {% elif 'int' == column.type or 'BigInteger' == column.type or 'float' == column.type or 'Numeric' == column.type or 'datetime' == column.type or 'time' == column.type %}
        min_{{ column.name }}: Optional[{{ column.type }}] = None,
        max_{{ column.name }}: Optional[{{ column.type }}] = None,
        {% else %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% endif %}
        {% endfor %}
        session: Optional[AsyncSession] = None
    ) -> int:
        """
        Cuenta registros que coincidan con los filtros.
        
        Args:
            {% for column in model.columns %}
            {% if column.args.get('primary_key', False) or column.is_foreign_key %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% elif 'str' == column.type or 'Text' == column.type or 'bool' == column.type %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% elif  'date' == column.type %}
            {{ column.name }}: Filtrar por {{ column.name }},
            min_{{ column.name }}: Filtrar por fecha mínima (incluída)
            max_{{ column.name }}: Filtrar por fecha máxima (incluída)
            {% elif 'int' == column.type or 'BigInteger' == column.type or 'float' == column.type or 'Numeric' == column.type or 'datetime' == column.type or 'time' == column.type %}
            min_{{ column.name }}: Filtrar por valor mínimo de {{ column.name }} (incluído)
            max_{{ column.name }}: Filtrar por valor máximo de {{ column.name }} (incluído)
            {% else %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% endif %}
            {% endfor %}
            session: Sesión existente (opcional)
            
        Returns:
            Número de registros que coinciden con los filtros
        """
        
        query = select(func.count({{ model.name }}))
        
        {% for column in model.columns %}
        {% if column.args.get('primary_key', False) or column.is_foreign_key %}
        if {{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% elif 'str' == column.type or 'Text' == column.type or 'bool' == column.type %}
        if {{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% elif 'date' == column.type %}
        if {{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        if min_{{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} >= min_{{ column.name }})
        if max_{{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} <= max_{{ column.name }})
        {% elif 'int' == column.type or 'BigInteger' == column.type or 'float' == column.type or 'Numeric' == column.type or 'datetime' == column.type or 'time' == column.type %}
        if min_{{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} >= min_{{ column.name }})
        if max_{{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} <= max_{{ column.name }})
        {% else %}
        if {{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% endif %}
        {% endfor %}

        if session is not None:
            result = await session.execute(query)
        else:
            with self.session_manager.get_session() as session:
                result = await session.execute(query)

        return result.scalar() or 0
    
    async def exists(
        self,
        {% for column in model.columns %}
        {% if column.args.get('primary_key', False) or column.is_foreign_key %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% elif 'str' == column.type or 'Text' == column.type or 'bool' == column.type %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% elif  'date' == column.type %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        min_{{ column.name }}: Optional[{{ column.type }}] = None,
        max_{{ column.name }}: Optional[{{ column.type }}] = None,
        {% elif 'int' == column.type or 'BigInteger' == column.type or 'float' == column.type or 'Numeric' == column.type or 'datetime' == column.type or 'time' == column.type %}
        min_{{ column.name }}: Optional[{{ column.type }}] = None,
        max_{{ column.name }}: Optional[{{ column.type }}] = None,
        {% else %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% endif %}
        {% endfor %}
        session: Optional[AsyncSession] = None
    ) -> bool:
        """
        Verifica si existe al menos un registro que coincida con los filtros.
        
        Args:
            {% for column in model.columns %}
            {% if column.args.get('primary_key', False) or column.is_foreign_key %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% elif 'str' == column.type or 'Text' == column.type or 'bool' == column.type %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% elif  'date' == column.type %}
            {{ column.name }}: Filtrar por {{ column.name }},
            min_{{ column.name }}: Filtrar por fecha mínima (incluída)
            max_{{ column.name }}: Filtrar por fecha máxima (incluída)
            {% elif 'int' == column.type or 'BigInteger' == column.type or 'float' == column.type or 'Numeric' == column.type or 'datetime' == column.type or 'time' == column.type %}
            min_{{ column.name }}: Filtrar por valor mínimo de {{ column.name }} (incluído)
            max_{{ column.name }}: Filtrar por valor máximo de {{ column.name }} (incluído)
            {% else %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% endif %}
            {% endfor %}
            session: Sesión existente (opcional)
            
        Returns:
            True si existe al menos un registro, False en caso contrario
        """
        records = await self.count(
            {% for column in model.columns %}
            {% if column.args.get('primary_key', False) or column.is_foreign_key %}
            {{ column.name }}={{ column.name }},
            {% elif 'str' == column.type or 'Text' == column.type or 'bool' == column.type %}
            {{ column.name }}={{ column.name }},
            {% elif  'date' == column.type %}
            {{ column.name }}={{ column.name }},
            min_{{ column.name }}=min_{{ column.name }},
            max_{{ column.name }}=max_{{ column.name }},
            {% elif 'int' == column.type or 'BigInteger' == column.type or 'float' == column.type or 'Numeric' == column.type or 'datetime' == column.type or 'time' == column.type %}
            min_{{ column.name }}=min_{{ column.name }},
            max_{{ column.name }}=max_{{ column.name }},
            {% else %}
            {{ column.name }}={{ column.name }},
            {% endif %}
            {% endfor %}
            session=session
        )
        return records > 0

    {% endif %}

{% endfor %}