# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# input parameters for reading the pipeline
class AxsStateCalcPipelineInputs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsStateCalcPipelineInputs()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsStateCalcPipelineInputs(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsStateCalcPipelineInputs
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # master input id
    # AxsStateCalcPipelineInputs
    def Axes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AxsStateCalcPipelineInputs
    def AxesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsStateCalcPipelineInputs
    def AxesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # sync cmd mode to run calculation pipeline
    # AxsStateCalcPipelineInputs
    def SyncMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 2

    # id of the requested data
    # AxsStateCalcPipelineInputs
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # AxsStateCalcPipelineInputs
    def InputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # AxsStateCalcPipelineInputs
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsStateCalcPipelineInputs
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def AxsStateCalcPipelineInputsStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsStateCalcPipelineInputsStart(builder)
def AxsStateCalcPipelineInputsAddAxes(builder, axes): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axes), 0)
def AddAxes(builder, axes):
    return AxsStateCalcPipelineInputsAddAxes(builder, axes)
def AxsStateCalcPipelineInputsStartAxesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAxesVector(builder, numElems):
    return AxsStateCalcPipelineInputsStartAxesVector(builder, numElems)
def AxsStateCalcPipelineInputsAddSyncMode(builder, syncMode): builder.PrependInt8Slot(1, syncMode, 2)
def AddSyncMode(builder, syncMode):
    return AxsStateCalcPipelineInputsAddSyncMode(builder, syncMode)
def AxsStateCalcPipelineInputsAddInputs(builder, inputs): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)
def AddInputs(builder, inputs):
    return AxsStateCalcPipelineInputsAddInputs(builder, inputs)
def AxsStateCalcPipelineInputsStartInputsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartInputsVector(builder, numElems):
    return AxsStateCalcPipelineInputsStartInputsVector(builder, numElems)
def AxsStateCalcPipelineInputsEnd(builder): return builder.EndObject()
def End(builder):
    return AxsStateCalcPipelineInputsEnd(builder)
try:
    from typing import List
except:
    pass

class AxsStateCalcPipelineInputsT(object):

    # AxsStateCalcPipelineInputsT
    def __init__(self):
        self.axes = None  # type: List[str]
        self.syncMode = 2  # type: int
        self.inputs = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsStateCalcPipelineInputs = AxsStateCalcPipelineInputs()
        axsStateCalcPipelineInputs.Init(buf, pos)
        return cls.InitFromObj(axsStateCalcPipelineInputs)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsStateCalcPipelineInputs):
        x = AxsStateCalcPipelineInputsT()
        x._UnPack(axsStateCalcPipelineInputs)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.axes == other.axes and \
            self.syncMode == other.syncMode and \
            self.inputs == other.inputs

    # AxsStateCalcPipelineInputsT
    def _UnPack(self, axsStateCalcPipelineInputs):
        if axsStateCalcPipelineInputs is None:
            return
        if not axsStateCalcPipelineInputs.AxesIsNone():
            self.axes = []
            for i in range(axsStateCalcPipelineInputs.AxesLength()):
                self.axes.append(axsStateCalcPipelineInputs.Axes(i))
        self.syncMode = axsStateCalcPipelineInputs.SyncMode()
        if not axsStateCalcPipelineInputs.InputsIsNone():
            if np is None:
                self.inputs = []
                for i in range(axsStateCalcPipelineInputs.InputsLength()):
                    self.inputs.append(axsStateCalcPipelineInputs.Inputs(i))
            else:
                self.inputs = axsStateCalcPipelineInputs.InputsAsNumpy()

    # AxsStateCalcPipelineInputsT
    def Pack(self, builder):
        if self.axes is not None:
            axeslist = []
            for i in range(len(self.axes)):
                axeslist.append(builder.CreateString(self.axes[i]))
            AxsStateCalcPipelineInputsStartAxesVector(builder, len(self.axes))
            for i in reversed(range(len(self.axes))):
                builder.PrependUOffsetTRelative(axeslist[i])
            axes = builder.EndVector()
        if self.inputs is not None:
            if np is not None and type(self.inputs) is np.ndarray:
                inputs = builder.CreateNumpyVector(self.inputs)
            else:
                AxsStateCalcPipelineInputsStartInputsVector(builder, len(self.inputs))
                for i in reversed(range(len(self.inputs))):
                    builder.PrependFloat64(self.inputs[i])
                inputs = builder.EndVector()
        AxsStateCalcPipelineInputsStart(builder)
        if self.axes is not None:
            AxsStateCalcPipelineInputsAddAxes(builder, axes)
        AxsStateCalcPipelineInputsAddSyncMode(builder, self.syncMode)
        if self.inputs is not None:
            AxsStateCalcPipelineInputsAddInputs(builder, inputs)
        axsStateCalcPipelineInputs = AxsStateCalcPipelineInputsEnd(builder)
        return axsStateCalcPipelineInputs
