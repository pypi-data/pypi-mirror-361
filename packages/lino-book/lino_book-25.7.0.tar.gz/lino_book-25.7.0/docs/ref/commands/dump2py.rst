.. doctest docs/ref/commands/dump2py.rst

===========================================================
``dump2py`` : make a :term:`Python dump` of a Lino database
===========================================================

.. command:: pm dump2py

Usage::

  $ pm dump2py [options] OUTPUT_DIR

This will create a :term:`Python dump` of your database in the directory
``OUTPUT_DIR``.

The directory will contain a series of :file:`.py` files, one for every database
model, plus one extra file named :xfile:`restore.py`, which :func:`execfile`\ s
the :file:`.py` files.

.. program:: pm dump2py

Options:

.. option:: --noinput

    Do not prompt for user input of any kind.

.. option:: --tolerate

  Tolerate database errors. This can help making a partial snapshot of a
  database that is not (fully) synced with the application code.

.. option:: --simulate

  Just simulate, don't actually write any data. This is used for verifying
  whether thte database structure has changed after an upgrade.

.. option:: --overwrite

    Don't complain if the TARGET directory already exists. This will
    potentially overwrite existing files.

.. option:: --max-row-count <NUM>

    Change the maximum number of rows per source file from its default
    value (50000) to NUM.

    See `The --max-row-count option`_ below.

This command is defined by the :mod:`lino` core plugin.


The ``--max-row-count`` option
==============================

When a table contains many rows, the resulting :file:`.py` file can become
so large that it doesn't fit into memory, causing the Python process to get
killed when it tries to restore the data.  To avoid this limitation,
:xfile:`dump2py` distributes the content over several files if a table
contains are more than NUM rows.

The default value has been "clinically tested" and should be small enough
for most machines.

Hint: When your process gets killed, before using this option, consider
restarting the web services on your server and trying again. The web
services can occupy considerable amounts of memory on a long-running
:term:`production site`. A simple :xfile:`reload_services.sh`  can fix your
issue.

.. You might theoretically use Django's :manage:`dumpdata` command for
   writing a Python fixture, but this possibility is currently
   deactivated because a huge database would create a huge Python module
   which might not fit into memory.


Glossary
========

.. glossary::

  Python dump

    A dump of a Lino database created using :cmd:`pm dump2py`. Python dumps are
    used for creating daily backups or before an upgrade with data migration.


Files
=====

.. xfile:: restore.py

    The main script of a Python dump generated by the :cmd:`pm dump2py`
    command.

    This script is run during a :ref:`site upgrade <admin.upgrade>`.

About Python dumps
==================

A *database dump* is an image of the data in a database which you can use e.g.
to backup and restore your data.  While Django's :manage:`dumpdata` command lets
you make database dumps in *json* and *xml* format, Lino extends this by letting
you make a database dump in *Python* format. This is what we call a :term:`Python
dump`.

To make a Python dump of your database, you use the :cmd:`pm dump2py` command.
This :term:`django-admin command` creates a directory of Python modules with one
main module :xfile:`restore.py`.

To restore a dump created using :cmd:`pm dump2py` to your database, you execute
the :xfile:`restore.py` script using the :cmd:`pm run` command::

  $ pm run mydump/restore.py

Another important thing is that you can use such a backup for :doc:`data
migrations </dev/datamig>`.

More concrete usage exmples in :doc:`/specs/dumps`.



Related work
============

The `django-extensions <https://github.com/django-extensions>`_ repository has a
:term:`Django-admin command` named `dumpscript
<https://github.com/django-extensions/django-extensions/blob/main/django_extensions/management/commands/dumpscript.py>`__,
which is comparable to :cmd:`pm dump2py`.


.. include:: /../docs/shared/include/tested.rst

>>> import lino
>>> lino.startup('lino_book.projects.min1.settings')
>>> from lino.api.doctest import *
>>> from atelier.sheller import Sheller
>>> shell = Sheller(settings.SITE.project_dir)

>>> shell("django-admin dump2py --help")
... #doctest: +NORMALIZE_WHITESPACE +ELLIPSIS +REPORT_UDIFF
usage: django-admin dump2py [-h] [--noinput] [-t] [-s] [-o] [-m MAX_ROW_COUNT] [--version]
                          [-v {0,1,2,3}] [--settings SETTINGS] [--pythonpath PYTHONPATH]
                          [--traceback] [--no-color] [--force-color] [--skip-checks]
                          output_dir
<BLANKLINE>
positional arguments:
output_dir            The directory where to write output files.
<BLANKLINE>
options:
-h, --help            show this help message and exit
--noinput             Do not prompt for input of any kind.
-t, --tolerate        Tolerate database errors.
-s, --simulate        Just simulate, don't actually write any data.
-o, --overwrite       Overwrite existing files.
-m MAX_ROW_COUNT, --max-row-count MAX_ROW_COUNT
                      Maximum number of rows per file.
--version             Show program's version number and exit.
-v {0,1,2,3}, --verbosity {0,1,2,3}
                      Verbosity level; 0=minimal output, 1=normal output, 2=verbose output,
                      3=very verbose output
--settings SETTINGS   The Python path to a settings module, e.g. "myproject.settings.main".
                      If this isn't provided, the DJANGO_SETTINGS_MODULE environment
                      variable will be used.
--pythonpath PYTHONPATH
                      A directory to add to the Python path, e.g.
                      "/home/djangoprojects/myproject".
--traceback           Display a full stack trace on CommandError exceptions.
--no-color            Don't colorize the command output.
--force-color         Force colorization of the command output.
--skip-checks         Skip system checks.
