# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20250708
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, Optional
from lexmachina.models.appeals_attorney_filter import AppealsAttorneyFilter
from lexmachina.models.appeals_case_dates_filter import AppealsCaseDatesFilter
from lexmachina.models.appeals_law_firm_filter import AppealsLawFirmFilter
from lexmachina.models.appeals_party_filter import AppealsPartyFilter
from lexmachina.models.case_status import CaseStatus
from lexmachina.models.case_tags_filter import CaseTagsFilter
from lexmachina.models.court_filter import CourtFilter
from lexmachina.models.judge_filter import JudgeFilter
from lexmachina.models.ordering import Ordering
from lexmachina.models.originating_cases_filter import OriginatingCasesFilter
from lexmachina.models.originating_venues_filter import OriginatingVenuesFilter
from lexmachina.models.resolutions_filter import ResolutionsFilter
from lexmachina.models.supreme_court_decisions_filter import SupremeCourtDecisionsFilter
from typing import Optional, Set
from typing_extensions import Self

class AppealsCaseQuery(BaseModel):
    """
    AppealsCaseQuery
    """ # noqa: E501
    courts: Optional[CourtFilter] = None
    case_status: Optional[CaseStatus] = Field(default=None, alias="caseStatus")
    case_tags: Optional[CaseTagsFilter] = Field(default=None, alias="caseTags")
    dates: Optional[AppealsCaseDatesFilter] = None
    judges: Optional[JudgeFilter] = None
    law_firms: Optional[AppealsLawFirmFilter] = Field(default=None, alias="lawFirms")
    attorneys: Optional[AppealsAttorneyFilter] = None
    parties: Optional[AppealsPartyFilter] = None
    originating_venues: Optional[OriginatingVenuesFilter] = Field(default=None, alias="originatingVenues")
    originating_cases: Optional[OriginatingCasesFilter] = Field(default=None, alias="originatingCases")
    resolutions: Optional[ResolutionsFilter] = None
    supreme_court_decisions: Optional[SupremeCourtDecisionsFilter] = Field(default=None, alias="supremeCourtDecisions")
    ordering: Optional[Ordering] = None
    page: Optional[StrictInt] = 1
    page_size: Optional[StrictInt] = Field(default=5, alias="pageSize")
    __properties: ClassVar[List[str]] = ["courts", "caseStatus", "caseTags", "dates", "judges", "lawFirms", "attorneys", "parties", "originatingVenues", "originatingCases", "resolutions", "supremeCourtDecisions", "ordering", "page", "pageSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppealsCaseQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of courts
        if self.courts:
            _dict['courts'] = self.courts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of case_tags
        if self.case_tags:
            _dict['caseTags'] = self.case_tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dates
        if self.dates:
            _dict['dates'] = self.dates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of judges
        if self.judges:
            _dict['judges'] = self.judges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of law_firms
        if self.law_firms:
            _dict['lawFirms'] = self.law_firms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attorneys
        if self.attorneys:
            _dict['attorneys'] = self.attorneys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parties
        if self.parties:
            _dict['parties'] = self.parties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of originating_venues
        if self.originating_venues:
            _dict['originatingVenues'] = self.originating_venues.to_dict()
        # override the default output from pydantic by calling `to_dict()` of originating_cases
        if self.originating_cases:
            _dict['originatingCases'] = self.originating_cases.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resolutions
        if self.resolutions:
            _dict['resolutions'] = self.resolutions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of supreme_court_decisions
        if self.supreme_court_decisions:
            _dict['supremeCourtDecisions'] = self.supreme_court_decisions.to_dict()
        # set to None if courts (nullable) is None
        # and model_fields_set contains the field
        if self.courts is None and "courts" in self.model_fields_set:
            _dict['courts'] = None

        # set to None if case_status (nullable) is None
        # and model_fields_set contains the field
        if self.case_status is None and "case_status" in self.model_fields_set:
            _dict['caseStatus'] = None

        # set to None if case_tags (nullable) is None
        # and model_fields_set contains the field
        if self.case_tags is None and "case_tags" in self.model_fields_set:
            _dict['caseTags'] = None

        # set to None if dates (nullable) is None
        # and model_fields_set contains the field
        if self.dates is None and "dates" in self.model_fields_set:
            _dict['dates'] = None

        # set to None if judges (nullable) is None
        # and model_fields_set contains the field
        if self.judges is None and "judges" in self.model_fields_set:
            _dict['judges'] = None

        # set to None if law_firms (nullable) is None
        # and model_fields_set contains the field
        if self.law_firms is None and "law_firms" in self.model_fields_set:
            _dict['lawFirms'] = None

        # set to None if attorneys (nullable) is None
        # and model_fields_set contains the field
        if self.attorneys is None and "attorneys" in self.model_fields_set:
            _dict['attorneys'] = None

        # set to None if parties (nullable) is None
        # and model_fields_set contains the field
        if self.parties is None and "parties" in self.model_fields_set:
            _dict['parties'] = None

        # set to None if originating_venues (nullable) is None
        # and model_fields_set contains the field
        if self.originating_venues is None and "originating_venues" in self.model_fields_set:
            _dict['originatingVenues'] = None

        # set to None if originating_cases (nullable) is None
        # and model_fields_set contains the field
        if self.originating_cases is None and "originating_cases" in self.model_fields_set:
            _dict['originatingCases'] = None

        # set to None if resolutions (nullable) is None
        # and model_fields_set contains the field
        if self.resolutions is None and "resolutions" in self.model_fields_set:
            _dict['resolutions'] = None

        # set to None if supreme_court_decisions (nullable) is None
        # and model_fields_set contains the field
        if self.supreme_court_decisions is None and "supreme_court_decisions" in self.model_fields_set:
            _dict['supremeCourtDecisions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppealsCaseQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "courts": CourtFilter.from_dict(obj["courts"]) if obj.get("courts") is not None else None,
            "caseStatus": obj.get("caseStatus"),
            "caseTags": CaseTagsFilter.from_dict(obj["caseTags"]) if obj.get("caseTags") is not None else None,
            "dates": AppealsCaseDatesFilter.from_dict(obj["dates"]) if obj.get("dates") is not None else None,
            "judges": JudgeFilter.from_dict(obj["judges"]) if obj.get("judges") is not None else None,
            "lawFirms": AppealsLawFirmFilter.from_dict(obj["lawFirms"]) if obj.get("lawFirms") is not None else None,
            "attorneys": AppealsAttorneyFilter.from_dict(obj["attorneys"]) if obj.get("attorneys") is not None else None,
            "parties": AppealsPartyFilter.from_dict(obj["parties"]) if obj.get("parties") is not None else None,
            "originatingVenues": OriginatingVenuesFilter.from_dict(obj["originatingVenues"]) if obj.get("originatingVenues") is not None else None,
            "originatingCases": OriginatingCasesFilter.from_dict(obj["originatingCases"]) if obj.get("originatingCases") is not None else None,
            "resolutions": ResolutionsFilter.from_dict(obj["resolutions"]) if obj.get("resolutions") is not None else None,
            "supremeCourtDecisions": SupremeCourtDecisionsFilter.from_dict(obj["supremeCourtDecisions"]) if obj.get("supremeCourtDecisions") is not None else None,
            "ordering": obj.get("ordering"),
            "page": obj.get("page") if obj.get("page") is not None else 1,
            "pageSize": obj.get("pageSize") if obj.get("pageSize") is not None else 5
        })
        return _obj


