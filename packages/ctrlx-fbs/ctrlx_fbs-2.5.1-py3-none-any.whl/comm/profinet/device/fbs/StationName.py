# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StationName(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StationName()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStationName(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StationName
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StationName
    def Request(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.profinet.device.fbs.StationNameRequest import StationNameRequest
            obj = StationNameRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StationName
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.profinet.device.fbs.StationNameResponse import StationNameResponse
            obj = StationNameResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def StationNameStart(builder): builder.StartObject(2)
def Start(builder):
    return StationNameStart(builder)
def StationNameAddRequest(builder, request): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(request), 0)
def AddRequest(builder, request):
    return StationNameAddRequest(builder, request)
def StationNameAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def AddResponse(builder, response):
    return StationNameAddResponse(builder, response)
def StationNameEnd(builder): return builder.EndObject()
def End(builder):
    return StationNameEnd(builder)
import comm.profinet.device.fbs.StationNameRequest
import comm.profinet.device.fbs.StationNameResponse
try:
    from typing import Optional
except:
    pass

class StationNameT(object):

    # StationNameT
    def __init__(self):
        self.request = None  # type: Optional[comm.profinet.device.fbs.StationNameRequest.StationNameRequestT]
        self.response = None  # type: Optional[comm.profinet.device.fbs.StationNameResponse.StationNameResponseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stationName = StationName()
        stationName.Init(buf, pos)
        return cls.InitFromObj(stationName)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stationName):
        x = StationNameT()
        x._UnPack(stationName)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.request == other.request and \
            self.response == other.response

    # StationNameT
    def _UnPack(self, stationName):
        if stationName is None:
            return
        if stationName.Request() is not None:
            self.request = comm.profinet.device.fbs.StationNameRequest.StationNameRequestT.InitFromObj(stationName.Request())
        if stationName.Response() is not None:
            self.response = comm.profinet.device.fbs.StationNameResponse.StationNameResponseT.InitFromObj(stationName.Response())

    # StationNameT
    def Pack(self, builder):
        if self.request is not None:
            request = self.request.Pack(builder)
        if self.response is not None:
            response = self.response.Pack(builder)
        StationNameStart(builder)
        if self.request is not None:
            StationNameAddRequest(builder, request)
        if self.response is not None:
            StationNameAddResponse(builder, response)
        stationName = StationNameEnd(builder)
        return stationName
