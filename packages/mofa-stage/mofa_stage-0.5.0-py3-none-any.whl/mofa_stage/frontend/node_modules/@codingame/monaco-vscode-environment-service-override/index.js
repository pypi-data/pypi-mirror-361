
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { SyncDescriptor } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/descriptors';
import { BrowserWorkbenchEnvironmentService } from '@codingame/monaco-vscode-abed5a84-8a82-5f84-9412-88a736235bae-common/vscode/vs/workbench/services/environment/browser/environmentService';
import { IEnvironmentService } from '@codingame/monaco-vscode-api/vscode/vs/platform/environment/common/environment.service';
import '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import { IProductService } from '@codingame/monaco-vscode-api/vscode/vs/platform/product/common/productService.service';
import { getWorkspaceIdentifier, getWorkbenchConstructionOptions, logsPath } from '@codingame/monaco-vscode-api/workbench';

let InjectedBrowserWorkbenchEnvironmentService = class InjectedBrowserWorkbenchEnvironmentService extends BrowserWorkbenchEnvironmentService {
    constructor(workspaceId = getWorkspaceIdentifier().id, options = getWorkbenchConstructionOptions(), productService) {
        super(workspaceId, logsPath, options, productService);
    }
};
InjectedBrowserWorkbenchEnvironmentService = __decorate([
    __param(2, IProductService)
], InjectedBrowserWorkbenchEnvironmentService);
function getServiceOverride(options) {
    return {
        [IEnvironmentService.toString()]: new SyncDescriptor(InjectedBrowserWorkbenchEnvironmentService, [undefined, options], true)
    };
}

export { getServiceOverride as default };
