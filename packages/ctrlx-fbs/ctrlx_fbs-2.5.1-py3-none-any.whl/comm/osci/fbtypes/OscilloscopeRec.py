# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OscilloscopeRec(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OscilloscopeRec()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOscilloscopeRec(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OscilloscopeRec
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OscilloscopeRec
    def Trigger(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.Time import Time
            obj = Time()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OscilloscopeRec
    def Channels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OscilloscopeRec
    def ChannelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OscilloscopeRec
    def ChannelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def OscilloscopeRecStart(builder): builder.StartObject(2)
def Start(builder):
    return OscilloscopeRecStart(builder)
def OscilloscopeRecAddTrigger(builder, trigger): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(trigger), 0)
def AddTrigger(builder, trigger):
    return OscilloscopeRecAddTrigger(builder, trigger)
def OscilloscopeRecAddChannels(builder, channels): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(channels), 0)
def AddChannels(builder, channels):
    return OscilloscopeRecAddChannels(builder, channels)
def OscilloscopeRecStartChannelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartChannelsVector(builder, numElems):
    return OscilloscopeRecStartChannelsVector(builder, numElems)
def OscilloscopeRecEnd(builder): return builder.EndObject()
def End(builder):
    return OscilloscopeRecEnd(builder)
import comm.osci.fbtypes.Time
try:
    from typing import List, Optional
except:
    pass

class OscilloscopeRecT(object):

    # OscilloscopeRecT
    def __init__(self):
        self.trigger = None  # type: Optional[comm.osci.fbtypes.Time.TimeT]
        self.channels = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        oscilloscopeRec = OscilloscopeRec()
        oscilloscopeRec.Init(buf, pos)
        return cls.InitFromObj(oscilloscopeRec)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, oscilloscopeRec):
        x = OscilloscopeRecT()
        x._UnPack(oscilloscopeRec)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.trigger == other.trigger and \
            self.channels == other.channels

    # OscilloscopeRecT
    def _UnPack(self, oscilloscopeRec):
        if oscilloscopeRec is None:
            return
        if oscilloscopeRec.Trigger() is not None:
            self.trigger = comm.osci.fbtypes.Time.TimeT.InitFromObj(oscilloscopeRec.Trigger())
        if not oscilloscopeRec.ChannelsIsNone():
            self.channels = []
            for i in range(oscilloscopeRec.ChannelsLength()):
                self.channels.append(oscilloscopeRec.Channels(i))

    # OscilloscopeRecT
    def Pack(self, builder):
        if self.trigger is not None:
            trigger = self.trigger.Pack(builder)
        if self.channels is not None:
            channelslist = []
            for i in range(len(self.channels)):
                channelslist.append(builder.CreateString(self.channels[i]))
            OscilloscopeRecStartChannelsVector(builder, len(self.channels))
            for i in reversed(range(len(self.channels))):
                builder.PrependUOffsetTRelative(channelslist[i])
            channels = builder.EndVector()
        OscilloscopeRecStart(builder)
        if self.trigger is not None:
            OscilloscopeRecAddTrigger(builder, trigger)
        if self.channels is not None:
            OscilloscopeRecAddChannels(builder, channels)
        oscilloscopeRec = OscilloscopeRecEnd(builder)
        return oscilloscopeRec
