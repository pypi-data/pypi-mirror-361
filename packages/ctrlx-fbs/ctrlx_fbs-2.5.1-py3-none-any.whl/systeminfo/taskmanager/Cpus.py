# automatically generated by the FlatBuffers compiler, do not modify

# namespace: taskmanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cpus(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cpus()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCpus(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cpus
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cpus
    def Cpus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from systeminfo.taskmanager.Cpu import Cpu
            obj = Cpu()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cpus
    def CpusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Cpus
    def CpusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def CpusStart(builder): builder.StartObject(1)
def Start(builder):
    return CpusStart(builder)
def CpusAddCpus(builder, cpus): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cpus), 0)
def AddCpus(builder, cpus):
    return CpusAddCpus(builder, cpus)
def CpusStartCpusVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCpusVector(builder, numElems):
    return CpusStartCpusVector(builder, numElems)
def CpusEnd(builder): return builder.EndObject()
def End(builder):
    return CpusEnd(builder)
import systeminfo.taskmanager.Cpu
try:
    from typing import List
except:
    pass

class CpusT(object):

    # CpusT
    def __init__(self):
        self.cpus = None  # type: List[systeminfo.taskmanager.Cpu.CpuT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cpus = Cpus()
        cpus.Init(buf, pos)
        return cls.InitFromObj(cpus)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cpus):
        x = CpusT()
        x._UnPack(cpus)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cpus == other.cpus

    # CpusT
    def _UnPack(self, cpus):
        if cpus is None:
            return
        if not cpus.CpusIsNone():
            self.cpus = []
            for i in range(cpus.CpusLength()):
                if cpus.Cpus(i) is None:
                    self.cpus.append(None)
                else:
                    cpu_ = systeminfo.taskmanager.Cpu.CpuT.InitFromObj(cpus.Cpus(i))
                    self.cpus.append(cpu_)

    # CpusT
    def Pack(self, builder):
        if self.cpus is not None:
            cpuslist = []
            for i in range(len(self.cpus)):
                cpuslist.append(self.cpus[i].Pack(builder))
            CpusStartCpusVector(builder, len(self.cpus))
            for i in reversed(range(len(self.cpus))):
                builder.PrependUOffsetTRelative(cpuslist[i])
            cpus = builder.EndVector()
        CpusStart(builder)
        if self.cpus is not None:
            CpusAddCpus(builder, cpus)
        cpus = CpusEnd(builder)
        return cpus
