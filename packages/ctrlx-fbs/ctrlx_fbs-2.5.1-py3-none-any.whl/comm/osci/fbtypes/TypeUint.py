# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TypeUint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TypeUint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTypeUint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TypeUint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TypeUint
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TypeUintStart(builder): builder.StartObject(1)
def Start(builder):
    return TypeUintStart(builder)
def TypeUintAddValue(builder, value): builder.PrependUint32Slot(0, value, 0)
def AddValue(builder, value):
    return TypeUintAddValue(builder, value)
def TypeUintEnd(builder): return builder.EndObject()
def End(builder):
    return TypeUintEnd(builder)

class TypeUintT(object):

    # TypeUintT
    def __init__(self):
        self.value = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        typeUint = TypeUint()
        typeUint.Init(buf, pos)
        return cls.InitFromObj(typeUint)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, typeUint):
        x = TypeUintT()
        x._UnPack(typeUint)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value

    # TypeUintT
    def _UnPack(self, typeUint):
        if typeUint is None:
            return
        self.value = typeUint.Value()

    # TypeUintT
    def Pack(self, builder):
        TypeUintStart(builder)
        TypeUintAddValue(builder, self.value)
        typeUint = TypeUintEnd(builder)
        return typeUint
