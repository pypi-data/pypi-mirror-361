# automatically generated by the FlatBuffers compiler, do not modify

# namespace: pubsub

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Configuration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Configuration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConfiguration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Configuration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Configuration
    def Namespaces(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Configuration
    def NamespacesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Configuration
    def NamespacesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Configuration
    def Configuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.structure.PubSubConfiguration2DataType import PubSubConfiguration2DataType
            obj = PubSubConfiguration2DataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ConfigurationStart(builder): builder.StartObject(2)
def Start(builder):
    return ConfigurationStart(builder)
def ConfigurationAddNamespaces(builder, namespaces): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(namespaces), 0)
def AddNamespaces(builder, namespaces):
    return ConfigurationAddNamespaces(builder, namespaces)
def ConfigurationStartNamespacesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartNamespacesVector(builder, numElems):
    return ConfigurationStartNamespacesVector(builder, numElems)
def ConfigurationAddConfiguration(builder, configuration): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(configuration), 0)
def AddConfiguration(builder, configuration):
    return ConfigurationAddConfiguration(builder, configuration)
def ConfigurationEnd(builder): return builder.EndObject()
def End(builder):
    return ConfigurationEnd(builder)
import comm.opcua.structure.PubSubConfiguration2DataType
try:
    from typing import List, Optional
except:
    pass

class ConfigurationT(object):

    # ConfigurationT
    def __init__(self):
        self.namespaces = None  # type: List[str]
        self.configuration = None  # type: Optional[comm.opcua.structure.PubSubConfiguration2DataType.PubSubConfiguration2DataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        configuration = Configuration()
        configuration.Init(buf, pos)
        return cls.InitFromObj(configuration)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, configuration):
        x = ConfigurationT()
        x._UnPack(configuration)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.namespaces == other.namespaces and \
            self.configuration == other.configuration

    # ConfigurationT
    def _UnPack(self, configuration):
        if configuration is None:
            return
        if not configuration.NamespacesIsNone():
            self.namespaces = []
            for i in range(configuration.NamespacesLength()):
                self.namespaces.append(configuration.Namespaces(i))
        if configuration.Configuration() is not None:
            self.configuration = comm.opcua.structure.PubSubConfiguration2DataType.PubSubConfiguration2DataTypeT.InitFromObj(configuration.Configuration())

    # ConfigurationT
    def Pack(self, builder):
        if self.namespaces is not None:
            namespaceslist = []
            for i in range(len(self.namespaces)):
                namespaceslist.append(builder.CreateString(self.namespaces[i]))
            ConfigurationStartNamespacesVector(builder, len(self.namespaces))
            for i in reversed(range(len(self.namespaces))):
                builder.PrependUOffsetTRelative(namespaceslist[i])
            namespaces = builder.EndVector()
        if self.configuration is not None:
            configuration = self.configuration.Pack(builder)
        ConfigurationStart(builder)
        if self.namespaces is not None:
            ConfigurationAddNamespaces(builder, namespaces)
        if self.configuration is not None:
            ConfigurationAddConfiguration(builder, configuration)
        configuration = ConfigurationEnd(builder)
        return configuration
