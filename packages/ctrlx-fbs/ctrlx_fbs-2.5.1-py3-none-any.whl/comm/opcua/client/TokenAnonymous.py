# automatically generated by the FlatBuffers compiler, do not modify

# namespace: client

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TokenAnonymous(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TokenAnonymous()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTokenAnonymous(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TokenAnonymous
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def TokenAnonymousStart(builder): builder.StartObject(0)
def Start(builder):
    return TokenAnonymousStart(builder)
def TokenAnonymousEnd(builder): return builder.EndObject()
def End(builder):
    return TokenAnonymousEnd(builder)

class TokenAnonymousT(object):

    # TokenAnonymousT
    def __init__(self):
        pass

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tokenAnonymous = TokenAnonymous()
        tokenAnonymous.Init(buf, pos)
        return cls.InitFromObj(tokenAnonymous)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, tokenAnonymous):
        x = TokenAnonymousT()
        x._UnPack(tokenAnonymous)
        return x

    def __eq__(self, other):
        return type(self) == type(other)

    # TokenAnonymousT
    def _UnPack(self, tokenAnonymous):
        if tokenAnonymous is None:
            return

    # TokenAnonymousT
    def Pack(self, builder):
        TokenAnonymousStart(builder)
        tokenAnonymous = TokenAnonymousEnd(builder)
        return tokenAnonymous
