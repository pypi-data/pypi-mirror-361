# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class JsonDataSetReaderMessageDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JsonDataSetReaderMessageDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsJsonDataSetReaderMessageDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # JsonDataSetReaderMessageDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # JsonDataSetReaderMessageDataType
    def NetworkMessageContentMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # JsonDataSetReaderMessageDataType
    def DataSetMessageContentMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def JsonDataSetReaderMessageDataTypeStart(builder): builder.StartObject(2)
def Start(builder):
    return JsonDataSetReaderMessageDataTypeStart(builder)
def JsonDataSetReaderMessageDataTypeAddNetworkMessageContentMask(builder, networkMessageContentMask): builder.PrependUint32Slot(0, networkMessageContentMask, 0)
def AddNetworkMessageContentMask(builder, networkMessageContentMask):
    return JsonDataSetReaderMessageDataTypeAddNetworkMessageContentMask(builder, networkMessageContentMask)
def JsonDataSetReaderMessageDataTypeAddDataSetMessageContentMask(builder, dataSetMessageContentMask): builder.PrependUint32Slot(1, dataSetMessageContentMask, 0)
def AddDataSetMessageContentMask(builder, dataSetMessageContentMask):
    return JsonDataSetReaderMessageDataTypeAddDataSetMessageContentMask(builder, dataSetMessageContentMask)
def JsonDataSetReaderMessageDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return JsonDataSetReaderMessageDataTypeEnd(builder)

class JsonDataSetReaderMessageDataTypeT(object):

    # JsonDataSetReaderMessageDataTypeT
    def __init__(self):
        self.networkMessageContentMask = 0  # type: int
        self.dataSetMessageContentMask = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        jsonDataSetReaderMessageDataType = JsonDataSetReaderMessageDataType()
        jsonDataSetReaderMessageDataType.Init(buf, pos)
        return cls.InitFromObj(jsonDataSetReaderMessageDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, jsonDataSetReaderMessageDataType):
        x = JsonDataSetReaderMessageDataTypeT()
        x._UnPack(jsonDataSetReaderMessageDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.networkMessageContentMask == other.networkMessageContentMask and \
            self.dataSetMessageContentMask == other.dataSetMessageContentMask

    # JsonDataSetReaderMessageDataTypeT
    def _UnPack(self, jsonDataSetReaderMessageDataType):
        if jsonDataSetReaderMessageDataType is None:
            return
        self.networkMessageContentMask = jsonDataSetReaderMessageDataType.NetworkMessageContentMask()
        self.dataSetMessageContentMask = jsonDataSetReaderMessageDataType.DataSetMessageContentMask()

    # JsonDataSetReaderMessageDataTypeT
    def Pack(self, builder):
        JsonDataSetReaderMessageDataTypeStart(builder)
        JsonDataSetReaderMessageDataTypeAddNetworkMessageContentMask(builder, self.networkMessageContentMask)
        JsonDataSetReaderMessageDataTypeAddDataSetMessageContentMask(builder, self.dataSetMessageContentMask)
        jsonDataSetReaderMessageDataType = JsonDataSetReaderMessageDataTypeEnd(builder)
        return jsonDataSetReaderMessageDataType
