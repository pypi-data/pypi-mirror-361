# automatically generated by the FlatBuffers compiler, do not modify

# namespace: device

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ImportParFile(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ImportParFile()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsImportParFile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ImportParFile
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ImportParFile
    def FileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ImportParFile
    def SetIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def ImportParFileStart(builder): builder.StartObject(2)
def Start(builder):
    return ImportParFileStart(builder)
def ImportParFileAddFileName(builder, fileName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fileName), 0)
def AddFileName(builder, fileName):
    return ImportParFileAddFileName(builder, fileName)
def ImportParFileAddSetIndex(builder, setIndex): builder.PrependInt8Slot(1, setIndex, 0)
def AddSetIndex(builder, setIndex):
    return ImportParFileAddSetIndex(builder, setIndex)
def ImportParFileEnd(builder): return builder.EndObject()
def End(builder):
    return ImportParFileEnd(builder)

class ImportParFileT(object):

    # ImportParFileT
    def __init__(self):
        self.fileName = None  # type: str
        self.setIndex = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        importParFile = ImportParFile()
        importParFile.Init(buf, pos)
        return cls.InitFromObj(importParFile)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, importParFile):
        x = ImportParFileT()
        x._UnPack(importParFile)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.fileName == other.fileName and \
            self.setIndex == other.setIndex

    # ImportParFileT
    def _UnPack(self, importParFile):
        if importParFile is None:
            return
        self.fileName = importParFile.FileName()
        self.setIndex = importParFile.SetIndex()

    # ImportParFileT
    def Pack(self, builder):
        if self.fileName is not None:
            fileName = builder.CreateString(self.fileName)
        ImportParFileStart(builder)
        if self.fileName is not None:
            ImportParFileAddFileName(builder, fileName)
        ImportParFileAddSetIndex(builder, self.setIndex)
        importParFile = ImportParFileEnd(builder)
        return importParFile
