# automatically generated by the FlatBuffers compiler, do not modify

# namespace: PubSubConfigurationType

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReserveIdsInput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReserveIdsInput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReserveIdsInput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ReserveIdsInput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReserveIdsInput
    def TransportProfileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ReserveIdsInput
    def NumReqWriterGroupIds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ReserveIdsInput
    def NumReqDataSetWriterIds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def ReserveIdsInputStart(builder): builder.StartObject(3)
def Start(builder):
    return ReserveIdsInputStart(builder)
def ReserveIdsInputAddTransportProfileUri(builder, transportProfileUri): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(transportProfileUri), 0)
def AddTransportProfileUri(builder, transportProfileUri):
    return ReserveIdsInputAddTransportProfileUri(builder, transportProfileUri)
def ReserveIdsInputAddNumReqWriterGroupIds(builder, numReqWriterGroupIds): builder.PrependUint16Slot(1, numReqWriterGroupIds, 0)
def AddNumReqWriterGroupIds(builder, numReqWriterGroupIds):
    return ReserveIdsInputAddNumReqWriterGroupIds(builder, numReqWriterGroupIds)
def ReserveIdsInputAddNumReqDataSetWriterIds(builder, numReqDataSetWriterIds): builder.PrependUint16Slot(2, numReqDataSetWriterIds, 0)
def AddNumReqDataSetWriterIds(builder, numReqDataSetWriterIds):
    return ReserveIdsInputAddNumReqDataSetWriterIds(builder, numReqDataSetWriterIds)
def ReserveIdsInputEnd(builder): return builder.EndObject()
def End(builder):
    return ReserveIdsInputEnd(builder)

class ReserveIdsInputT(object):

    # ReserveIdsInputT
    def __init__(self):
        self.transportProfileUri = None  # type: str
        self.numReqWriterGroupIds = 0  # type: int
        self.numReqDataSetWriterIds = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        reserveIdsInput = ReserveIdsInput()
        reserveIdsInput.Init(buf, pos)
        return cls.InitFromObj(reserveIdsInput)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, reserveIdsInput):
        x = ReserveIdsInputT()
        x._UnPack(reserveIdsInput)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.transportProfileUri == other.transportProfileUri and \
            self.numReqWriterGroupIds == other.numReqWriterGroupIds and \
            self.numReqDataSetWriterIds == other.numReqDataSetWriterIds

    # ReserveIdsInputT
    def _UnPack(self, reserveIdsInput):
        if reserveIdsInput is None:
            return
        self.transportProfileUri = reserveIdsInput.TransportProfileUri()
        self.numReqWriterGroupIds = reserveIdsInput.NumReqWriterGroupIds()
        self.numReqDataSetWriterIds = reserveIdsInput.NumReqDataSetWriterIds()

    # ReserveIdsInputT
    def Pack(self, builder):
        if self.transportProfileUri is not None:
            transportProfileUri = builder.CreateString(self.transportProfileUri)
        ReserveIdsInputStart(builder)
        if self.transportProfileUri is not None:
            ReserveIdsInputAddTransportProfileUri(builder, transportProfileUri)
        ReserveIdsInputAddNumReqWriterGroupIds(builder, self.numReqWriterGroupIds)
        ReserveIdsInputAddNumReqDataSetWriterIds(builder, self.numReqDataSetWriterIds)
        reserveIdsInput = ReserveIdsInputEnd(builder)
        return reserveIdsInput
