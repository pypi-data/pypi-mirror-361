# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# structure for external (MExA) configuration items
class ExternalConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExternalConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExternalConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExternalConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # all registered items
    # ExternalConfig
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.ExternalConfigSingleItemKeyValuePair import ExternalConfigSingleItemKeyValuePair
            obj = ExternalConfigSingleItemKeyValuePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ExternalConfig
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ExternalConfig
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ExternalConfigStart(builder): builder.StartObject(1)
def Start(builder):
    return ExternalConfigStart(builder)
def ExternalConfigAddItems(builder, items): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)
def AddItems(builder, items):
    return ExternalConfigAddItems(builder, items)
def ExternalConfigStartItemsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartItemsVector(builder, numElems):
    return ExternalConfigStartItemsVector(builder, numElems)
def ExternalConfigEnd(builder): return builder.EndObject()
def End(builder):
    return ExternalConfigEnd(builder)
import motion.core.fbtypes.ExternalConfigSingleItemKeyValuePair
try:
    from typing import List
except:
    pass

class ExternalConfigT(object):

    # ExternalConfigT
    def __init__(self):
        self.items = None  # type: List[motion.core.fbtypes.ExternalConfigSingleItemKeyValuePair.ExternalConfigSingleItemKeyValuePairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        externalConfig = ExternalConfig()
        externalConfig.Init(buf, pos)
        return cls.InitFromObj(externalConfig)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, externalConfig):
        x = ExternalConfigT()
        x._UnPack(externalConfig)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.items == other.items

    # ExternalConfigT
    def _UnPack(self, externalConfig):
        if externalConfig is None:
            return
        if not externalConfig.ItemsIsNone():
            self.items = []
            for i in range(externalConfig.ItemsLength()):
                if externalConfig.Items(i) is None:
                    self.items.append(None)
                else:
                    externalConfigSingleItemKeyValuePair_ = motion.core.fbtypes.ExternalConfigSingleItemKeyValuePair.ExternalConfigSingleItemKeyValuePairT.InitFromObj(externalConfig.Items(i))
                    self.items.append(externalConfigSingleItemKeyValuePair_)

    # ExternalConfigT
    def Pack(self, builder):
        if self.items is not None:
            itemslist = []
            for i in range(len(self.items)):
                itemslist.append(self.items[i].Pack(builder))
            ExternalConfigStartItemsVector(builder, len(self.items))
            for i in reversed(range(len(self.items))):
                builder.PrependUOffsetTRelative(itemslist[i])
            items = builder.EndVector()
        ExternalConfigStart(builder)
        if self.items is not None:
            ExternalConfigAddItems(builder, items)
        externalConfig = ExternalConfigEnd(builder)
        return externalConfig
