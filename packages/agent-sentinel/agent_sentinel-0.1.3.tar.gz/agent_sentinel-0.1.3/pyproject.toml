[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agent-sentinel"
version = "0.1.3"
description = "Enterprise-grade security monitoring SDK for AI agents"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AgentSentinel Team", email = "team@agentsentinel.dev"}
]
maintainers = [
    {name = "AgentSentinel Team", email = "team@agentsentinel.dev"}
]
keywords = ["ai", "security", "monitoring", "agents", "mcp", "threat-detection", "enterprise"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Networking :: Monitoring",
]
requires-python = ">=3.9"
dependencies = [
    "pyyaml>=6.0",
    "structlog>=23.0.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "asyncio-mqtt>=0.16.0",
    "aiohttp>=3.8.0",
    "websockets>=11.0.0",
    "cryptography>=41.0.0",
    "bcrypt>=4.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "weave>=0.0.1",
    "prometheus-client>=0.17.0",
    "redis>=4.5.0",
    "celery>=5.3.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    "psycopg2-binary>=2.9.0",
    "pymongo>=4.4.0",
    "elasticsearch>=8.8.0",
    "kafka-python>=2.0.0",
    "confluent-kafka>=2.0.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation>=0.40.0",
    "jaeger-client>=4.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
    "coverage>=7.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pip-audit>=2.4.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "coverage>=7.0.0",
    "responses>=0.23.0",
    "httpx>=0.24.0",
    "freezegun>=1.2.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.0",
    "sphinx-tabs>=3.4.0",
]
monitoring = [
    "grafana-api>=1.0.0",
    "prometheus-client>=0.17.0",
    "datadog>=0.44.0",
    "newrelic>=8.0.0",
    "sentry-sdk>=1.28.0",
    "opentelemetry-exporter-zipkin>=1.7.0",
]
security = [
    "cryptography>=41.0.0",
    "bcrypt>=4.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pip-audit>=2.4.0",
    "semgrep>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/agentsentinel/agent-sentinel"
Documentation = "https://docs.agentsentinel.dev"
Repository = "https://github.com/agentsentinel/agent-sentinel.git"
"Bug Tracker" = "https://github.com/agentsentinel/agent-sentinel/issues"
"Security Policy" = "https://github.com/agentsentinel/agent-sentinel/security/policy"
"Code of Conduct" = "https://github.com/agentsentinel/agent-sentinel/blob/main/CODE_OF_CONDUCT.md"
"Contributing" = "https://github.com/agentsentinel/agent-sentinel/blob/main/CONTRIBUTING.md"
"Changelog" = "https://github.com/agentsentinel/agent-sentinel/blob/main/CHANGELOG.md"

[project.scripts]
agent-sentinel = "agent_sentinel.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"agent_sentinel" = ["py.typed", "*.pyi"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["agent_sentinel"]
known_third_party = ["pytest", "asyncio", "typing"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "test_*",
    "*_test",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=agent_sentinel",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--asyncio-mode=auto",
]
testpaths = [
    "tests",
    "test_*.py",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["src/agent_sentinel"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

[tool.semgrep]
config = "p/security-audit"

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"] 