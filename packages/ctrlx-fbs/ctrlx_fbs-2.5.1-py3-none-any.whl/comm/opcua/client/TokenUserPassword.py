# automatically generated by the FlatBuffers compiler, do not modify

# namespace: client

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TokenUserPassword(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TokenUserPassword()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTokenUserPassword(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TokenUserPassword
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TokenUserPassword
    def Username(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TokenUserPassword
    def Password(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TokenUserPasswordStart(builder): builder.StartObject(2)
def Start(builder):
    return TokenUserPasswordStart(builder)
def TokenUserPasswordAddUsername(builder, username): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(username), 0)
def AddUsername(builder, username):
    return TokenUserPasswordAddUsername(builder, username)
def TokenUserPasswordAddPassword(builder, password): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(password), 0)
def AddPassword(builder, password):
    return TokenUserPasswordAddPassword(builder, password)
def TokenUserPasswordEnd(builder): return builder.EndObject()
def End(builder):
    return TokenUserPasswordEnd(builder)

class TokenUserPasswordT(object):

    # TokenUserPasswordT
    def __init__(self):
        self.username = None  # type: str
        self.password = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tokenUserPassword = TokenUserPassword()
        tokenUserPassword.Init(buf, pos)
        return cls.InitFromObj(tokenUserPassword)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, tokenUserPassword):
        x = TokenUserPasswordT()
        x._UnPack(tokenUserPassword)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.username == other.username and \
            self.password == other.password

    # TokenUserPasswordT
    def _UnPack(self, tokenUserPassword):
        if tokenUserPassword is None:
            return
        self.username = tokenUserPassword.Username()
        self.password = tokenUserPassword.Password()

    # TokenUserPasswordT
    def Pack(self, builder):
        if self.username is not None:
            username = builder.CreateString(self.username)
        if self.password is not None:
            password = builder.CreateString(self.password)
        TokenUserPasswordStart(builder)
        if self.username is not None:
            TokenUserPasswordAddUsername(builder, username)
        if self.password is not None:
            TokenUserPasswordAddPassword(builder, password)
        tokenUserPassword = TokenUserPasswordEnd(builder)
        return tokenUserPassword
