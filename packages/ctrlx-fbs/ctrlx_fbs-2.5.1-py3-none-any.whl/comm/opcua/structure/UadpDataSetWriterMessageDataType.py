# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UadpDataSetWriterMessageDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UadpDataSetWriterMessageDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUadpDataSetWriterMessageDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UadpDataSetWriterMessageDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UadpDataSetWriterMessageDataType
    def DataSetMessageContentMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UadpDataSetWriterMessageDataType
    def ConfiguredSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # UadpDataSetWriterMessageDataType
    def NetworkMessageNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # UadpDataSetWriterMessageDataType
    def DataSetOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def UadpDataSetWriterMessageDataTypeStart(builder): builder.StartObject(4)
def Start(builder):
    return UadpDataSetWriterMessageDataTypeStart(builder)
def UadpDataSetWriterMessageDataTypeAddDataSetMessageContentMask(builder, dataSetMessageContentMask): builder.PrependUint32Slot(0, dataSetMessageContentMask, 0)
def AddDataSetMessageContentMask(builder, dataSetMessageContentMask):
    return UadpDataSetWriterMessageDataTypeAddDataSetMessageContentMask(builder, dataSetMessageContentMask)
def UadpDataSetWriterMessageDataTypeAddConfiguredSize(builder, configuredSize): builder.PrependUint16Slot(1, configuredSize, 0)
def AddConfiguredSize(builder, configuredSize):
    return UadpDataSetWriterMessageDataTypeAddConfiguredSize(builder, configuredSize)
def UadpDataSetWriterMessageDataTypeAddNetworkMessageNumber(builder, networkMessageNumber): builder.PrependUint16Slot(2, networkMessageNumber, 0)
def AddNetworkMessageNumber(builder, networkMessageNumber):
    return UadpDataSetWriterMessageDataTypeAddNetworkMessageNumber(builder, networkMessageNumber)
def UadpDataSetWriterMessageDataTypeAddDataSetOffset(builder, dataSetOffset): builder.PrependUint16Slot(3, dataSetOffset, 0)
def AddDataSetOffset(builder, dataSetOffset):
    return UadpDataSetWriterMessageDataTypeAddDataSetOffset(builder, dataSetOffset)
def UadpDataSetWriterMessageDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return UadpDataSetWriterMessageDataTypeEnd(builder)

class UadpDataSetWriterMessageDataTypeT(object):

    # UadpDataSetWriterMessageDataTypeT
    def __init__(self):
        self.dataSetMessageContentMask = 0  # type: int
        self.configuredSize = 0  # type: int
        self.networkMessageNumber = 0  # type: int
        self.dataSetOffset = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        uadpDataSetWriterMessageDataType = UadpDataSetWriterMessageDataType()
        uadpDataSetWriterMessageDataType.Init(buf, pos)
        return cls.InitFromObj(uadpDataSetWriterMessageDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, uadpDataSetWriterMessageDataType):
        x = UadpDataSetWriterMessageDataTypeT()
        x._UnPack(uadpDataSetWriterMessageDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dataSetMessageContentMask == other.dataSetMessageContentMask and \
            self.configuredSize == other.configuredSize and \
            self.networkMessageNumber == other.networkMessageNumber and \
            self.dataSetOffset == other.dataSetOffset

    # UadpDataSetWriterMessageDataTypeT
    def _UnPack(self, uadpDataSetWriterMessageDataType):
        if uadpDataSetWriterMessageDataType is None:
            return
        self.dataSetMessageContentMask = uadpDataSetWriterMessageDataType.DataSetMessageContentMask()
        self.configuredSize = uadpDataSetWriterMessageDataType.ConfiguredSize()
        self.networkMessageNumber = uadpDataSetWriterMessageDataType.NetworkMessageNumber()
        self.dataSetOffset = uadpDataSetWriterMessageDataType.DataSetOffset()

    # UadpDataSetWriterMessageDataTypeT
    def Pack(self, builder):
        UadpDataSetWriterMessageDataTypeStart(builder)
        UadpDataSetWriterMessageDataTypeAddDataSetMessageContentMask(builder, self.dataSetMessageContentMask)
        UadpDataSetWriterMessageDataTypeAddConfiguredSize(builder, self.configuredSize)
        UadpDataSetWriterMessageDataTypeAddNetworkMessageNumber(builder, self.networkMessageNumber)
        UadpDataSetWriterMessageDataTypeAddDataSetOffset(builder, self.dataSetOffset)
        uadpDataSetWriterMessageDataType = UadpDataSetWriterMessageDataTypeEnd(builder)
        return uadpDataSetWriterMessageDataType
