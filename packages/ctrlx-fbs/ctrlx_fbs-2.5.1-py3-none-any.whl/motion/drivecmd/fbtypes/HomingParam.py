# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# set of homing parameters
class HomingParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HomingParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHomingParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HomingParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded target position (or increment for relative position command
    # HomingParam
    def NewRefPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # max travel distance to search the reference switch
    # HomingParam
    def TravelDisLim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # homing direction
    # HomingParam
    def HomingDir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # reference type to indicates set which position as the reference position
    # HomingParam
    def RefType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # dynamic limit to search the reference switch(fast velocity)
    # HomingParam
    def DynForward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dynamic limit to move to reference switch(slow velocity)
    # HomingParam
    def DynBackward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # method of set new position
    # HomingParam
    def RefMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # behavior of set new position
    # HomingParam
    def HomingBehavior(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

def HomingParamStart(builder): builder.StartObject(8)
def Start(builder):
    return HomingParamStart(builder)
def HomingParamAddNewRefPos(builder, newRefPos): builder.PrependFloat64Slot(0, newRefPos, 0.0)
def AddNewRefPos(builder, newRefPos):
    return HomingParamAddNewRefPos(builder, newRefPos)
def HomingParamAddTravelDisLim(builder, travelDisLim): builder.PrependFloat64Slot(1, travelDisLim, 0.0)
def AddTravelDisLim(builder, travelDisLim):
    return HomingParamAddTravelDisLim(builder, travelDisLim)
def HomingParamAddHomingDir(builder, homingDir): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(homingDir), 0)
def AddHomingDir(builder, homingDir):
    return HomingParamAddHomingDir(builder, homingDir)
def HomingParamAddRefType(builder, refType): builder.PrependInt8Slot(3, refType, 1)
def AddRefType(builder, refType):
    return HomingParamAddRefType(builder, refType)
def HomingParamAddDynForward(builder, dynForward): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dynForward), 0)
def AddDynForward(builder, dynForward):
    return HomingParamAddDynForward(builder, dynForward)
def HomingParamAddDynBackward(builder, dynBackward): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dynBackward), 0)
def AddDynBackward(builder, dynBackward):
    return HomingParamAddDynBackward(builder, dynBackward)
def HomingParamAddRefMode(builder, refMode): builder.PrependInt8Slot(6, refMode, 0)
def AddRefMode(builder, refMode):
    return HomingParamAddRefMode(builder, refMode)
def HomingParamAddHomingBehavior(builder, homingBehavior): builder.PrependInt8Slot(7, homingBehavior, 1)
def AddHomingBehavior(builder, homingBehavior):
    return HomingParamAddHomingBehavior(builder, homingBehavior)
def HomingParamEnd(builder): return builder.EndObject()
def End(builder):
    return HomingParamEnd(builder)
import motion.core.fbtypes.DynamicLimits
try:
    from typing import Optional
except:
    pass

class HomingParamT(object):

    # HomingParamT
    def __init__(self):
        self.newRefPos = 0.0  # type: float
        self.travelDisLim = 0.0  # type: float
        self.homingDir = None  # type: str
        self.refType = 1  # type: int
        self.dynForward = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]
        self.dynBackward = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]
        self.refMode = 0  # type: int
        self.homingBehavior = 1  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        homingParam = HomingParam()
        homingParam.Init(buf, pos)
        return cls.InitFromObj(homingParam)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, homingParam):
        x = HomingParamT()
        x._UnPack(homingParam)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.newRefPos == other.newRefPos and \
            self.travelDisLim == other.travelDisLim and \
            self.homingDir == other.homingDir and \
            self.refType == other.refType and \
            self.dynForward == other.dynForward and \
            self.dynBackward == other.dynBackward and \
            self.refMode == other.refMode and \
            self.homingBehavior == other.homingBehavior

    # HomingParamT
    def _UnPack(self, homingParam):
        if homingParam is None:
            return
        self.newRefPos = homingParam.NewRefPos()
        self.travelDisLim = homingParam.TravelDisLim()
        self.homingDir = homingParam.HomingDir()
        self.refType = homingParam.RefType()
        if homingParam.DynForward() is not None:
            self.dynForward = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(homingParam.DynForward())
        if homingParam.DynBackward() is not None:
            self.dynBackward = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(homingParam.DynBackward())
        self.refMode = homingParam.RefMode()
        self.homingBehavior = homingParam.HomingBehavior()

    # HomingParamT
    def Pack(self, builder):
        if self.homingDir is not None:
            homingDir = builder.CreateString(self.homingDir)
        if self.dynForward is not None:
            dynForward = self.dynForward.Pack(builder)
        if self.dynBackward is not None:
            dynBackward = self.dynBackward.Pack(builder)
        HomingParamStart(builder)
        HomingParamAddNewRefPos(builder, self.newRefPos)
        HomingParamAddTravelDisLim(builder, self.travelDisLim)
        if self.homingDir is not None:
            HomingParamAddHomingDir(builder, homingDir)
        HomingParamAddRefType(builder, self.refType)
        if self.dynForward is not None:
            HomingParamAddDynForward(builder, dynForward)
        if self.dynBackward is not None:
            HomingParamAddDynBackward(builder, dynBackward)
        HomingParamAddRefMode(builder, self.refMode)
        HomingParamAddHomingBehavior(builder, self.homingBehavior)
        homingParam = HomingParamEnd(builder)
        return homingParam
