# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FileType

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OpenInput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OpenInput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOpenInput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OpenInput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OpenInput
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def OpenInputStart(builder): builder.StartObject(1)
def Start(builder):
    return OpenInputStart(builder)
def OpenInputAddMode(builder, mode): builder.PrependUint8Slot(0, mode, 0)
def AddMode(builder, mode):
    return OpenInputAddMode(builder, mode)
def OpenInputEnd(builder): return builder.EndObject()
def End(builder):
    return OpenInputEnd(builder)

class OpenInputT(object):

    # OpenInputT
    def __init__(self):
        self.mode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        openInput = OpenInput()
        openInput.Init(buf, pos)
        return cls.InitFromObj(openInput)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, openInput):
        x = OpenInputT()
        x._UnPack(openInput)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mode == other.mode

    # OpenInputT
    def _UnPack(self, openInput):
        if openInput is None:
            return
        self.mode = openInput.Mode()

    # OpenInputT
    def Pack(self, builder):
        OpenInputStart(builder)
        OpenInputAddMode(builder, self.mode)
        openInput = OpenInputEnd(builder)
        return openInput
