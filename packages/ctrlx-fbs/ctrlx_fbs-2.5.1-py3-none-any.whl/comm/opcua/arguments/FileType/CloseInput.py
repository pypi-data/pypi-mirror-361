# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FileType

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CloseInput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CloseInput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCloseInput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CloseInput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CloseInput
    def FileHandle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def CloseInputStart(builder): builder.StartObject(1)
def Start(builder):
    return CloseInputStart(builder)
def CloseInputAddFileHandle(builder, fileHandle): builder.PrependUint32Slot(0, fileHandle, 0)
def AddFileHandle(builder, fileHandle):
    return CloseInputAddFileHandle(builder, fileHandle)
def CloseInputEnd(builder): return builder.EndObject()
def End(builder):
    return CloseInputEnd(builder)

class CloseInputT(object):

    # CloseInputT
    def __init__(self):
        self.fileHandle = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        closeInput = CloseInput()
        closeInput.Init(buf, pos)
        return cls.InitFromObj(closeInput)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, closeInput):
        x = CloseInputT()
        x._UnPack(closeInput)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.fileHandle == other.fileHandle

    # CloseInputT
    def _UnPack(self, closeInput):
        if closeInput is None:
            return
        self.fileHandle = closeInput.FileHandle()

    # CloseInputT
    def Pack(self, builder):
        CloseInputStart(builder)
        CloseInputAddFileHandle(builder, self.fileHandle)
        closeInput = CloseInputEnd(builder)
        return closeInput
