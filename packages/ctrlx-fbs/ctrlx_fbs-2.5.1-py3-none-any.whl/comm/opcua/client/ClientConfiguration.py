# automatically generated by the FlatBuffers compiler, do not modify

# namespace: client

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ClientConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ClientConfiguration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsClientConfiguration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ClientConfiguration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique clientname (required)
    # ClientConfiguration
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Endpoint-url of the OPC UA Server to which the client should connect to (required)
    # ClientConfiguration
    def EndpointUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Session configuration for the client
    # ClientConfiguration
    def SessionConfiguration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.client.SessionConfiguration import SessionConfiguration
            obj = SessionConfiguration()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Timeout configuration for the client session
    # ClientConfiguration
    def TimeoutConfiguration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.client.TimeoutConfiguration import TimeoutConfiguration
            obj = TimeoutConfiguration()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Determines whether configuration data of the client data is persisted and loaded upon the next start of the app or the control
    # ClientConfiguration
    def Persistent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # If true, the corresponding client session try to connect automatically within the reconnect delay interval in the case the client session is disconnected
    # ClientConfiguration
    def AutoReconnect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ClientConfigurationStart(builder): builder.StartObject(6)
def Start(builder):
    return ClientConfigurationStart(builder)
def ClientConfigurationAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ClientConfigurationAddName(builder, name)
def ClientConfigurationAddEndpointUrl(builder, endpointUrl): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(endpointUrl), 0)
def AddEndpointUrl(builder, endpointUrl):
    return ClientConfigurationAddEndpointUrl(builder, endpointUrl)
def ClientConfigurationAddSessionConfiguration(builder, sessionConfiguration): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(sessionConfiguration), 0)
def AddSessionConfiguration(builder, sessionConfiguration):
    return ClientConfigurationAddSessionConfiguration(builder, sessionConfiguration)
def ClientConfigurationAddTimeoutConfiguration(builder, timeoutConfiguration): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(timeoutConfiguration), 0)
def AddTimeoutConfiguration(builder, timeoutConfiguration):
    return ClientConfigurationAddTimeoutConfiguration(builder, timeoutConfiguration)
def ClientConfigurationAddPersistent(builder, persistent): builder.PrependBoolSlot(4, persistent, 0)
def AddPersistent(builder, persistent):
    return ClientConfigurationAddPersistent(builder, persistent)
def ClientConfigurationAddAutoReconnect(builder, autoReconnect): builder.PrependBoolSlot(5, autoReconnect, 0)
def AddAutoReconnect(builder, autoReconnect):
    return ClientConfigurationAddAutoReconnect(builder, autoReconnect)
def ClientConfigurationEnd(builder): return builder.EndObject()
def End(builder):
    return ClientConfigurationEnd(builder)
import comm.opcua.client.SessionConfiguration
import comm.opcua.client.TimeoutConfiguration
try:
    from typing import Optional
except:
    pass

class ClientConfigurationT(object):

    # ClientConfigurationT
    def __init__(self):
        self.name = None  # type: str
        self.endpointUrl = None  # type: str
        self.sessionConfiguration = None  # type: Optional[comm.opcua.client.SessionConfiguration.SessionConfigurationT]
        self.timeoutConfiguration = None  # type: Optional[comm.opcua.client.TimeoutConfiguration.TimeoutConfigurationT]
        self.persistent = False  # type: bool
        self.autoReconnect = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clientConfiguration = ClientConfiguration()
        clientConfiguration.Init(buf, pos)
        return cls.InitFromObj(clientConfiguration)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clientConfiguration):
        x = ClientConfigurationT()
        x._UnPack(clientConfiguration)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.endpointUrl == other.endpointUrl and \
            self.sessionConfiguration == other.sessionConfiguration and \
            self.timeoutConfiguration == other.timeoutConfiguration and \
            self.persistent == other.persistent and \
            self.autoReconnect == other.autoReconnect

    # ClientConfigurationT
    def _UnPack(self, clientConfiguration):
        if clientConfiguration is None:
            return
        self.name = clientConfiguration.Name()
        self.endpointUrl = clientConfiguration.EndpointUrl()
        if clientConfiguration.SessionConfiguration() is not None:
            self.sessionConfiguration = comm.opcua.client.SessionConfiguration.SessionConfigurationT.InitFromObj(clientConfiguration.SessionConfiguration())
        if clientConfiguration.TimeoutConfiguration() is not None:
            self.timeoutConfiguration = comm.opcua.client.TimeoutConfiguration.TimeoutConfigurationT.InitFromObj(clientConfiguration.TimeoutConfiguration())
        self.persistent = clientConfiguration.Persistent()
        self.autoReconnect = clientConfiguration.AutoReconnect()

    # ClientConfigurationT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.endpointUrl is not None:
            endpointUrl = builder.CreateString(self.endpointUrl)
        if self.sessionConfiguration is not None:
            sessionConfiguration = self.sessionConfiguration.Pack(builder)
        if self.timeoutConfiguration is not None:
            timeoutConfiguration = self.timeoutConfiguration.Pack(builder)
        ClientConfigurationStart(builder)
        if self.name is not None:
            ClientConfigurationAddName(builder, name)
        if self.endpointUrl is not None:
            ClientConfigurationAddEndpointUrl(builder, endpointUrl)
        if self.sessionConfiguration is not None:
            ClientConfigurationAddSessionConfiguration(builder, sessionConfiguration)
        if self.timeoutConfiguration is not None:
            ClientConfigurationAddTimeoutConfiguration(builder, timeoutConfiguration)
        ClientConfigurationAddPersistent(builder, self.persistent)
        ClientConfigurationAddAutoReconnect(builder, self.autoReconnect)
        clientConfiguration = ClientConfigurationEnd(builder)
        return clientConfiguration
