# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# state of triggered, signaled and active events
class AxsStateFlexProfileAllEvents(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsStateFlexProfileAllEvents()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsStateFlexProfileAllEvents(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsStateFlexProfileAllEvents
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # bit mask shows triggered and signaled events
    # AxsStateFlexProfileAllEvents
    def ConditionStatusMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # bit mask with active control events
    # AxsStateFlexProfileAllEvents
    def ConditionControlMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def AxsStateFlexProfileAllEventsStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsStateFlexProfileAllEventsStart(builder)
def AxsStateFlexProfileAllEventsAddConditionStatusMask(builder, conditionStatusMask): builder.PrependUint64Slot(0, conditionStatusMask, 0)
def AddConditionStatusMask(builder, conditionStatusMask):
    return AxsStateFlexProfileAllEventsAddConditionStatusMask(builder, conditionStatusMask)
def AxsStateFlexProfileAllEventsAddConditionControlMask(builder, conditionControlMask): builder.PrependUint64Slot(1, conditionControlMask, 0)
def AddConditionControlMask(builder, conditionControlMask):
    return AxsStateFlexProfileAllEventsAddConditionControlMask(builder, conditionControlMask)
def AxsStateFlexProfileAllEventsEnd(builder): return builder.EndObject()
def End(builder):
    return AxsStateFlexProfileAllEventsEnd(builder)

class AxsStateFlexProfileAllEventsT(object):

    # AxsStateFlexProfileAllEventsT
    def __init__(self):
        self.conditionStatusMask = 0  # type: int
        self.conditionControlMask = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsStateFlexProfileAllEvents = AxsStateFlexProfileAllEvents()
        axsStateFlexProfileAllEvents.Init(buf, pos)
        return cls.InitFromObj(axsStateFlexProfileAllEvents)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsStateFlexProfileAllEvents):
        x = AxsStateFlexProfileAllEventsT()
        x._UnPack(axsStateFlexProfileAllEvents)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.conditionStatusMask == other.conditionStatusMask and \
            self.conditionControlMask == other.conditionControlMask

    # AxsStateFlexProfileAllEventsT
    def _UnPack(self, axsStateFlexProfileAllEvents):
        if axsStateFlexProfileAllEvents is None:
            return
        self.conditionStatusMask = axsStateFlexProfileAllEvents.ConditionStatusMask()
        self.conditionControlMask = axsStateFlexProfileAllEvents.ConditionControlMask()

    # AxsStateFlexProfileAllEventsT
    def Pack(self, builder):
        AxsStateFlexProfileAllEventsStart(builder)
        AxsStateFlexProfileAllEventsAddConditionStatusMask(builder, self.conditionStatusMask)
        AxsStateFlexProfileAllEventsAddConditionControlMask(builder, self.conditionControlMask)
        axsStateFlexProfileAllEvents = AxsStateFlexProfileAllEventsEnd(builder)
        return axsStateFlexProfileAllEvents
