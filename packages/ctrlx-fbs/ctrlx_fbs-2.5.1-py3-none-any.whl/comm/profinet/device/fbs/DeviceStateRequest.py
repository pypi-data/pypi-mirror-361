# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DeviceStateRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeviceStateRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeviceStateRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DeviceStateRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DeviceStateRequest
    def NewState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def DeviceStateRequestStart(builder): builder.StartObject(1)
def Start(builder):
    return DeviceStateRequestStart(builder)
def DeviceStateRequestAddNewState(builder, newState): builder.PrependUint16Slot(0, newState, 0)
def AddNewState(builder, newState):
    return DeviceStateRequestAddNewState(builder, newState)
def DeviceStateRequestEnd(builder): return builder.EndObject()
def End(builder):
    return DeviceStateRequestEnd(builder)

class DeviceStateRequestT(object):

    # DeviceStateRequestT
    def __init__(self):
        self.newState = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        deviceStateRequest = DeviceStateRequest()
        deviceStateRequest.Init(buf, pos)
        return cls.InitFromObj(deviceStateRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, deviceStateRequest):
        x = DeviceStateRequestT()
        x._UnPack(deviceStateRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.newState == other.newState

    # DeviceStateRequestT
    def _UnPack(self, deviceStateRequest):
        if deviceStateRequest is None:
            return
        self.newState = deviceStateRequest.NewState()

    # DeviceStateRequestT
    def Pack(self, builder):
        DeviceStateRequestStart(builder)
        DeviceStateRequestAddNewState(builder, self.newState)
        deviceStateRequest = DeviceStateRequestEnd(builder)
        return deviceStateRequest
