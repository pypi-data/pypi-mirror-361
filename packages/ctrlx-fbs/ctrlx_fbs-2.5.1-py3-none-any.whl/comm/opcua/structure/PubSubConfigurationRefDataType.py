# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PubSubConfigurationRefDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PubSubConfigurationRefDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPubSubConfigurationRefDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PubSubConfigurationRefDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PubSubConfigurationRefDataType
    def ConfigurationMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PubSubConfigurationRefDataType
    def ElementIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # PubSubConfigurationRefDataType
    def ConnectionIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # PubSubConfigurationRefDataType
    def GroupIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def PubSubConfigurationRefDataTypeStart(builder): builder.StartObject(4)
def Start(builder):
    return PubSubConfigurationRefDataTypeStart(builder)
def PubSubConfigurationRefDataTypeAddConfigurationMask(builder, configurationMask): builder.PrependUint32Slot(0, configurationMask, 0)
def AddConfigurationMask(builder, configurationMask):
    return PubSubConfigurationRefDataTypeAddConfigurationMask(builder, configurationMask)
def PubSubConfigurationRefDataTypeAddElementIndex(builder, elementIndex): builder.PrependUint16Slot(1, elementIndex, 0)
def AddElementIndex(builder, elementIndex):
    return PubSubConfigurationRefDataTypeAddElementIndex(builder, elementIndex)
def PubSubConfigurationRefDataTypeAddConnectionIndex(builder, connectionIndex): builder.PrependUint16Slot(2, connectionIndex, 0)
def AddConnectionIndex(builder, connectionIndex):
    return PubSubConfigurationRefDataTypeAddConnectionIndex(builder, connectionIndex)
def PubSubConfigurationRefDataTypeAddGroupIndex(builder, groupIndex): builder.PrependUint16Slot(3, groupIndex, 0)
def AddGroupIndex(builder, groupIndex):
    return PubSubConfigurationRefDataTypeAddGroupIndex(builder, groupIndex)
def PubSubConfigurationRefDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return PubSubConfigurationRefDataTypeEnd(builder)

class PubSubConfigurationRefDataTypeT(object):

    # PubSubConfigurationRefDataTypeT
    def __init__(self):
        self.configurationMask = 0  # type: int
        self.elementIndex = 0  # type: int
        self.connectionIndex = 0  # type: int
        self.groupIndex = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pubSubConfigurationRefDataType = PubSubConfigurationRefDataType()
        pubSubConfigurationRefDataType.Init(buf, pos)
        return cls.InitFromObj(pubSubConfigurationRefDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, pubSubConfigurationRefDataType):
        x = PubSubConfigurationRefDataTypeT()
        x._UnPack(pubSubConfigurationRefDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.configurationMask == other.configurationMask and \
            self.elementIndex == other.elementIndex and \
            self.connectionIndex == other.connectionIndex and \
            self.groupIndex == other.groupIndex

    # PubSubConfigurationRefDataTypeT
    def _UnPack(self, pubSubConfigurationRefDataType):
        if pubSubConfigurationRefDataType is None:
            return
        self.configurationMask = pubSubConfigurationRefDataType.ConfigurationMask()
        self.elementIndex = pubSubConfigurationRefDataType.ElementIndex()
        self.connectionIndex = pubSubConfigurationRefDataType.ConnectionIndex()
        self.groupIndex = pubSubConfigurationRefDataType.GroupIndex()

    # PubSubConfigurationRefDataTypeT
    def Pack(self, builder):
        PubSubConfigurationRefDataTypeStart(builder)
        PubSubConfigurationRefDataTypeAddConfigurationMask(builder, self.configurationMask)
        PubSubConfigurationRefDataTypeAddElementIndex(builder, self.elementIndex)
        PubSubConfigurationRefDataTypeAddConnectionIndex(builder, self.connectionIndex)
        PubSubConfigurationRefDataTypeAddGroupIndex(builder, self.groupIndex)
        pubSubConfigurationRefDataType = PubSubConfigurationRefDataTypeEnd(builder)
        return pubSubConfigurationRefDataType
