# -*- coding: utf-8 -*-
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# This is part of the Exudyn GUI project
#
# Filename: core/widgetUtils.py
#
# Description:
#     Centralized import file for PyQt5 classes used across the GUI.
#     Ensures consistent and minimal imports throughout the application.
#
# Authors:  Michael Pieber
# Date:     2025-05-12
#
# License:  BSD-3 license
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

from exudynGUI.core.qtImports import *
from exudynGUI.guiForms.specialWidgets import (
    extractSpecialWidgetValue,
    Vector3Widget,
    Matrix3x3Widget,
)
from PyQt5.QtWidgets import QListWidget   # ← import for list‐based selectors
import inspect

def extractValueFromWidget(widget: QWidget):
    """Extracts the value from a given Qt widget, including special and custom widgets."""
    # 1) If the widget has its own getValue(), use it:
    if hasattr(widget, "getValue") and callable(widget.getValue):
        return widget.getValue()

    # 2) Standard Qt widgets:
    if isinstance(widget, QLineEdit):
        return widget.text()

    elif isinstance(widget, QCheckBox):
        return widget.isChecked()

    elif isinstance(widget, QDoubleSpinBox):
        return widget.value()

    elif isinstance(widget, QSpinBox):
        return widget.value()

    elif isinstance(widget, QComboBox):
        return widget.currentText()

    # 3) Your custom 3‐vector / 3×3‐matrix widgets:
    if isinstance(widget, Vector3Widget):
        return widget.getValue()
    
    elif isinstance(widget, Matrix3x3Widget):
        return widget.getValue()

    # 4) GraphicsDataList detection (by signature):
    if hasattr(widget, "data") and hasattr(widget, "previewLabel"):
        return widget.data

    # 5) Inertia / UserFunction widgets (by “combo” + “argsField”):
    if hasattr(widget, "combo") and hasattr(widget, "argsField"):
        return {
            "name": widget.combo.currentText(),
            "args": widget.argsField.text()
        }

    # 6) Multi‐component selector (legacy):
    if hasattr(widget, "fieldType") and widget.fieldType == "multiComponent":
        return widget.getSelectedIndices()

    # 7) New: QListWidget (used by buildBodyListWidget & buildBodyOrNodeListWidget)
    if isinstance(widget, QListWidget):
        # Return the list of UserRole data for every selected item
        return [item.data(Qt.UserRole) for item in widget.selectedItems()]

    # 8) Special fieldType checks (if you still need them):
    if hasattr(widget, "fieldType"):
        ft = widget.fieldType

        if ft == "inertia":
            return {
                "name": widget.combo.currentText(),
                "args": widget.argsField.text()
            }

        elif ft == "graphicsDataList":
            return widget.data if hasattr(widget, "data") else []

        elif ft == "userFunction":
            val = widget.combo.currentText()
            return val if val else "0"

        elif ft == "vector3" and hasattr(widget, "getVector3"):
            return widget.getVector3()

    # 9) Debug fallback:
    from exudynGUI.core.debug import debugLog
    debugLog(f"[extractValueFromWidget] ❌ Unrecognized widget type: {type(widget).__name__}", origin="autoGeneratedForm")
    return None




def setValueToWidget(widget, value):
    """Set a given value to a PyQt widget, including special field widgets."""

    # --- Standard widgets ---
    if isinstance(widget, QLineEdit):
        widget.setText(str(value))

    elif isinstance(widget, QTextEdit):
        widget.setPlainText(str(value))

    elif isinstance(widget, QCheckBox):
        widget.setChecked(bool(value))

    elif isinstance(widget, QComboBox):
        index = widget.findText(str(value))
        if index >= 0:
            widget.setCurrentIndex(index)

    elif hasattr(widget, "fieldType") and widget.fieldType == "multiComponent":
        if isinstance(value, list):
            widget.setSelectedIndices(value)

    elif isinstance(widget, (QSpinBox, QDoubleSpinBox)):
        try:
            widget.setValue(float(value))
        except Exception:
            pass  # Ignore out-of-bounds or conversion errors

    # --- Special widgets ---
    elif hasattr(widget, "fieldType"):

        if widget.fieldType == "inertia" and isinstance(value, dict):
            name = value.get("name", "")
            args = value.get("args", "")
            widget.combo.setCurrentText(name)
            widget.argsField.setText(str(args))

        elif widget.fieldType == "graphicsDataList" and isinstance(value, list):
            widget.data = value
            if hasattr(widget, "previewLabel"):
                widget.previewLabel.setText(f"{len(value)} graphics")

        elif widget.fieldType == "userFunction":
            widget.combo.setCurrentText(str(value))

    # --- Heuristic for known widget patterns (fallbacks) ---
    elif hasattr(widget, "combo") and hasattr(widget, "argsField"):
        widget.combo.setCurrentText(value.get("name", ""))
        widget.argsField.setText(value.get("args", ""))

    elif hasattr(widget, "data") and isinstance(value, list):
        widget.data = value
        if hasattr(widget, "previewLabel"):
            widget.previewLabel.setText(f"{len(value)} graphics")