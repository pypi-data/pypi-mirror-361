#17 : UnicodeDecodeError
========================

If I run the following on Debian stable (Python 2.5)::

    import locale
    locale.setlocale(locale.LC_ALL,'fr_BE')
    try:
        open('nonexisting_file')
    except Exception,e:
        print e
        
Then I get the following result::

    lsaffre@lino:~$ python tmp.py
    [Errno 2] Aucun fichier ou r▒pertoire de ce type: 'nonexisting_file'

There should be written "répertoire", not "r▒pertoire". 

When I replace the line ``print e`` by ``print unicode(e)`` 
(or if I otherwise try to convert `e` to a unicode string), 
then I get::

  UnicodeDecodeError: 'ascii' codec can't decode byte 0xe9 in position 28: ordinal not in range(128)

To reproduce this, you must have some french locale installed. 
It probably doesn't need to be the Belgian version `fr_BE`.


Hier noch eine Beobachtung. Das Folgende funktioniert fehlerfrei::
    
  >>> us = u'Art.60 § 7'
  >>> s = "Example (%s)" % us
  >>> print(s)
  Example (Art.60 § 7)


Das funktioniert, weil der (normale) String ``s`` durch 
die Operation mit ``%`` in einen Unicode-String 
konvertiert wird, wenn der an ``%s`` eingefügter Stelle 
ein Unicode-String ist (das ist im Kapitel 
`5.6.2. String Formatting Operations 
<http://docs.python.org/library/stdtypes.html#string-formatting-operations>`_
der Python-Dokumentation in der Bemerkung 6 dokumentiert.

Dieser Trick funktioniert aber nicht mit Django's Model-Instanzen, 
wenn deren ``__unicode__`` Zeichen enthält, die nicht in den 128 ersten Zeichen 
des ASCII-Satz enthalten sind. Der folgende Code bewirkt deshalb 
einen UnicodeDecodeError::

    from django.utils.encoding import force_unicode
    class Model:
        def __str__(self):
            if hasattr(self, '__unicode__'):
                return force_unicode(self).encode('utf-8')
            return '%s object' % self.__class__.__name__
            
        def __unicode__(self):
            return u'Art.60 § 7'

    us = Model()
    s = "Example (%s)" % us
    type(s)
    unicode(s)
    
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 16: ordinal not in range(128)    

Die Python-Doku zu 
`object.__str__() <http://docs.python.org/reference/datamodel.html?highlight=__str__#object.__str__>`_ 
besagt lediglich "The return value must be a string object."

Das Problem ist, dass Djangos `Model.__str__` keinen reinen ASCII-String zurück gibt, 
sondern einen UTF-8-codierten basestring, der also ggf. auch Zeichen über 128 
enthalten kann.

Ich würde das in Django wie folgt ändern::

  import sys
  from django.utils.encoding import force_unicode
  class Model:
      def __str__(self):
          if hasattr(self, '__unicode__'):
              return force_unicode(self).encode(sys.getdefaultencoding(),'replace')
          return '%s object' % self.__class__.__name__
          
      def __unicode__(self):
          return u'Art.60 § 7'

  i = Model()
  s = "Example (%s)" % i
  type(s)
  unicode(s)

En attendant ist der einfachste Workaround, dass ich Strings, die per ``%s`` 
eine Model-Instanz eingefügt bekommen sollen, selber als Unicode definiere. 
Also::

  s = "Example (%s)" % i
  
ersetzen durch::

  s = u"Example (%s)" % i

