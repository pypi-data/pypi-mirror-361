name: Build Wheels

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

jobs:
  # Linux builds
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install diskcache_rs --find-links dist --force-reinstall
          python -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist

  # Linux cross-compilation
  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64, armv7]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
      - uses: uraimo/run-on-arch-action@v3.0.1
        if: matrix.target != 'ppc64le'
        name: Install built wheel
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip curl
            curl -LsSf https://astral.sh/uv/install.sh | sh
          run: |
            source $HOME/.local/bin/env
            uv pip install diskcache_rs --find-links dist/ --force-reinstall --system
            python3 -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-cross-${{ matrix.target }}
          path: dist

  # musllinux builds
  musllinux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
      - name: Install built wheel
        if: matrix.target == 'x86_64-unknown-linux-musl'
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:latest
          options: -v ${{ github.workspace }}:/io -w /io
          run: |
            apk add py3-pip curl python3-dev
            curl -LsSf https://astral.sh/uv/install.sh | sh
            source $HOME/.local/bin/env
            # Try to create virtual environment, fallback to --system if venv not available
            if python3 -m venv /tmp/test_env 2>/dev/null; then
              source /tmp/test_env/bin/activate
              uv pip install diskcache_rs --find-links /io/dist/ --force-reinstall
            else
              echo "venv not available, using --system flag"
              uv pip install diskcache_rs --find-links /io/dist/ --force-reinstall --system
            fi
            python3 -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.target }}
          path: dist

  # musllinux cross-compilation
  musllinux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - target: aarch64-unknown-linux-musl
            arch: aarch64
          - target: armv7-unknown-linux-musleabihf
            arch: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Install built wheel
        with:
          arch: ${{ matrix.platform.arch }}
          distro: alpine_latest
          githubToken: ${{ github.token }}
          install: |
            apk add py3-pip curl python3-dev
            curl -LsSf https://astral.sh/uv/install.sh | sh
          run: |
            source $HOME/.local/bin/env
            # Try to create virtual environment, fallback to --system if venv not available
            if python3 -m venv /tmp/test_env 2>/dev/null; then
              source /tmp/test_env/bin/activate
              uv pip install diskcache_rs --find-links dist/ --force-reinstall
            else
              echo "venv not available, using --system flag"
              uv pip install diskcache_rs --find-links dist/ --force-reinstall --system
            fi
            python3 -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-cross-${{ matrix.platform.target }}
          path: dist

  # Windows builds
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: ${{ matrix.target }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Install built wheel
        run: |
          pip install diskcache_rs --find-links dist --force-reinstall
          python -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  # macOS builds
  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: x64
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --sdist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Install built wheel - x86_64
        run: |
          pip install diskcache_rs --find-links dist --force-reinstall
          python -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          target: universal2-apple-darwin
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Install built wheel - universal2
        run: |
          pip install diskcache_rs --find-links dist --force-reinstall
          python -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos
          path: dist
