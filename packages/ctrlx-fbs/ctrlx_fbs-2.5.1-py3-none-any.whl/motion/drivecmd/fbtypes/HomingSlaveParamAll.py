# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of all slave axes parameters 
class HomingSlaveParamAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HomingSlaveParamAll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHomingSlaveParamAll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HomingSlaveParamAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all slave parameters
    # HomingSlaveParamAll
    def HomingSlaveParamAll(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.drivecmd.fbtypes.HomingSlaveParamSingle import HomingSlaveParamSingle
            obj = HomingSlaveParamSingle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HomingSlaveParamAll
    def HomingSlaveParamAllLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HomingSlaveParamAll
    def HomingSlaveParamAllIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def HomingSlaveParamAllStart(builder): builder.StartObject(1)
def Start(builder):
    return HomingSlaveParamAllStart(builder)
def HomingSlaveParamAllAddHomingSlaveParamAll(builder, homingSlaveParamAll): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(homingSlaveParamAll), 0)
def AddHomingSlaveParamAll(builder, homingSlaveParamAll):
    return HomingSlaveParamAllAddHomingSlaveParamAll(builder, homingSlaveParamAll)
def HomingSlaveParamAllStartHomingSlaveParamAllVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartHomingSlaveParamAllVector(builder, numElems):
    return HomingSlaveParamAllStartHomingSlaveParamAllVector(builder, numElems)
def HomingSlaveParamAllEnd(builder): return builder.EndObject()
def End(builder):
    return HomingSlaveParamAllEnd(builder)
import motion.drivecmd.fbtypes.HomingSlaveParamSingle
try:
    from typing import List
except:
    pass

class HomingSlaveParamAllT(object):

    # HomingSlaveParamAllT
    def __init__(self):
        self.homingSlaveParamAll = None  # type: List[motion.drivecmd.fbtypes.HomingSlaveParamSingle.HomingSlaveParamSingleT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        homingSlaveParamAll = HomingSlaveParamAll()
        homingSlaveParamAll.Init(buf, pos)
        return cls.InitFromObj(homingSlaveParamAll)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, homingSlaveParamAll):
        x = HomingSlaveParamAllT()
        x._UnPack(homingSlaveParamAll)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.homingSlaveParamAll == other.homingSlaveParamAll

    # HomingSlaveParamAllT
    def _UnPack(self, homingSlaveParamAll):
        if homingSlaveParamAll is None:
            return
        if not homingSlaveParamAll.HomingSlaveParamAllIsNone():
            self.homingSlaveParamAll = []
            for i in range(homingSlaveParamAll.HomingSlaveParamAllLength()):
                if homingSlaveParamAll.HomingSlaveParamAll(i) is None:
                    self.homingSlaveParamAll.append(None)
                else:
                    homingSlaveParamSingle_ = motion.drivecmd.fbtypes.HomingSlaveParamSingle.HomingSlaveParamSingleT.InitFromObj(homingSlaveParamAll.HomingSlaveParamAll(i))
                    self.homingSlaveParamAll.append(homingSlaveParamSingle_)

    # HomingSlaveParamAllT
    def Pack(self, builder):
        if self.homingSlaveParamAll is not None:
            homingSlaveParamAlllist = []
            for i in range(len(self.homingSlaveParamAll)):
                homingSlaveParamAlllist.append(self.homingSlaveParamAll[i].Pack(builder))
            HomingSlaveParamAllStartHomingSlaveParamAllVector(builder, len(self.homingSlaveParamAll))
            for i in reversed(range(len(self.homingSlaveParamAll))):
                builder.PrependUOffsetTRelative(homingSlaveParamAlllist[i])
            homingSlaveParamAll = builder.EndVector()
        HomingSlaveParamAllStart(builder)
        if self.homingSlaveParamAll is not None:
            HomingSlaveParamAllAddHomingSlaveParamAll(builder, homingSlaveParamAll)
        homingSlaveParamAll = HomingSlaveParamAllEnd(builder)
        return homingSlaveParamAll
