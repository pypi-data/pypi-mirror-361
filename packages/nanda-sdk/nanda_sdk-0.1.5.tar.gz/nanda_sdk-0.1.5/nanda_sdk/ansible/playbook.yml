---
- name: Setup Internet of Agents 
  hosts: servers
  become: yes
  vars:
    cert_path: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"
    key_path: "/etc/letsencrypt/live/{{ domain_name }}/privkey.pem"
    venv_path: "/opt/internet_of_agents/venv"

  tasks:
    - name: Install required packages
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - git
          - nginx
          - snapd
        state: present
        update_cache: yes

    - name: Install core snap
      command: snap install core
      args:
        creates: /snap/bin/core

    - name: Refresh core snap
      command: snap refresh core

    - name: Install certbot via snap
      command: snap install --classic certbot
      args:
        creates: /snap/bin/certbot

    - name: Create symlink for certbot
      file:
        src: /snap/bin/certbot
        dest: /usr/bin/certbot
        state: link
        force: yes

    - name: Create certificates directory
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - /etc/letsencrypt/live
        - /etc/letsencrypt/archive

    - name: Stop Nginx to free port 80
      service:
        name: nginx
        state: stopped

    - name: Generate SSL certificates
      command: "certbot certonly --standalone -d {{ domain_name }} --non-interactive --agree-tos --email admin@{{ domain_name }}"
      register: certbot_result
      changed_when: certbot_result.rc == 0
      failed_when: certbot_result.rc != 0 and 'already exists' not in certbot_result.stderr

    - name: Start Nginx after certificate generation
      service:
        name: nginx
        state: started
      when: certbot_result.rc == 0

    - name: Clone internet_of_agents repository
      git:
        repo: "{{ github_repo }}"
        dest: /opt/internet_of_agents
        version: main
        force: yes
        clone: yes
        update: yes
        accept_hostkey: yes

    - name: Create Python virtual environment
      command: python3 -m venv {{ venv_path }}
      args:
        creates: "{{ venv_path }}"

    - name: Install Python requirements in virtual environment
      pip:
        requirements: /opt/internet_of_agents/requirements.txt
        state: present
        virtualenv: "{{ venv_path }}"

    - name: Create .bashrc directory if it doesn't exist
      file:
        path: /root/.bashrc
        state: touch
        mode: '0644'

    - name: Add Anthropic API key to .bashrc
      lineinfile:
        path: /root/.bashrc
        line: 'export ANTHROPIC_API_KEY="{{ anthropic_api_key }}"'
        state: present

    - name: Add Smithery API key to .bashrc
      lineinfile:
        path: /root/.bashrc
        line: 'export SMITHERY_API_KEY="{{ smithery_api_key }}"'
        state: present

    - name: Add virtual environment activation to .bashrc
      lineinfile:
        path: /root/.bashrc
        line: 'source {{ venv_path }}/bin/activate'
        state: present

    - name: Make start_running_agents.sh executable
      file:
        path: /opt/internet_of_agents/agents/start_running_agents.sh
        mode: '0755'

    - name: Create environment file
      copy:
        dest: /etc/internet_of_agents.env
        content: |
          ANTHROPIC_API_KEY={{ anthropic_api_key }}
          VIRTUAL_ENV={{ venv_path }}
          AGENT_ID_PREFIX={{ agent_id_prefix }}
          DOMAIN_NAME={{ domain_name }}
          SMITHERY_API_KEY={{ smithery_api_key }}
          REGISTRY_URL={{ registry_url }}
          {% if num_agents is defined %}
          NUM_AGENTS={{ num_agents }}
          {% endif %}
        mode: '0644'

    - name: Create systemd service for internet_of_agents
      template:
        src: templates/internet_of_agents.service.j2
        dest: /etc/systemd/system/internet_of_agents.service
        mode: '0644'

    - name: Start and enable internet_of_agents service
      systemd:
        name: internet_of_agents
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Display agent link
      debug:
        msg: |
          ===================================================
          Your agent is now ready! Access your agent{% if num_agents is defined and num_agents > 1 %}s{% endif %} at:
          {% if num_agents is defined and num_agents > 1 %}
          {% for i in range(num_agents) %}
             Agent {{ i + 1 }}:||||      https://chat.nanda-registry.com/landing.html?agentId={% if 'nanda-registry.com' in domain_name %}agentm{% else %}agents{% endif %}{{ agent_id_prefix }}{{ i }}      ||||
          {% endfor %}
          {% else %}
          ||||   https://chat.nanda-registry.com/landing.html?agentId={% if 'nanda-registry.com' in domain_name %}agentm{% else %}agents{% endif %}{{ agent_id_prefix }}0    ||||
          {% endif %}
          ===================================================
      no_log: false 
