# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The type of event, that is transfered.
    # E.g.: "types/events/ExampleEvent"
    # EventInfo
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The node, that fired the event.
    # E.g.: diagnosis/warning
    # EventInfo
    def SourceNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the source of the event.
    # EventInfo
    def SourceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # optional, otherwise filled by provider.
    # Format is FILETIME
    # EventInfo
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # optional, otherwise filled by provider.
    # EventInfo
    def SequenceNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def EventInfoStart(builder): builder.StartObject(5)
def Start(builder):
    return EventInfoStart(builder)
def EventInfoAddEventType(builder, eventType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(eventType), 0)
def AddEventType(builder, eventType):
    return EventInfoAddEventType(builder, eventType)
def EventInfoAddSourceNode(builder, sourceNode): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sourceNode), 0)
def AddSourceNode(builder, sourceNode):
    return EventInfoAddSourceNode(builder, sourceNode)
def EventInfoAddSourceName(builder, sourceName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(sourceName), 0)
def AddSourceName(builder, sourceName):
    return EventInfoAddSourceName(builder, sourceName)
def EventInfoAddTimestamp(builder, timestamp): builder.PrependUint64Slot(3, timestamp, 0)
def AddTimestamp(builder, timestamp):
    return EventInfoAddTimestamp(builder, timestamp)
def EventInfoAddSequenceNumber(builder, sequenceNumber): builder.PrependUint64Slot(4, sequenceNumber, 0)
def AddSequenceNumber(builder, sequenceNumber):
    return EventInfoAddSequenceNumber(builder, sequenceNumber)
def EventInfoEnd(builder): return builder.EndObject()
def End(builder):
    return EventInfoEnd(builder)

class EventInfoT(object):

    # EventInfoT
    def __init__(self):
        self.eventType = None  # type: str
        self.sourceNode = None  # type: str
        self.sourceName = None  # type: str
        self.timestamp = 0  # type: int
        self.sequenceNumber = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        eventInfo = EventInfo()
        eventInfo.Init(buf, pos)
        return cls.InitFromObj(eventInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, eventInfo):
        x = EventInfoT()
        x._UnPack(eventInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.eventType == other.eventType and \
            self.sourceNode == other.sourceNode and \
            self.sourceName == other.sourceName and \
            self.timestamp == other.timestamp and \
            self.sequenceNumber == other.sequenceNumber

    # EventInfoT
    def _UnPack(self, eventInfo):
        if eventInfo is None:
            return
        self.eventType = eventInfo.EventType()
        self.sourceNode = eventInfo.SourceNode()
        self.sourceName = eventInfo.SourceName()
        self.timestamp = eventInfo.Timestamp()
        self.sequenceNumber = eventInfo.SequenceNumber()

    # EventInfoT
    def Pack(self, builder):
        if self.eventType is not None:
            eventType = builder.CreateString(self.eventType)
        if self.sourceNode is not None:
            sourceNode = builder.CreateString(self.sourceNode)
        if self.sourceName is not None:
            sourceName = builder.CreateString(self.sourceName)
        EventInfoStart(builder)
        if self.eventType is not None:
            EventInfoAddEventType(builder, eventType)
        if self.sourceNode is not None:
            EventInfoAddSourceNode(builder, sourceNode)
        if self.sourceName is not None:
            EventInfoAddSourceName(builder, sourceName)
        EventInfoAddTimestamp(builder, self.timestamp)
        EventInfoAddSequenceNumber(builder, self.sequenceNumber)
        eventInfo = EventInfoEnd(builder)
        return eventInfo
