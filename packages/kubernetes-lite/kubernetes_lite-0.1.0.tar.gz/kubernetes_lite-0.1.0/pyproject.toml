[project]
name = "kubernetes_lite"
description = 'Kubernetes Lite is a "liteweight" wrapper around various golang Kubernetes libraries using gopy'
readme = {file = "README.md", content-type = "text/markdown"}
dynamic = ["version"]
requires-python = ">=3.11"
license = "Apache-2.0"
classifiers=[
    "Programming Language :: Go",
    "Development Status :: 4 - Beta"
]
dependencies = [
    "orjson~=3.10.13"
]

[project.optional-dependencies]

gen = [
    "pybindgen",
    "typer",
    "pip-licenses"
]

test = [
    "pytest~=8.3.4",
    "pytest-cov>=2.10.1",
    "deepdiff~=7.0.1",
    "kubernetes~=30.1.0"
]

perf = [
    "typer",
    "kubernetes~=30.1.0",
    "kr8s",
    "psutil",
]


docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocstrings-python",
    "mkdocs-autorefs"
]
##################################### Build ####################################

[build-system]
requires = ["setuptools", "setuptools-golang", "setuptools-scm", "pybindgen"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["kubernetes_lite*"]

[tool.setuptools.package-data]
# Include binary wrapper files
"kubernetes_lite" = ["**/*.h","**/*.c","**/*.go","**/*.mod","**/*.sum"]
"kubernetes_lite.licenses" = ["**/*"]

[tool.setuptools_scm]
version_file = "kubernetes_lite/_version.py"
fallback_version = "0.0.0.dev1"

############################# Cross Platform Build #############################

[tool.cibuildwheel]
# Only build wheels for 64 bit CPython versions. Skip 3.13 on Windows due to incompatible builds
archs = ["auto64"]
build = "cp3*"
skip = "cp313*-win*"
# Before builds install the gen requests
before-build = 'cd {package} && eval "$(python3 -m scripts.install_build_reqs)"'

[tool.cibuildwheel.windows]
# For window we need to use CMD format and also regen to make sure we have the correct
# linkings
before-build = 'cd {package} && python3 -m scripts.install_build_reqs >cmd.bat && call cmd.bat && make gen'
# This env path is hard coded for Github Actions
environment = """
PATH="C:\\\\Users\\\\RUNNER~1\\\\AppData\\\\Local\\\\Temp\\\\go\\\\bin;$PATH"
"""

##################################### Formatting ###############################

[tool.ruff]
line-length = 120
target-version = "py311"

exclude = [
    "kubernetes_lite/wrapper",
    "kubernetes_lite/go_wrapper",
    "setup.py",
]

[tool.ruff.lint]
preview = true
select = [
    "F", # Pyflakes
    "E", # pycodestyle (error)
    "W", # pycodestyle (warning)
    # "C90", # mccabe
    "I", # isort
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "YTT", # flake8-2020
    # "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "ASYNC1", # flake8-trio
    # "S", # flake8-bandit
    # "BLE", # flake8-blind-except
    # "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    # "COM", # flake8-commas
    "CPY", # flake8-copyright
    # "C4", # flake8-comprehensions
    # "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    # "DJ", # flake8-django
    # "EM", # flake8-errmsg
    # "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    # "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    # "G", # flake8-logging-format
    # "INP", # flake8-no-pep420
    # "PIE", # flake8-pie
    # "T20", # flake8-print
    "PYI", # flake8-pyi
    # "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    # "RET", # flake8-return
    # "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    # "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    # "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    # "TD", # flake8-todos
    # "FIX", # flake8-fixme
    # "ERA", # eradicate
    "PD", # pandas-vet
    # "PGH", # pygrep-hooks  ...Use specific rule codes when ignoring type issues (this is a good one, should enable!)
    "PL", # Pylint
    # "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "AIR", # Airflow
    "PERF", # Perflint
    # "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # Ruff-specific rules
]

ignore = [
    "D415", # pydocstyle punctionation. Who needs periods/exclamation marks?
    "D205", # pydocstyle summary vs description. We don't need both
    "E266", # I like comment bars for dividing files. Feel free to remove/change
    "A005", # Its okay to shadow a builtin module as long as its a standalone file and not a module
    "TC001", # Ignore type-checking block. It doesn't impact runtime performance
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-copyright]
notice-rgx = "\\# \\** \\#\\n\\# \\(C\\) Copyright IBM Corporation 2024\\. *\\#\\n\\# *\\#\\n\\# The source code for this program is not published or otherwise *\\#\\n\\# divested of its trade secrets, irrespective of what has been *\\#\\n\\# deposited with the U.S. Copyright Office. *\\#\\n\\# \\** \\#\\n\\# SPDX\\-License\\-Identifier\\: Apache\\-2\\.0"

[tool.ruff.lint.isort]
known-local-folder = ["kubernetes_lite", "tests"]
section-order = ["future", "standard-library", "first-party", "local-folder", "third-party"]


##################################### Testing ############################

[tool.pytest.ini_options]
pythonpath = [
  ".",
]
addopts = "-p no:warnings --cov-report term-missing:skip-covered -cov kubernetes_lite"


##################################### License Gathering ##################
[tool.pip-licences]
from = "mixed"
