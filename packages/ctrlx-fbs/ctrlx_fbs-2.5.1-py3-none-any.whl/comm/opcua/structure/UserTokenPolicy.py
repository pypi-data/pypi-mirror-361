# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserTokenPolicy(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserTokenPolicy()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserTokenPolicy(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserTokenPolicy
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserTokenPolicy
    def PolicyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserTokenPolicy
    def TokenType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserTokenPolicy
    def IssuedTokenType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserTokenPolicy
    def IssuerEndpointUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserTokenPolicy
    def SecurityPolicyUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def UserTokenPolicyStart(builder): builder.StartObject(5)
def Start(builder):
    return UserTokenPolicyStart(builder)
def UserTokenPolicyAddPolicyId(builder, policyId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(policyId), 0)
def AddPolicyId(builder, policyId):
    return UserTokenPolicyAddPolicyId(builder, policyId)
def UserTokenPolicyAddTokenType(builder, tokenType): builder.PrependInt32Slot(1, tokenType, 0)
def AddTokenType(builder, tokenType):
    return UserTokenPolicyAddTokenType(builder, tokenType)
def UserTokenPolicyAddIssuedTokenType(builder, issuedTokenType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(issuedTokenType), 0)
def AddIssuedTokenType(builder, issuedTokenType):
    return UserTokenPolicyAddIssuedTokenType(builder, issuedTokenType)
def UserTokenPolicyAddIssuerEndpointUrl(builder, issuerEndpointUrl): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(issuerEndpointUrl), 0)
def AddIssuerEndpointUrl(builder, issuerEndpointUrl):
    return UserTokenPolicyAddIssuerEndpointUrl(builder, issuerEndpointUrl)
def UserTokenPolicyAddSecurityPolicyUri(builder, securityPolicyUri): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(securityPolicyUri), 0)
def AddSecurityPolicyUri(builder, securityPolicyUri):
    return UserTokenPolicyAddSecurityPolicyUri(builder, securityPolicyUri)
def UserTokenPolicyEnd(builder): return builder.EndObject()
def End(builder):
    return UserTokenPolicyEnd(builder)

class UserTokenPolicyT(object):

    # UserTokenPolicyT
    def __init__(self):
        self.policyId = None  # type: str
        self.tokenType = 0  # type: int
        self.issuedTokenType = None  # type: str
        self.issuerEndpointUrl = None  # type: str
        self.securityPolicyUri = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        userTokenPolicy = UserTokenPolicy()
        userTokenPolicy.Init(buf, pos)
        return cls.InitFromObj(userTokenPolicy)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, userTokenPolicy):
        x = UserTokenPolicyT()
        x._UnPack(userTokenPolicy)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.policyId == other.policyId and \
            self.tokenType == other.tokenType and \
            self.issuedTokenType == other.issuedTokenType and \
            self.issuerEndpointUrl == other.issuerEndpointUrl and \
            self.securityPolicyUri == other.securityPolicyUri

    # UserTokenPolicyT
    def _UnPack(self, userTokenPolicy):
        if userTokenPolicy is None:
            return
        self.policyId = userTokenPolicy.PolicyId()
        self.tokenType = userTokenPolicy.TokenType()
        self.issuedTokenType = userTokenPolicy.IssuedTokenType()
        self.issuerEndpointUrl = userTokenPolicy.IssuerEndpointUrl()
        self.securityPolicyUri = userTokenPolicy.SecurityPolicyUri()

    # UserTokenPolicyT
    def Pack(self, builder):
        if self.policyId is not None:
            policyId = builder.CreateString(self.policyId)
        if self.issuedTokenType is not None:
            issuedTokenType = builder.CreateString(self.issuedTokenType)
        if self.issuerEndpointUrl is not None:
            issuerEndpointUrl = builder.CreateString(self.issuerEndpointUrl)
        if self.securityPolicyUri is not None:
            securityPolicyUri = builder.CreateString(self.securityPolicyUri)
        UserTokenPolicyStart(builder)
        if self.policyId is not None:
            UserTokenPolicyAddPolicyId(builder, policyId)
        UserTokenPolicyAddTokenType(builder, self.tokenType)
        if self.issuedTokenType is not None:
            UserTokenPolicyAddIssuedTokenType(builder, issuedTokenType)
        if self.issuerEndpointUrl is not None:
            UserTokenPolicyAddIssuerEndpointUrl(builder, issuerEndpointUrl)
        if self.securityPolicyUri is not None:
            UserTokenPolicyAddSecurityPolicyUri(builder, securityPolicyUri)
        userTokenPolicy = UserTokenPolicyEnd(builder)
        return userTokenPolicy
