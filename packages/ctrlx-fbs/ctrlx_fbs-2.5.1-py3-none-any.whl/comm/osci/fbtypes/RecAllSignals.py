# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RecAllSignals(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RecAllSignals()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRecAllSignals(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RecAllSignals
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RecAllSignals
    def AllSignals(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.osci.fbtypes.RecChannel import RecChannel
            obj = RecChannel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecAllSignals
    def AllSignalsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecAllSignals
    def AllSignalsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def RecAllSignalsStart(builder): builder.StartObject(1)
def Start(builder):
    return RecAllSignalsStart(builder)
def RecAllSignalsAddAllSignals(builder, allSignals): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(allSignals), 0)
def AddAllSignals(builder, allSignals):
    return RecAllSignalsAddAllSignals(builder, allSignals)
def RecAllSignalsStartAllSignalsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAllSignalsVector(builder, numElems):
    return RecAllSignalsStartAllSignalsVector(builder, numElems)
def RecAllSignalsEnd(builder): return builder.EndObject()
def End(builder):
    return RecAllSignalsEnd(builder)
import comm.osci.fbtypes.RecChannel
try:
    from typing import List
except:
    pass

class RecAllSignalsT(object):

    # RecAllSignalsT
    def __init__(self):
        self.allSignals = None  # type: List[comm.osci.fbtypes.RecChannel.RecChannelT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        recAllSignals = RecAllSignals()
        recAllSignals.Init(buf, pos)
        return cls.InitFromObj(recAllSignals)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, recAllSignals):
        x = RecAllSignalsT()
        x._UnPack(recAllSignals)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.allSignals == other.allSignals

    # RecAllSignalsT
    def _UnPack(self, recAllSignals):
        if recAllSignals is None:
            return
        if not recAllSignals.AllSignalsIsNone():
            self.allSignals = []
            for i in range(recAllSignals.AllSignalsLength()):
                if recAllSignals.AllSignals(i) is None:
                    self.allSignals.append(None)
                else:
                    recChannel_ = comm.osci.fbtypes.RecChannel.RecChannelT.InitFromObj(recAllSignals.AllSignals(i))
                    self.allSignals.append(recChannel_)

    # RecAllSignalsT
    def Pack(self, builder):
        if self.allSignals is not None:
            allSignalslist = []
            for i in range(len(self.allSignals)):
                allSignalslist.append(self.allSignals[i].Pack(builder))
            RecAllSignalsStartAllSignalsVector(builder, len(self.allSignals))
            for i in reversed(range(len(self.allSignals))):
                builder.PrependUOffsetTRelative(allSignalslist[i])
            allSignals = builder.EndVector()
        RecAllSignalsStart(builder)
        if self.allSignals is not None:
            RecAllSignalsAddAllSignals(builder, allSignals)
        recAllSignals = RecAllSignalsEnd(builder)
        return recAllSignals
