# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NetworkAddressUrlDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NetworkAddressUrlDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNetworkAddressUrlDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NetworkAddressUrlDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NetworkAddressUrlDataType
    def NetworkInterface(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NetworkAddressUrlDataType
    def Url(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def NetworkAddressUrlDataTypeStart(builder): builder.StartObject(2)
def Start(builder):
    return NetworkAddressUrlDataTypeStart(builder)
def NetworkAddressUrlDataTypeAddNetworkInterface(builder, networkInterface): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(networkInterface), 0)
def AddNetworkInterface(builder, networkInterface):
    return NetworkAddressUrlDataTypeAddNetworkInterface(builder, networkInterface)
def NetworkAddressUrlDataTypeAddUrl(builder, url): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)
def AddUrl(builder, url):
    return NetworkAddressUrlDataTypeAddUrl(builder, url)
def NetworkAddressUrlDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return NetworkAddressUrlDataTypeEnd(builder)

class NetworkAddressUrlDataTypeT(object):

    # NetworkAddressUrlDataTypeT
    def __init__(self):
        self.networkInterface = None  # type: str
        self.url = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        networkAddressUrlDataType = NetworkAddressUrlDataType()
        networkAddressUrlDataType.Init(buf, pos)
        return cls.InitFromObj(networkAddressUrlDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, networkAddressUrlDataType):
        x = NetworkAddressUrlDataTypeT()
        x._UnPack(networkAddressUrlDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.networkInterface == other.networkInterface and \
            self.url == other.url

    # NetworkAddressUrlDataTypeT
    def _UnPack(self, networkAddressUrlDataType):
        if networkAddressUrlDataType is None:
            return
        self.networkInterface = networkAddressUrlDataType.NetworkInterface()
        self.url = networkAddressUrlDataType.Url()

    # NetworkAddressUrlDataTypeT
    def Pack(self, builder):
        if self.networkInterface is not None:
            networkInterface = builder.CreateString(self.networkInterface)
        if self.url is not None:
            url = builder.CreateString(self.url)
        NetworkAddressUrlDataTypeStart(builder)
        if self.networkInterface is not None:
            NetworkAddressUrlDataTypeAddNetworkInterface(builder, networkInterface)
        if self.url is not None:
            NetworkAddressUrlDataTypeAddUrl(builder, url)
        networkAddressUrlDataType = NetworkAddressUrlDataTypeEnd(builder)
        return networkAddressUrlDataType
