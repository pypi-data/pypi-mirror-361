# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Pipeline.proto
# Protobuf Python Version: 4.25.3
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2
import daimojo.Column_pb2 as Column__pb2
import daimojo.AsType_pb2 as AsType__pb2
import daimojo.BinaryOp_pb2 as BinaryOp__pb2
import daimojo.Math_pb2 as Math__pb2
try:
  Map__pb2 = Math__pb2.Map__pb2
except AttributeError:
  Map__pb2 = Math__pb2.Map_pb2
try:
  Column__pb2 = Math__pb2.Column__pb2
except AttributeError:
  Column__pb2 = Math__pb2.Column_pb2
import daimojo.Agg_pb2 as Agg__pb2
import daimojo.Datepart_pb2 as Datepart__pb2
import daimojo.NA_pb2 as NA__pb2
import daimojo.Text_pb2 as Text__pb2
import daimojo.Map_pb2 as Map__pb2
try:
  Column__pb2 = Map__pb2.Column__pb2
except AttributeError:
  Column__pb2 = Map__pb2.Column_pb2
import daimojo.Tree_pb2 as Tree__pb2
import daimojo.NewColumn_pb2 as NewColumn__pb2
import daimojo.Ftrl_pb2 as Ftrl__pb2
try:
  Map__pb2 = Ftrl__pb2.Map__pb2
except AttributeError:
  Map__pb2 = Ftrl__pb2.Map_pb2
try:
  Column__pb2 = Ftrl__pb2.Column__pb2
except AttributeError:
  Column__pb2 = Ftrl__pb2.Column_pb2
import daimojo.Group_pb2 as Group__pb2
import daimojo.Custom_pb2 as Custom__pb2
try:
  Map__pb2 = Custom__pb2.Map__pb2
except AttributeError:
  Map__pb2 = Custom__pb2.Map_pb2
try:
  Column__pb2 = Custom__pb2.Column__pb2
except AttributeError:
  Column__pb2 = Custom__pb2.Column_pb2
import daimojo.Problem_pb2 as Problem__pb2
try:
  Map__pb2 = Problem__pb2.Map__pb2
except AttributeError:
  Map__pb2 = Problem__pb2.Map_pb2
try:
  Column__pb2 = Problem__pb2.Column__pb2
except AttributeError:
  Column__pb2 = Problem__pb2.Column_pb2

from daimojo.Column_pb2 import *
from daimojo.AsType_pb2 import *
from daimojo.BinaryOp_pb2 import *
from daimojo.Math_pb2 import *
from daimojo.Agg_pb2 import *
from daimojo.Datepart_pb2 import *
from daimojo.NA_pb2 import *
from daimojo.Text_pb2 import *
from daimojo.Map_pb2 import *
from daimojo.Tree_pb2 import *
from daimojo.NewColumn_pb2 import *
from daimojo.Ftrl_pb2 import *
from daimojo.Group_pb2 import *
from daimojo.Custom_pb2 import *
from daimojo.Problem_pb2 import *

DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0ePipeline.proto\x12\tmojo.spec\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x0c\x43olumn.proto\x1a\x0c\x41sType.proto\x1a\x0e\x42inaryOp.proto\x1a\nMath.proto\x1a\tAgg.proto\x1a\x0e\x44\x61tepart.proto\x1a\x08NA.proto\x1a\nText.proto\x1a\tMap.proto\x1a\nTree.proto\x1a\x0fNewColumn.proto\x1a\nFtrl.proto\x1a\x0bGroup.proto\x1a\x0c\x43ustom.proto\x1a\rProblem.proto\"\xcd\x05\n\x08Pipeline\x12\x14\n\x0cmojo_version\x18\x01 \x01(\x05\x12\x0c\n\x04uuid\x18\x02 \x01(\t\x12\x15\n\rexperiment_id\x18\x03 \x01(\t\x12\x30\n\x0ctime_created\x18\x04 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x16\n\x0emissing_values\x18\x05 \x03(\t\x12\"\n\x08\x66\x65\x61tures\x18\x06 \x01(\x0b\x32\x10.mojo.spec.Frame\x12!\n\x07outputs\x18\x07 \x01(\x0b\x32\x10.mojo.spec.Frame\x12\"\n\x08interims\x18\x08 \x01(\x0b\x32\x10.mojo.spec.Frame\x12\x32\n\x0ftransformations\x18\t \x03(\x0b\x32\x19.mojo.spec.Transformation\x12\x13\n\x0bidl_version\x18\n \x01(\x05\x12@\n\rformat_string\x18\x0b \x03(\x0b\x32%.mojo.spec.Pipeline.FormatStringEntryB\x02\x18\x01\x12=\n\x15transformation_groups\x18\x0c \x03(\x0b\x32\x1e.mojo.spec.TransformationGroup\x12\x13\n\x0b\x64\x61i_version\x18\r \x01(\t\x12%\n\x0btransformed\x18\x0e \x01(\x0b\x32\x10.mojo.spec.Frame\x12#\n\x07license\x18\x0f \x01(\x0b\x32\x12.mojo.spec.License\x12\x33\n\x0borig_matrix\x18\x10 \x03(\x0b\x32\x1e.mojo.spec.OrigMatrixSparseRow\x12#\n\x07problem\x18\x11 \x01(\x0b\x32\x12.mojo.spec.Problem\x12\x17\n\x0f\x65xperiment_name\x18\x12 \x01(\t\x1a\x33\n\x11\x46ormatStringEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"T\n\x13OrigMatrixSparseRow\x12\x18\n\x10raw_feature_name\x18\x01 \x01(\t\x12#\n\x03row\x18\x02 \x03(\x0b\x32\x16.mojo.spec.SparseValue\"7\n\x0bSparseValue\x12\x19\n\x11orig_feature_name\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\x01\"X\n\x07License\x12\x1d\n\x15license_serial_number\x18\x01 \x01(\t\x12\x14\n\x0clicense_type\x18\x02 \x01(\t\x12\x18\n\x10licensee_user_id\x18\x03 \x01(\t\"+\n\x05\x46rame\x12\"\n\x07\x63olumns\x18\x01 \x03(\x0b\x32\x11.mojo.spec.Column\"\x1f\n\nExecPipeOp\x12\x11\n\tfile_name\x18\x01 \x01(\t\"6\n\tXGBoostOp\x12\x16\n\x0enum_tree_limit\x18\x01 \x01(\x05\x12\x11\n\tfile_name\x18\x02 \x01(\t\"7\n\nLightGBMOp\x12\x16\n\x0enum_tree_limit\x18\x01 \x01(\x05\x12\x11\n\tfile_name\x18\x02 \x01(\t\"7\n\nCatBoostOp\x12\x16\n\x0enum_tree_limit\x18\x01 \x01(\x05\x12\x11\n\tfile_name\x18\x02 \x01(\t\"V\n\x0cTensorFlowOp\x12\x11\n\tfile_name\x18\x01 \x01(\t\x12\x0e\n\x06inputs\x18\x02 \x03(\t\x12\x0f\n\x07outputs\x18\x03 \x03(\t\x12\x12\n\ntf_version\x18\x04 \x01(\t\"\x7f\n\tPytorchOp\x12\x11\n\tfile_name\x18\x01 \x01(\t\x12\x17\n\x0fpytorch_version\x18\x02 \x01(\t\x12\x14\n\x0ctensor_sizes\x18\x03 \x03(\x05\x12\x30\n\x0ctensor_types\x18\x04 \x03(\x0e\x32\x1a.mojo.spec.TorchTensorType\"\"\n\x0fLinearBlenderOp\x12\x0f\n\x07weights\x18\x01 \x03(\x01\":\n\x0bImgResizeOp\x12\x15\n\rtarget_height\x18\x01 \x01(\x05\x12\x14\n\x0ctarget_width\x18\x02 \x01(\x05\"M\n\x17ImageNetPreprocessingOp\x12\x32\n\x04mode\x18\x01 \x01(\x0e\x32$.mojo.spec.ImageNetPreprocessingMode\"\x0c\n\nIdentityOp\"\x8b\x0f\n\x0eTransformation\x12\x10\n\x08group_id\x18\x01 \x01(\x05\x12\x0e\n\x06inputs\x18\x02 \x03(\t\x12\x0f\n\x07outputs\x18\x03 \x03(\t\x12\x33\n\x0f\x63onst_binary_op\x18\x04 \x01(\x0b\x32\x18.mojo.spec.ConstBinaryOpH\x00\x12(\n\tbinary_op\x18\x05 \x01(\x0b\x32\x13.mojo.spec.BinaryOpH\x00\x12)\n\nas_type_op\x18\x06 \x01(\x0b\x32\x13.mojo.spec.AsTypeOpH\x00\x12\"\n\x06\x65xp_op\x18\x07 \x01(\x0b\x32\x10.mojo.spec.ExpOpH\x00\x12&\n\x08\x65xpm1_op\x18\x08 \x01(\x0b\x32\x12.mojo.spec.ExpM1OpH\x00\x12&\n\x08scale_op\x18\t \x01(\x0b\x32\x12.mojo.spec.ScaleOpH\x00\x12*\n\nsigmoid_op\x18\n \x01(\x0b\x32\x14.mojo.spec.SigmoidOpH\x00\x12&\n\x08power_op\x18\x0b \x01(\x0b\x32\x12.mojo.spec.PowerOpH\x00\x12\"\n\x06log_op\x18\x0c \x01(\x0b\x32\x10.mojo.spec.LogOpH\x00\x12$\n\x07sqrt_op\x18\r \x01(\x0b\x32\x11.mojo.spec.SqrtOpH\x00\x12*\n\nsoftmax_op\x18\x0e \x01(\x0b\x32\x14.mojo.spec.SoftmaxOpH\x00\x12\"\n\x06\x61gg_op\x18\x0f \x01(\x0b\x32\x10.mojo.spec.AggOpH\x00\x12(\n\tmedian_op\x18\x10 \x01(\x0b\x32\x13.mojo.spec.MedianOpH\x00\x12,\n\x0b\x64\x61tepart_op\x18\x11 \x01(\x0b\x32\x15.mojo.spec.DatepartOpH\x00\x12(\n\tmoment_op\x18\x12 \x01(\x0b\x32\x13.mojo.spec.MomentOpH\x00\x12.\n\x0cnormalize_op\x18\x13 \x01(\x0b\x32\x16.mojo.spec.NormalizeOpH\x00\x12%\n\x08is_na_op\x18\x14 \x01(\x0b\x32\x11.mojo.spec.IsNaOpH\x00\x12)\n\nfill_na_op\x18\x15 \x01(\x0b\x32\x13.mojo.spec.FillNaOpH\x00\x12-\n\x0cimpute_na_op\x18\x16 \x01(\x0b\x32\x15.mojo.spec.ImputeNaOpH\x00\x12$\n\x07\x63lip_op\x18\x17 \x01(\x0b\x32\x11.mojo.spec.ClipOpH\x00\x12(\n\tkmeans_op\x18\x18 \x01(\x0b\x32\x13.mojo.spec.KMeansOpH\x00\x12\x37\n\x11matrix_product_op\x18\x19 \x01(\x0b\x32\x1a.mojo.spec.MatrixProductOpH\x00\x12;\n\x13\x63ount_vectorizer_op\x18\x1a \x01(\x0b\x32\x1c.mojo.spec.CountVectorizerOpH\x00\x12*\n\nreplace_op\x18\x1b \x01(\x0b\x32\x14.mojo.spec.ReplaceOpH\x00\x12\x33\n\x0finterval_map_op\x18\x1c \x01(\x0b\x32\x18.mojo.spec.IntervalMapOpH\x00\x12\"\n\x06map_op\x18\x1d \x01(\x0b\x32\x10.mojo.spec.MapOpH\x00\x12-\n\x0c\x65xec_pipe_op\x18\x1e \x01(\x0b\x32\x15.mojo.spec.ExecPipeOpH\x00\x12&\n\x06xgb_op\x18\x1f \x01(\x0b\x32\x14.mojo.spec.XGBoostOpH\x00\x12(\n\x07lgbm_op\x18  \x01(\x0b\x32\x15.mojo.spec.LightGBMOpH\x00\x12,\n\nnew_col_op\x18! \x01(\x0b\x32\x16.mojo.spec.NewColumnOpH\x00\x12(\n\x05tf_op\x18\" \x01(\x0b\x32\x17.mojo.spec.TensorFlowOpH\x00\x12\x35\n\x0ekeras_token_op\x18# \x01(\x0b\x32\x1b.mojo.spec.KerasTokenizerOpH\x00\x12$\n\x07\x66trl_op\x18$ \x01(\x0b\x32\x11.mojo.spec.FtrlOpH\x00\x12\x39\n\x10pytorch_token_op\x18% \x01(\x0b\x32\x1d.mojo.spec.PytorchTokenizerOpH\x00\x12*\n\npytorch_op\x18& \x01(\x0b\x32\x14.mojo.spec.PytorchOpH\x00\x12(\n\tcustom_op\x18\' \x01(\x0b\x32\x13.mojo.spec.CustomOpH\x00\x12\x37\n\x11linear_blender_op\x18( \x01(\x0b\x32\x1a.mojo.spec.LinearBlenderOpH\x00\x12/\n\rimg_resize_op\x18) \x01(\x0b\x32\x16.mojo.spec.ImgResizeOpH\x00\x12G\n\x19imagenet_preprocessing_op\x18* \x01(\x0b\x32\".mojo.spec.ImageNetPreprocessingOpH\x00\x12,\n\x0bidentity_op\x18+ \x01(\x0b\x32\x15.mojo.spec.IdentityOpH\x00\x12,\n\x0b\x63\x61tboost_op\x18, \x01(\x0b\x32\x15.mojo.spec.CatBoostOpH\x00\x42\x06\n\x04Type*\x98\x02\n\x0fTorchTensorType\x12\x17\n\x13UNKNOWN_TENSOR_TYPE\x10\x00\x12\x1a\n\x16PYTORCH_TENSOR_FLOAT32\x10\x01\x12\x1a\n\x16PYTORCH_TENSOR_FLOAT64\x10\x02\x12\x1a\n\x16PYTORCH_TENSOR_FLOAT16\x10\x03\x12\x18\n\x14PYTORCH_TENSOR_UINT8\x10\x04\x12\x17\n\x13PYTORCH_TENSOR_INT8\x10\x05\x12\x18\n\x14PYTORCH_TENSOR_INT16\x10\x06\x12\x18\n\x14PYTORCH_TENSOR_INT32\x10\x07\x12\x18\n\x14PYTORCH_TENSOR_INT64\x10\x08\x12\x17\n\x13PYTORCH_TENSOR_BOOL\x10\t*\xa3\x01\n\x19ImageNetPreprocessingMode\x12&\n\"UNKNOWN_IMAGENET_PREPROCESSNG_MODE\x10\x00\x12\x1c\n\x18IMAGENET_PREPROCESSNG_TF\x10\x01\x12\x1f\n\x1bIMAGENET_PREPROCESSNG_TORCH\x10\x02\x12\x1f\n\x1bIMAGENET_PREPROCESSNG_CAFFE\x10\x03P\x01P\x02P\x03P\x04P\x05P\x06P\x07P\x08P\tP\nP\x0bP\x0cP\rP\x0eP\x0f\x62\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'Pipeline_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  DESCRIPTOR._options = None
  _globals['_PIPELINE_FORMATSTRINGENTRY']._options = None
  _globals['_PIPELINE_FORMATSTRINGENTRY']._serialized_options = b'8\001'
  _globals['_PIPELINE'].fields_by_name['format_string']._options = None
  _globals['_PIPELINE'].fields_by_name['format_string']._serialized_options = b'\030\001'
  _globals['_TORCHTENSORTYPE']._serialized_start=3803
  _globals['_TORCHTENSORTYPE']._serialized_end=4083
  _globals['_IMAGENETPREPROCESSINGMODE']._serialized_start=4086
  _globals['_IMAGENETPREPROCESSINGMODE']._serialized_end=4249
  _globals['_PIPELINE']._serialized_start=262
  _globals['_PIPELINE']._serialized_end=979
  _globals['_PIPELINE_FORMATSTRINGENTRY']._serialized_start=928
  _globals['_PIPELINE_FORMATSTRINGENTRY']._serialized_end=979
  _globals['_ORIGMATRIXSPARSEROW']._serialized_start=981
  _globals['_ORIGMATRIXSPARSEROW']._serialized_end=1065
  _globals['_SPARSEVALUE']._serialized_start=1067
  _globals['_SPARSEVALUE']._serialized_end=1122
  _globals['_LICENSE']._serialized_start=1124
  _globals['_LICENSE']._serialized_end=1212
  _globals['_FRAME']._serialized_start=1214
  _globals['_FRAME']._serialized_end=1257
  _globals['_EXECPIPEOP']._serialized_start=1259
  _globals['_EXECPIPEOP']._serialized_end=1290
  _globals['_XGBOOSTOP']._serialized_start=1292
  _globals['_XGBOOSTOP']._serialized_end=1346
  _globals['_LIGHTGBMOP']._serialized_start=1348
  _globals['_LIGHTGBMOP']._serialized_end=1403
  _globals['_CATBOOSTOP']._serialized_start=1405
  _globals['_CATBOOSTOP']._serialized_end=1460
  _globals['_TENSORFLOWOP']._serialized_start=1462
  _globals['_TENSORFLOWOP']._serialized_end=1548
  _globals['_PYTORCHOP']._serialized_start=1550
  _globals['_PYTORCHOP']._serialized_end=1677
  _globals['_LINEARBLENDEROP']._serialized_start=1679
  _globals['_LINEARBLENDEROP']._serialized_end=1713
  _globals['_IMGRESIZEOP']._serialized_start=1715
  _globals['_IMGRESIZEOP']._serialized_end=1773
  _globals['_IMAGENETPREPROCESSINGOP']._serialized_start=1775
  _globals['_IMAGENETPREPROCESSINGOP']._serialized_end=1852
  _globals['_IDENTITYOP']._serialized_start=1854
  _globals['_IDENTITYOP']._serialized_end=1866
  _globals['_TRANSFORMATION']._serialized_start=1869
  _globals['_TRANSFORMATION']._serialized_end=3800
# @@protoc_insertion_point(module_scope)
