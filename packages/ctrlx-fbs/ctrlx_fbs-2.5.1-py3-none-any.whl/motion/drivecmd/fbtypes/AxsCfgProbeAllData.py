# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of all probe data
class AxsCfgProbeAllData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgProbeAllData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgProbeAllData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgProbeAllData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # all probes
    # AxsCfgProbeAllData
    def Probe1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.drivecmd.fbtypes.AxsCfgProbeData import AxsCfgProbeData
            obj = AxsCfgProbeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AxsCfgProbeAllData
    def Probe2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.drivecmd.fbtypes.AxsCfgProbeData import AxsCfgProbeData
            obj = AxsCfgProbeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCfgProbeAllDataStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCfgProbeAllDataStart(builder)
def AxsCfgProbeAllDataAddProbe1(builder, probe1): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(probe1), 0)
def AddProbe1(builder, probe1):
    return AxsCfgProbeAllDataAddProbe1(builder, probe1)
def AxsCfgProbeAllDataAddProbe2(builder, probe2): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(probe2), 0)
def AddProbe2(builder, probe2):
    return AxsCfgProbeAllDataAddProbe2(builder, probe2)
def AxsCfgProbeAllDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgProbeAllDataEnd(builder)
import motion.drivecmd.fbtypes.AxsCfgProbeData
try:
    from typing import Optional
except:
    pass

class AxsCfgProbeAllDataT(object):

    # AxsCfgProbeAllDataT
    def __init__(self):
        self.probe1 = None  # type: Optional[motion.drivecmd.fbtypes.AxsCfgProbeData.AxsCfgProbeDataT]
        self.probe2 = None  # type: Optional[motion.drivecmd.fbtypes.AxsCfgProbeData.AxsCfgProbeDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgProbeAllData = AxsCfgProbeAllData()
        axsCfgProbeAllData.Init(buf, pos)
        return cls.InitFromObj(axsCfgProbeAllData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgProbeAllData):
        x = AxsCfgProbeAllDataT()
        x._UnPack(axsCfgProbeAllData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.probe1 == other.probe1 and \
            self.probe2 == other.probe2

    # AxsCfgProbeAllDataT
    def _UnPack(self, axsCfgProbeAllData):
        if axsCfgProbeAllData is None:
            return
        if axsCfgProbeAllData.Probe1() is not None:
            self.probe1 = motion.drivecmd.fbtypes.AxsCfgProbeData.AxsCfgProbeDataT.InitFromObj(axsCfgProbeAllData.Probe1())
        if axsCfgProbeAllData.Probe2() is not None:
            self.probe2 = motion.drivecmd.fbtypes.AxsCfgProbeData.AxsCfgProbeDataT.InitFromObj(axsCfgProbeAllData.Probe2())

    # AxsCfgProbeAllDataT
    def Pack(self, builder):
        if self.probe1 is not None:
            probe1 = self.probe1.Pack(builder)
        if self.probe2 is not None:
            probe2 = self.probe2.Pack(builder)
        AxsCfgProbeAllDataStart(builder)
        if self.probe1 is not None:
            AxsCfgProbeAllDataAddProbe1(builder, probe1)
        if self.probe2 is not None:
            AxsCfgProbeAllDataAddProbe2(builder, probe2)
        axsCfgProbeAllData = AxsCfgProbeAllDataEnd(builder)
        return axsCfgProbeAllData
