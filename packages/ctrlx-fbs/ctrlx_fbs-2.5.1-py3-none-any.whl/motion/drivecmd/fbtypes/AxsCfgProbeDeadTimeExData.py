# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of extended (control) dead time compensation 
class AxsCfgProbeDeadTimeExData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgProbeDeadTimeExData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgProbeDeadTimeExData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgProbeDeadTimeExData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # positive edge dead time compensation to control in Nano seconds
    # AxsCfgProbeDeadTimeExData
    def PosEdgeNs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # negative edge dead time compensation to control in Nano seconds
    # AxsCfgProbeDeadTimeExData
    def NegEdgeNs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def AxsCfgProbeDeadTimeExDataStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCfgProbeDeadTimeExDataStart(builder)
def AxsCfgProbeDeadTimeExDataAddPosEdgeNs(builder, posEdgeNs): builder.PrependFloat64Slot(0, posEdgeNs, 0.0)
def AddPosEdgeNs(builder, posEdgeNs):
    return AxsCfgProbeDeadTimeExDataAddPosEdgeNs(builder, posEdgeNs)
def AxsCfgProbeDeadTimeExDataAddNegEdgeNs(builder, negEdgeNs): builder.PrependFloat64Slot(1, negEdgeNs, 0.0)
def AddNegEdgeNs(builder, negEdgeNs):
    return AxsCfgProbeDeadTimeExDataAddNegEdgeNs(builder, negEdgeNs)
def AxsCfgProbeDeadTimeExDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgProbeDeadTimeExDataEnd(builder)

class AxsCfgProbeDeadTimeExDataT(object):

    # AxsCfgProbeDeadTimeExDataT
    def __init__(self):
        self.posEdgeNs = 0.0  # type: float
        self.negEdgeNs = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgProbeDeadTimeExData = AxsCfgProbeDeadTimeExData()
        axsCfgProbeDeadTimeExData.Init(buf, pos)
        return cls.InitFromObj(axsCfgProbeDeadTimeExData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgProbeDeadTimeExData):
        x = AxsCfgProbeDeadTimeExDataT()
        x._UnPack(axsCfgProbeDeadTimeExData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.posEdgeNs == other.posEdgeNs and \
            self.negEdgeNs == other.negEdgeNs

    # AxsCfgProbeDeadTimeExDataT
    def _UnPack(self, axsCfgProbeDeadTimeExData):
        if axsCfgProbeDeadTimeExData is None:
            return
        self.posEdgeNs = axsCfgProbeDeadTimeExData.PosEdgeNs()
        self.negEdgeNs = axsCfgProbeDeadTimeExData.NegEdgeNs()

    # AxsCfgProbeDeadTimeExDataT
    def Pack(self, builder):
        AxsCfgProbeDeadTimeExDataStart(builder)
        AxsCfgProbeDeadTimeExDataAddPosEdgeNs(builder, self.posEdgeNs)
        AxsCfgProbeDeadTimeExDataAddNegEdgeNs(builder, self.negEdgeNs)
        axsCfgProbeDeadTimeExData = AxsCfgProbeDeadTimeExDataEnd(builder)
        return axsCfgProbeDeadTimeExData
