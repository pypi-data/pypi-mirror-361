# -*- coding: utf-8 -*-

"""
cuadraai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from cuadraai.api_helper import APIHelper
from cuadraai.configuration import Server
from cuadraai.http.api_response import ApiResponse
from cuadraai.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from cuadraai.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from cuadraai.models.usage_calculation_ex import UsageCalculationEx
from cuadraai.models.total_usage_ex import TotalUsageEx
from cuadraai.exceptions.error_response_exception import ErrorResponseException


class UsageController(BaseController):

    """A Controller to access Endpoints in the cuadraai API."""
    def __init__(self, config):
        super(UsageController, self).__init__(config)

    def calculate_tokens(self,
                         body):
        """Does a POST request to /usage/tokenize.

        This endpoint allows you to calculate the usage, so you get an idea of
        the amount of tokens that will be consumed.

        Args:
            body (Chat): The request body parameter.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. Chat
                successfully processed.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/usage/tokenize')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UsageCalculationEx.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Bad request, read again our documentation or contact support for guidance.', ErrorResponseException)
            .local_error('401', 'Not authorized, check our OAuth2 doc.', ErrorResponseException)
            .local_error('500', 'Internal error, if this error persist, please contact support.', ErrorResponseException)
        ).execute()

    def total_usage(self):
        """Does a GET request to /usage/totals.

        This endpoint calculates the amount of tokens used by the user in the
        given month.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. Chat
                successfully processed.

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/usage/totals')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TotalUsageEx.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Bad request, read again our documentation or contact support for guidance.', ErrorResponseException)
            .local_error('401', 'Not authorized, check our OAuth2 doc.', ErrorResponseException)
            .local_error('500', 'Internal error, if this error persist, please contact support.', ErrorResponseException)
        ).execute()
