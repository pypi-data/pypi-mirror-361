# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SimpleTypeDescription(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SimpleTypeDescription()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSimpleTypeDescription(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SimpleTypeDescription
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SimpleTypeDescription
    def DataTypeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.NodeId import NodeId
            obj = NodeId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SimpleTypeDescription
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.QualifiedName import QualifiedName
            obj = QualifiedName()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SimpleTypeDescription
    def BaseDataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.NodeId import NodeId
            obj = NodeId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SimpleTypeDescription
    def BuiltInType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def SimpleTypeDescriptionStart(builder): builder.StartObject(4)
def Start(builder):
    return SimpleTypeDescriptionStart(builder)
def SimpleTypeDescriptionAddDataTypeId(builder, dataTypeId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dataTypeId), 0)
def AddDataTypeId(builder, dataTypeId):
    return SimpleTypeDescriptionAddDataTypeId(builder, dataTypeId)
def SimpleTypeDescriptionAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return SimpleTypeDescriptionAddName(builder, name)
def SimpleTypeDescriptionAddBaseDataType(builder, baseDataType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(baseDataType), 0)
def AddBaseDataType(builder, baseDataType):
    return SimpleTypeDescriptionAddBaseDataType(builder, baseDataType)
def SimpleTypeDescriptionAddBuiltInType(builder, builtInType): builder.PrependUint8Slot(3, builtInType, 0)
def AddBuiltInType(builder, builtInType):
    return SimpleTypeDescriptionAddBuiltInType(builder, builtInType)
def SimpleTypeDescriptionEnd(builder): return builder.EndObject()
def End(builder):
    return SimpleTypeDescriptionEnd(builder)
import comm.opcua.builtin.NodeId
import comm.opcua.builtin.QualifiedName
try:
    from typing import Optional
except:
    pass

class SimpleTypeDescriptionT(object):

    # SimpleTypeDescriptionT
    def __init__(self):
        self.dataTypeId = None  # type: Optional[comm.opcua.builtin.NodeId.NodeIdT]
        self.name = None  # type: Optional[comm.opcua.builtin.QualifiedName.QualifiedNameT]
        self.baseDataType = None  # type: Optional[comm.opcua.builtin.NodeId.NodeIdT]
        self.builtInType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        simpleTypeDescription = SimpleTypeDescription()
        simpleTypeDescription.Init(buf, pos)
        return cls.InitFromObj(simpleTypeDescription)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, simpleTypeDescription):
        x = SimpleTypeDescriptionT()
        x._UnPack(simpleTypeDescription)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dataTypeId == other.dataTypeId and \
            self.name == other.name and \
            self.baseDataType == other.baseDataType and \
            self.builtInType == other.builtInType

    # SimpleTypeDescriptionT
    def _UnPack(self, simpleTypeDescription):
        if simpleTypeDescription is None:
            return
        if simpleTypeDescription.DataTypeId() is not None:
            self.dataTypeId = comm.opcua.builtin.NodeId.NodeIdT.InitFromObj(simpleTypeDescription.DataTypeId())
        if simpleTypeDescription.Name() is not None:
            self.name = comm.opcua.builtin.QualifiedName.QualifiedNameT.InitFromObj(simpleTypeDescription.Name())
        if simpleTypeDescription.BaseDataType() is not None:
            self.baseDataType = comm.opcua.builtin.NodeId.NodeIdT.InitFromObj(simpleTypeDescription.BaseDataType())
        self.builtInType = simpleTypeDescription.BuiltInType()

    # SimpleTypeDescriptionT
    def Pack(self, builder):
        if self.dataTypeId is not None:
            dataTypeId = self.dataTypeId.Pack(builder)
        if self.name is not None:
            name = self.name.Pack(builder)
        if self.baseDataType is not None:
            baseDataType = self.baseDataType.Pack(builder)
        SimpleTypeDescriptionStart(builder)
        if self.dataTypeId is not None:
            SimpleTypeDescriptionAddDataTypeId(builder, dataTypeId)
        if self.name is not None:
            SimpleTypeDescriptionAddName(builder, name)
        if self.baseDataType is not None:
            SimpleTypeDescriptionAddBaseDataType(builder, baseDataType)
        SimpleTypeDescriptionAddBuiltInType(builder, self.builtInType)
        simpleTypeDescription = SimpleTypeDescriptionEnd(builder)
        return simpleTypeDescription
