# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DumpRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DumpRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDumpRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DumpRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DumpRequest
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DumpRequest
    def Datalength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def DumpRequestStart(builder): builder.StartObject(2)
def Start(builder):
    return DumpRequestStart(builder)
def DumpRequestAddOffset(builder, offset): builder.PrependUint32Slot(0, offset, 0)
def AddOffset(builder, offset):
    return DumpRequestAddOffset(builder, offset)
def DumpRequestAddDatalength(builder, datalength): builder.PrependUint32Slot(1, datalength, 0)
def AddDatalength(builder, datalength):
    return DumpRequestAddDatalength(builder, datalength)
def DumpRequestEnd(builder): return builder.EndObject()
def End(builder):
    return DumpRequestEnd(builder)

class DumpRequestT(object):

    # DumpRequestT
    def __init__(self):
        self.offset = 0  # type: int
        self.datalength = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dumpRequest = DumpRequest()
        dumpRequest.Init(buf, pos)
        return cls.InitFromObj(dumpRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dumpRequest):
        x = DumpRequestT()
        x._UnPack(dumpRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.offset == other.offset and \
            self.datalength == other.datalength

    # DumpRequestT
    def _UnPack(self, dumpRequest):
        if dumpRequest is None:
            return
        self.offset = dumpRequest.Offset()
        self.datalength = dumpRequest.Datalength()

    # DumpRequestT
    def Pack(self, builder):
        DumpRequestStart(builder)
        DumpRequestAddOffset(builder, self.offset)
        DumpRequestAddDatalength(builder, self.datalength)
        dumpRequest = DumpRequestEnd(builder)
        return dumpRequest
