# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TypeShort(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TypeShort()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTypeShort(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TypeShort
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TypeShort
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def TypeShortStart(builder): builder.StartObject(1)
def Start(builder):
    return TypeShortStart(builder)
def TypeShortAddValue(builder, value): builder.PrependInt16Slot(0, value, 0)
def AddValue(builder, value):
    return TypeShortAddValue(builder, value)
def TypeShortEnd(builder): return builder.EndObject()
def End(builder):
    return TypeShortEnd(builder)

class TypeShortT(object):

    # TypeShortT
    def __init__(self):
        self.value = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        typeShort = TypeShort()
        typeShort.Init(buf, pos)
        return cls.InitFromObj(typeShort)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, typeShort):
        x = TypeShortT()
        x._UnPack(typeShort)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value

    # TypeShortT
    def _UnPack(self, typeShort):
        if typeShort is None:
            return
        self.value = typeShort.Value()

    # TypeShortT
    def Pack(self, builder):
        TypeShortStart(builder)
        TypeShortAddValue(builder, self.value)
        typeShort = TypeShortEnd(builder)
        return typeShort
