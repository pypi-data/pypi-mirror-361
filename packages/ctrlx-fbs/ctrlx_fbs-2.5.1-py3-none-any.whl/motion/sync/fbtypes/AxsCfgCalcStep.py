# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single calculation step
class AxsCfgCalcStep(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgCalcStep()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgCalcStep(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgCalcStep
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ID of the calculation step
    # AxsCfgCalcStep
    def StepId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Type string of the calculation step
    # AxsCfgCalcStep
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # configuration of inputs of the calcStep; define from which step/master the inputs are taken
    # AxsCfgCalcStep
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AxsCfgCalcStep
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsCfgCalcStep
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # all parameter values of the calculation step
    # AxsCfgCalcStep
    def Parameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsCfgCalcStepParamAll import AxsCfgCalcStepParamAll
            obj = AxsCfgCalcStepParamAll()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCfgCalcStepStart(builder): builder.StartObject(4)
def Start(builder):
    return AxsCfgCalcStepStart(builder)
def AxsCfgCalcStepAddStepId(builder, stepId): builder.PrependUint32Slot(0, stepId, 0)
def AddStepId(builder, stepId):
    return AxsCfgCalcStepAddStepId(builder, stepId)
def AxsCfgCalcStepAddType(builder, type): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def AddType(builder, type):
    return AxsCfgCalcStepAddType(builder, type)
def AxsCfgCalcStepAddInputs(builder, inputs): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)
def AddInputs(builder, inputs):
    return AxsCfgCalcStepAddInputs(builder, inputs)
def AxsCfgCalcStepStartInputsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartInputsVector(builder, numElems):
    return AxsCfgCalcStepStartInputsVector(builder, numElems)
def AxsCfgCalcStepAddParameter(builder, parameter): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(parameter), 0)
def AddParameter(builder, parameter):
    return AxsCfgCalcStepAddParameter(builder, parameter)
def AxsCfgCalcStepEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgCalcStepEnd(builder)
import motion.sync.fbtypes.AxsCfgCalcStepParamAll
try:
    from typing import List, Optional
except:
    pass

class AxsCfgCalcStepT(object):

    # AxsCfgCalcStepT
    def __init__(self):
        self.stepId = 0  # type: int
        self.type = None  # type: str
        self.inputs = None  # type: List[str]
        self.parameter = None  # type: Optional[motion.sync.fbtypes.AxsCfgCalcStepParamAll.AxsCfgCalcStepParamAllT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgCalcStep = AxsCfgCalcStep()
        axsCfgCalcStep.Init(buf, pos)
        return cls.InitFromObj(axsCfgCalcStep)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgCalcStep):
        x = AxsCfgCalcStepT()
        x._UnPack(axsCfgCalcStep)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.stepId == other.stepId and \
            self.type == other.type and \
            self.inputs == other.inputs and \
            self.parameter == other.parameter

    # AxsCfgCalcStepT
    def _UnPack(self, axsCfgCalcStep):
        if axsCfgCalcStep is None:
            return
        self.stepId = axsCfgCalcStep.StepId()
        self.type = axsCfgCalcStep.Type()
        if not axsCfgCalcStep.InputsIsNone():
            self.inputs = []
            for i in range(axsCfgCalcStep.InputsLength()):
                self.inputs.append(axsCfgCalcStep.Inputs(i))
        if axsCfgCalcStep.Parameter() is not None:
            self.parameter = motion.sync.fbtypes.AxsCfgCalcStepParamAll.AxsCfgCalcStepParamAllT.InitFromObj(axsCfgCalcStep.Parameter())

    # AxsCfgCalcStepT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.inputs is not None:
            inputslist = []
            for i in range(len(self.inputs)):
                inputslist.append(builder.CreateString(self.inputs[i]))
            AxsCfgCalcStepStartInputsVector(builder, len(self.inputs))
            for i in reversed(range(len(self.inputs))):
                builder.PrependUOffsetTRelative(inputslist[i])
            inputs = builder.EndVector()
        if self.parameter is not None:
            parameter = self.parameter.Pack(builder)
        AxsCfgCalcStepStart(builder)
        AxsCfgCalcStepAddStepId(builder, self.stepId)
        if self.type is not None:
            AxsCfgCalcStepAddType(builder, type)
        if self.inputs is not None:
            AxsCfgCalcStepAddInputs(builder, inputs)
        if self.parameter is not None:
            AxsCfgCalcStepAddParameter(builder, parameter)
        axsCfgCalcStep = AxsCfgCalcStepEnd(builder)
        return axsCfgCalcStep
