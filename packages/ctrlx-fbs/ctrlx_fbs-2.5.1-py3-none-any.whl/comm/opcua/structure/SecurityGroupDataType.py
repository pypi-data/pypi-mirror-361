# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SecurityGroupDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SecurityGroupDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSecurityGroupDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SecurityGroupDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SecurityGroupDataType
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SecurityGroupDataType
    def SecurityGroupFolder(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SecurityGroupDataType
    def SecurityGroupFolderLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SecurityGroupDataType
    def SecurityGroupFolderIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # SecurityGroupDataType
    def KeyLifetime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SecurityGroupDataType
    def SecurityPolicyUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SecurityGroupDataType
    def MaxFutureKeyCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SecurityGroupDataType
    def MaxPastKeyCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SecurityGroupDataType
    def SecurityGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SecurityGroupDataType
    def RolePermissions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.RolePermissionType import RolePermissionType
            obj = RolePermissionType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SecurityGroupDataType
    def RolePermissionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SecurityGroupDataType
    def RolePermissionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # SecurityGroupDataType
    def GroupProperties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.KeyValuePair import KeyValuePair
            obj = KeyValuePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SecurityGroupDataType
    def GroupPropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SecurityGroupDataType
    def GroupPropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def SecurityGroupDataTypeStart(builder): builder.StartObject(9)
def Start(builder):
    return SecurityGroupDataTypeStart(builder)
def SecurityGroupDataTypeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return SecurityGroupDataTypeAddName(builder, name)
def SecurityGroupDataTypeAddSecurityGroupFolder(builder, securityGroupFolder): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(securityGroupFolder), 0)
def AddSecurityGroupFolder(builder, securityGroupFolder):
    return SecurityGroupDataTypeAddSecurityGroupFolder(builder, securityGroupFolder)
def SecurityGroupDataTypeStartSecurityGroupFolderVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSecurityGroupFolderVector(builder, numElems):
    return SecurityGroupDataTypeStartSecurityGroupFolderVector(builder, numElems)
def SecurityGroupDataTypeAddKeyLifetime(builder, keyLifetime): builder.PrependFloat64Slot(2, keyLifetime, 0.0)
def AddKeyLifetime(builder, keyLifetime):
    return SecurityGroupDataTypeAddKeyLifetime(builder, keyLifetime)
def SecurityGroupDataTypeAddSecurityPolicyUri(builder, securityPolicyUri): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(securityPolicyUri), 0)
def AddSecurityPolicyUri(builder, securityPolicyUri):
    return SecurityGroupDataTypeAddSecurityPolicyUri(builder, securityPolicyUri)
def SecurityGroupDataTypeAddMaxFutureKeyCount(builder, maxFutureKeyCount): builder.PrependUint32Slot(4, maxFutureKeyCount, 0)
def AddMaxFutureKeyCount(builder, maxFutureKeyCount):
    return SecurityGroupDataTypeAddMaxFutureKeyCount(builder, maxFutureKeyCount)
def SecurityGroupDataTypeAddMaxPastKeyCount(builder, maxPastKeyCount): builder.PrependUint32Slot(5, maxPastKeyCount, 0)
def AddMaxPastKeyCount(builder, maxPastKeyCount):
    return SecurityGroupDataTypeAddMaxPastKeyCount(builder, maxPastKeyCount)
def SecurityGroupDataTypeAddSecurityGroupId(builder, securityGroupId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(securityGroupId), 0)
def AddSecurityGroupId(builder, securityGroupId):
    return SecurityGroupDataTypeAddSecurityGroupId(builder, securityGroupId)
def SecurityGroupDataTypeAddRolePermissions(builder, rolePermissions): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rolePermissions), 0)
def AddRolePermissions(builder, rolePermissions):
    return SecurityGroupDataTypeAddRolePermissions(builder, rolePermissions)
def SecurityGroupDataTypeStartRolePermissionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRolePermissionsVector(builder, numElems):
    return SecurityGroupDataTypeStartRolePermissionsVector(builder, numElems)
def SecurityGroupDataTypeAddGroupProperties(builder, groupProperties): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(groupProperties), 0)
def AddGroupProperties(builder, groupProperties):
    return SecurityGroupDataTypeAddGroupProperties(builder, groupProperties)
def SecurityGroupDataTypeStartGroupPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartGroupPropertiesVector(builder, numElems):
    return SecurityGroupDataTypeStartGroupPropertiesVector(builder, numElems)
def SecurityGroupDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return SecurityGroupDataTypeEnd(builder)
import comm.opcua.structure.KeyValuePair
import comm.opcua.structure.RolePermissionType
try:
    from typing import List
except:
    pass

class SecurityGroupDataTypeT(object):

    # SecurityGroupDataTypeT
    def __init__(self):
        self.name = None  # type: str
        self.securityGroupFolder = None  # type: List[str]
        self.keyLifetime = 0.0  # type: float
        self.securityPolicyUri = None  # type: str
        self.maxFutureKeyCount = 0  # type: int
        self.maxPastKeyCount = 0  # type: int
        self.securityGroupId = None  # type: str
        self.rolePermissions = None  # type: List[comm.opcua.structure.RolePermissionType.RolePermissionTypeT]
        self.groupProperties = None  # type: List[comm.opcua.structure.KeyValuePair.KeyValuePairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        securityGroupDataType = SecurityGroupDataType()
        securityGroupDataType.Init(buf, pos)
        return cls.InitFromObj(securityGroupDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, securityGroupDataType):
        x = SecurityGroupDataTypeT()
        x._UnPack(securityGroupDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.securityGroupFolder == other.securityGroupFolder and \
            self.keyLifetime == other.keyLifetime and \
            self.securityPolicyUri == other.securityPolicyUri and \
            self.maxFutureKeyCount == other.maxFutureKeyCount and \
            self.maxPastKeyCount == other.maxPastKeyCount and \
            self.securityGroupId == other.securityGroupId and \
            self.rolePermissions == other.rolePermissions and \
            self.groupProperties == other.groupProperties

    # SecurityGroupDataTypeT
    def _UnPack(self, securityGroupDataType):
        if securityGroupDataType is None:
            return
        self.name = securityGroupDataType.Name()
        if not securityGroupDataType.SecurityGroupFolderIsNone():
            self.securityGroupFolder = []
            for i in range(securityGroupDataType.SecurityGroupFolderLength()):
                self.securityGroupFolder.append(securityGroupDataType.SecurityGroupFolder(i))
        self.keyLifetime = securityGroupDataType.KeyLifetime()
        self.securityPolicyUri = securityGroupDataType.SecurityPolicyUri()
        self.maxFutureKeyCount = securityGroupDataType.MaxFutureKeyCount()
        self.maxPastKeyCount = securityGroupDataType.MaxPastKeyCount()
        self.securityGroupId = securityGroupDataType.SecurityGroupId()
        if not securityGroupDataType.RolePermissionsIsNone():
            self.rolePermissions = []
            for i in range(securityGroupDataType.RolePermissionsLength()):
                if securityGroupDataType.RolePermissions(i) is None:
                    self.rolePermissions.append(None)
                else:
                    rolePermissionType_ = comm.opcua.structure.RolePermissionType.RolePermissionTypeT.InitFromObj(securityGroupDataType.RolePermissions(i))
                    self.rolePermissions.append(rolePermissionType_)
        if not securityGroupDataType.GroupPropertiesIsNone():
            self.groupProperties = []
            for i in range(securityGroupDataType.GroupPropertiesLength()):
                if securityGroupDataType.GroupProperties(i) is None:
                    self.groupProperties.append(None)
                else:
                    keyValuePair_ = comm.opcua.structure.KeyValuePair.KeyValuePairT.InitFromObj(securityGroupDataType.GroupProperties(i))
                    self.groupProperties.append(keyValuePair_)

    # SecurityGroupDataTypeT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.securityGroupFolder is not None:
            securityGroupFolderlist = []
            for i in range(len(self.securityGroupFolder)):
                securityGroupFolderlist.append(builder.CreateString(self.securityGroupFolder[i]))
            SecurityGroupDataTypeStartSecurityGroupFolderVector(builder, len(self.securityGroupFolder))
            for i in reversed(range(len(self.securityGroupFolder))):
                builder.PrependUOffsetTRelative(securityGroupFolderlist[i])
            securityGroupFolder = builder.EndVector()
        if self.securityPolicyUri is not None:
            securityPolicyUri = builder.CreateString(self.securityPolicyUri)
        if self.securityGroupId is not None:
            securityGroupId = builder.CreateString(self.securityGroupId)
        if self.rolePermissions is not None:
            rolePermissionslist = []
            for i in range(len(self.rolePermissions)):
                rolePermissionslist.append(self.rolePermissions[i].Pack(builder))
            SecurityGroupDataTypeStartRolePermissionsVector(builder, len(self.rolePermissions))
            for i in reversed(range(len(self.rolePermissions))):
                builder.PrependUOffsetTRelative(rolePermissionslist[i])
            rolePermissions = builder.EndVector()
        if self.groupProperties is not None:
            groupPropertieslist = []
            for i in range(len(self.groupProperties)):
                groupPropertieslist.append(self.groupProperties[i].Pack(builder))
            SecurityGroupDataTypeStartGroupPropertiesVector(builder, len(self.groupProperties))
            for i in reversed(range(len(self.groupProperties))):
                builder.PrependUOffsetTRelative(groupPropertieslist[i])
            groupProperties = builder.EndVector()
        SecurityGroupDataTypeStart(builder)
        if self.name is not None:
            SecurityGroupDataTypeAddName(builder, name)
        if self.securityGroupFolder is not None:
            SecurityGroupDataTypeAddSecurityGroupFolder(builder, securityGroupFolder)
        SecurityGroupDataTypeAddKeyLifetime(builder, self.keyLifetime)
        if self.securityPolicyUri is not None:
            SecurityGroupDataTypeAddSecurityPolicyUri(builder, securityPolicyUri)
        SecurityGroupDataTypeAddMaxFutureKeyCount(builder, self.maxFutureKeyCount)
        SecurityGroupDataTypeAddMaxPastKeyCount(builder, self.maxPastKeyCount)
        if self.securityGroupId is not None:
            SecurityGroupDataTypeAddSecurityGroupId(builder, securityGroupId)
        if self.rolePermissions is not None:
            SecurityGroupDataTypeAddRolePermissions(builder, rolePermissions)
        if self.groupProperties is not None:
            SecurityGroupDataTypeAddGroupProperties(builder, groupProperties)
        securityGroupDataType = SecurityGroupDataTypeEnd(builder)
        return securityGroupDataType
