# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FileType

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GetPositionOutput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GetPositionOutput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGetPositionOutput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GetPositionOutput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GetPositionOutput
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def GetPositionOutputStart(builder): builder.StartObject(1)
def Start(builder):
    return GetPositionOutputStart(builder)
def GetPositionOutputAddPosition(builder, position): builder.PrependUint64Slot(0, position, 0)
def AddPosition(builder, position):
    return GetPositionOutputAddPosition(builder, position)
def GetPositionOutputEnd(builder): return builder.EndObject()
def End(builder):
    return GetPositionOutputEnd(builder)

class GetPositionOutputT(object):

    # GetPositionOutputT
    def __init__(self):
        self.position = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        getPositionOutput = GetPositionOutput()
        getPositionOutput.Init(buf, pos)
        return cls.InitFromObj(getPositionOutput)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, getPositionOutput):
        x = GetPositionOutputT()
        x._UnPack(getPositionOutput)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.position == other.position

    # GetPositionOutputT
    def _UnPack(self, getPositionOutput):
        if getPositionOutput is None:
            return
        self.position = getPositionOutput.Position()

    # GetPositionOutputT
    def Pack(self, builder):
        GetPositionOutputStart(builder)
        GetPositionOutputAddPosition(builder, self.position)
        getPositionOutput = GetPositionOutputEnd(builder)
        return getPositionOutput
