# coding: utf-8

"""
    spamapi

    Easily and directly scan and block phishing security threats.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpamDetectionAdvancedRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input_string': 'str',
        'model': 'str',
        'allow_unsolicited_sales': 'bool',
        'allow_promotional_content': 'bool',
        'allow_phishing': 'bool'
    }

    attribute_map = {
        'input_string': 'InputString',
        'model': 'Model',
        'allow_unsolicited_sales': 'AllowUnsolicitedSales',
        'allow_promotional_content': 'AllowPromotionalContent',
        'allow_phishing': 'AllowPhishing'
    }

    def __init__(self, input_string=None, model=None, allow_unsolicited_sales=None, allow_promotional_content=None, allow_phishing=None):  # noqa: E501
        """SpamDetectionAdvancedRequest - a model defined in Swagger"""  # noqa: E501

        self._input_string = None
        self._model = None
        self._allow_unsolicited_sales = None
        self._allow_promotional_content = None
        self._allow_phishing = None
        self.discriminator = None

        if input_string is not None:
            self.input_string = input_string
        if model is not None:
            self.model = model
        if allow_unsolicited_sales is not None:
            self.allow_unsolicited_sales = allow_unsolicited_sales
        if allow_promotional_content is not None:
            self.allow_promotional_content = allow_promotional_content
        if allow_phishing is not None:
            self.allow_phishing = allow_phishing

    @property
    def input_string(self):
        """Gets the input_string of this SpamDetectionAdvancedRequest.  # noqa: E501

        Input text string to detect spam against  # noqa: E501

        :return: The input_string of this SpamDetectionAdvancedRequest.  # noqa: E501
        :rtype: str
        """
        return self._input_string

    @input_string.setter
    def input_string(self, input_string):
        """Sets the input_string of this SpamDetectionAdvancedRequest.

        Input text string to detect spam against  # noqa: E501

        :param input_string: The input_string of this SpamDetectionAdvancedRequest.  # noqa: E501
        :type: str
        """

        self._input_string = input_string

    @property
    def model(self):
        """Gets the model of this SpamDetectionAdvancedRequest.  # noqa: E501

        Optional: Specify which AI model to use.  Possible choices are Normal and Advanced.  Default is Advanced.  # noqa: E501

        :return: The model of this SpamDetectionAdvancedRequest.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SpamDetectionAdvancedRequest.

        Optional: Specify which AI model to use.  Possible choices are Normal and Advanced.  Default is Advanced.  # noqa: E501

        :param model: The model of this SpamDetectionAdvancedRequest.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def allow_unsolicited_sales(self):
        """Gets the allow_unsolicited_sales of this SpamDetectionAdvancedRequest.  # noqa: E501

        True if unsolicited sales should be allowed, false otherwise  # noqa: E501

        :return: The allow_unsolicited_sales of this SpamDetectionAdvancedRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_unsolicited_sales

    @allow_unsolicited_sales.setter
    def allow_unsolicited_sales(self, allow_unsolicited_sales):
        """Sets the allow_unsolicited_sales of this SpamDetectionAdvancedRequest.

        True if unsolicited sales should be allowed, false otherwise  # noqa: E501

        :param allow_unsolicited_sales: The allow_unsolicited_sales of this SpamDetectionAdvancedRequest.  # noqa: E501
        :type: bool
        """

        self._allow_unsolicited_sales = allow_unsolicited_sales

    @property
    def allow_promotional_content(self):
        """Gets the allow_promotional_content of this SpamDetectionAdvancedRequest.  # noqa: E501

        True if promotional content should be allowed, false otherwise  # noqa: E501

        :return: The allow_promotional_content of this SpamDetectionAdvancedRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_promotional_content

    @allow_promotional_content.setter
    def allow_promotional_content(self, allow_promotional_content):
        """Sets the allow_promotional_content of this SpamDetectionAdvancedRequest.

        True if promotional content should be allowed, false otherwise  # noqa: E501

        :param allow_promotional_content: The allow_promotional_content of this SpamDetectionAdvancedRequest.  # noqa: E501
        :type: bool
        """

        self._allow_promotional_content = allow_promotional_content

    @property
    def allow_phishing(self):
        """Gets the allow_phishing of this SpamDetectionAdvancedRequest.  # noqa: E501

        True if phishing should be allowed, false otherwise  # noqa: E501

        :return: The allow_phishing of this SpamDetectionAdvancedRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_phishing

    @allow_phishing.setter
    def allow_phishing(self, allow_phishing):
        """Sets the allow_phishing of this SpamDetectionAdvancedRequest.

        True if phishing should be allowed, false otherwise  # noqa: E501

        :param allow_phishing: The allow_phishing of this SpamDetectionAdvancedRequest.  # noqa: E501
        :type: bool
        """

        self._allow_phishing = allow_phishing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpamDetectionAdvancedRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpamDetectionAdvancedRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
