# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of motion function 'belt axis'
class AxsCfgBelt(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgBelt()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgBelt(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgBelt
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # flag to configure if the axis is a belt axis
    # AxsCfgBelt
    def IsBeltAxis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # conversion factor between beltValue and axis value
    # AxsCfgBelt
    def BeltValConversionFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # name of the default coordinate system of the belt
    # AxsCfgBelt
    def BeltCoordSysNameDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # nominator unit part of the belt conversion factor ("Must be set for writing. If not set when reading, the unit from the belt configuration is used.")
    # AxsCfgBelt
    def NominatorUnitOfBeltConversionFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # denominator unit part of the belt conversion factor ("If not set, the standard unit of the axis is used.")
    # AxsCfgBelt
    def DenominatorUnitOfBeltConversionFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgBeltStart(builder): builder.StartObject(5)
def Start(builder):
    return AxsCfgBeltStart(builder)
def AxsCfgBeltAddIsBeltAxis(builder, isBeltAxis): builder.PrependBoolSlot(0, isBeltAxis, 0)
def AddIsBeltAxis(builder, isBeltAxis):
    return AxsCfgBeltAddIsBeltAxis(builder, isBeltAxis)
def AxsCfgBeltAddBeltValConversionFactor(builder, beltValConversionFactor): builder.PrependFloat64Slot(1, beltValConversionFactor, 0.0)
def AddBeltValConversionFactor(builder, beltValConversionFactor):
    return AxsCfgBeltAddBeltValConversionFactor(builder, beltValConversionFactor)
def AxsCfgBeltAddBeltCoordSysNameDefault(builder, beltCoordSysNameDefault): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(beltCoordSysNameDefault), 0)
def AddBeltCoordSysNameDefault(builder, beltCoordSysNameDefault):
    return AxsCfgBeltAddBeltCoordSysNameDefault(builder, beltCoordSysNameDefault)
def AxsCfgBeltAddNominatorUnitOfBeltConversionFactor(builder, nominatorUnitOfBeltConversionFactor): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nominatorUnitOfBeltConversionFactor), 0)
def AddNominatorUnitOfBeltConversionFactor(builder, nominatorUnitOfBeltConversionFactor):
    return AxsCfgBeltAddNominatorUnitOfBeltConversionFactor(builder, nominatorUnitOfBeltConversionFactor)
def AxsCfgBeltAddDenominatorUnitOfBeltConversionFactor(builder, denominatorUnitOfBeltConversionFactor): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(denominatorUnitOfBeltConversionFactor), 0)
def AddDenominatorUnitOfBeltConversionFactor(builder, denominatorUnitOfBeltConversionFactor):
    return AxsCfgBeltAddDenominatorUnitOfBeltConversionFactor(builder, denominatorUnitOfBeltConversionFactor)
def AxsCfgBeltEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgBeltEnd(builder)

class AxsCfgBeltT(object):

    # AxsCfgBeltT
    def __init__(self):
        self.isBeltAxis = False  # type: bool
        self.beltValConversionFactor = 0.0  # type: float
        self.beltCoordSysNameDefault = None  # type: str
        self.nominatorUnitOfBeltConversionFactor = None  # type: str
        self.denominatorUnitOfBeltConversionFactor = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgBelt = AxsCfgBelt()
        axsCfgBelt.Init(buf, pos)
        return cls.InitFromObj(axsCfgBelt)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgBelt):
        x = AxsCfgBeltT()
        x._UnPack(axsCfgBelt)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.isBeltAxis == other.isBeltAxis and \
            self.beltValConversionFactor == other.beltValConversionFactor and \
            self.beltCoordSysNameDefault == other.beltCoordSysNameDefault and \
            self.nominatorUnitOfBeltConversionFactor == other.nominatorUnitOfBeltConversionFactor and \
            self.denominatorUnitOfBeltConversionFactor == other.denominatorUnitOfBeltConversionFactor

    # AxsCfgBeltT
    def _UnPack(self, axsCfgBelt):
        if axsCfgBelt is None:
            return
        self.isBeltAxis = axsCfgBelt.IsBeltAxis()
        self.beltValConversionFactor = axsCfgBelt.BeltValConversionFactor()
        self.beltCoordSysNameDefault = axsCfgBelt.BeltCoordSysNameDefault()
        self.nominatorUnitOfBeltConversionFactor = axsCfgBelt.NominatorUnitOfBeltConversionFactor()
        self.denominatorUnitOfBeltConversionFactor = axsCfgBelt.DenominatorUnitOfBeltConversionFactor()

    # AxsCfgBeltT
    def Pack(self, builder):
        if self.beltCoordSysNameDefault is not None:
            beltCoordSysNameDefault = builder.CreateString(self.beltCoordSysNameDefault)
        if self.nominatorUnitOfBeltConversionFactor is not None:
            nominatorUnitOfBeltConversionFactor = builder.CreateString(self.nominatorUnitOfBeltConversionFactor)
        if self.denominatorUnitOfBeltConversionFactor is not None:
            denominatorUnitOfBeltConversionFactor = builder.CreateString(self.denominatorUnitOfBeltConversionFactor)
        AxsCfgBeltStart(builder)
        AxsCfgBeltAddIsBeltAxis(builder, self.isBeltAxis)
        AxsCfgBeltAddBeltValConversionFactor(builder, self.beltValConversionFactor)
        if self.beltCoordSysNameDefault is not None:
            AxsCfgBeltAddBeltCoordSysNameDefault(builder, beltCoordSysNameDefault)
        if self.nominatorUnitOfBeltConversionFactor is not None:
            AxsCfgBeltAddNominatorUnitOfBeltConversionFactor(builder, nominatorUnitOfBeltConversionFactor)
        if self.denominatorUnitOfBeltConversionFactor is not None:
            AxsCfgBeltAddDenominatorUnitOfBeltConversionFactor(builder, denominatorUnitOfBeltConversionFactor)
        axsCfgBelt = AxsCfgBeltEnd(builder)
        return axsCfgBelt
