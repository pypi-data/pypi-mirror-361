# -*- encoding: utf-8 -*-
"""Contains version information of the package
"""


from collections import namedtuple
import re


# Get replaced in the release process so that we do not probe the
# repository (which is not present) once released.
__version__ =  "@VERSION@"
__revision__ = "@REVISION@"


def _none_or(v, t):
    if v is None:
        return None
    else:
        return t(v)

class Version(namedtuple('Version', "major minor micro rc patch rev dirty")):

    PATTERN = r"""
    ^(?P<major>\d+)
    \.
    (?P<minor>\d+)
    \.
    (?P<micro>\d+)
    (?:rc(?P<rc>\d+))?
    (?:-(?P<patch>\d+)-g(?P<rev>[0-9a-f]+))?
    (?P<dirty>-dirty)?$
    """

    @classmethod
    def from_string(cls, string):
        rx = re.compile(cls.PATTERN, re.VERBOSE)
        mo = rx.match(string)
        if mo is None:
            raise ValueError("invalid version number '%s'"%(string,))
        rc = mo.group("rc")
        if rc is not None:
            rc = int(rc)
        return cls(major=int(mo.group("major")),
                   minor=int(mo.group("minor")),
                   micro=int(mo.group("micro")),
                   rc=_none_or(mo.group("rc"), int),
                   patch=_none_or(mo.group("patch"), int),
                   rev=_none_or(mo.group("rev"), str),
                   dirty=bool(mo.group("dirty")))

    def __str__(self):
        return self.to_str()

    def to_str(self, no_dirty=False):
        # We do not include the 'rev' attribute in the output because
        # distutil does not like it. We have __revision__ anyway
        s = ["%s.%s.%s"%(self.major, self.minor, self.micro)]
        if self.rc:
            s.append("rc%d"%(self.rc,))
        if self.patch:
            s.append("-%d"%(self.patch,))
        if self.dirty and not no_dirty:
            s.append("-dirty")
        return "".join(s)

VERSION = Version.from_string(__version__)

if __name__ == "__main__":
    print("__version__ : ", __version__)
    print("__revision__: ", __revision__)
    print("VERSION     : ", VERSION)
