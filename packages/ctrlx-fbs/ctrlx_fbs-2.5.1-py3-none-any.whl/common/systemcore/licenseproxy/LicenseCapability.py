# automatically generated by the FlatBuffers compiler, do not modify

# namespace: licenseproxy

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LicenseCapability(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LicenseCapability()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLicenseCapability(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LicenseCapability
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LicenseCapability
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LicenseCapability
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LicenseCapability
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LicenseCapability
    def IsPermanent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # LicenseCapability
    def StartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LicenseCapability
    def FinalExpirationDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LicenseCapability
    def AvailableCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def LicenseCapabilityStart(builder): builder.StartObject(7)
def Start(builder):
    return LicenseCapabilityStart(builder)
def LicenseCapabilityAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return LicenseCapabilityAddName(builder, name)
def LicenseCapabilityAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def AddVersion(builder, version):
    return LicenseCapabilityAddVersion(builder, version)
def LicenseCapabilityAddCount(builder, count): builder.PrependInt32Slot(2, count, 0)
def AddCount(builder, count):
    return LicenseCapabilityAddCount(builder, count)
def LicenseCapabilityAddIsPermanent(builder, isPermanent): builder.PrependBoolSlot(3, isPermanent, 0)
def AddIsPermanent(builder, isPermanent):
    return LicenseCapabilityAddIsPermanent(builder, isPermanent)
def LicenseCapabilityAddStartDate(builder, startDate): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(startDate), 0)
def AddStartDate(builder, startDate):
    return LicenseCapabilityAddStartDate(builder, startDate)
def LicenseCapabilityAddFinalExpirationDate(builder, finalExpirationDate): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(finalExpirationDate), 0)
def AddFinalExpirationDate(builder, finalExpirationDate):
    return LicenseCapabilityAddFinalExpirationDate(builder, finalExpirationDate)
def LicenseCapabilityAddAvailableCount(builder, availableCount): builder.PrependInt32Slot(6, availableCount, 0)
def AddAvailableCount(builder, availableCount):
    return LicenseCapabilityAddAvailableCount(builder, availableCount)
def LicenseCapabilityEnd(builder): return builder.EndObject()
def End(builder):
    return LicenseCapabilityEnd(builder)

class LicenseCapabilityT(object):

    # LicenseCapabilityT
    def __init__(self):
        self.name = None  # type: str
        self.version = None  # type: str
        self.count = 0  # type: int
        self.isPermanent = False  # type: bool
        self.startDate = None  # type: str
        self.finalExpirationDate = None  # type: str
        self.availableCount = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        licenseCapability = LicenseCapability()
        licenseCapability.Init(buf, pos)
        return cls.InitFromObj(licenseCapability)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, licenseCapability):
        x = LicenseCapabilityT()
        x._UnPack(licenseCapability)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.version == other.version and \
            self.count == other.count and \
            self.isPermanent == other.isPermanent and \
            self.startDate == other.startDate and \
            self.finalExpirationDate == other.finalExpirationDate and \
            self.availableCount == other.availableCount

    # LicenseCapabilityT
    def _UnPack(self, licenseCapability):
        if licenseCapability is None:
            return
        self.name = licenseCapability.Name()
        self.version = licenseCapability.Version()
        self.count = licenseCapability.Count()
        self.isPermanent = licenseCapability.IsPermanent()
        self.startDate = licenseCapability.StartDate()
        self.finalExpirationDate = licenseCapability.FinalExpirationDate()
        self.availableCount = licenseCapability.AvailableCount()

    # LicenseCapabilityT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.startDate is not None:
            startDate = builder.CreateString(self.startDate)
        if self.finalExpirationDate is not None:
            finalExpirationDate = builder.CreateString(self.finalExpirationDate)
        LicenseCapabilityStart(builder)
        if self.name is not None:
            LicenseCapabilityAddName(builder, name)
        if self.version is not None:
            LicenseCapabilityAddVersion(builder, version)
        LicenseCapabilityAddCount(builder, self.count)
        LicenseCapabilityAddIsPermanent(builder, self.isPermanent)
        if self.startDate is not None:
            LicenseCapabilityAddStartDate(builder, startDate)
        if self.finalExpirationDate is not None:
            LicenseCapabilityAddFinalExpirationDate(builder, finalExpirationDate)
        LicenseCapabilityAddAvailableCount(builder, self.availableCount)
        licenseCapability = LicenseCapabilityEnd(builder)
        return licenseCapability
