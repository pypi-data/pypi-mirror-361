# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NetworkAddressDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NetworkAddressDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNetworkAddressDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NetworkAddressDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NetworkAddressDataType
    def NetworkInterface(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def NetworkAddressDataTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return NetworkAddressDataTypeStart(builder)
def NetworkAddressDataTypeAddNetworkInterface(builder, networkInterface): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(networkInterface), 0)
def AddNetworkInterface(builder, networkInterface):
    return NetworkAddressDataTypeAddNetworkInterface(builder, networkInterface)
def NetworkAddressDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return NetworkAddressDataTypeEnd(builder)

class NetworkAddressDataTypeT(object):

    # NetworkAddressDataTypeT
    def __init__(self):
        self.networkInterface = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        networkAddressDataType = NetworkAddressDataType()
        networkAddressDataType.Init(buf, pos)
        return cls.InitFromObj(networkAddressDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, networkAddressDataType):
        x = NetworkAddressDataTypeT()
        x._UnPack(networkAddressDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.networkInterface == other.networkInterface

    # NetworkAddressDataTypeT
    def _UnPack(self, networkAddressDataType):
        if networkAddressDataType is None:
            return
        self.networkInterface = networkAddressDataType.NetworkInterface()

    # NetworkAddressDataTypeT
    def Pack(self, builder):
        if self.networkInterface is not None:
            networkInterface = builder.CreateString(self.networkInterface)
        NetworkAddressDataTypeStart(builder)
        if self.networkInterface is not None:
            NetworkAddressDataTypeAddNetworkInterface(builder, networkInterface)
        networkAddressDataType = NetworkAddressDataTypeEnd(builder)
        return networkAddressDataType
