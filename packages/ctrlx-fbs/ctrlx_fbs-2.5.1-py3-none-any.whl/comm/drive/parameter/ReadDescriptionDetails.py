# automatically generated by the FlatBuffers compiler, do not modify

# namespace: parameter

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReadDescriptionDetails(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReadDescriptionDetails()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReadDescriptionDetails(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ReadDescriptionDetails
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReadDescriptionDetails
    def ValidElements(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ReadDescriptionDetails
    def NameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ReadDescriptionDetails
    def Attribute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReadDescriptionDetails
    def UnitLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ReadDescriptionDetails
    def Min(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ReadDescriptionDetails
    def MinAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ReadDescriptionDetails
    def MinLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReadDescriptionDetails
    def MinIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # ReadDescriptionDetails
    def Max(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ReadDescriptionDetails
    def MaxAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ReadDescriptionDetails
    def MaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReadDescriptionDetails
    def MaxIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # ReadDescriptionDetails
    def MaxListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReadDescriptionDetails
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ReadDescriptionDetails
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ReadDescriptionDetailsStart(builder): builder.StartObject(9)
def Start(builder):
    return ReadDescriptionDetailsStart(builder)
def ReadDescriptionDetailsAddValidElements(builder, validElements): builder.PrependUint16Slot(0, validElements, 0)
def AddValidElements(builder, validElements):
    return ReadDescriptionDetailsAddValidElements(builder, validElements)
def ReadDescriptionDetailsAddNameLength(builder, nameLength): builder.PrependUint16Slot(1, nameLength, 0)
def AddNameLength(builder, nameLength):
    return ReadDescriptionDetailsAddNameLength(builder, nameLength)
def ReadDescriptionDetailsAddAttribute(builder, attribute): builder.PrependUint32Slot(2, attribute, 0)
def AddAttribute(builder, attribute):
    return ReadDescriptionDetailsAddAttribute(builder, attribute)
def ReadDescriptionDetailsAddUnitLength(builder, unitLength): builder.PrependUint16Slot(3, unitLength, 0)
def AddUnitLength(builder, unitLength):
    return ReadDescriptionDetailsAddUnitLength(builder, unitLength)
def ReadDescriptionDetailsAddMin(builder, min): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(min), 0)
def AddMin(builder, min):
    return ReadDescriptionDetailsAddMin(builder, min)
def ReadDescriptionDetailsStartMinVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartMinVector(builder, numElems):
    return ReadDescriptionDetailsStartMinVector(builder, numElems)
def ReadDescriptionDetailsAddMax(builder, max): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(max), 0)
def AddMax(builder, max):
    return ReadDescriptionDetailsAddMax(builder, max)
def ReadDescriptionDetailsStartMaxVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartMaxVector(builder, numElems):
    return ReadDescriptionDetailsStartMaxVector(builder, numElems)
def ReadDescriptionDetailsAddMaxListLength(builder, maxListLength): builder.PrependUint32Slot(6, maxListLength, 0)
def AddMaxListLength(builder, maxListLength):
    return ReadDescriptionDetailsAddMaxListLength(builder, maxListLength)
def ReadDescriptionDetailsAddName(builder, name): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ReadDescriptionDetailsAddName(builder, name)
def ReadDescriptionDetailsAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def AddUnit(builder, unit):
    return ReadDescriptionDetailsAddUnit(builder, unit)
def ReadDescriptionDetailsEnd(builder): return builder.EndObject()
def End(builder):
    return ReadDescriptionDetailsEnd(builder)
try:
    from typing import List
except:
    pass

class ReadDescriptionDetailsT(object):

    # ReadDescriptionDetailsT
    def __init__(self):
        self.validElements = 0  # type: int
        self.nameLength = 0  # type: int
        self.attribute = 0  # type: int
        self.unitLength = 0  # type: int
        self.min = None  # type: List[int]
        self.max = None  # type: List[int]
        self.maxListLength = 0  # type: int
        self.name = None  # type: str
        self.unit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        readDescriptionDetails = ReadDescriptionDetails()
        readDescriptionDetails.Init(buf, pos)
        return cls.InitFromObj(readDescriptionDetails)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, readDescriptionDetails):
        x = ReadDescriptionDetailsT()
        x._UnPack(readDescriptionDetails)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.validElements == other.validElements and \
            self.nameLength == other.nameLength and \
            self.attribute == other.attribute and \
            self.unitLength == other.unitLength and \
            self.min == other.min and \
            self.max == other.max and \
            self.maxListLength == other.maxListLength and \
            self.name == other.name and \
            self.unit == other.unit

    # ReadDescriptionDetailsT
    def _UnPack(self, readDescriptionDetails):
        if readDescriptionDetails is None:
            return
        self.validElements = readDescriptionDetails.ValidElements()
        self.nameLength = readDescriptionDetails.NameLength()
        self.attribute = readDescriptionDetails.Attribute()
        self.unitLength = readDescriptionDetails.UnitLength()
        if not readDescriptionDetails.MinIsNone():
            if np is None:
                self.min = []
                for i in range(readDescriptionDetails.MinLength()):
                    self.min.append(readDescriptionDetails.Min(i))
            else:
                self.min = readDescriptionDetails.MinAsNumpy()
        if not readDescriptionDetails.MaxIsNone():
            if np is None:
                self.max = []
                for i in range(readDescriptionDetails.MaxLength()):
                    self.max.append(readDescriptionDetails.Max(i))
            else:
                self.max = readDescriptionDetails.MaxAsNumpy()
        self.maxListLength = readDescriptionDetails.MaxListLength()
        self.name = readDescriptionDetails.Name()
        self.unit = readDescriptionDetails.Unit()

    # ReadDescriptionDetailsT
    def Pack(self, builder):
        if self.min is not None:
            if np is not None and type(self.min) is np.ndarray:
                min = builder.CreateNumpyVector(self.min)
            else:
                ReadDescriptionDetailsStartMinVector(builder, len(self.min))
                for i in reversed(range(len(self.min))):
                    builder.PrependUint8(self.min[i])
                min = builder.EndVector()
        if self.max is not None:
            if np is not None and type(self.max) is np.ndarray:
                max = builder.CreateNumpyVector(self.max)
            else:
                ReadDescriptionDetailsStartMaxVector(builder, len(self.max))
                for i in reversed(range(len(self.max))):
                    builder.PrependUint8(self.max[i])
                max = builder.EndVector()
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        ReadDescriptionDetailsStart(builder)
        ReadDescriptionDetailsAddValidElements(builder, self.validElements)
        ReadDescriptionDetailsAddNameLength(builder, self.nameLength)
        ReadDescriptionDetailsAddAttribute(builder, self.attribute)
        ReadDescriptionDetailsAddUnitLength(builder, self.unitLength)
        if self.min is not None:
            ReadDescriptionDetailsAddMin(builder, min)
        if self.max is not None:
            ReadDescriptionDetailsAddMax(builder, max)
        ReadDescriptionDetailsAddMaxListLength(builder, self.maxListLength)
        if self.name is not None:
            ReadDescriptionDetailsAddName(builder, name)
        if self.unit is not None:
            ReadDescriptionDetailsAddUnit(builder, unit)
        readDescriptionDetails = ReadDescriptionDetailsEnd(builder)
        return readDescriptionDetails
