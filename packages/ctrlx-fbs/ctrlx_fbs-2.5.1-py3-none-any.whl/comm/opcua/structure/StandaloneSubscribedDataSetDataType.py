# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StandaloneSubscribedDataSetDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StandaloneSubscribedDataSetDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStandaloneSubscribedDataSetDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StandaloneSubscribedDataSetDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StandaloneSubscribedDataSetDataType
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StandaloneSubscribedDataSetDataType
    def DataSetFolder(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # StandaloneSubscribedDataSetDataType
    def DataSetFolderLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandaloneSubscribedDataSetDataType
    def DataSetFolderIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StandaloneSubscribedDataSetDataType
    def DataSetMetaData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.structure.DataSetMetaDataType import DataSetMetaDataType
            obj = DataSetMetaDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandaloneSubscribedDataSetDataType
    def SubscribedDataSet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.SubscribedDataSetDataType import SubscribedDataSetDataType
            obj = SubscribedDataSetDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def StandaloneSubscribedDataSetDataTypeStart(builder): builder.StartObject(4)
def Start(builder):
    return StandaloneSubscribedDataSetDataTypeStart(builder)
def StandaloneSubscribedDataSetDataTypeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return StandaloneSubscribedDataSetDataTypeAddName(builder, name)
def StandaloneSubscribedDataSetDataTypeAddDataSetFolder(builder, dataSetFolder): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetFolder), 0)
def AddDataSetFolder(builder, dataSetFolder):
    return StandaloneSubscribedDataSetDataTypeAddDataSetFolder(builder, dataSetFolder)
def StandaloneSubscribedDataSetDataTypeStartDataSetFolderVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDataSetFolderVector(builder, numElems):
    return StandaloneSubscribedDataSetDataTypeStartDataSetFolderVector(builder, numElems)
def StandaloneSubscribedDataSetDataTypeAddDataSetMetaData(builder, dataSetMetaData): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetMetaData), 0)
def AddDataSetMetaData(builder, dataSetMetaData):
    return StandaloneSubscribedDataSetDataTypeAddDataSetMetaData(builder, dataSetMetaData)
def StandaloneSubscribedDataSetDataTypeAddSubscribedDataSet(builder, subscribedDataSet): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(subscribedDataSet), 0)
def AddSubscribedDataSet(builder, subscribedDataSet):
    return StandaloneSubscribedDataSetDataTypeAddSubscribedDataSet(builder, subscribedDataSet)
def StandaloneSubscribedDataSetDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return StandaloneSubscribedDataSetDataTypeEnd(builder)
import comm.opcua.structure.DataSetMetaDataType
import comm.opcua.subtypes.SubscribedDataSetDataType
try:
    from typing import List, Optional
except:
    pass

class StandaloneSubscribedDataSetDataTypeT(object):

    # StandaloneSubscribedDataSetDataTypeT
    def __init__(self):
        self.name = None  # type: str
        self.dataSetFolder = None  # type: List[str]
        self.dataSetMetaData = None  # type: Optional[comm.opcua.structure.DataSetMetaDataType.DataSetMetaDataTypeT]
        self.subscribedDataSet = None  # type: Optional[comm.opcua.subtypes.SubscribedDataSetDataType.SubscribedDataSetDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        standaloneSubscribedDataSetDataType = StandaloneSubscribedDataSetDataType()
        standaloneSubscribedDataSetDataType.Init(buf, pos)
        return cls.InitFromObj(standaloneSubscribedDataSetDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, standaloneSubscribedDataSetDataType):
        x = StandaloneSubscribedDataSetDataTypeT()
        x._UnPack(standaloneSubscribedDataSetDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.dataSetFolder == other.dataSetFolder and \
            self.dataSetMetaData == other.dataSetMetaData and \
            self.subscribedDataSet == other.subscribedDataSet

    # StandaloneSubscribedDataSetDataTypeT
    def _UnPack(self, standaloneSubscribedDataSetDataType):
        if standaloneSubscribedDataSetDataType is None:
            return
        self.name = standaloneSubscribedDataSetDataType.Name()
        if not standaloneSubscribedDataSetDataType.DataSetFolderIsNone():
            self.dataSetFolder = []
            for i in range(standaloneSubscribedDataSetDataType.DataSetFolderLength()):
                self.dataSetFolder.append(standaloneSubscribedDataSetDataType.DataSetFolder(i))
        if standaloneSubscribedDataSetDataType.DataSetMetaData() is not None:
            self.dataSetMetaData = comm.opcua.structure.DataSetMetaDataType.DataSetMetaDataTypeT.InitFromObj(standaloneSubscribedDataSetDataType.DataSetMetaData())
        if standaloneSubscribedDataSetDataType.SubscribedDataSet() is not None:
            self.subscribedDataSet = comm.opcua.subtypes.SubscribedDataSetDataType.SubscribedDataSetDataTypeT.InitFromObj(standaloneSubscribedDataSetDataType.SubscribedDataSet())

    # StandaloneSubscribedDataSetDataTypeT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.dataSetFolder is not None:
            dataSetFolderlist = []
            for i in range(len(self.dataSetFolder)):
                dataSetFolderlist.append(builder.CreateString(self.dataSetFolder[i]))
            StandaloneSubscribedDataSetDataTypeStartDataSetFolderVector(builder, len(self.dataSetFolder))
            for i in reversed(range(len(self.dataSetFolder))):
                builder.PrependUOffsetTRelative(dataSetFolderlist[i])
            dataSetFolder = builder.EndVector()
        if self.dataSetMetaData is not None:
            dataSetMetaData = self.dataSetMetaData.Pack(builder)
        if self.subscribedDataSet is not None:
            subscribedDataSet = self.subscribedDataSet.Pack(builder)
        StandaloneSubscribedDataSetDataTypeStart(builder)
        if self.name is not None:
            StandaloneSubscribedDataSetDataTypeAddName(builder, name)
        if self.dataSetFolder is not None:
            StandaloneSubscribedDataSetDataTypeAddDataSetFolder(builder, dataSetFolder)
        if self.dataSetMetaData is not None:
            StandaloneSubscribedDataSetDataTypeAddDataSetMetaData(builder, dataSetMetaData)
        if self.subscribedDataSet is not None:
            StandaloneSubscribedDataSetDataTypeAddSubscribedDataSet(builder, subscribedDataSet)
        standaloneSubscribedDataSetDataType = StandaloneSubscribedDataSetDataTypeEnd(builder)
        return standaloneSubscribedDataSetDataType
