# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DatagramWriterGroupTransport2DataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DatagramWriterGroupTransport2DataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDatagramWriterGroupTransport2DataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DatagramWriterGroupTransport2DataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DatagramWriterGroupTransport2DataType
    def MessageRepeatCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # DatagramWriterGroupTransport2DataType
    def MessageRepeatDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DatagramWriterGroupTransport2DataType
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.NetworkAddressDataType import NetworkAddressDataType
            obj = NetworkAddressDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DatagramWriterGroupTransport2DataType
    def QosCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DatagramWriterGroupTransport2DataType
    def DatagramQos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.subtypes.TransmitQosDataType import TransmitQosDataType
            obj = TransmitQosDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DatagramWriterGroupTransport2DataType
    def DatagramQosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DatagramWriterGroupTransport2DataType
    def DatagramQosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # DatagramWriterGroupTransport2DataType
    def DiscoveryAnnounceRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DatagramWriterGroupTransport2DataType
    def Topic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DatagramWriterGroupTransport2DataTypeStart(builder): builder.StartObject(7)
def Start(builder):
    return DatagramWriterGroupTransport2DataTypeStart(builder)
def DatagramWriterGroupTransport2DataTypeAddMessageRepeatCount(builder, messageRepeatCount): builder.PrependUint8Slot(0, messageRepeatCount, 0)
def AddMessageRepeatCount(builder, messageRepeatCount):
    return DatagramWriterGroupTransport2DataTypeAddMessageRepeatCount(builder, messageRepeatCount)
def DatagramWriterGroupTransport2DataTypeAddMessageRepeatDelay(builder, messageRepeatDelay): builder.PrependFloat64Slot(1, messageRepeatDelay, 0.0)
def AddMessageRepeatDelay(builder, messageRepeatDelay):
    return DatagramWriterGroupTransport2DataTypeAddMessageRepeatDelay(builder, messageRepeatDelay)
def DatagramWriterGroupTransport2DataTypeAddAddress(builder, address): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def AddAddress(builder, address):
    return DatagramWriterGroupTransport2DataTypeAddAddress(builder, address)
def DatagramWriterGroupTransport2DataTypeAddQosCategory(builder, qosCategory): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(qosCategory), 0)
def AddQosCategory(builder, qosCategory):
    return DatagramWriterGroupTransport2DataTypeAddQosCategory(builder, qosCategory)
def DatagramWriterGroupTransport2DataTypeAddDatagramQos(builder, datagramQos): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(datagramQos), 0)
def AddDatagramQos(builder, datagramQos):
    return DatagramWriterGroupTransport2DataTypeAddDatagramQos(builder, datagramQos)
def DatagramWriterGroupTransport2DataTypeStartDatagramQosVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDatagramQosVector(builder, numElems):
    return DatagramWriterGroupTransport2DataTypeStartDatagramQosVector(builder, numElems)
def DatagramWriterGroupTransport2DataTypeAddDiscoveryAnnounceRate(builder, discoveryAnnounceRate): builder.PrependUint32Slot(5, discoveryAnnounceRate, 0)
def AddDiscoveryAnnounceRate(builder, discoveryAnnounceRate):
    return DatagramWriterGroupTransport2DataTypeAddDiscoveryAnnounceRate(builder, discoveryAnnounceRate)
def DatagramWriterGroupTransport2DataTypeAddTopic(builder, topic): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(topic), 0)
def AddTopic(builder, topic):
    return DatagramWriterGroupTransport2DataTypeAddTopic(builder, topic)
def DatagramWriterGroupTransport2DataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return DatagramWriterGroupTransport2DataTypeEnd(builder)
import comm.opcua.subtypes.NetworkAddressDataType
import comm.opcua.subtypes.TransmitQosDataType
try:
    from typing import List, Optional
except:
    pass

class DatagramWriterGroupTransport2DataTypeT(object):

    # DatagramWriterGroupTransport2DataTypeT
    def __init__(self):
        self.messageRepeatCount = 0  # type: int
        self.messageRepeatDelay = 0.0  # type: float
        self.address = None  # type: Optional[comm.opcua.subtypes.NetworkAddressDataType.NetworkAddressDataTypeT]
        self.qosCategory = None  # type: str
        self.datagramQos = None  # type: List[comm.opcua.subtypes.TransmitQosDataType.TransmitQosDataTypeT]
        self.discoveryAnnounceRate = 0  # type: int
        self.topic = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        datagramWriterGroupTransport2DataType = DatagramWriterGroupTransport2DataType()
        datagramWriterGroupTransport2DataType.Init(buf, pos)
        return cls.InitFromObj(datagramWriterGroupTransport2DataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, datagramWriterGroupTransport2DataType):
        x = DatagramWriterGroupTransport2DataTypeT()
        x._UnPack(datagramWriterGroupTransport2DataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.messageRepeatCount == other.messageRepeatCount and \
            self.messageRepeatDelay == other.messageRepeatDelay and \
            self.address == other.address and \
            self.qosCategory == other.qosCategory and \
            self.datagramQos == other.datagramQos and \
            self.discoveryAnnounceRate == other.discoveryAnnounceRate and \
            self.topic == other.topic

    # DatagramWriterGroupTransport2DataTypeT
    def _UnPack(self, datagramWriterGroupTransport2DataType):
        if datagramWriterGroupTransport2DataType is None:
            return
        self.messageRepeatCount = datagramWriterGroupTransport2DataType.MessageRepeatCount()
        self.messageRepeatDelay = datagramWriterGroupTransport2DataType.MessageRepeatDelay()
        if datagramWriterGroupTransport2DataType.Address() is not None:
            self.address = comm.opcua.subtypes.NetworkAddressDataType.NetworkAddressDataTypeT.InitFromObj(datagramWriterGroupTransport2DataType.Address())
        self.qosCategory = datagramWriterGroupTransport2DataType.QosCategory()
        if not datagramWriterGroupTransport2DataType.DatagramQosIsNone():
            self.datagramQos = []
            for i in range(datagramWriterGroupTransport2DataType.DatagramQosLength()):
                if datagramWriterGroupTransport2DataType.DatagramQos(i) is None:
                    self.datagramQos.append(None)
                else:
                    transmitQosDataType_ = comm.opcua.subtypes.TransmitQosDataType.TransmitQosDataTypeT.InitFromObj(datagramWriterGroupTransport2DataType.DatagramQos(i))
                    self.datagramQos.append(transmitQosDataType_)
        self.discoveryAnnounceRate = datagramWriterGroupTransport2DataType.DiscoveryAnnounceRate()
        self.topic = datagramWriterGroupTransport2DataType.Topic()

    # DatagramWriterGroupTransport2DataTypeT
    def Pack(self, builder):
        if self.address is not None:
            address = self.address.Pack(builder)
        if self.qosCategory is not None:
            qosCategory = builder.CreateString(self.qosCategory)
        if self.datagramQos is not None:
            datagramQoslist = []
            for i in range(len(self.datagramQos)):
                datagramQoslist.append(self.datagramQos[i].Pack(builder))
            DatagramWriterGroupTransport2DataTypeStartDatagramQosVector(builder, len(self.datagramQos))
            for i in reversed(range(len(self.datagramQos))):
                builder.PrependUOffsetTRelative(datagramQoslist[i])
            datagramQos = builder.EndVector()
        if self.topic is not None:
            topic = builder.CreateString(self.topic)
        DatagramWriterGroupTransport2DataTypeStart(builder)
        DatagramWriterGroupTransport2DataTypeAddMessageRepeatCount(builder, self.messageRepeatCount)
        DatagramWriterGroupTransport2DataTypeAddMessageRepeatDelay(builder, self.messageRepeatDelay)
        if self.address is not None:
            DatagramWriterGroupTransport2DataTypeAddAddress(builder, address)
        if self.qosCategory is not None:
            DatagramWriterGroupTransport2DataTypeAddQosCategory(builder, qosCategory)
        if self.datagramQos is not None:
            DatagramWriterGroupTransport2DataTypeAddDatagramQos(builder, datagramQos)
        DatagramWriterGroupTransport2DataTypeAddDiscoveryAnnounceRate(builder, self.discoveryAnnounceRate)
        if self.topic is not None:
            DatagramWriterGroupTransport2DataTypeAddTopic(builder, topic)
        datagramWriterGroupTransport2DataType = DatagramWriterGroupTransport2DataTypeEnd(builder)
        return datagramWriterGroupTransport2DataType
