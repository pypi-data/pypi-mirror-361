# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DeviceConfigResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeviceConfigResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeviceConfigResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DeviceConfigResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DeviceConfigResponse
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DeviceConfigResponse
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DeviceConfigResponseStart(builder): builder.StartObject(2)
def Start(builder):
    return DeviceConfigResponseStart(builder)
def DeviceConfigResponseAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return DeviceConfigResponseAddName(builder, name)
def DeviceConfigResponseAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return DeviceConfigResponseAddDescription(builder, description)
def DeviceConfigResponseEnd(builder): return builder.EndObject()
def End(builder):
    return DeviceConfigResponseEnd(builder)

class DeviceConfigResponseT(object):

    # DeviceConfigResponseT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        deviceConfigResponse = DeviceConfigResponse()
        deviceConfigResponse.Init(buf, pos)
        return cls.InitFromObj(deviceConfigResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, deviceConfigResponse):
        x = DeviceConfigResponseT()
        x._UnPack(deviceConfigResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.description == other.description

    # DeviceConfigResponseT
    def _UnPack(self, deviceConfigResponse):
        if deviceConfigResponse is None:
            return
        self.name = deviceConfigResponse.Name()
        self.description = deviceConfigResponse.Description()

    # DeviceConfigResponseT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        DeviceConfigResponseStart(builder)
        if self.name is not None:
            DeviceConfigResponseAddName(builder, name)
        if self.description is not None:
            DeviceConfigResponseAddDescription(builder, description)
        deviceConfigResponse = DeviceConfigResponseEnd(builder)
        return deviceConfigResponse
