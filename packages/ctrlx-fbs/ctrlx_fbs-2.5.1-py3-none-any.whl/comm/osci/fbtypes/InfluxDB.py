# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InfluxDB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InfluxDB()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInfluxDB(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InfluxDB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InfluxDB
    def Enable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # InfluxDB
    def Host(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InfluxDB
    def Organization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InfluxDB
    def Token(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InfluxDB
    def Bucket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def InfluxDBStart(builder): builder.StartObject(5)
def Start(builder):
    return InfluxDBStart(builder)
def InfluxDBAddEnable(builder, enable): builder.PrependBoolSlot(0, enable, 0)
def AddEnable(builder, enable):
    return InfluxDBAddEnable(builder, enable)
def InfluxDBAddHost(builder, host): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(host), 0)
def AddHost(builder, host):
    return InfluxDBAddHost(builder, host)
def InfluxDBAddOrganization(builder, organization): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(organization), 0)
def AddOrganization(builder, organization):
    return InfluxDBAddOrganization(builder, organization)
def InfluxDBAddToken(builder, token): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(token), 0)
def AddToken(builder, token):
    return InfluxDBAddToken(builder, token)
def InfluxDBAddBucket(builder, bucket): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bucket), 0)
def AddBucket(builder, bucket):
    return InfluxDBAddBucket(builder, bucket)
def InfluxDBEnd(builder): return builder.EndObject()
def End(builder):
    return InfluxDBEnd(builder)

class InfluxDBT(object):

    # InfluxDBT
    def __init__(self):
        self.enable = False  # type: bool
        self.host = None  # type: str
        self.organization = None  # type: str
        self.token = None  # type: str
        self.bucket = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        influxDb = InfluxDB()
        influxDb.Init(buf, pos)
        return cls.InitFromObj(influxDb)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, influxDb):
        x = InfluxDBT()
        x._UnPack(influxDb)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.enable == other.enable and \
            self.host == other.host and \
            self.organization == other.organization and \
            self.token == other.token and \
            self.bucket == other.bucket

    # InfluxDBT
    def _UnPack(self, influxDb):
        if influxDb is None:
            return
        self.enable = influxDb.Enable()
        self.host = influxDb.Host()
        self.organization = influxDb.Organization()
        self.token = influxDb.Token()
        self.bucket = influxDb.Bucket()

    # InfluxDBT
    def Pack(self, builder):
        if self.host is not None:
            host = builder.CreateString(self.host)
        if self.organization is not None:
            organization = builder.CreateString(self.organization)
        if self.token is not None:
            token = builder.CreateString(self.token)
        if self.bucket is not None:
            bucket = builder.CreateString(self.bucket)
        InfluxDBStart(builder)
        InfluxDBAddEnable(builder, self.enable)
        if self.host is not None:
            InfluxDBAddHost(builder, host)
        if self.organization is not None:
            InfluxDBAddOrganization(builder, organization)
        if self.token is not None:
            InfluxDBAddToken(builder, token)
        if self.bucket is not None:
            InfluxDBAddBucket(builder, bucket)
        influxDb = InfluxDBEnd(builder)
        return influxDb
