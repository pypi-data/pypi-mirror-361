# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# state of a FlexProfile object
class AxsStateFlexProfileObj(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsStateFlexProfileObj()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsStateFlexProfileObj(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsStateFlexProfileObj
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # state information of single FlexProfiles
    # AxsStateFlexProfileObj
    def Profiles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.AxsStateSingleFlexProfile import AxsStateSingleFlexProfile
            obj = AxsStateSingleFlexProfile()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AxsStateFlexProfileObj
    def ProfilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsStateFlexProfileObj
    def ProfilesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # state information of all events
    # AxsStateFlexProfileObj
    def Events(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsStateFlexProfileAllEvents import AxsStateFlexProfileAllEvents
            obj = AxsStateFlexProfileAllEvents()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # state information of execution
    # AxsStateFlexProfileObj
    def Execution(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsStateFlexProfileExecution import AxsStateFlexProfileExecution
            obj = AxsStateFlexProfileExecution()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsStateFlexProfileObjStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsStateFlexProfileObjStart(builder)
def AxsStateFlexProfileObjAddProfiles(builder, profiles): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(profiles), 0)
def AddProfiles(builder, profiles):
    return AxsStateFlexProfileObjAddProfiles(builder, profiles)
def AxsStateFlexProfileObjStartProfilesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartProfilesVector(builder, numElems):
    return AxsStateFlexProfileObjStartProfilesVector(builder, numElems)
def AxsStateFlexProfileObjAddEvents(builder, events): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(events), 0)
def AddEvents(builder, events):
    return AxsStateFlexProfileObjAddEvents(builder, events)
def AxsStateFlexProfileObjAddExecution(builder, execution): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(execution), 0)
def AddExecution(builder, execution):
    return AxsStateFlexProfileObjAddExecution(builder, execution)
def AxsStateFlexProfileObjEnd(builder): return builder.EndObject()
def End(builder):
    return AxsStateFlexProfileObjEnd(builder)
import motion.sync.fbtypes.AxsStateFlexProfileAllEvents
import motion.sync.fbtypes.AxsStateFlexProfileExecution
import motion.sync.fbtypes.AxsStateSingleFlexProfile
try:
    from typing import List, Optional
except:
    pass

class AxsStateFlexProfileObjT(object):

    # AxsStateFlexProfileObjT
    def __init__(self):
        self.profiles = None  # type: List[motion.sync.fbtypes.AxsStateSingleFlexProfile.AxsStateSingleFlexProfileT]
        self.events = None  # type: Optional[motion.sync.fbtypes.AxsStateFlexProfileAllEvents.AxsStateFlexProfileAllEventsT]
        self.execution = None  # type: Optional[motion.sync.fbtypes.AxsStateFlexProfileExecution.AxsStateFlexProfileExecutionT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsStateFlexProfileObj = AxsStateFlexProfileObj()
        axsStateFlexProfileObj.Init(buf, pos)
        return cls.InitFromObj(axsStateFlexProfileObj)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsStateFlexProfileObj):
        x = AxsStateFlexProfileObjT()
        x._UnPack(axsStateFlexProfileObj)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.profiles == other.profiles and \
            self.events == other.events and \
            self.execution == other.execution

    # AxsStateFlexProfileObjT
    def _UnPack(self, axsStateFlexProfileObj):
        if axsStateFlexProfileObj is None:
            return
        if not axsStateFlexProfileObj.ProfilesIsNone():
            self.profiles = []
            for i in range(axsStateFlexProfileObj.ProfilesLength()):
                if axsStateFlexProfileObj.Profiles(i) is None:
                    self.profiles.append(None)
                else:
                    axsStateSingleFlexProfile_ = motion.sync.fbtypes.AxsStateSingleFlexProfile.AxsStateSingleFlexProfileT.InitFromObj(axsStateFlexProfileObj.Profiles(i))
                    self.profiles.append(axsStateSingleFlexProfile_)
        if axsStateFlexProfileObj.Events() is not None:
            self.events = motion.sync.fbtypes.AxsStateFlexProfileAllEvents.AxsStateFlexProfileAllEventsT.InitFromObj(axsStateFlexProfileObj.Events())
        if axsStateFlexProfileObj.Execution() is not None:
            self.execution = motion.sync.fbtypes.AxsStateFlexProfileExecution.AxsStateFlexProfileExecutionT.InitFromObj(axsStateFlexProfileObj.Execution())

    # AxsStateFlexProfileObjT
    def Pack(self, builder):
        if self.profiles is not None:
            profileslist = []
            for i in range(len(self.profiles)):
                profileslist.append(self.profiles[i].Pack(builder))
            AxsStateFlexProfileObjStartProfilesVector(builder, len(self.profiles))
            for i in reversed(range(len(self.profiles))):
                builder.PrependUOffsetTRelative(profileslist[i])
            profiles = builder.EndVector()
        if self.events is not None:
            events = self.events.Pack(builder)
        if self.execution is not None:
            execution = self.execution.Pack(builder)
        AxsStateFlexProfileObjStart(builder)
        if self.profiles is not None:
            AxsStateFlexProfileObjAddProfiles(builder, profiles)
        if self.events is not None:
            AxsStateFlexProfileObjAddEvents(builder, events)
        if self.execution is not None:
            AxsStateFlexProfileObjAddExecution(builder, execution)
        axsStateFlexProfileObj = AxsStateFlexProfileObjEnd(builder)
        return axsStateFlexProfileObj
