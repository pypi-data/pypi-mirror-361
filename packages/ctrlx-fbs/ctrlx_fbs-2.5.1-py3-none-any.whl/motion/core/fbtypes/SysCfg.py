# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# general system configuration
class SysCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # configuration of the product coordinate systems 
    # SysCfg
    def Pcs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.SysCfgPcsAll import SysCfgPcsAll
            obj = SysCfgPcsAll()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # system function configuration
    # SysCfg
    def Function(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.SysCfgFunction import SysCfgFunction
            obj = SysCfgFunction()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # internal system configuration
    # SysCfg
    def Internal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.SysCfgInternal import SysCfgInternal
            obj = SysCfgInternal()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration of the safe and work areas
    # SysCfg
    def SafeAreas(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.SysCfgSafeAreaAll import SysCfgSafeAreaAll
            obj = SysCfgSafeAreaAll()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration of the real-time inputs of the kinematics
    # SysCfg
    def RtInputs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.RTInputsCfg import RTInputsCfg
            obj = RTInputsCfg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration of the tool data
    # SysCfg
    def ToolData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.SysCfgToolDataAll import SysCfgToolDataAll
            obj = SysCfgToolDataAll()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration of the belt cs data
    # SysCfg
    def BeltCs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.SysCfgBeltCsAll import SysCfgBeltCsAll
            obj = SysCfgBeltCsAll()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration of the camera coordinate system
    # SysCfg
    def Ccs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.SysCfgCcsAll import SysCfgCcsAll
            obj = SysCfgCcsAll()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # System UI data
    # SysCfg
    def UiData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SysCfgStart(builder): builder.StartObject(9)
def Start(builder):
    return SysCfgStart(builder)
def SysCfgAddPcs(builder, pcs): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pcs), 0)
def AddPcs(builder, pcs):
    return SysCfgAddPcs(builder, pcs)
def SysCfgAddFunction(builder, function): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(function), 0)
def AddFunction(builder, function):
    return SysCfgAddFunction(builder, function)
def SysCfgAddInternal(builder, internal): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(internal), 0)
def AddInternal(builder, internal):
    return SysCfgAddInternal(builder, internal)
def SysCfgAddSafeAreas(builder, safeAreas): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(safeAreas), 0)
def AddSafeAreas(builder, safeAreas):
    return SysCfgAddSafeAreas(builder, safeAreas)
def SysCfgAddRtInputs(builder, rtInputs): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rtInputs), 0)
def AddRtInputs(builder, rtInputs):
    return SysCfgAddRtInputs(builder, rtInputs)
def SysCfgAddToolData(builder, toolData): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(toolData), 0)
def AddToolData(builder, toolData):
    return SysCfgAddToolData(builder, toolData)
def SysCfgAddBeltCs(builder, beltCs): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(beltCs), 0)
def AddBeltCs(builder, beltCs):
    return SysCfgAddBeltCs(builder, beltCs)
def SysCfgAddCcs(builder, ccs): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ccs), 0)
def AddCcs(builder, ccs):
    return SysCfgAddCcs(builder, ccs)
def SysCfgAddUiData(builder, uiData): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(uiData), 0)
def AddUiData(builder, uiData):
    return SysCfgAddUiData(builder, uiData)
def SysCfgEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgEnd(builder)
import motion.core.fbtypes.RTInputsCfg
import motion.core.fbtypes.SysCfgBeltCsAll
import motion.core.fbtypes.SysCfgCcsAll
import motion.core.fbtypes.SysCfgFunction
import motion.core.fbtypes.SysCfgInternal
import motion.core.fbtypes.SysCfgPcsAll
import motion.core.fbtypes.SysCfgSafeAreaAll
import motion.core.fbtypes.SysCfgToolDataAll
try:
    from typing import Optional
except:
    pass

class SysCfgT(object):

    # SysCfgT
    def __init__(self):
        self.pcs = None  # type: Optional[motion.core.fbtypes.SysCfgPcsAll.SysCfgPcsAllT]
        self.function = None  # type: Optional[motion.core.fbtypes.SysCfgFunction.SysCfgFunctionT]
        self.internal = None  # type: Optional[motion.core.fbtypes.SysCfgInternal.SysCfgInternalT]
        self.safeAreas = None  # type: Optional[motion.core.fbtypes.SysCfgSafeAreaAll.SysCfgSafeAreaAllT]
        self.rtInputs = None  # type: Optional[motion.core.fbtypes.RTInputsCfg.RTInputsCfgT]
        self.toolData = None  # type: Optional[motion.core.fbtypes.SysCfgToolDataAll.SysCfgToolDataAllT]
        self.beltCs = None  # type: Optional[motion.core.fbtypes.SysCfgBeltCsAll.SysCfgBeltCsAllT]
        self.ccs = None  # type: Optional[motion.core.fbtypes.SysCfgCcsAll.SysCfgCcsAllT]
        self.uiData = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfg = SysCfg()
        sysCfg.Init(buf, pos)
        return cls.InitFromObj(sysCfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfg):
        x = SysCfgT()
        x._UnPack(sysCfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.pcs == other.pcs and \
            self.function == other.function and \
            self.internal == other.internal and \
            self.safeAreas == other.safeAreas and \
            self.rtInputs == other.rtInputs and \
            self.toolData == other.toolData and \
            self.beltCs == other.beltCs and \
            self.ccs == other.ccs and \
            self.uiData == other.uiData

    # SysCfgT
    def _UnPack(self, sysCfg):
        if sysCfg is None:
            return
        if sysCfg.Pcs() is not None:
            self.pcs = motion.core.fbtypes.SysCfgPcsAll.SysCfgPcsAllT.InitFromObj(sysCfg.Pcs())
        if sysCfg.Function() is not None:
            self.function = motion.core.fbtypes.SysCfgFunction.SysCfgFunctionT.InitFromObj(sysCfg.Function())
        if sysCfg.Internal() is not None:
            self.internal = motion.core.fbtypes.SysCfgInternal.SysCfgInternalT.InitFromObj(sysCfg.Internal())
        if sysCfg.SafeAreas() is not None:
            self.safeAreas = motion.core.fbtypes.SysCfgSafeAreaAll.SysCfgSafeAreaAllT.InitFromObj(sysCfg.SafeAreas())
        if sysCfg.RtInputs() is not None:
            self.rtInputs = motion.core.fbtypes.RTInputsCfg.RTInputsCfgT.InitFromObj(sysCfg.RtInputs())
        if sysCfg.ToolData() is not None:
            self.toolData = motion.core.fbtypes.SysCfgToolDataAll.SysCfgToolDataAllT.InitFromObj(sysCfg.ToolData())
        if sysCfg.BeltCs() is not None:
            self.beltCs = motion.core.fbtypes.SysCfgBeltCsAll.SysCfgBeltCsAllT.InitFromObj(sysCfg.BeltCs())
        if sysCfg.Ccs() is not None:
            self.ccs = motion.core.fbtypes.SysCfgCcsAll.SysCfgCcsAllT.InitFromObj(sysCfg.Ccs())
        self.uiData = sysCfg.UiData()

    # SysCfgT
    def Pack(self, builder):
        if self.pcs is not None:
            pcs = self.pcs.Pack(builder)
        if self.function is not None:
            function = self.function.Pack(builder)
        if self.internal is not None:
            internal = self.internal.Pack(builder)
        if self.safeAreas is not None:
            safeAreas = self.safeAreas.Pack(builder)
        if self.rtInputs is not None:
            rtInputs = self.rtInputs.Pack(builder)
        if self.toolData is not None:
            toolData = self.toolData.Pack(builder)
        if self.beltCs is not None:
            beltCs = self.beltCs.Pack(builder)
        if self.ccs is not None:
            ccs = self.ccs.Pack(builder)
        if self.uiData is not None:
            uiData = builder.CreateString(self.uiData)
        SysCfgStart(builder)
        if self.pcs is not None:
            SysCfgAddPcs(builder, pcs)
        if self.function is not None:
            SysCfgAddFunction(builder, function)
        if self.internal is not None:
            SysCfgAddInternal(builder, internal)
        if self.safeAreas is not None:
            SysCfgAddSafeAreas(builder, safeAreas)
        if self.rtInputs is not None:
            SysCfgAddRtInputs(builder, rtInputs)
        if self.toolData is not None:
            SysCfgAddToolData(builder, toolData)
        if self.beltCs is not None:
            SysCfgAddBeltCs(builder, beltCs)
        if self.ccs is not None:
            SysCfgAddCcs(builder, ccs)
        if self.uiData is not None:
            SysCfgAddUiData(builder, uiData)
        sysCfg = SysCfgEnd(builder)
        return sysCfg
