# ChunkHound Ubuntu 16.04 Build for GLIBC Compatibility
# 
# IMPORTANT: Ubuntu 16.04 is the MINIMUM SYSTEM REQUIREMENT for ChunkHound
# This ensures maximum compatibility across Linux distributions and prevents
# GLIBC version regressions that would break older systems.
# 
# DO NOT upgrade this base image without explicit approval and testing
# across all supported target environments.
# 
# This Dockerfile ensures binaries are compatible with Ubuntu 16.04 LTS and newer

FROM ubuntu:16.04 AS base-builder

# Prevent timezone prompts during apt install
ENV DEBIAN_FRONTEND=noninteractive

# Install Python 3.11 and required system dependencies
RUN apt-get update && apt-get install -y \
    software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-venv \
    python3.11-distutils \
    build-essential \
    gcc \
    g++ \
    make \
    git \
    curl \
    file \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Set Python 3.11 as default python3
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

# Install pip for Python 3.11
RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3.11

# Install uv for fast package management
RUN python3.11 -m pip install uv

# Set working directory
WORKDIR /app

# Copy dependency files first for better caching
COPY pyproject.toml uv.lock ./
COPY requirements.txt ./
COPY README.md ./

# Install Python dependencies
RUN uv sync --no-dev

# Copy source code
COPY . .

# Install PyInstaller for binary creation
RUN uv add --dev pyinstaller

# Build the optimized executable for Ubuntu 20.04 compatibility
RUN uv run pyinstaller chunkhound-optimized.spec \
    --clean \
    --noconfirm \
    --workpath /tmp/pyinstaller-work \
    --distpath /app/dist

# Verify the binary and check GLIBC dependencies
RUN ls -la /app/dist/chunkhound-optimized/ && \
    file /app/dist/chunkhound-optimized/chunkhound-optimized && \
    ldd /app/dist/chunkhound-optimized/chunkhound-optimized || echo "Static binary detected" && \
    du -sh /app/dist/chunkhound-optimized/

# Test the binary
RUN /app/dist/chunkhound-optimized/chunkhound-optimized --version

# Create artifact collection stage
# CRITICAL: Must use same Ubuntu 16.04 base as builder to maintain compatibility
FROM ubuntu:16.04 AS artifact-collector

# Install required tools
RUN apt-get update && apt-get install -y \
    tar \
    gzip \
    file \
    && rm -rf /var/lib/apt/lists/*

# Create artifact directory
RUN mkdir -p /artifacts/binaries && \
    mkdir -p /artifacts/checksums && \
    mkdir -p /artifacts/metadata

# Copy binary from builder
COPY --from=base-builder /app/dist/chunkhound-optimized /artifacts/binaries/chunkhound-optimized

# Generate checksums and metadata
WORKDIR /artifacts
RUN cd binaries && \
    tar -czf chunkhound-ubuntu20-linux.tar.gz chunkhound-optimized/ && \
    sha256sum chunkhound-ubuntu20-linux.tar.gz > ../checksums/chunkhound-ubuntu20-linux.sha256 && \
    sha256sum chunkhound-optimized/chunkhound-optimized >> ../checksums/chunkhound-ubuntu20-linux.sha256

# Generate build metadata with GLIBC info
RUN echo "Build Date: $(date -u)" > metadata/build-info.txt && \
    echo "Platform: ubuntu-16.04-linux" >> metadata/build-info.txt && \
    echo "Architecture: $(uname -m)" >> metadata/build-info.txt && \
    file binaries/chunkhound-optimized/chunkhound-optimized >> metadata/build-info.txt && \
    du -sh binaries/chunkhound-optimized >> metadata/build-info.txt && \
    echo "Library Dependencies:" >> metadata/build-info.txt && \
    (ldd binaries/chunkhound-optimized/chunkhound-optimized || echo "Static binary detected") >> metadata/build-info.txt

# Final stage - artifact collector for CI/CD
FROM artifact-collector AS final