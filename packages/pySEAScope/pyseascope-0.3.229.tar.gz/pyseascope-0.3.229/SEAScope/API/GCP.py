# automatically generated by the FlatBuffers compiler, do not modify

# namespace: API

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GCP(object):
    __slots__ = ['_tab']

    # GCP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GCP
    def Time(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # GCP
    def Lon(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # GCP
    def Lat(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # GCP
    def I(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))
    # GCP
    def J(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(20))

def CreateGCP(builder, time, lon, lat, i, j):
    builder.Prep(8, 24)
    builder.PrependUint32(j)
    builder.PrependUint32(i)
    builder.PrependFloat32(lat)
    builder.PrependFloat32(lon)
    builder.PrependUint64(time)
    return builder.Offset()
