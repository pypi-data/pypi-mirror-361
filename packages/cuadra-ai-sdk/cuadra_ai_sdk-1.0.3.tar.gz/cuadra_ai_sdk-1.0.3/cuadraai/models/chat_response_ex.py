# -*- coding: utf-8 -*-

"""
cuadraai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from cuadraai.api_helper import APIHelper
from cuadraai.models.usage_ex import UsageEx


class ChatResponseEx(object):

    """Implementation of the 'ChatResponseEx' model.

    Attributes:
        output (str): Output generated by the AI to resolve the request
        confidence_score (float): Confidence score of how accurate is the
            output regarding your request
        model (str): Model used to resolve your query
        usage (UsageEx): This is the token usage result of your request
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "output": 'output',
        "confidence_score": 'confidenceScore',
        "model": 'model',
        "usage": 'usage'
    }

    _optionals = [
        'output',
        'confidence_score',
        'model',
        'usage',
    ]

    def __init__(self,
                 output=APIHelper.SKIP,
                 confidence_score=APIHelper.SKIP,
                 model=APIHelper.SKIP,
                 usage=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the ChatResponseEx class"""

        # Initialize members of the class
        if output is not APIHelper.SKIP:
            self.output = output 
        if confidence_score is not APIHelper.SKIP:
            self.confidence_score = confidence_score 
        if model is not APIHelper.SKIP:
            self.model = model 
        if usage is not APIHelper.SKIP:
            self.usage = usage 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        output = dictionary.get("output") if dictionary.get("output") else APIHelper.SKIP
        confidence_score = dictionary.get("confidenceScore") if dictionary.get("confidenceScore") else APIHelper.SKIP
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        usage = UsageEx.from_dictionary(dictionary.get('usage')) if 'usage' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(output,
                   confidence_score,
                   model,
                   usage,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'output={(self.output if hasattr(self, "output") else None)!r}, '
                f'confidence_score={(self.confidence_score if hasattr(self, "confidence_score") else None)!r}, '
                f'model={(self.model if hasattr(self, "model") else None)!r}, '
                f'usage={(self.usage if hasattr(self, "usage") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'output={(self.output if hasattr(self, "output") else None)!s}, '
                f'confidence_score={(self.confidence_score if hasattr(self, "confidence_score") else None)!s}, '
                f'model={(self.model if hasattr(self, "model") else None)!s}, '
                f'usage={(self.usage if hasattr(self, "usage") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
