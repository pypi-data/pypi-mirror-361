# GNU GENERAL PUBLIC LICENSE
# Version 3, 29 June 2007
#
# Copyright (C) 2025 authors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

from pullhero.vcs.base import VCSOperations
from pullhero.utils.misc import (
    call_ai_api,
    setup_logging,
    clone_repo_with_token,
    ingest_repository,
)
import logging
import sys
import random
import string


setup_logging()


def action_document(
    vcs_provider: str,
    vcs_token: str,
    vcs_repository: str,
    vcs_change_id: str,
    vcs_change_type: str,
    vcs_base_branch: str,
    vcs_head_branch: str,
    agent: str,
    agent_action: str,
    llm_api_key: str,
    llm_api_host: str,
    llm_api_model: str,
    llm_api_endpoint: str,
) -> None:

    logging.info(f"Starting document action for {vcs_repository} PR/MR {vcs_change_id}")

    # Validate inputs
    if not vcs_token:
        error_msg = f"{vcs_provider} token required"
        logging.error(error_msg)
        raise ValueError(error_msg)

    try:
        # Initialize provider
        logging.info(f"Initializing {vcs_provider} provider")
        provider = VCSOperations.from_provider(vcs_provider, vcs_token)

        prefix = "".join(random.choices(string.ascii_lowercase + string.digits, k=5))
        update_branch = f"{prefix}-pullhero-improvements"

        current_readme_content, _ = provider.get_current_readme(
            f"{vcs_repository}", vcs_base_branch
        )

        # Clone and analyze repository
        repo_url = (
            f"https://github.com/{vcs_repository}"
            if vcs_provider == "github"
            else f"https://gitlab.com/{vcs_repository}"
        )

        logging.info(f"Cloning repository from {repo_url}")
        clone_repo_with_token(repo_url, vcs_token)

        logging.info("Analyzing repository content")
        summary, tree, content = ingest_repository("/tmp/clone")
        logging.debug(
            f"Repository analysis complete - {len(content.splitlines())} lines of content"
        )

        # Generate and submit prompt
        logging.info("Generating review prompt")
        prompt = get_prompt(content, current_readme_content)
        logging.debug(f"Prompt generated with {len(prompt.splitlines())} lines")

        logging.info(f"Calling AI API ({llm_api_model}) for review generation")
        try:
            new_readme = call_ai_api(llm_api_host, llm_api_key, llm_api_model, llm_api_endpoint, prompt)
        except Exception as e:
            logging.error("AI API call failed: %s", e)
            sys.exit(1)

        logging.info("AI docs generation completed successfully")

        # Create or update the update-readme branch
        provider.create_or_update_branch(
            f"{vcs_repository}", update_branch, vcs_base_branch
        )

        # Update or create the README.md file on the update branch
        provider.update_readme_file(f"{vcs_repository}", update_branch, new_readme)

        # Create or update a pull request for the README.md changes
        pr_title = "Update README documentation via PullHero"
        pr_body = (
            "This PR contains an updated README.md file generated by PullHero using the latest "
            "repository context. It includes a well-defined introduction and detailed usage instructions, "
            "ensuring consistency with the previous documentation.\n\n"
            "Please review the changes and let us know if further adjustments are needed."
        )
        provider.create_or_update_pr(
            f"{vcs_repository}", update_branch, vcs_base_branch, pr_title, pr_body
        )

        logging.info("README update process completed successfully.")

    except Exception as e:
        logging.error(f"Failed to complete document action: {str(e)}")
        raise


def get_prompt(content: str, current_readme_content: str) -> str:

    logging.info("Constructing AI review prompt")

    prompt = f"""Documentation Update Task:

Begin Repository Content Section
{content}
End Repository Content Section

Begin README.md Content Section
{current_readme_content if current_readme_content.strip() else '[No existing README.md content found]'}
End README.md Content Section

Instructions:
- Based on the above repository Repository Content Section and current README.md content, generate a complete and improved README.md file for this project.
- The new README should include a clear introduction and a detailed usage section.
- Ensure that the improvements are incremental and consistent with the previous documentation in the README.md file.
- Output only the complete new README.md content exclusively in Markdown syntax.
"""

    logging.debug(f"Generated prompt with {len(prompt.splitlines())} lines")
    return prompt
