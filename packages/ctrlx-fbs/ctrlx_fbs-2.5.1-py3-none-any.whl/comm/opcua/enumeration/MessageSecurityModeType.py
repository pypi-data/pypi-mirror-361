# automatically generated by the FlatBuffers compiler, do not modify

# namespace: enumeration

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MessageSecurityModeType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MessageSecurityModeType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMessageSecurityModeType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MessageSecurityModeType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MessageSecurityModeType
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def MessageSecurityModeTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return MessageSecurityModeTypeStart(builder)
def MessageSecurityModeTypeAddMode(builder, mode): builder.PrependInt32Slot(0, mode, 0)
def AddMode(builder, mode):
    return MessageSecurityModeTypeAddMode(builder, mode)
def MessageSecurityModeTypeEnd(builder): return builder.EndObject()
def End(builder):
    return MessageSecurityModeTypeEnd(builder)

class MessageSecurityModeTypeT(object):

    # MessageSecurityModeTypeT
    def __init__(self):
        self.mode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        messageSecurityModeType = MessageSecurityModeType()
        messageSecurityModeType.Init(buf, pos)
        return cls.InitFromObj(messageSecurityModeType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, messageSecurityModeType):
        x = MessageSecurityModeTypeT()
        x._UnPack(messageSecurityModeType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mode == other.mode

    # MessageSecurityModeTypeT
    def _UnPack(self, messageSecurityModeType):
        if messageSecurityModeType is None:
            return
        self.mode = messageSecurityModeType.Mode()

    # MessageSecurityModeTypeT
    def Pack(self, builder):
        MessageSecurityModeTypeStart(builder)
        MessageSecurityModeTypeAddMode(builder, self.mode)
        messageSecurityModeType = MessageSecurityModeTypeEnd(builder)
        return messageSecurityModeType
