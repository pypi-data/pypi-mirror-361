name: Release

on:
  push:
    tags:
      - 'v*'
      - 'diskcache_rs-v*'  # Support release-please tag format
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

jobs:
  # Call the build workflow to build standard wheels
  build:
    uses: ./.github/workflows/build.yml
    permissions:
      contents: read

  # Call the ABI3 build workflow to build universal wheels
  build-abi3:
    uses: ./.github/workflows/build-abi3.yml
    permissions:
      contents: read

  # Call the CI workflow to run tests
  test:
    uses: ./.github/workflows/ci.yml
    permissions:
      contents: read

  # Publish to PyPI
  release:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, build-abi3, test]
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    environment:
      name: pypi
      url: https://pypi.org/p/diskcache_rs
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List downloaded artifacts
        run: |
          ls -la dist/
          echo "Total files: $(ls -1 dist/ | wc -l)"

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/*'

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Check if any tags exist
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            # Get the latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0)

            # Try to get previous tag
            if PREVIOUS_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^ 2>/dev/null); then
              echo "## Changes in $LATEST_TAG" > CHANGELOG.md
              echo "" >> CHANGELOG.md

              # Get commits between tags
              git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$LATEST_TAG >> CHANGELOG.md
            else
              # Only one tag exists, show all commits up to this tag
              echo "## Changes in $LATEST_TAG" > CHANGELOG.md
              echo "" >> CHANGELOG.md

              # Get all commits up to the tag
              git log --pretty=format:"- %s (%h)" $LATEST_TAG >> CHANGELOG.md
            fi
          else
            # No tags exist, create changelog from all commits
            echo "## Initial Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the first release of diskcache_rs." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "### All Changes:" >> CHANGELOG.md

            # Get all commits
            git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          files: release-artifacts/*
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
