# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Data of a single value/set of an external (MExA) configuration item as key-value pair
# Either use "value" OR "sub" for clean structuring.
class ExternalConfigSingleItemKeyValuePair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExternalConfigSingleItemKeyValuePair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExternalConfigSingleItemKeyValuePair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExternalConfigSingleItemKeyValuePair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # key of the item
    # ExternalConfigSingleItemKeyValuePair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ExternalConfigSingleItemKeyValuePair
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # entry contains a single value (might be nullptr, when this entry refers to structure -> then "sub" is used)
    # ExternalConfigSingleItemKeyValuePair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # entry contains a sub structure, which is just a vector of key-value-pairs (might be nullptr, when this entry refers to single value -> then "value" is used)
    # ExternalConfigSingleItemKeyValuePair
    def Sub(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.ExternalConfigSingleItemKeyValuePair import ExternalConfigSingleItemKeyValuePair
            obj = ExternalConfigSingleItemKeyValuePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ExternalConfigSingleItemKeyValuePair
    def SubLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ExternalConfigSingleItemKeyValuePair
    def SubIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def ExternalConfigSingleItemKeyValuePairStart(builder): builder.StartObject(4)
def Start(builder):
    return ExternalConfigSingleItemKeyValuePairStart(builder)
def ExternalConfigSingleItemKeyValuePairAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def AddKey(builder, key):
    return ExternalConfigSingleItemKeyValuePairAddKey(builder, key)
def ExternalConfigSingleItemKeyValuePairAddValueType(builder, valueType): builder.PrependUint8Slot(1, valueType, 0)
def AddValueType(builder, valueType):
    return ExternalConfigSingleItemKeyValuePairAddValueType(builder, valueType)
def ExternalConfigSingleItemKeyValuePairAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return ExternalConfigSingleItemKeyValuePairAddValue(builder, value)
def ExternalConfigSingleItemKeyValuePairAddSub(builder, sub): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sub), 0)
def AddSub(builder, sub):
    return ExternalConfigSingleItemKeyValuePairAddSub(builder, sub)
def ExternalConfigSingleItemKeyValuePairStartSubVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSubVector(builder, numElems):
    return ExternalConfigSingleItemKeyValuePairStartSubVector(builder, numElems)
def ExternalConfigSingleItemKeyValuePairEnd(builder): return builder.EndObject()
def End(builder):
    return ExternalConfigSingleItemKeyValuePairEnd(builder)
import motion.core.fbtypes.ExternalConfigDouble
import motion.core.fbtypes.ExternalConfigDoubleUnit
import motion.core.fbtypes.ExternalConfigDoubleUnitVector
import motion.core.fbtypes.ExternalConfigDoubleVector
import motion.core.fbtypes.ExternalConfigInt64
import motion.core.fbtypes.ExternalConfigInt64Vector
import motion.core.fbtypes.ExternalConfigSingleItemValue
import motion.core.fbtypes.ExternalConfigString
import motion.core.fbtypes.ExternalConfigStringVector
try:
    from typing import List, Union
except:
    pass

class ExternalConfigSingleItemKeyValuePairT(object):

    # ExternalConfigSingleItemKeyValuePairT
    def __init__(self):
        self.key = None  # type: str
        self.valueType = 0  # type: int
        self.value = None  # type: Union[None, motion.core.fbtypes.ExternalConfigInt64.ExternalConfigInt64T, motion.core.fbtypes.ExternalConfigDouble.ExternalConfigDoubleT, motion.core.fbtypes.ExternalConfigDoubleUnit.ExternalConfigDoubleUnitT, motion.core.fbtypes.ExternalConfigString.ExternalConfigStringT, motion.core.fbtypes.ExternalConfigInt64Vector.ExternalConfigInt64VectorT, motion.core.fbtypes.ExternalConfigDoubleVector.ExternalConfigDoubleVectorT, motion.core.fbtypes.ExternalConfigDoubleUnitVector.ExternalConfigDoubleUnitVectorT, motion.core.fbtypes.ExternalConfigStringVector.ExternalConfigStringVectorT]
        self.sub = None  # type: List[motion.core.fbtypes.ExternalConfigSingleItemKeyValuePair.ExternalConfigSingleItemKeyValuePairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        externalConfigSingleItemKeyValuePair = ExternalConfigSingleItemKeyValuePair()
        externalConfigSingleItemKeyValuePair.Init(buf, pos)
        return cls.InitFromObj(externalConfigSingleItemKeyValuePair)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, externalConfigSingleItemKeyValuePair):
        x = ExternalConfigSingleItemKeyValuePairT()
        x._UnPack(externalConfigSingleItemKeyValuePair)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.key == other.key and \
            self.valueType == other.valueType and \
            self.value == other.value and \
            self.sub == other.sub

    # ExternalConfigSingleItemKeyValuePairT
    def _UnPack(self, externalConfigSingleItemKeyValuePair):
        if externalConfigSingleItemKeyValuePair is None:
            return
        self.key = externalConfigSingleItemKeyValuePair.Key()
        self.valueType = externalConfigSingleItemKeyValuePair.ValueType()
        self.value = motion.core.fbtypes.ExternalConfigSingleItemValue.ExternalConfigSingleItemValueCreator(self.valueType, externalConfigSingleItemKeyValuePair.Value())
        if not externalConfigSingleItemKeyValuePair.SubIsNone():
            self.sub = []
            for i in range(externalConfigSingleItemKeyValuePair.SubLength()):
                if externalConfigSingleItemKeyValuePair.Sub(i) is None:
                    self.sub.append(None)
                else:
                    externalConfigSingleItemKeyValuePair_ = motion.core.fbtypes.ExternalConfigSingleItemKeyValuePair.ExternalConfigSingleItemKeyValuePairT.InitFromObj(externalConfigSingleItemKeyValuePair.Sub(i))
                    self.sub.append(externalConfigSingleItemKeyValuePair_)

    # ExternalConfigSingleItemKeyValuePairT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            value = self.value.Pack(builder)
        if self.sub is not None:
            sublist = []
            for i in range(len(self.sub)):
                sublist.append(self.sub[i].Pack(builder))
            ExternalConfigSingleItemKeyValuePairStartSubVector(builder, len(self.sub))
            for i in reversed(range(len(self.sub))):
                builder.PrependUOffsetTRelative(sublist[i])
            sub = builder.EndVector()
        ExternalConfigSingleItemKeyValuePairStart(builder)
        if self.key is not None:
            ExternalConfigSingleItemKeyValuePairAddKey(builder, key)
        ExternalConfigSingleItemKeyValuePairAddValueType(builder, self.valueType)
        if self.value is not None:
            ExternalConfigSingleItemKeyValuePairAddValue(builder, value)
        if self.sub is not None:
            ExternalConfigSingleItemKeyValuePairAddSub(builder, sub)
        externalConfigSingleItemKeyValuePair = ExternalConfigSingleItemKeyValuePairEnd(builder)
        return externalConfigSingleItemKeyValuePair
