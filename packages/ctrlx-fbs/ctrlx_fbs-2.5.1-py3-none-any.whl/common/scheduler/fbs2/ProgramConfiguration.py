# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs2

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Program configuration mode
class ProgramConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProgramConfiguration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProgramConfiguration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ProgramConfiguration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProgramConfiguration
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def ProgramConfigurationStart(builder): builder.StartObject(1)
def Start(builder):
    return ProgramConfigurationStart(builder)
def ProgramConfigurationAddMode(builder, mode): builder.PrependInt8Slot(0, mode, 0)
def AddMode(builder, mode):
    return ProgramConfigurationAddMode(builder, mode)
def ProgramConfigurationEnd(builder): return builder.EndObject()
def End(builder):
    return ProgramConfigurationEnd(builder)

class ProgramConfigurationT(object):

    # ProgramConfigurationT
    def __init__(self):
        self.mode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        programConfiguration = ProgramConfiguration()
        programConfiguration.Init(buf, pos)
        return cls.InitFromObj(programConfiguration)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, programConfiguration):
        x = ProgramConfigurationT()
        x._UnPack(programConfiguration)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mode == other.mode

    # ProgramConfigurationT
    def _UnPack(self, programConfiguration):
        if programConfiguration is None:
            return
        self.mode = programConfiguration.Mode()

    # ProgramConfigurationT
    def Pack(self, builder):
        ProgramConfigurationStart(builder)
        ProgramConfigurationAddMode(builder, self.mode)
        programConfiguration = ProgramConfigurationEnd(builder)
        return programConfiguration
