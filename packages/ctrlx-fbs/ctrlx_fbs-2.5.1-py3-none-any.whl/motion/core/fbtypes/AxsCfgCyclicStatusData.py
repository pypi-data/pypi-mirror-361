# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Configuration of motion kernel axis function cyclic status data
class AxsCfgCyclicStatusData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgCyclicStatusData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgCyclicStatusData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgCyclicStatusData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # windows for cyclic status data
    # AxsCfgCyclicStatusData
    def Windows(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.AxsCfgWindowsForStateData import AxsCfgWindowsForStateData
            obj = AxsCfgWindowsForStateData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # flag in the motion kernel to enable axis function cyclic status data. 
    # AxsCfgCyclicStatusData
    def Remanent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AxsCfgCyclicStatusDataStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCfgCyclicStatusDataStart(builder)
def AxsCfgCyclicStatusDataAddWindows(builder, windows): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(windows), 0)
def AddWindows(builder, windows):
    return AxsCfgCyclicStatusDataAddWindows(builder, windows)
def AxsCfgCyclicStatusDataAddRemanent(builder, remanent): builder.PrependBoolSlot(1, remanent, 0)
def AddRemanent(builder, remanent):
    return AxsCfgCyclicStatusDataAddRemanent(builder, remanent)
def AxsCfgCyclicStatusDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgCyclicStatusDataEnd(builder)
import motion.core.fbtypes.AxsCfgWindowsForStateData
try:
    from typing import Optional
except:
    pass

class AxsCfgCyclicStatusDataT(object):

    # AxsCfgCyclicStatusDataT
    def __init__(self):
        self.windows = None  # type: Optional[motion.core.fbtypes.AxsCfgWindowsForStateData.AxsCfgWindowsForStateDataT]
        self.remanent = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgCyclicStatusData = AxsCfgCyclicStatusData()
        axsCfgCyclicStatusData.Init(buf, pos)
        return cls.InitFromObj(axsCfgCyclicStatusData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgCyclicStatusData):
        x = AxsCfgCyclicStatusDataT()
        x._UnPack(axsCfgCyclicStatusData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.windows == other.windows and \
            self.remanent == other.remanent

    # AxsCfgCyclicStatusDataT
    def _UnPack(self, axsCfgCyclicStatusData):
        if axsCfgCyclicStatusData is None:
            return
        if axsCfgCyclicStatusData.Windows() is not None:
            self.windows = motion.core.fbtypes.AxsCfgWindowsForStateData.AxsCfgWindowsForStateDataT.InitFromObj(axsCfgCyclicStatusData.Windows())
        self.remanent = axsCfgCyclicStatusData.Remanent()

    # AxsCfgCyclicStatusDataT
    def Pack(self, builder):
        if self.windows is not None:
            windows = self.windows.Pack(builder)
        AxsCfgCyclicStatusDataStart(builder)
        if self.windows is not None:
            AxsCfgCyclicStatusDataAddWindows(builder, windows)
        AxsCfgCyclicStatusDataAddRemanent(builder, self.remanent)
        axsCfgCyclicStatusData = AxsCfgCyclicStatusDataEnd(builder)
        return axsCfgCyclicStatusData
