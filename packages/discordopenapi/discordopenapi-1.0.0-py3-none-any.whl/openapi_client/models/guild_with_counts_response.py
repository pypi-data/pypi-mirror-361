# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.emoji_response import EmojiResponse
from openapi_client.models.guild_role_response import GuildRoleResponse
from openapi_client.models.guild_sticker_response import GuildStickerResponse
from typing import Optional, Set
from typing_extensions import Self

class GuildWithCountsResponse(BaseModel):
    """
    GuildWithCountsResponse
    """ # noqa: E501
    id: Annotated[str, Field(strict=True)]
    name: StrictStr
    icon: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    home_header: Optional[StrictStr] = None
    splash: Optional[StrictStr] = None
    discovery_splash: Optional[StrictStr] = None
    features: List[StrictStr]
    banner: Optional[StrictStr] = None
    owner_id: Annotated[str, Field(strict=True)]
    application_id: Optional[Annotated[str, Field(strict=True)]] = None
    region: StrictStr
    afk_channel_id: Optional[Annotated[str, Field(strict=True)]] = None
    afk_timeout: Optional[StrictInt]
    system_channel_id: Optional[Annotated[str, Field(strict=True)]] = None
    system_channel_flags: StrictInt
    widget_enabled: StrictBool
    widget_channel_id: Optional[Annotated[str, Field(strict=True)]] = None
    verification_level: StrictInt
    roles: List[GuildRoleResponse]
    default_message_notifications: StrictInt
    mfa_level: StrictInt
    explicit_content_filter: StrictInt
    max_presences: Optional[StrictInt] = None
    max_members: Optional[StrictInt] = None
    max_stage_video_channel_users: Optional[StrictInt] = None
    max_video_channel_users: Optional[StrictInt] = None
    vanity_url_code: Optional[StrictStr] = None
    premium_tier: StrictInt
    premium_subscription_count: StrictInt
    preferred_locale: StrictStr
    rules_channel_id: Optional[Annotated[str, Field(strict=True)]] = None
    safety_alerts_channel_id: Optional[Annotated[str, Field(strict=True)]] = None
    public_updates_channel_id: Optional[Annotated[str, Field(strict=True)]] = None
    premium_progress_bar_enabled: StrictBool
    nsfw: StrictBool
    nsfw_level: Optional[StrictInt]
    emojis: List[EmojiResponse]
    stickers: List[GuildStickerResponse]
    approximate_member_count: Optional[StrictInt] = None
    approximate_presence_count: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "name", "icon", "description", "home_header", "splash", "discovery_splash", "features", "banner", "owner_id", "application_id", "region", "afk_channel_id", "afk_timeout", "system_channel_id", "system_channel_flags", "widget_enabled", "widget_channel_id", "verification_level", "roles", "default_message_notifications", "mfa_level", "explicit_content_filter", "max_presences", "max_members", "max_stage_video_channel_users", "max_video_channel_users", "vanity_url_code", "premium_tier", "premium_subscription_count", "preferred_locale", "rules_channel_id", "safety_alerts_channel_id", "public_updates_channel_id", "premium_progress_bar_enabled", "nsfw", "nsfw_level", "emojis", "stickers", "approximate_member_count", "approximate_presence_count"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    @field_validator('owner_id')
    def owner_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    @field_validator('application_id')
    def application_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    @field_validator('afk_channel_id')
    def afk_channel_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    @field_validator('system_channel_id')
    def system_channel_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    @field_validator('widget_channel_id')
    def widget_channel_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    @field_validator('rules_channel_id')
    def rules_channel_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    @field_validator('safety_alerts_channel_id')
    def safety_alerts_channel_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    @field_validator('public_updates_channel_id')
    def public_updates_channel_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuildWithCountsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item_roles in self.roles:
                if _item_roles:
                    _items.append(_item_roles.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in emojis (list)
        _items = []
        if self.emojis:
            for _item_emojis in self.emojis:
                if _item_emojis:
                    _items.append(_item_emojis.to_dict())
            _dict['emojis'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stickers (list)
        _items = []
        if self.stickers:
            for _item_stickers in self.stickers:
                if _item_stickers:
                    _items.append(_item_stickers.to_dict())
            _dict['stickers'] = _items
        # set to None if icon (nullable) is None
        # and model_fields_set contains the field
        if self.icon is None and "icon" in self.model_fields_set:
            _dict['icon'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if home_header (nullable) is None
        # and model_fields_set contains the field
        if self.home_header is None and "home_header" in self.model_fields_set:
            _dict['home_header'] = None

        # set to None if splash (nullable) is None
        # and model_fields_set contains the field
        if self.splash is None and "splash" in self.model_fields_set:
            _dict['splash'] = None

        # set to None if discovery_splash (nullable) is None
        # and model_fields_set contains the field
        if self.discovery_splash is None and "discovery_splash" in self.model_fields_set:
            _dict['discovery_splash'] = None

        # set to None if banner (nullable) is None
        # and model_fields_set contains the field
        if self.banner is None and "banner" in self.model_fields_set:
            _dict['banner'] = None

        # set to None if afk_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.afk_timeout is None and "afk_timeout" in self.model_fields_set:
            _dict['afk_timeout'] = None

        # set to None if max_presences (nullable) is None
        # and model_fields_set contains the field
        if self.max_presences is None and "max_presences" in self.model_fields_set:
            _dict['max_presences'] = None

        # set to None if max_members (nullable) is None
        # and model_fields_set contains the field
        if self.max_members is None and "max_members" in self.model_fields_set:
            _dict['max_members'] = None

        # set to None if max_stage_video_channel_users (nullable) is None
        # and model_fields_set contains the field
        if self.max_stage_video_channel_users is None and "max_stage_video_channel_users" in self.model_fields_set:
            _dict['max_stage_video_channel_users'] = None

        # set to None if max_video_channel_users (nullable) is None
        # and model_fields_set contains the field
        if self.max_video_channel_users is None and "max_video_channel_users" in self.model_fields_set:
            _dict['max_video_channel_users'] = None

        # set to None if vanity_url_code (nullable) is None
        # and model_fields_set contains the field
        if self.vanity_url_code is None and "vanity_url_code" in self.model_fields_set:
            _dict['vanity_url_code'] = None

        # set to None if nsfw_level (nullable) is None
        # and model_fields_set contains the field
        if self.nsfw_level is None and "nsfw_level" in self.model_fields_set:
            _dict['nsfw_level'] = None

        # set to None if approximate_member_count (nullable) is None
        # and model_fields_set contains the field
        if self.approximate_member_count is None and "approximate_member_count" in self.model_fields_set:
            _dict['approximate_member_count'] = None

        # set to None if approximate_presence_count (nullable) is None
        # and model_fields_set contains the field
        if self.approximate_presence_count is None and "approximate_presence_count" in self.model_fields_set:
            _dict['approximate_presence_count'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuildWithCountsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "icon": obj.get("icon"),
            "description": obj.get("description"),
            "home_header": obj.get("home_header"),
            "splash": obj.get("splash"),
            "discovery_splash": obj.get("discovery_splash"),
            "features": obj.get("features"),
            "banner": obj.get("banner"),
            "owner_id": obj.get("owner_id"),
            "application_id": obj.get("application_id"),
            "region": obj.get("region"),
            "afk_channel_id": obj.get("afk_channel_id"),
            "afk_timeout": obj.get("afk_timeout"),
            "system_channel_id": obj.get("system_channel_id"),
            "system_channel_flags": obj.get("system_channel_flags"),
            "widget_enabled": obj.get("widget_enabled"),
            "widget_channel_id": obj.get("widget_channel_id"),
            "verification_level": obj.get("verification_level"),
            "roles": [GuildRoleResponse.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None,
            "default_message_notifications": obj.get("default_message_notifications"),
            "mfa_level": obj.get("mfa_level"),
            "explicit_content_filter": obj.get("explicit_content_filter"),
            "max_presences": obj.get("max_presences"),
            "max_members": obj.get("max_members"),
            "max_stage_video_channel_users": obj.get("max_stage_video_channel_users"),
            "max_video_channel_users": obj.get("max_video_channel_users"),
            "vanity_url_code": obj.get("vanity_url_code"),
            "premium_tier": obj.get("premium_tier"),
            "premium_subscription_count": obj.get("premium_subscription_count"),
            "preferred_locale": obj.get("preferred_locale"),
            "rules_channel_id": obj.get("rules_channel_id"),
            "safety_alerts_channel_id": obj.get("safety_alerts_channel_id"),
            "public_updates_channel_id": obj.get("public_updates_channel_id"),
            "premium_progress_bar_enabled": obj.get("premium_progress_bar_enabled"),
            "nsfw": obj.get("nsfw"),
            "nsfw_level": obj.get("nsfw_level"),
            "emojis": [EmojiResponse.from_dict(_item) for _item in obj["emojis"]] if obj.get("emojis") is not None else None,
            "stickers": [GuildStickerResponse.from_dict(_item) for _item in obj["stickers"]] if obj.get("stickers") is not None else None,
            "approximate_member_count": obj.get("approximate_member_count"),
            "approximate_presence_count": obj.get("approximate_presence_count")
        })
        return _obj


