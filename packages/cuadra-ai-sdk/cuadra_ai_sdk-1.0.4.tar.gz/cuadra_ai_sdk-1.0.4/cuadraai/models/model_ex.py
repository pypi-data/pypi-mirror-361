# -*- coding: utf-8 -*-

"""
cuadraai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from cuadraai.api_helper import APIHelper


class ModelEx(object):

    """Implementation of the 'ModelEx' model.

    Attributes:
        id (str): Model Id
        name (str): Model name
        mtype (str): Model type of content generation and processing
        description (str): Brief description of the model
        proprietary (bool): Indicates whether is a custom model created by you
            or not
        base_model (str): Base model name, if it was created from another model
        base_model_id (str): Base model id, if it was created from another
            model
        created_at (datetime): Creation date
        updated_at (datetime): Last time it was updated
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "mtype": 'type',
        "description": 'description',
        "id": 'id',
        "proprietary": 'proprietary',
        "base_model": 'baseModel',
        "base_model_id": 'baseModelId',
        "created_at": 'createdAt',
        "updated_at": 'updatedAt'
    }

    _optionals = [
        'id',
        'proprietary',
        'base_model',
        'base_model_id',
        'created_at',
        'updated_at',
    ]

    def __init__(self,
                 name=None,
                 mtype=None,
                 description=None,
                 id=APIHelper.SKIP,
                 proprietary=APIHelper.SKIP,
                 base_model=APIHelper.SKIP,
                 base_model_id=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 updated_at=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the ModelEx class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        self.name = name 
        self.mtype = mtype 
        self.description = description 
        if proprietary is not APIHelper.SKIP:
            self.proprietary = proprietary 
        if base_model is not APIHelper.SKIP:
            self.base_model = base_model 
        if base_model_id is not APIHelper.SKIP:
            self.base_model_id = base_model_id 
        if created_at is not APIHelper.SKIP:
            self.created_at = APIHelper.apply_datetime_converter(created_at, APIHelper.RFC3339DateTime) if created_at else None 
        if updated_at is not APIHelper.SKIP:
            self.updated_at = APIHelper.apply_datetime_converter(updated_at, APIHelper.RFC3339DateTime) if updated_at else None 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        proprietary = dictionary.get("proprietary") if "proprietary" in dictionary.keys() else APIHelper.SKIP
        base_model = dictionary.get("baseModel") if dictionary.get("baseModel") else APIHelper.SKIP
        base_model_id = dictionary.get("baseModelId") if dictionary.get("baseModelId") else APIHelper.SKIP
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdAt")).datetime if dictionary.get("createdAt") else APIHelper.SKIP
        updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updatedAt")).datetime if dictionary.get("updatedAt") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(name,
                   mtype,
                   description,
                   id,
                   proprietary,
                   base_model,
                   base_model_id,
                   created_at,
                   updated_at,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'name={self.name!r}, '
                f'mtype={self.mtype!r}, '
                f'description={self.description!r}, '
                f'proprietary={(self.proprietary if hasattr(self, "proprietary") else None)!r}, '
                f'base_model={(self.base_model if hasattr(self, "base_model") else None)!r}, '
                f'base_model_id={(self.base_model_id if hasattr(self, "base_model_id") else None)!r}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!r}, '
                f'updated_at={(self.updated_at if hasattr(self, "updated_at") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'name={self.name!s}, '
                f'mtype={self.mtype!s}, '
                f'description={self.description!s}, '
                f'proprietary={(self.proprietary if hasattr(self, "proprietary") else None)!s}, '
                f'base_model={(self.base_model if hasattr(self, "base_model") else None)!s}, '
                f'base_model_id={(self.base_model_id if hasattr(self, "base_model_id") else None)!s}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!s}, '
                f'updated_at={(self.updated_at if hasattr(self, "updated_at") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
