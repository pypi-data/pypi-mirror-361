# automatically generated by the FlatBuffers compiler, do not modify

# namespace: builtin

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OpaqueNodeId(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OpaqueNodeId()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOpaqueNodeId(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OpaqueNodeId
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OpaqueNodeId
    def NsIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # OpaqueNodeId
    def Identifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.ByteString import ByteString
            obj = ByteString()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def OpaqueNodeIdStart(builder): builder.StartObject(2)
def Start(builder):
    return OpaqueNodeIdStart(builder)
def OpaqueNodeIdAddNsIndex(builder, nsIndex): builder.PrependUint16Slot(0, nsIndex, 0)
def AddNsIndex(builder, nsIndex):
    return OpaqueNodeIdAddNsIndex(builder, nsIndex)
def OpaqueNodeIdAddIdentifier(builder, identifier): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(identifier), 0)
def AddIdentifier(builder, identifier):
    return OpaqueNodeIdAddIdentifier(builder, identifier)
def OpaqueNodeIdEnd(builder): return builder.EndObject()
def End(builder):
    return OpaqueNodeIdEnd(builder)
import comm.opcua.builtin.ByteString
try:
    from typing import Optional
except:
    pass

class OpaqueNodeIdT(object):

    # OpaqueNodeIdT
    def __init__(self):
        self.nsIndex = 0  # type: int
        self.identifier = None  # type: Optional[comm.opcua.builtin.ByteString.ByteStringT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        opaqueNodeId = OpaqueNodeId()
        opaqueNodeId.Init(buf, pos)
        return cls.InitFromObj(opaqueNodeId)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, opaqueNodeId):
        x = OpaqueNodeIdT()
        x._UnPack(opaqueNodeId)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.nsIndex == other.nsIndex and \
            self.identifier == other.identifier

    # OpaqueNodeIdT
    def _UnPack(self, opaqueNodeId):
        if opaqueNodeId is None:
            return
        self.nsIndex = opaqueNodeId.NsIndex()
        if opaqueNodeId.Identifier() is not None:
            self.identifier = comm.opcua.builtin.ByteString.ByteStringT.InitFromObj(opaqueNodeId.Identifier())

    # OpaqueNodeIdT
    def Pack(self, builder):
        if self.identifier is not None:
            identifier = self.identifier.Pack(builder)
        OpaqueNodeIdStart(builder)
        OpaqueNodeIdAddNsIndex(builder, self.nsIndex)
        if self.identifier is not None:
            OpaqueNodeIdAddIdentifier(builder, identifier)
        opaqueNodeId = OpaqueNodeIdEnd(builder)
        return opaqueNodeId
