name: CI

on:
  push:
    branches:
      - main
      - dev
    tags:
      - "**"
  pull_request: {}

env:
  COLUMNS: 150
  PDM_DEPS: "urllib3<2"
  FINDPYTHON_GET_VERSION_TIMEOUT: 30

jobs:
  lint:
    runs-on: ubuntu-latest
    name: lint ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4

      - uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: true
          allow-python-prereleases: true

      - name: install deps
        run: |
          pdm venv create --with-pip --force $PYTHON
          pdm install -G testing
      # - name: Python Linter
        # uses: sunnysid3up/python-linter@master
        # with:
          # source: "smarter_kettle_client"
          # mypy-options: "--ignore-missing-imports --show-error-codes"
          # pylint-options: "--rcfile=.pylintrc"
      - run: pdm run -v lint
      # - uses: pre-commit/action@v3.0.1
      #   with:
      #     extra_args: --all-files --verbose
      #   env:
      #     SKIP: no-commit-to-branch

  # docs-build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: pdm-project/setup-pdm@v4
  #       with:
  #         # cloudflare pages build containers run 3.8, hence using it here
  #         python-version: "3.8"

  #     - name: install dependencies
  #       # Unlike the docs build, we don't use mkdocs_material-insiders
  #       # Because the secret for accessing the library is not accessible from forks, but we still want to run
  #       # this job on public CI runs.
  #       run: |
  #         pdm venv create --with-pip --force $PYTHON
  #         pdm install -G docs

  #     - run: pdm run python -c 'import docs.plugins.main'

  #     - name: prepare shortcuts for extra modules
  #       run: |
  #         ln -s .venv/lib/python*/site-packages/smarter_kettle_client smarter_kettle_client

  #     - run: pdm run mkdocs build

  test:
    name: test ${{ matrix.os }} / ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        python-version: ["3.12"]
    env:
      OS: ${{ matrix.os }}
      DEPS: yes

    runs-on: ${{ matrix.os }}-latest

    steps:
      - uses: actions/checkout@v4

      - uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: true
          allow-python-prereleases: true

      - name: install deps
        run: |
          pdm venv create --with-pip --force $PYTHON
          pdm install -G testing

      - run: pdm info && pdm list

      - run: 'pdm run -v version'

      - run: mkdir coverage

      - run: pdm run -v test

      - name: store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
          path: coverage
      - name: Store coverage html
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

  

  # https://github.com/marketplace/actions/alls-green
  check: # This job does nothing and is only used for the branch protection
    if: always()

    outputs:
      result: ${{ steps.all-green.outputs.result }}

    needs:
      - lint
      # - docs-build
      - build
      - test
      # - test-mypy

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        id: all-green
        with:
          jobs: ${{ toJSON(needs) }}

  build:
    name: Build
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: set up python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - uses: pdm-project/setup-pdm@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: true
        allow-python-prereleases: true

    - name: install deps
      run: |
        pdm venv create --with-pip --force $PYTHON
        pdm install -G build

    # - name: install
    #   run: pip install -U build

    - run: pdm run python -m build
      name: Build the distribution packages
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/


  publish:
    needs: [check]
    if: needs.check.outputs.result == 'success' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment:
      name: Release
      url: https://pypi.org/p/smarter-client
      
    permissions:
      id-token: write

    outputs:
      smarter-kettle-client-version: ${{ steps.check-tag.outputs.VERSION }}

    steps:
    - uses: actions/checkout@v4
    - name: check version
      id: check-tag
      uses: samuelcolvin/check-python-version@v4.1
      with:
        version_file_path: smarter_client/version.py

    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/


    - name: Upload package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    environment:
      name: Release
      url: https://pypi.org/p/smarter-client
      
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write
    needs:
      - publish
    runs-on: ubuntu-latest
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'

  publish-to-testpypi:
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    if: needs.check.outputs.result == 'success' && startsWith(github.ref, 'refs/heads/dev')
    needs:
    - check
    runs-on: ubuntu-latest

    environment:
      name: test-release
      url: https://test.pypi.org/p/smarter-client

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Upload package to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        repository-url: https://test.pypi.org/legacy/

  # github-release:
  #   name: >-
  #     Sign the Python 🐍 distribution 📦 with Sigstore
  #     and upload them to GitHub Release
  #   needs:
  #   - release
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: write  # IMPORTANT: mandatory for making GitHub Releases
  #     id-token: write  # IMPORTANT: mandatory for sigstore

  #   steps:
  #   - name: Download all the dists
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: python-package-distributions
  #       path: dist/
  #   - name: Sign the dists with Sigstore
  #     uses: sigstore/gh-action-sigstore-python@v1.2.3
  #     with:
  #       inputs: >-
  #         ./dist/*.tar.gz
  #         ./dist/*.whl
  #   - name: Create GitHub Release
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #     run: >-
  #       gh release create
  #       '${{ github.ref_name }}'
  #       --repo '${{ github.repository }}'
  #       --notes ""
  #   - name: Upload artifact signatures to GitHub Release
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #     # Upload to GitHub Release using the `gh` CLI.
  #     # `dist/` contains the built packages, and the
  #     # sigstore-produced signatures and certificates.
  #     run: >-
  #       gh release upload
  #       '${{ github.ref_name }}' dist/**
  #       --repo '${{ github.repository }}'
