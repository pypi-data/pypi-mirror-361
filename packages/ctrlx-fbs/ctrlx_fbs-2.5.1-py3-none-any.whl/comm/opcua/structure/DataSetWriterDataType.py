# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DataSetWriterDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataSetWriterDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataSetWriterDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DataSetWriterDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DataSetWriterDataType
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DataSetWriterDataType
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DataSetWriterDataType
    def DataSetWriterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # DataSetWriterDataType
    def DataSetFieldContentMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DataSetWriterDataType
    def KeyFrameCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DataSetWriterDataType
    def DataSetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DataSetWriterDataType
    def DataSetWriterProperties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.KeyValuePair import KeyValuePair
            obj = KeyValuePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetWriterDataType
    def DataSetWriterPropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataSetWriterDataType
    def DataSetWriterPropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # DataSetWriterDataType
    def TransportSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.DataSetWriterTransportDataType import DataSetWriterTransportDataType
            obj = DataSetWriterTransportDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetWriterDataType
    def MessageSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.DataSetWriterMessageDataType import DataSetWriterMessageDataType
            obj = DataSetWriterMessageDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DataSetWriterDataTypeStart(builder): builder.StartObject(9)
def Start(builder):
    return DataSetWriterDataTypeStart(builder)
def DataSetWriterDataTypeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return DataSetWriterDataTypeAddName(builder, name)
def DataSetWriterDataTypeAddEnabled(builder, enabled): builder.PrependBoolSlot(1, enabled, 0)
def AddEnabled(builder, enabled):
    return DataSetWriterDataTypeAddEnabled(builder, enabled)
def DataSetWriterDataTypeAddDataSetWriterId(builder, dataSetWriterId): builder.PrependUint16Slot(2, dataSetWriterId, 0)
def AddDataSetWriterId(builder, dataSetWriterId):
    return DataSetWriterDataTypeAddDataSetWriterId(builder, dataSetWriterId)
def DataSetWriterDataTypeAddDataSetFieldContentMask(builder, dataSetFieldContentMask): builder.PrependUint32Slot(3, dataSetFieldContentMask, 0)
def AddDataSetFieldContentMask(builder, dataSetFieldContentMask):
    return DataSetWriterDataTypeAddDataSetFieldContentMask(builder, dataSetFieldContentMask)
def DataSetWriterDataTypeAddKeyFrameCount(builder, keyFrameCount): builder.PrependUint32Slot(4, keyFrameCount, 0)
def AddKeyFrameCount(builder, keyFrameCount):
    return DataSetWriterDataTypeAddKeyFrameCount(builder, keyFrameCount)
def DataSetWriterDataTypeAddDataSetName(builder, dataSetName): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetName), 0)
def AddDataSetName(builder, dataSetName):
    return DataSetWriterDataTypeAddDataSetName(builder, dataSetName)
def DataSetWriterDataTypeAddDataSetWriterProperties(builder, dataSetWriterProperties): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetWriterProperties), 0)
def AddDataSetWriterProperties(builder, dataSetWriterProperties):
    return DataSetWriterDataTypeAddDataSetWriterProperties(builder, dataSetWriterProperties)
def DataSetWriterDataTypeStartDataSetWriterPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDataSetWriterPropertiesVector(builder, numElems):
    return DataSetWriterDataTypeStartDataSetWriterPropertiesVector(builder, numElems)
def DataSetWriterDataTypeAddTransportSettings(builder, transportSettings): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(transportSettings), 0)
def AddTransportSettings(builder, transportSettings):
    return DataSetWriterDataTypeAddTransportSettings(builder, transportSettings)
def DataSetWriterDataTypeAddMessageSettings(builder, messageSettings): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(messageSettings), 0)
def AddMessageSettings(builder, messageSettings):
    return DataSetWriterDataTypeAddMessageSettings(builder, messageSettings)
def DataSetWriterDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return DataSetWriterDataTypeEnd(builder)
import comm.opcua.structure.KeyValuePair
import comm.opcua.subtypes.DataSetWriterMessageDataType
import comm.opcua.subtypes.DataSetWriterTransportDataType
try:
    from typing import List, Optional
except:
    pass

class DataSetWriterDataTypeT(object):

    # DataSetWriterDataTypeT
    def __init__(self):
        self.name = None  # type: str
        self.enabled = False  # type: bool
        self.dataSetWriterId = 0  # type: int
        self.dataSetFieldContentMask = 0  # type: int
        self.keyFrameCount = 0  # type: int
        self.dataSetName = None  # type: str
        self.dataSetWriterProperties = None  # type: List[comm.opcua.structure.KeyValuePair.KeyValuePairT]
        self.transportSettings = None  # type: Optional[comm.opcua.subtypes.DataSetWriterTransportDataType.DataSetWriterTransportDataTypeT]
        self.messageSettings = None  # type: Optional[comm.opcua.subtypes.DataSetWriterMessageDataType.DataSetWriterMessageDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataSetWriterDataType = DataSetWriterDataType()
        dataSetWriterDataType.Init(buf, pos)
        return cls.InitFromObj(dataSetWriterDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataSetWriterDataType):
        x = DataSetWriterDataTypeT()
        x._UnPack(dataSetWriterDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.enabled == other.enabled and \
            self.dataSetWriterId == other.dataSetWriterId and \
            self.dataSetFieldContentMask == other.dataSetFieldContentMask and \
            self.keyFrameCount == other.keyFrameCount and \
            self.dataSetName == other.dataSetName and \
            self.dataSetWriterProperties == other.dataSetWriterProperties and \
            self.transportSettings == other.transportSettings and \
            self.messageSettings == other.messageSettings

    # DataSetWriterDataTypeT
    def _UnPack(self, dataSetWriterDataType):
        if dataSetWriterDataType is None:
            return
        self.name = dataSetWriterDataType.Name()
        self.enabled = dataSetWriterDataType.Enabled()
        self.dataSetWriterId = dataSetWriterDataType.DataSetWriterId()
        self.dataSetFieldContentMask = dataSetWriterDataType.DataSetFieldContentMask()
        self.keyFrameCount = dataSetWriterDataType.KeyFrameCount()
        self.dataSetName = dataSetWriterDataType.DataSetName()
        if not dataSetWriterDataType.DataSetWriterPropertiesIsNone():
            self.dataSetWriterProperties = []
            for i in range(dataSetWriterDataType.DataSetWriterPropertiesLength()):
                if dataSetWriterDataType.DataSetWriterProperties(i) is None:
                    self.dataSetWriterProperties.append(None)
                else:
                    keyValuePair_ = comm.opcua.structure.KeyValuePair.KeyValuePairT.InitFromObj(dataSetWriterDataType.DataSetWriterProperties(i))
                    self.dataSetWriterProperties.append(keyValuePair_)
        if dataSetWriterDataType.TransportSettings() is not None:
            self.transportSettings = comm.opcua.subtypes.DataSetWriterTransportDataType.DataSetWriterTransportDataTypeT.InitFromObj(dataSetWriterDataType.TransportSettings())
        if dataSetWriterDataType.MessageSettings() is not None:
            self.messageSettings = comm.opcua.subtypes.DataSetWriterMessageDataType.DataSetWriterMessageDataTypeT.InitFromObj(dataSetWriterDataType.MessageSettings())

    # DataSetWriterDataTypeT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.dataSetName is not None:
            dataSetName = builder.CreateString(self.dataSetName)
        if self.dataSetWriterProperties is not None:
            dataSetWriterPropertieslist = []
            for i in range(len(self.dataSetWriterProperties)):
                dataSetWriterPropertieslist.append(self.dataSetWriterProperties[i].Pack(builder))
            DataSetWriterDataTypeStartDataSetWriterPropertiesVector(builder, len(self.dataSetWriterProperties))
            for i in reversed(range(len(self.dataSetWriterProperties))):
                builder.PrependUOffsetTRelative(dataSetWriterPropertieslist[i])
            dataSetWriterProperties = builder.EndVector()
        if self.transportSettings is not None:
            transportSettings = self.transportSettings.Pack(builder)
        if self.messageSettings is not None:
            messageSettings = self.messageSettings.Pack(builder)
        DataSetWriterDataTypeStart(builder)
        if self.name is not None:
            DataSetWriterDataTypeAddName(builder, name)
        DataSetWriterDataTypeAddEnabled(builder, self.enabled)
        DataSetWriterDataTypeAddDataSetWriterId(builder, self.dataSetWriterId)
        DataSetWriterDataTypeAddDataSetFieldContentMask(builder, self.dataSetFieldContentMask)
        DataSetWriterDataTypeAddKeyFrameCount(builder, self.keyFrameCount)
        if self.dataSetName is not None:
            DataSetWriterDataTypeAddDataSetName(builder, dataSetName)
        if self.dataSetWriterProperties is not None:
            DataSetWriterDataTypeAddDataSetWriterProperties(builder, dataSetWriterProperties)
        if self.transportSettings is not None:
            DataSetWriterDataTypeAddTransportSettings(builder, transportSettings)
        if self.messageSettings is not None:
            DataSetWriterDataTypeAddMessageSettings(builder, messageSettings)
        dataSetWriterDataType = DataSetWriterDataTypeEnd(builder)
        return dataSetWriterDataType
