# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ServerSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ServerSettings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsServerSettings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ServerSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # after this time in milliseconds the broker send a ping
    # to not used provider is send to test if provider is still alive
    # ServerSettings
    def ServerIdlePingTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 30000

    # after this time in milliseconds a response from provider is expected
    # if there is no answer a provider is assumed to be dead --> kick provider out of routing
    # ServerSettings
    def ServerWaitResponseTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 30000

    # maximum inbound message size in bytes
    # ServerSettings
    def ServerMaxMessageSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 52428800

    # Address to debug disconnect
    # ServerSettings
    def DebugAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Maximum size of a RT area in bytes
    # ServerSettings
    def ServerMaxRtSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 2097152

    # Emulated NVRam size in bytes if no real NVRAM is found
    # Changes will be active after a restart of app.automationcore
    # ServerSettings
    def ServerEmulatedNvramSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 122880

    # Add the names of the experimental feature you want to enable here
    # ServerSettings
    def ExperimentalFeatures(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ServerSettings
    def ExperimentalFeaturesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ServerSettings
    def ExperimentalFeaturesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Used port for TCP frontend communication - Use value 0 to deactivate communication
    # Takes effect after reboot of control
    # ServerSettings
    def TcpPortFrontend(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 2069

    # Used port for TCP backend communication - Use value 0 to deactivate communication
    # Takes effect after reboot of control
    # ServerSettings
    def TcpPortBackend(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 2070

    # Force emulation of NVRam even if there is a real NVRAM
    # Size of NVRam is serverEmulatedNvramSize
    # Changes will be active after reboot of control
    # ServerSettings
    def ForceEmulatedNvram(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # High water mark of ZMQ
    # Takes effect after reboot of control
    # ServerSettings
    def ServerZmqHighWaterMark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1000

    # Number of requests per bulk
    # If set to 0 - all requests will be single requests.
    # If set to a value unequal to 0 - a bulk request will be
    # splited to this count.
    # ServerSettings
    def MaxBulkRequest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1000

    # Maximum browse answer in bytes that are sorted in alphanumeric way in broker
    # ServerSettings
    def MaxSortSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 50000

    # Maximum alias depth: counts how often an alias can be replaced in one request
    # ServerSettings
    def MaxAliasDepth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 8

def ServerSettingsStart(builder): builder.StartObject(14)
def Start(builder):
    return ServerSettingsStart(builder)
def ServerSettingsAddServerIdlePingTimeout(builder, serverIdlePingTimeout): builder.PrependUint32Slot(0, serverIdlePingTimeout, 30000)
def AddServerIdlePingTimeout(builder, serverIdlePingTimeout):
    return ServerSettingsAddServerIdlePingTimeout(builder, serverIdlePingTimeout)
def ServerSettingsAddServerWaitResponseTimeout(builder, serverWaitResponseTimeout): builder.PrependUint32Slot(1, serverWaitResponseTimeout, 30000)
def AddServerWaitResponseTimeout(builder, serverWaitResponseTimeout):
    return ServerSettingsAddServerWaitResponseTimeout(builder, serverWaitResponseTimeout)
def ServerSettingsAddServerMaxMessageSize(builder, serverMaxMessageSize): builder.PrependUint32Slot(2, serverMaxMessageSize, 52428800)
def AddServerMaxMessageSize(builder, serverMaxMessageSize):
    return ServerSettingsAddServerMaxMessageSize(builder, serverMaxMessageSize)
def ServerSettingsAddDebugAddress(builder, debugAddress): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(debugAddress), 0)
def AddDebugAddress(builder, debugAddress):
    return ServerSettingsAddDebugAddress(builder, debugAddress)
def ServerSettingsAddServerMaxRtSize(builder, serverMaxRtSize): builder.PrependUint32Slot(4, serverMaxRtSize, 2097152)
def AddServerMaxRtSize(builder, serverMaxRtSize):
    return ServerSettingsAddServerMaxRtSize(builder, serverMaxRtSize)
def ServerSettingsAddServerEmulatedNvramSize(builder, serverEmulatedNvramSize): builder.PrependUint32Slot(5, serverEmulatedNvramSize, 122880)
def AddServerEmulatedNvramSize(builder, serverEmulatedNvramSize):
    return ServerSettingsAddServerEmulatedNvramSize(builder, serverEmulatedNvramSize)
def ServerSettingsAddExperimentalFeatures(builder, experimentalFeatures): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(experimentalFeatures), 0)
def AddExperimentalFeatures(builder, experimentalFeatures):
    return ServerSettingsAddExperimentalFeatures(builder, experimentalFeatures)
def ServerSettingsStartExperimentalFeaturesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartExperimentalFeaturesVector(builder, numElems):
    return ServerSettingsStartExperimentalFeaturesVector(builder, numElems)
def ServerSettingsAddTcpPortFrontend(builder, tcpPortFrontend): builder.PrependUint16Slot(7, tcpPortFrontend, 2069)
def AddTcpPortFrontend(builder, tcpPortFrontend):
    return ServerSettingsAddTcpPortFrontend(builder, tcpPortFrontend)
def ServerSettingsAddTcpPortBackend(builder, tcpPortBackend): builder.PrependUint16Slot(8, tcpPortBackend, 2070)
def AddTcpPortBackend(builder, tcpPortBackend):
    return ServerSettingsAddTcpPortBackend(builder, tcpPortBackend)
def ServerSettingsAddForceEmulatedNvram(builder, forceEmulatedNvram): builder.PrependBoolSlot(9, forceEmulatedNvram, 0)
def AddForceEmulatedNvram(builder, forceEmulatedNvram):
    return ServerSettingsAddForceEmulatedNvram(builder, forceEmulatedNvram)
def ServerSettingsAddServerZmqHighWaterMark(builder, serverZmqHighWaterMark): builder.PrependUint32Slot(10, serverZmqHighWaterMark, 1000)
def AddServerZmqHighWaterMark(builder, serverZmqHighWaterMark):
    return ServerSettingsAddServerZmqHighWaterMark(builder, serverZmqHighWaterMark)
def ServerSettingsAddMaxBulkRequest(builder, maxBulkRequest): builder.PrependUint32Slot(11, maxBulkRequest, 1000)
def AddMaxBulkRequest(builder, maxBulkRequest):
    return ServerSettingsAddMaxBulkRequest(builder, maxBulkRequest)
def ServerSettingsAddMaxSortSize(builder, maxSortSize): builder.PrependUint32Slot(12, maxSortSize, 50000)
def AddMaxSortSize(builder, maxSortSize):
    return ServerSettingsAddMaxSortSize(builder, maxSortSize)
def ServerSettingsAddMaxAliasDepth(builder, maxAliasDepth): builder.PrependUint32Slot(13, maxAliasDepth, 8)
def AddMaxAliasDepth(builder, maxAliasDepth):
    return ServerSettingsAddMaxAliasDepth(builder, maxAliasDepth)
def ServerSettingsEnd(builder): return builder.EndObject()
def End(builder):
    return ServerSettingsEnd(builder)
try:
    from typing import List
except:
    pass

class ServerSettingsT(object):

    # ServerSettingsT
    def __init__(self):
        self.serverIdlePingTimeout = 30000  # type: int
        self.serverWaitResponseTimeout = 30000  # type: int
        self.serverMaxMessageSize = 52428800  # type: int
        self.debugAddress = None  # type: str
        self.serverMaxRtSize = 2097152  # type: int
        self.serverEmulatedNvramSize = 122880  # type: int
        self.experimentalFeatures = None  # type: List[str]
        self.tcpPortFrontend = 2069  # type: int
        self.tcpPortBackend = 2070  # type: int
        self.forceEmulatedNvram = False  # type: bool
        self.serverZmqHighWaterMark = 1000  # type: int
        self.maxBulkRequest = 1000  # type: int
        self.maxSortSize = 50000  # type: int
        self.maxAliasDepth = 8  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        serverSettings = ServerSettings()
        serverSettings.Init(buf, pos)
        return cls.InitFromObj(serverSettings)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, serverSettings):
        x = ServerSettingsT()
        x._UnPack(serverSettings)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.serverIdlePingTimeout == other.serverIdlePingTimeout and \
            self.serverWaitResponseTimeout == other.serverWaitResponseTimeout and \
            self.serverMaxMessageSize == other.serverMaxMessageSize and \
            self.debugAddress == other.debugAddress and \
            self.serverMaxRtSize == other.serverMaxRtSize and \
            self.serverEmulatedNvramSize == other.serverEmulatedNvramSize and \
            self.experimentalFeatures == other.experimentalFeatures and \
            self.tcpPortFrontend == other.tcpPortFrontend and \
            self.tcpPortBackend == other.tcpPortBackend and \
            self.forceEmulatedNvram == other.forceEmulatedNvram and \
            self.serverZmqHighWaterMark == other.serverZmqHighWaterMark and \
            self.maxBulkRequest == other.maxBulkRequest and \
            self.maxSortSize == other.maxSortSize and \
            self.maxAliasDepth == other.maxAliasDepth

    # ServerSettingsT
    def _UnPack(self, serverSettings):
        if serverSettings is None:
            return
        self.serverIdlePingTimeout = serverSettings.ServerIdlePingTimeout()
        self.serverWaitResponseTimeout = serverSettings.ServerWaitResponseTimeout()
        self.serverMaxMessageSize = serverSettings.ServerMaxMessageSize()
        self.debugAddress = serverSettings.DebugAddress()
        self.serverMaxRtSize = serverSettings.ServerMaxRtSize()
        self.serverEmulatedNvramSize = serverSettings.ServerEmulatedNvramSize()
        if not serverSettings.ExperimentalFeaturesIsNone():
            self.experimentalFeatures = []
            for i in range(serverSettings.ExperimentalFeaturesLength()):
                self.experimentalFeatures.append(serverSettings.ExperimentalFeatures(i))
        self.tcpPortFrontend = serverSettings.TcpPortFrontend()
        self.tcpPortBackend = serverSettings.TcpPortBackend()
        self.forceEmulatedNvram = serverSettings.ForceEmulatedNvram()
        self.serverZmqHighWaterMark = serverSettings.ServerZmqHighWaterMark()
        self.maxBulkRequest = serverSettings.MaxBulkRequest()
        self.maxSortSize = serverSettings.MaxSortSize()
        self.maxAliasDepth = serverSettings.MaxAliasDepth()

    # ServerSettingsT
    def Pack(self, builder):
        if self.debugAddress is not None:
            debugAddress = builder.CreateString(self.debugAddress)
        if self.experimentalFeatures is not None:
            experimentalFeatureslist = []
            for i in range(len(self.experimentalFeatures)):
                experimentalFeatureslist.append(builder.CreateString(self.experimentalFeatures[i]))
            ServerSettingsStartExperimentalFeaturesVector(builder, len(self.experimentalFeatures))
            for i in reversed(range(len(self.experimentalFeatures))):
                builder.PrependUOffsetTRelative(experimentalFeatureslist[i])
            experimentalFeatures = builder.EndVector()
        ServerSettingsStart(builder)
        ServerSettingsAddServerIdlePingTimeout(builder, self.serverIdlePingTimeout)
        ServerSettingsAddServerWaitResponseTimeout(builder, self.serverWaitResponseTimeout)
        ServerSettingsAddServerMaxMessageSize(builder, self.serverMaxMessageSize)
        if self.debugAddress is not None:
            ServerSettingsAddDebugAddress(builder, debugAddress)
        ServerSettingsAddServerMaxRtSize(builder, self.serverMaxRtSize)
        ServerSettingsAddServerEmulatedNvramSize(builder, self.serverEmulatedNvramSize)
        if self.experimentalFeatures is not None:
            ServerSettingsAddExperimentalFeatures(builder, experimentalFeatures)
        ServerSettingsAddTcpPortFrontend(builder, self.tcpPortFrontend)
        ServerSettingsAddTcpPortBackend(builder, self.tcpPortBackend)
        ServerSettingsAddForceEmulatedNvram(builder, self.forceEmulatedNvram)
        ServerSettingsAddServerZmqHighWaterMark(builder, self.serverZmqHighWaterMark)
        ServerSettingsAddMaxBulkRequest(builder, self.maxBulkRequest)
        ServerSettingsAddMaxSortSize(builder, self.maxSortSize)
        ServerSettingsAddMaxAliasDepth(builder, self.maxAliasDepth)
        serverSettings = ServerSettingsEnd(builder)
        return serverSettings
