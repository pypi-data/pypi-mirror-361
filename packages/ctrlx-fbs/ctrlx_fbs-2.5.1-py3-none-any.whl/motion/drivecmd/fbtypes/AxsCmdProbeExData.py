# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of touch probe
class AxsCmdProbeExData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdProbeExData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdProbeExData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdProbeExData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # probe index
    # AxsCmdProbeExData
    def ProbeIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AxsCmdProbeExDataStart(builder): builder.StartObject(1)
def Start(builder):
    return AxsCmdProbeExDataStart(builder)
def AxsCmdProbeExDataAddProbeIndex(builder, probeIndex): builder.PrependInt8Slot(0, probeIndex, 0)
def AddProbeIndex(builder, probeIndex):
    return AxsCmdProbeExDataAddProbeIndex(builder, probeIndex)
def AxsCmdProbeExDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdProbeExDataEnd(builder)

class AxsCmdProbeExDataT(object):

    # AxsCmdProbeExDataT
    def __init__(self):
        self.probeIndex = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdProbeExData = AxsCmdProbeExData()
        axsCmdProbeExData.Init(buf, pos)
        return cls.InitFromObj(axsCmdProbeExData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdProbeExData):
        x = AxsCmdProbeExDataT()
        x._UnPack(axsCmdProbeExData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.probeIndex == other.probeIndex

    # AxsCmdProbeExDataT
    def _UnPack(self, axsCmdProbeExData):
        if axsCmdProbeExData is None:
            return
        self.probeIndex = axsCmdProbeExData.ProbeIndex()

    # AxsCmdProbeExDataT
    def Pack(self, builder):
        AxsCmdProbeExDataStart(builder)
        AxsCmdProbeExDataAddProbeIndex(builder, self.probeIndex)
        axsCmdProbeExData = AxsCmdProbeExDataEnd(builder)
        return axsCmdProbeExData
