name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

jobs:
  # Code quality and testing
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: uv sync --group dev
      - name: Install build dependencies
        run: uv pip install maturin
      - name: Build extension
        run: uv run maturin develop
        env:
          RUST_BACKTRACE: 1
      - name: Generate type stubs
        run: |
          uv run pyo3-stubgen diskcache_rs._diskcache_rs python/diskcache_rs/
          echo "âœ… Type stubs generated successfully"
      - name: Run pytest
        run: uv run python -m pytest tests/ -v --tb=short -m "not docker"
        env:
          PYTHONUNBUFFERED: 1
      - name: Run basic functionality tests
        run: uv run python -c 'import diskcache_rs; print("diskcache_rs imported successfully")'

  # Code formatting and linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.11"
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Install dependencies
        run: uv sync --group dev
      - name: Check Rust formatting
        run: cargo fmt --all -- --check
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features
      - name: Run ruff check
        run: uv run ruff check .
      - name: Run ruff format check
        run: uv run ruff format --check .