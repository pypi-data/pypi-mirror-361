# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TypeFloat(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TypeFloat()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTypeFloat(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TypeFloat
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TypeFloat
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def TypeFloatStart(builder): builder.StartObject(1)
def Start(builder):
    return TypeFloatStart(builder)
def TypeFloatAddValue(builder, value): builder.PrependFloat32Slot(0, value, 0.0)
def AddValue(builder, value):
    return TypeFloatAddValue(builder, value)
def TypeFloatEnd(builder): return builder.EndObject()
def End(builder):
    return TypeFloatEnd(builder)

class TypeFloatT(object):

    # TypeFloatT
    def __init__(self):
        self.value = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        typeFloat = TypeFloat()
        typeFloat.Init(buf, pos)
        return cls.InitFromObj(typeFloat)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, typeFloat):
        x = TypeFloatT()
        x._UnPack(typeFloat)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value

    # TypeFloatT
    def _UnPack(self, typeFloat):
        if typeFloat is None:
            return
        self.value = typeFloat.Value()

    # TypeFloatT
    def Pack(self, builder):
        TypeFloatStart(builder)
        TypeFloatAddValue(builder, self.value)
        typeFloat = TypeFloatEnd(builder)
        return typeFloat
