# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# GearInPos calculation pipeline parameters for the axis GearInPos command
class AxsCmdGearInPosParams(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdGearInPosParams()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdGearInPosParams(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdGearInPosParams
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # master offset value
    # AxsCmdGearInPosParams
    def MasterOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # slave offset value
    # AxsCmdGearInPosParams
    def SlaveOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ratio numerator value
    # AxsCmdGearInPosParams
    def RatioNumerator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # ratio denominator value
    # AxsCmdGearInPosParams
    def RatioDenominator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # fine adjust parameter
    # AxsCmdGearInPosParams
    def FineAdjust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def AxsCmdGearInPosParamsStart(builder): builder.StartObject(5)
def Start(builder):
    return AxsCmdGearInPosParamsStart(builder)
def AxsCmdGearInPosParamsAddMasterOffset(builder, masterOffset): builder.PrependFloat64Slot(0, masterOffset, 0.0)
def AddMasterOffset(builder, masterOffset):
    return AxsCmdGearInPosParamsAddMasterOffset(builder, masterOffset)
def AxsCmdGearInPosParamsAddSlaveOffset(builder, slaveOffset): builder.PrependFloat64Slot(1, slaveOffset, 0.0)
def AddSlaveOffset(builder, slaveOffset):
    return AxsCmdGearInPosParamsAddSlaveOffset(builder, slaveOffset)
def AxsCmdGearInPosParamsAddRatioNumerator(builder, ratioNumerator): builder.PrependInt32Slot(2, ratioNumerator, 1)
def AddRatioNumerator(builder, ratioNumerator):
    return AxsCmdGearInPosParamsAddRatioNumerator(builder, ratioNumerator)
def AxsCmdGearInPosParamsAddRatioDenominator(builder, ratioDenominator): builder.PrependInt32Slot(3, ratioDenominator, 1)
def AddRatioDenominator(builder, ratioDenominator):
    return AxsCmdGearInPosParamsAddRatioDenominator(builder, ratioDenominator)
def AxsCmdGearInPosParamsAddFineAdjust(builder, fineAdjust): builder.PrependFloat64Slot(4, fineAdjust, 0.0)
def AddFineAdjust(builder, fineAdjust):
    return AxsCmdGearInPosParamsAddFineAdjust(builder, fineAdjust)
def AxsCmdGearInPosParamsEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdGearInPosParamsEnd(builder)

class AxsCmdGearInPosParamsT(object):

    # AxsCmdGearInPosParamsT
    def __init__(self):
        self.masterOffset = 0.0  # type: float
        self.slaveOffset = 0.0  # type: float
        self.ratioNumerator = 1  # type: int
        self.ratioDenominator = 1  # type: int
        self.fineAdjust = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdGearInPosParams = AxsCmdGearInPosParams()
        axsCmdGearInPosParams.Init(buf, pos)
        return cls.InitFromObj(axsCmdGearInPosParams)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdGearInPosParams):
        x = AxsCmdGearInPosParamsT()
        x._UnPack(axsCmdGearInPosParams)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.masterOffset == other.masterOffset and \
            self.slaveOffset == other.slaveOffset and \
            self.ratioNumerator == other.ratioNumerator and \
            self.ratioDenominator == other.ratioDenominator and \
            self.fineAdjust == other.fineAdjust

    # AxsCmdGearInPosParamsT
    def _UnPack(self, axsCmdGearInPosParams):
        if axsCmdGearInPosParams is None:
            return
        self.masterOffset = axsCmdGearInPosParams.MasterOffset()
        self.slaveOffset = axsCmdGearInPosParams.SlaveOffset()
        self.ratioNumerator = axsCmdGearInPosParams.RatioNumerator()
        self.ratioDenominator = axsCmdGearInPosParams.RatioDenominator()
        self.fineAdjust = axsCmdGearInPosParams.FineAdjust()

    # AxsCmdGearInPosParamsT
    def Pack(self, builder):
        AxsCmdGearInPosParamsStart(builder)
        AxsCmdGearInPosParamsAddMasterOffset(builder, self.masterOffset)
        AxsCmdGearInPosParamsAddSlaveOffset(builder, self.slaveOffset)
        AxsCmdGearInPosParamsAddRatioNumerator(builder, self.ratioNumerator)
        AxsCmdGearInPosParamsAddRatioDenominator(builder, self.ratioDenominator)
        AxsCmdGearInPosParamsAddFineAdjust(builder, self.fineAdjust)
        axsCmdGearInPosParams = AxsCmdGearInPosParamsEnd(builder)
        return axsCmdGearInPosParams
