# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# structure for key-value-pair configuration items
class KVPCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KVPCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKVPCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KVPCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # all items in the key-value-pair-map
    # KVPCfg
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KVPCfgSingleItem import KVPCfgSingleItem
            obj = KVPCfgSingleItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KVPCfg
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KVPCfg
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def KVPCfgStart(builder): builder.StartObject(1)
def Start(builder):
    return KVPCfgStart(builder)
def KVPCfgAddItems(builder, items): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)
def AddItems(builder, items):
    return KVPCfgAddItems(builder, items)
def KVPCfgStartItemsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartItemsVector(builder, numElems):
    return KVPCfgStartItemsVector(builder, numElems)
def KVPCfgEnd(builder): return builder.EndObject()
def End(builder):
    return KVPCfgEnd(builder)
import motion.core.fbtypes.KVPCfgSingleItem
try:
    from typing import List
except:
    pass

class KVPCfgT(object):

    # KVPCfgT
    def __init__(self):
        self.items = None  # type: List[motion.core.fbtypes.KVPCfgSingleItem.KVPCfgSingleItemT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kvpcfg = KVPCfg()
        kvpcfg.Init(buf, pos)
        return cls.InitFromObj(kvpcfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kvpcfg):
        x = KVPCfgT()
        x._UnPack(kvpcfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.items == other.items

    # KVPCfgT
    def _UnPack(self, kvpcfg):
        if kvpcfg is None:
            return
        if not kvpcfg.ItemsIsNone():
            self.items = []
            for i in range(kvpcfg.ItemsLength()):
                if kvpcfg.Items(i) is None:
                    self.items.append(None)
                else:
                    kVPCfgSingleItem_ = motion.core.fbtypes.KVPCfgSingleItem.KVPCfgSingleItemT.InitFromObj(kvpcfg.Items(i))
                    self.items.append(kVPCfgSingleItem_)

    # KVPCfgT
    def Pack(self, builder):
        if self.items is not None:
            itemslist = []
            for i in range(len(self.items)):
                itemslist.append(self.items[i].Pack(builder))
            KVPCfgStartItemsVector(builder, len(self.items))
            for i in reversed(range(len(self.items))):
                builder.PrependUOffsetTRelative(itemslist[i])
            items = builder.EndVector()
        KVPCfgStart(builder)
        if self.items is not None:
            KVPCfgAddItems(builder, items)
        kvpcfg = KVPCfgEnd(builder)
        return kvpcfg
