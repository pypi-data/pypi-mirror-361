# coding: utf-8

# flake8: noqa

"""
    University Photo API

     ## Introduction  The Photo API allows access to Photos of members of the University. The Photos exposed by this API are expected to be a good representation of the person they relate to.  The API broadly follows the principles of REST and strives to provide an interface that can be easily consumed by downstream systems.  ### Stability  This release of the Photo API is a `beta` offering: a service we are moving towards live but which requires wider testing with a broader group of users.  ### Versioning  The Photo API is versioned using URL path prefixes in the format: `/v1beta1/photos`. This follows the pattern established by the [GCP API](https://cloud.google.com/apis/design/versioning). Breaking changes will not be made without a change in API major version, however non-breaking changes will be introduced without changes to the version path prefix. All changes will be documented in the project's [CHANGELOG](https://gitlab.developers.cam.ac.uk/uis/devops/iam/photo-api/-/blob/master/CHANGELOG.md)  The available versions of the API are listed at the API's root.  ### Domain  The Photo API serves Photos of members of the University, linking a Photo to an individual through `PhotoIdentifiers` (see below) which pertain to a person record within an external system.  The Photos served by the Photo API are expected to be of sufficient quality to identify the person they represent. Photos which have been reviewed and determined to be sufficient quality are marked as having the status `approved` and exposed through the `approved-photos` endpoints.  ### Data source  The Photos exposed by the Photo API are currently a mirror of card Photos contained within the [Card Database](https://webservices.admin.cam.ac.uk/uc/). With Photos being synced from the Card Database to the Photo API hourly.  In future, the Photo API will be extended to allow Photos to be created and 'approved' using the API.  ## Core entities  ### The `Photo` Entity  The `Photo` entity contains information and metadata about a Photo of a member of the university. The `status` field on a Photo indicates whether this Photo has been reviewed and approved. Only Photos which have the status `approved` are exposed through the `approved-photos` endpoints. Each photo entity has a unique identifier - termed UUID - which is used in the system to refer to the specific photo entity. The UUID is provided in JSON documents as the `id` property.   Each Photo entity contains a link to the image data itself and a thumbnail for this Photo, which is guaranteed to be less than 128x128 pixels. Images are served by redirecting to a temporary URL provided by the service used to host images. These temporary URLs will expire after an hour and should not be retained for long-lasting access to a given Photo.  Each Photo may contain a block of JSON metadata recording information about the Photo. Photos cannot be updated once created (apart from to move their status to `approved`) hence this metadata should not be used to store application state or any other information which is not related to the content of the Photo.  Each Photo will have a set of `PhotoIdentifier` which allow the Photo to be linked to a person record within another system.  ### The `PhotoIdentifier` Entity  The `PhotoIdentifier` entity holds the `value` and `scheme` of a given identifier. The `value` field of a `PhotoIdentifier` is a simple ID string - e.g. `wgd23` or `000001`. The `scheme` field of a `PhotoIdentifier` indicates what system this identifier relates to or was issued by. This allows many identifiers which relate to different systems to be recorded against a single `Photo`.  The supported schemes are: * `v1.person.identifiers.cam.ac.uk`: The CRSID of the person represented by this Photo * `person.v1.student-records.university.identifiers.cam.ac.uk`: The CamSIS identifier (USN) of the person represented by this Photo * `person.v1.human-resources.university.identifiers.cam.ac.uk`: The CHRIS identifier (staff number) of the person represented by this Photo * `photo.v1.legacy-card.university.identifiers.cam.ac.uk`: The id of this Photo within the legacy card system  ## Using the API  ### Auth  To authenticate against the Photo API, an application must be registered within the API Gateway and granted access to the `University Photo` product. Details of how to register an application and grant access to products can be found in the [API Gateway Getting Started Guide](https://developer.api.apps.cam.ac.uk/start-using-an-api).  

    The version of the OpenAPI document: v1beta1
    Contact: devops+photoapi@uis.cam.ac.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


__version__ = "1.0.0"

# import apis into sdk package
from identitylib.photo_client.api.api_versions_api import APIVersionsApi
from identitylib.photo_client.api.permissions_api import PermissionsApi
from identitylib.photo_client.api.v1beta1_api import V1beta1Api

# import ApiClient
from identitylib.photo_client.api_response import ApiResponse
from identitylib.photo_client.api_client import ApiClient
from identitylib.photo_client.configuration import Configuration
from identitylib.photo_client.exceptions import OpenApiException
from identitylib.photo_client.exceptions import ApiTypeError
from identitylib.photo_client.exceptions import ApiValueError
from identitylib.photo_client.exceptions import ApiKeyError
from identitylib.photo_client.exceptions import ApiAttributeError
from identitylib.photo_client.exceptions import ApiException

# import models into sdk package
from identitylib.photo_client.models.api_versions import APIVersions
from identitylib.photo_client.models.action_enum import ActionEnum
from identitylib.photo_client.models.bad_request import BadRequest
from identitylib.photo_client.models.forbidden import Forbidden
from identitylib.photo_client.models.internal_server_error import InternalServerError
from identitylib.photo_client.models.not_found import NotFound
from identitylib.photo_client.models.paginated_v1_beta1_photo_identifier_summary_list import PaginatedV1Beta1PhotoIdentifierSummaryList
from identitylib.photo_client.models.paginated_v1_beta1_photo_list import PaginatedV1Beta1PhotoList
from identitylib.photo_client.models.permissions import Permissions
from identitylib.photo_client.models.photo_identifier import PhotoIdentifier
from identitylib.photo_client.models.photo_identifier_bulk_update_request_request import PhotoIdentifierBulkUpdateRequestRequest
from identitylib.photo_client.models.photo_identifier_bulk_update_update_request import PhotoIdentifierBulkUpdateUpdateRequest
from identitylib.photo_client.models.scheme_enum import SchemeEnum
from identitylib.photo_client.models.status_enum import StatusEnum
from identitylib.photo_client.models.transient_image_url import TransientImageUrl
from identitylib.photo_client.models.unauthorized import Unauthorized
from identitylib.photo_client.models.v1_beta1_photo import V1Beta1Photo
from identitylib.photo_client.models.v1_beta1_photo_identifier_summary import V1Beta1PhotoIdentifierSummary
