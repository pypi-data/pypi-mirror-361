# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Table for a vector of double+unit values
class ExternalConfigDoubleUnitVector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExternalConfigDoubleUnitVector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExternalConfigDoubleUnitVector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExternalConfigDoubleUnitVector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of double numbers with units
    # ExternalConfigDoubleUnitVector
    def DoubleVector(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.ExternalConfigDoubleUnit import ExternalConfigDoubleUnit
            obj = ExternalConfigDoubleUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ExternalConfigDoubleUnitVector
    def DoubleVectorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ExternalConfigDoubleUnitVector
    def DoubleVectorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ExternalConfigDoubleUnitVectorStart(builder): builder.StartObject(1)
def Start(builder):
    return ExternalConfigDoubleUnitVectorStart(builder)
def ExternalConfigDoubleUnitVectorAddDoubleVector(builder, doubleVector): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(doubleVector), 0)
def AddDoubleVector(builder, doubleVector):
    return ExternalConfigDoubleUnitVectorAddDoubleVector(builder, doubleVector)
def ExternalConfigDoubleUnitVectorStartDoubleVectorVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDoubleVectorVector(builder, numElems):
    return ExternalConfigDoubleUnitVectorStartDoubleVectorVector(builder, numElems)
def ExternalConfigDoubleUnitVectorEnd(builder): return builder.EndObject()
def End(builder):
    return ExternalConfigDoubleUnitVectorEnd(builder)
import motion.core.fbtypes.ExternalConfigDoubleUnit
try:
    from typing import List
except:
    pass

class ExternalConfigDoubleUnitVectorT(object):

    # ExternalConfigDoubleUnitVectorT
    def __init__(self):
        self.doubleVector = None  # type: List[motion.core.fbtypes.ExternalConfigDoubleUnit.ExternalConfigDoubleUnitT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        externalConfigDoubleUnitVector = ExternalConfigDoubleUnitVector()
        externalConfigDoubleUnitVector.Init(buf, pos)
        return cls.InitFromObj(externalConfigDoubleUnitVector)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, externalConfigDoubleUnitVector):
        x = ExternalConfigDoubleUnitVectorT()
        x._UnPack(externalConfigDoubleUnitVector)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.doubleVector == other.doubleVector

    # ExternalConfigDoubleUnitVectorT
    def _UnPack(self, externalConfigDoubleUnitVector):
        if externalConfigDoubleUnitVector is None:
            return
        if not externalConfigDoubleUnitVector.DoubleVectorIsNone():
            self.doubleVector = []
            for i in range(externalConfigDoubleUnitVector.DoubleVectorLength()):
                if externalConfigDoubleUnitVector.DoubleVector(i) is None:
                    self.doubleVector.append(None)
                else:
                    externalConfigDoubleUnit_ = motion.core.fbtypes.ExternalConfigDoubleUnit.ExternalConfigDoubleUnitT.InitFromObj(externalConfigDoubleUnitVector.DoubleVector(i))
                    self.doubleVector.append(externalConfigDoubleUnit_)

    # ExternalConfigDoubleUnitVectorT
    def Pack(self, builder):
        if self.doubleVector is not None:
            doubleVectorlist = []
            for i in range(len(self.doubleVector)):
                doubleVectorlist.append(self.doubleVector[i].Pack(builder))
            ExternalConfigDoubleUnitVectorStartDoubleVectorVector(builder, len(self.doubleVector))
            for i in reversed(range(len(self.doubleVector))):
                builder.PrependUOffsetTRelative(doubleVectorlist[i])
            doubleVector = builder.EndVector()
        ExternalConfigDoubleUnitVectorStart(builder)
        if self.doubleVector is not None:
            ExternalConfigDoubleUnitVectorAddDoubleVector(builder, doubleVector)
        externalConfigDoubleUnitVector = ExternalConfigDoubleUnitVectorEnd(builder)
        return externalConfigDoubleUnitVector
