# base class for all sentence selectors

from dataclasses import dataclass
from typing import Tuple

# sentence class for hallucination detection
@dataclass
class HdSentence:
        hypothesis: str # E2E hypothesis generated by sentence selector feeding to HD
        detection_type: str = 'NA'
        reason: str = "NA"

        def __hash__(self):
            return hash(self.hypothesis)


class SentenceSelectorBase:
    def __init__(self):
        pass

    # given a sentence, convert it into hypothesis for hallucination detection if selected.
    def select_sentence(self, text_content : str) -> Tuple[bool, HdSentence]:
        return False, HdSentence(None, "SentenceSelectorBase", "NA") # return empty list by default

class PassThroughSentenceSelector(SentenceSelectorBase):
    def __init__(self):
        super().__init__()

    # given a sentence, convert it into hypothesis for hallucination detection if selected.
    def select_sentence(self, text_content : str) -> Tuple[bool, HdSentence]:
        # simply send the whole sentence without doing any filtering,
        # so that hallucination detection will always check all sentences
        return True, HdSentence(text_content, "PassThroughSentenceSelector", "Select all sentences for HD")

class RuleBasedSentenceSelector(SentenceSelectorBase):
    def __init__(self):
        super().__init__()

    # given a sentence, convert it into hypothesis for hallucination detection if selected.
    def select_sentence(self, text_content : str) -> Tuple[bool, HdSentence]:
        # simply send the whole sentence without doing any filtering,
        # so that hallucination detection will always check all sentences
        if len(text_content.split(' ')) <= 2:
            return False, None
        else:
            return True, HdSentence(text_content, "RuleBasedSentenceSelector", "Selected sentences for HD")

class SentenceSelectorFactory:
    @staticmethod
    def create_sentence_selector(sentence_selector_type : str) -> SentenceSelectorBase:
        return SentenceSelectorFactory.create_single_sentence_selector(sentence_selector_type)
    
    @staticmethod
    def create_single_sentence_selector(sentence_selector_type : str) -> SentenceSelectorBase:
        if sentence_selector_type == "pass_through":
            return PassThroughSentenceSelector()
        elif sentence_selector_type == "rule_based":
            return RuleBasedSentenceSelector()
        elif sentence_selector_type == "base":
            return SentenceSelectorBase() # only used for testing ensembled sentence selector
        else:
            raise ValueError("Unknown sentence selector type: {sentence_selector_type}")