# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command PathSmooth (rounding of corner between successively move commands) for kinematics
class KinCmdPathSmoothData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdPathSmoothData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmdPathSmoothData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmdPathSmoothData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # start or end of path
    # KinCmdPathSmoothData
    def IsStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # optional distance EPS (maximum permissible tolerance eps, must be greater than zero)
    # KinCmdPathSmoothData
    def Eps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # set the number of commands that should be prepared completely (only relevant when isStart=true)
    # KinCmdPathSmoothData
    def PrepCmds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # rounding type (default type POLY_TRANS)
    # KinCmdPathSmoothData
    def RoundingType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def KinCmdPathSmoothDataStart(builder): builder.StartObject(4)
def Start(builder):
    return KinCmdPathSmoothDataStart(builder)
def KinCmdPathSmoothDataAddIsStart(builder, isStart): builder.PrependBoolSlot(0, isStart, 1)
def AddIsStart(builder, isStart):
    return KinCmdPathSmoothDataAddIsStart(builder, isStart)
def KinCmdPathSmoothDataAddEps(builder, eps): builder.PrependFloat64Slot(1, eps, 0.0)
def AddEps(builder, eps):
    return KinCmdPathSmoothDataAddEps(builder, eps)
def KinCmdPathSmoothDataAddPrepCmds(builder, prepCmds): builder.PrependUint32Slot(2, prepCmds, 0)
def AddPrepCmds(builder, prepCmds):
    return KinCmdPathSmoothDataAddPrepCmds(builder, prepCmds)
def KinCmdPathSmoothDataAddRoundingType(builder, roundingType): builder.PrependInt8Slot(3, roundingType, 0)
def AddRoundingType(builder, roundingType):
    return KinCmdPathSmoothDataAddRoundingType(builder, roundingType)
def KinCmdPathSmoothDataEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmdPathSmoothDataEnd(builder)

class KinCmdPathSmoothDataT(object):

    # KinCmdPathSmoothDataT
    def __init__(self):
        self.isStart = True  # type: bool
        self.eps = 0.0  # type: float
        self.prepCmds = 0  # type: int
        self.roundingType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdPathSmoothData = KinCmdPathSmoothData()
        kinCmdPathSmoothData.Init(buf, pos)
        return cls.InitFromObj(kinCmdPathSmoothData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmdPathSmoothData):
        x = KinCmdPathSmoothDataT()
        x._UnPack(kinCmdPathSmoothData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.isStart == other.isStart and \
            self.eps == other.eps and \
            self.prepCmds == other.prepCmds and \
            self.roundingType == other.roundingType

    # KinCmdPathSmoothDataT
    def _UnPack(self, kinCmdPathSmoothData):
        if kinCmdPathSmoothData is None:
            return
        self.isStart = kinCmdPathSmoothData.IsStart()
        self.eps = kinCmdPathSmoothData.Eps()
        self.prepCmds = kinCmdPathSmoothData.PrepCmds()
        self.roundingType = kinCmdPathSmoothData.RoundingType()

    # KinCmdPathSmoothDataT
    def Pack(self, builder):
        KinCmdPathSmoothDataStart(builder)
        KinCmdPathSmoothDataAddIsStart(builder, self.isStart)
        KinCmdPathSmoothDataAddEps(builder, self.eps)
        KinCmdPathSmoothDataAddPrepCmds(builder, self.prepCmds)
        KinCmdPathSmoothDataAddRoundingType(builder, self.roundingType)
        kinCmdPathSmoothData = KinCmdPathSmoothDataEnd(builder)
        return kinCmdPathSmoothData
