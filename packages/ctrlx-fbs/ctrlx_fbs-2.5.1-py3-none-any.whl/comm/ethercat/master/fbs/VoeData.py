# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#To read VoE data out of the master, received by a slave device
#To write VoE data to a slave device
class VoeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VoeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVoeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VoeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VoeData
    def Request(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.VoeDataRequest import VoeDataRequest
            obj = VoeDataRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VoeData
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.VoeDataResponse import VoeDataResponse
            obj = VoeDataResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def VoeDataStart(builder): builder.StartObject(2)
def Start(builder):
    return VoeDataStart(builder)
def VoeDataAddRequest(builder, request): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(request), 0)
def AddRequest(builder, request):
    return VoeDataAddRequest(builder, request)
def VoeDataAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def AddResponse(builder, response):
    return VoeDataAddResponse(builder, response)
def VoeDataEnd(builder): return builder.EndObject()
def End(builder):
    return VoeDataEnd(builder)
import comm.ethercat.master.fbs.VoeDataRequest
import comm.ethercat.master.fbs.VoeDataResponse
try:
    from typing import Optional
except:
    pass

class VoeDataT(object):

    # VoeDataT
    def __init__(self):
        self.request = None  # type: Optional[comm.ethercat.master.fbs.VoeDataRequest.VoeDataRequestT]
        self.response = None  # type: Optional[comm.ethercat.master.fbs.VoeDataResponse.VoeDataResponseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        voeData = VoeData()
        voeData.Init(buf, pos)
        return cls.InitFromObj(voeData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, voeData):
        x = VoeDataT()
        x._UnPack(voeData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.request == other.request and \
            self.response == other.response

    # VoeDataT
    def _UnPack(self, voeData):
        if voeData is None:
            return
        if voeData.Request() is not None:
            self.request = comm.ethercat.master.fbs.VoeDataRequest.VoeDataRequestT.InitFromObj(voeData.Request())
        if voeData.Response() is not None:
            self.response = comm.ethercat.master.fbs.VoeDataResponse.VoeDataResponseT.InitFromObj(voeData.Response())

    # VoeDataT
    def Pack(self, builder):
        if self.request is not None:
            request = self.request.Pack(builder)
        if self.response is not None:
            response = self.response.Pack(builder)
        VoeDataStart(builder)
        if self.request is not None:
            VoeDataAddRequest(builder, request)
        if self.response is not None:
            VoeDataAddResponse(builder, response)
        voeData = VoeDataEnd(builder)
        return voeData
