# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OscilloscopeDiagnosis(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OscilloscopeDiagnosis()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOscilloscopeDiagnosis(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OscilloscopeDiagnosis
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OscilloscopeDiagnosis
    def MainDiagnosisCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OscilloscopeDiagnosis
    def DetailedDiagnosisCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OscilloscopeDiagnosis
    def DynamicDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OscilloscopeDiagnosisStart(builder): builder.StartObject(3)
def Start(builder):
    return OscilloscopeDiagnosisStart(builder)
def OscilloscopeDiagnosisAddMainDiagnosisCode(builder, mainDiagnosisCode): builder.PrependUint32Slot(0, mainDiagnosisCode, 0)
def AddMainDiagnosisCode(builder, mainDiagnosisCode):
    return OscilloscopeDiagnosisAddMainDiagnosisCode(builder, mainDiagnosisCode)
def OscilloscopeDiagnosisAddDetailedDiagnosisCode(builder, detailedDiagnosisCode): builder.PrependUint32Slot(1, detailedDiagnosisCode, 0)
def AddDetailedDiagnosisCode(builder, detailedDiagnosisCode):
    return OscilloscopeDiagnosisAddDetailedDiagnosisCode(builder, detailedDiagnosisCode)
def OscilloscopeDiagnosisAddDynamicDescription(builder, dynamicDescription): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dynamicDescription), 0)
def AddDynamicDescription(builder, dynamicDescription):
    return OscilloscopeDiagnosisAddDynamicDescription(builder, dynamicDescription)
def OscilloscopeDiagnosisEnd(builder): return builder.EndObject()
def End(builder):
    return OscilloscopeDiagnosisEnd(builder)

class OscilloscopeDiagnosisT(object):

    # OscilloscopeDiagnosisT
    def __init__(self):
        self.mainDiagnosisCode = 0  # type: int
        self.detailedDiagnosisCode = 0  # type: int
        self.dynamicDescription = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        oscilloscopeDiagnosis = OscilloscopeDiagnosis()
        oscilloscopeDiagnosis.Init(buf, pos)
        return cls.InitFromObj(oscilloscopeDiagnosis)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, oscilloscopeDiagnosis):
        x = OscilloscopeDiagnosisT()
        x._UnPack(oscilloscopeDiagnosis)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mainDiagnosisCode == other.mainDiagnosisCode and \
            self.detailedDiagnosisCode == other.detailedDiagnosisCode and \
            self.dynamicDescription == other.dynamicDescription

    # OscilloscopeDiagnosisT
    def _UnPack(self, oscilloscopeDiagnosis):
        if oscilloscopeDiagnosis is None:
            return
        self.mainDiagnosisCode = oscilloscopeDiagnosis.MainDiagnosisCode()
        self.detailedDiagnosisCode = oscilloscopeDiagnosis.DetailedDiagnosisCode()
        self.dynamicDescription = oscilloscopeDiagnosis.DynamicDescription()

    # OscilloscopeDiagnosisT
    def Pack(self, builder):
        if self.dynamicDescription is not None:
            dynamicDescription = builder.CreateString(self.dynamicDescription)
        OscilloscopeDiagnosisStart(builder)
        OscilloscopeDiagnosisAddMainDiagnosisCode(builder, self.mainDiagnosisCode)
        OscilloscopeDiagnosisAddDetailedDiagnosisCode(builder, self.detailedDiagnosisCode)
        if self.dynamicDescription is not None:
            OscilloscopeDiagnosisAddDynamicDescription(builder, dynamicDescription)
        oscilloscopeDiagnosis = OscilloscopeDiagnosisEnd(builder)
        return oscilloscopeDiagnosis
