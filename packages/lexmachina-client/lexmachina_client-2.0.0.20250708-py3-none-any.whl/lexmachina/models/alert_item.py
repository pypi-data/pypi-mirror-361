# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20250708
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, Optional
from lexmachina.models.itemid import Itemid
from typing import Optional, Set
from typing_extensions import Self

class AlertItem(BaseModel):
    """
    A single item resulting from an alert run.  The various caseId and caseUrl fields will only appear when an alert item is a part of metadata about a specific case.  For example an alert on a district case docket entry will include the districtCaseId and districtCaseUrl here.
    """ # noqa: E501
    url: Optional[StrictStr] = None
    item_id: Optional[Itemid] = Field(default=None, alias="itemId")
    district_case_id: Optional[StrictInt] = Field(default=None, alias="districtCaseId")
    appeals_case_id: Optional[StrictInt] = Field(default=None, alias="appealsCaseId")
    state_case_id: Optional[StrictInt] = Field(default=None, alias="stateCaseId")
    bankruptcy_case_id: Optional[StrictInt] = Field(default=None, alias="bankruptcyCaseId")
    itc_investigation_number: Optional[StrictStr] = Field(default=None, alias="itcInvestigationNumber")
    ptab_trial_id: Optional[StrictInt] = Field(default=None, alias="ptabTrialId")
    district_case_url: Optional[StrictStr] = Field(default=None, alias="districtCaseUrl")
    appeals_case_url: Optional[StrictStr] = Field(default=None, alias="appealsCaseUrl")
    state_case_url: Optional[StrictStr] = Field(default=None, alias="stateCaseUrl")
    bankruptcy_case_url: Optional[StrictStr] = Field(default=None, alias="bankruptcyCaseUrl")
    itc_investigation_url: Optional[StrictStr] = Field(default=None, alias="itcInvestigationUrl")
    ptab_trial_url: Optional[StrictStr] = Field(default=None, alias="ptabTrialUrl")
    __properties: ClassVar[List[str]] = ["url", "itemId", "districtCaseId", "appealsCaseId", "stateCaseId", "bankruptcyCaseId", "itcInvestigationNumber", "ptabTrialId", "districtCaseUrl", "appealsCaseUrl", "stateCaseUrl", "bankruptcyCaseUrl", "itcInvestigationUrl", "ptabTrialUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of item_id
        if self.item_id:
            _dict['itemId'] = self.item_id.to_dict()
        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if item_id (nullable) is None
        # and model_fields_set contains the field
        if self.item_id is None and "item_id" in self.model_fields_set:
            _dict['itemId'] = None

        # set to None if district_case_id (nullable) is None
        # and model_fields_set contains the field
        if self.district_case_id is None and "district_case_id" in self.model_fields_set:
            _dict['districtCaseId'] = None

        # set to None if appeals_case_id (nullable) is None
        # and model_fields_set contains the field
        if self.appeals_case_id is None and "appeals_case_id" in self.model_fields_set:
            _dict['appealsCaseId'] = None

        # set to None if state_case_id (nullable) is None
        # and model_fields_set contains the field
        if self.state_case_id is None and "state_case_id" in self.model_fields_set:
            _dict['stateCaseId'] = None

        # set to None if bankruptcy_case_id (nullable) is None
        # and model_fields_set contains the field
        if self.bankruptcy_case_id is None and "bankruptcy_case_id" in self.model_fields_set:
            _dict['bankruptcyCaseId'] = None

        # set to None if itc_investigation_number (nullable) is None
        # and model_fields_set contains the field
        if self.itc_investigation_number is None and "itc_investigation_number" in self.model_fields_set:
            _dict['itcInvestigationNumber'] = None

        # set to None if ptab_trial_id (nullable) is None
        # and model_fields_set contains the field
        if self.ptab_trial_id is None and "ptab_trial_id" in self.model_fields_set:
            _dict['ptabTrialId'] = None

        # set to None if district_case_url (nullable) is None
        # and model_fields_set contains the field
        if self.district_case_url is None and "district_case_url" in self.model_fields_set:
            _dict['districtCaseUrl'] = None

        # set to None if appeals_case_url (nullable) is None
        # and model_fields_set contains the field
        if self.appeals_case_url is None and "appeals_case_url" in self.model_fields_set:
            _dict['appealsCaseUrl'] = None

        # set to None if state_case_url (nullable) is None
        # and model_fields_set contains the field
        if self.state_case_url is None and "state_case_url" in self.model_fields_set:
            _dict['stateCaseUrl'] = None

        # set to None if bankruptcy_case_url (nullable) is None
        # and model_fields_set contains the field
        if self.bankruptcy_case_url is None and "bankruptcy_case_url" in self.model_fields_set:
            _dict['bankruptcyCaseUrl'] = None

        # set to None if itc_investigation_url (nullable) is None
        # and model_fields_set contains the field
        if self.itc_investigation_url is None and "itc_investigation_url" in self.model_fields_set:
            _dict['itcInvestigationUrl'] = None

        # set to None if ptab_trial_url (nullable) is None
        # and model_fields_set contains the field
        if self.ptab_trial_url is None and "ptab_trial_url" in self.model_fields_set:
            _dict['ptabTrialUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "itemId": Itemid.from_dict(obj["itemId"]) if obj.get("itemId") is not None else None,
            "districtCaseId": obj.get("districtCaseId"),
            "appealsCaseId": obj.get("appealsCaseId"),
            "stateCaseId": obj.get("stateCaseId"),
            "bankruptcyCaseId": obj.get("bankruptcyCaseId"),
            "itcInvestigationNumber": obj.get("itcInvestigationNumber"),
            "ptabTrialId": obj.get("ptabTrialId"),
            "districtCaseUrl": obj.get("districtCaseUrl"),
            "appealsCaseUrl": obj.get("appealsCaseUrl"),
            "stateCaseUrl": obj.get("stateCaseUrl"),
            "bankruptcyCaseUrl": obj.get("bankruptcyCaseUrl"),
            "itcInvestigationUrl": obj.get("itcInvestigationUrl"),
            "ptabTrialUrl": obj.get("ptabTrialUrl")
        })
        return _obj


