# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Parameter transfered to a callable during tick event call (SchedEventType::SCHED_EVENT_TICK)
class ParameterEventTick(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ParameterEventTick()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsParameterEventTick(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ParameterEventTick
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Calculated start time of task where the callable is executed
    # ParameterEventTick
    def CalculatedStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def ParameterEventTickStart(builder): builder.StartObject(1)
def Start(builder):
    return ParameterEventTickStart(builder)
def ParameterEventTickAddCalculatedStartTime(builder, calculatedStartTime): builder.PrependUint64Slot(0, calculatedStartTime, 0)
def AddCalculatedStartTime(builder, calculatedStartTime):
    return ParameterEventTickAddCalculatedStartTime(builder, calculatedStartTime)
def ParameterEventTickEnd(builder): return builder.EndObject()
def End(builder):
    return ParameterEventTickEnd(builder)

class ParameterEventTickT(object):

    # ParameterEventTickT
    def __init__(self):
        self.calculatedStartTime = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        parameterEventTick = ParameterEventTick()
        parameterEventTick.Init(buf, pos)
        return cls.InitFromObj(parameterEventTick)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, parameterEventTick):
        x = ParameterEventTickT()
        x._UnPack(parameterEventTick)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.calculatedStartTime == other.calculatedStartTime

    # ParameterEventTickT
    def _UnPack(self, parameterEventTick):
        if parameterEventTick is None:
            return
        self.calculatedStartTime = parameterEventTick.CalculatedStartTime()

    # ParameterEventTickT
    def Pack(self, builder):
        ParameterEventTickStart(builder)
        ParameterEventTickAddCalculatedStartTime(builder, self.calculatedStartTime)
        parameterEventTick = ParameterEventTickEnd(builder)
        return parameterEventTick
