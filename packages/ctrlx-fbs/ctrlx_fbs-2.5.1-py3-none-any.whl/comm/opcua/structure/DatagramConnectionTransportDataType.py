# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DatagramConnectionTransportDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DatagramConnectionTransportDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDatagramConnectionTransportDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DatagramConnectionTransportDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DatagramConnectionTransportDataType
    def DiscoveryAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.NetworkAddressDataType import NetworkAddressDataType
            obj = NetworkAddressDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DatagramConnectionTransportDataTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return DatagramConnectionTransportDataTypeStart(builder)
def DatagramConnectionTransportDataTypeAddDiscoveryAddress(builder, discoveryAddress): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(discoveryAddress), 0)
def AddDiscoveryAddress(builder, discoveryAddress):
    return DatagramConnectionTransportDataTypeAddDiscoveryAddress(builder, discoveryAddress)
def DatagramConnectionTransportDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return DatagramConnectionTransportDataTypeEnd(builder)
import comm.opcua.subtypes.NetworkAddressDataType
try:
    from typing import Optional
except:
    pass

class DatagramConnectionTransportDataTypeT(object):

    # DatagramConnectionTransportDataTypeT
    def __init__(self):
        self.discoveryAddress = None  # type: Optional[comm.opcua.subtypes.NetworkAddressDataType.NetworkAddressDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        datagramConnectionTransportDataType = DatagramConnectionTransportDataType()
        datagramConnectionTransportDataType.Init(buf, pos)
        return cls.InitFromObj(datagramConnectionTransportDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, datagramConnectionTransportDataType):
        x = DatagramConnectionTransportDataTypeT()
        x._UnPack(datagramConnectionTransportDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.discoveryAddress == other.discoveryAddress

    # DatagramConnectionTransportDataTypeT
    def _UnPack(self, datagramConnectionTransportDataType):
        if datagramConnectionTransportDataType is None:
            return
        if datagramConnectionTransportDataType.DiscoveryAddress() is not None:
            self.discoveryAddress = comm.opcua.subtypes.NetworkAddressDataType.NetworkAddressDataTypeT.InitFromObj(datagramConnectionTransportDataType.DiscoveryAddress())

    # DatagramConnectionTransportDataTypeT
    def Pack(self, builder):
        if self.discoveryAddress is not None:
            discoveryAddress = self.discoveryAddress.Pack(builder)
        DatagramConnectionTransportDataTypeStart(builder)
        if self.discoveryAddress is not None:
            DatagramConnectionTransportDataTypeAddDiscoveryAddress(builder, discoveryAddress)
        datagramConnectionTransportDataType = DatagramConnectionTransportDataTypeEnd(builder)
        return datagramConnectionTransportDataType
