# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard Professional Edition IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.1.0PE
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class WhiteLabeling(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'TenantId',
        'customer_id': 'CustomerId',
        'type': 'str',
        'domain': 'str',
        'settings': 'JsonNode'
    }

    attribute_map = {
        'tenant_id': 'tenantId',
        'customer_id': 'customerId',
        'type': 'type',
        'domain': 'domain',
        'settings': 'settings'
    }

    def __init__(self, tenant_id=None, customer_id=None, type=None, domain=None, settings=None):  # noqa: E501
        """WhiteLabeling - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._customer_id = None
        self._type = None
        self._domain = None
        self._settings = None
        self.discriminator = None
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if customer_id is not None:
            self.customer_id = customer_id
        if type is not None:
            self.type = type
        if domain is not None:
            self.domain = domain
        if settings is not None:
            self.settings = settings

    @property
    def tenant_id(self):
        """Gets the tenant_id of this WhiteLabeling.  # noqa: E501


        :return: The tenant_id of this WhiteLabeling.  # noqa: E501
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this WhiteLabeling.


        :param tenant_id: The tenant_id of this WhiteLabeling.  # noqa: E501
        :type: TenantId
        """

        self._tenant_id = tenant_id

    @property
    def customer_id(self):
        """Gets the customer_id of this WhiteLabeling.  # noqa: E501


        :return: The customer_id of this WhiteLabeling.  # noqa: E501
        :rtype: CustomerId
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this WhiteLabeling.


        :param customer_id: The customer_id of this WhiteLabeling.  # noqa: E501
        :type: CustomerId
        """

        self._customer_id = customer_id

    @property
    def type(self):
        """Gets the type of this WhiteLabeling.  # noqa: E501


        :return: The type of this WhiteLabeling.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WhiteLabeling.


        :param type: The type of this WhiteLabeling.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOGIN", "GENERAL", "MAIL_TEMPLATES"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def domain(self):
        """Gets the domain of this WhiteLabeling.  # noqa: E501


        :return: The domain of this WhiteLabeling.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this WhiteLabeling.


        :param domain: The domain of this WhiteLabeling.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def settings(self):
        """Gets the settings of this WhiteLabeling.  # noqa: E501


        :return: The settings of this WhiteLabeling.  # noqa: E501
        :rtype: JsonNode
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this WhiteLabeling.


        :param settings: The settings of this WhiteLabeling.  # noqa: E501
        :type: JsonNode
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WhiteLabeling, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WhiteLabeling):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
