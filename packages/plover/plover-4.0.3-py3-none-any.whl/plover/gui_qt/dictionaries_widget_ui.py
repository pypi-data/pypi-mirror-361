# -*- coding: utf-8 -*-
_ = __import__(__package__.split(".", 1)[0])._

# Form implementation generated from reading ui file 'plover/gui_qt/dictionaries_widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_DictionariesWidget(object):
    def setupUi(self, DictionariesWidget):
        DictionariesWidget.setObjectName("DictionariesWidget")
        DictionariesWidget.resize(366, 238)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(DictionariesWidget.sizePolicy().hasHeightForWidth())
        DictionariesWidget.setSizePolicy(sizePolicy)
        DictionariesWidget.setWindowTitle("")
        self.verticalLayout = QtWidgets.QVBoxLayout(DictionariesWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(5)
        self.verticalLayout.setObjectName("verticalLayout")
        self.view = QtWidgets.QListView(DictionariesWidget)
        self.view.setFrameShape(QtWidgets.QFrame.Box)
        self.view.setTabKeyNavigation(False)
        self.view.setProperty("showDropIndicator", True)
        self.view.setDragEnabled(True)
        self.view.setDragDropOverwriteMode(False)
        self.view.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.view.setDefaultDropAction(QtCore.Qt.IgnoreAction)
        self.view.setAlternatingRowColors(True)
        self.view.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.view.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.view.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.view.setUniformItemSizes(True)
        self.view.setObjectName("view")
        self.verticalLayout.addWidget(self.view)
        self.action_EditDictionaries = QtWidgets.QAction(DictionariesWidget)
        icon = QtGui.QIcon()
        icon.addFile(":/pencil.svg", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_EditDictionaries.setIcon(icon)
        self.action_EditDictionaries.setObjectName("action_EditDictionaries")
        self.action_SaveDictionaries = QtWidgets.QAction(DictionariesWidget)
        icon1 = QtGui.QIcon()
        icon1.addFile(":/save.svg", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_SaveDictionaries.setIcon(icon1)
        self.action_SaveDictionaries.setObjectName("action_SaveDictionaries")
        self.action_RemoveDictionaries = QtWidgets.QAction(DictionariesWidget)
        icon2 = QtGui.QIcon()
        icon2.addFile(":/remove.svg", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_RemoveDictionaries.setIcon(icon2)
        self.action_RemoveDictionaries.setObjectName("action_RemoveDictionaries")
        self.action_Undo = QtWidgets.QAction(DictionariesWidget)
        icon3 = QtGui.QIcon()
        icon3.addFile(":/undo.svg", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Undo.setIcon(icon3)
        self.action_Undo.setObjectName("action_Undo")
        self.action_AddDictionaries = QtWidgets.QAction(DictionariesWidget)
        icon4 = QtGui.QIcon()
        icon4.addFile(":/add.svg", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_AddDictionaries.setIcon(icon4)
        self.action_AddDictionaries.setObjectName("action_AddDictionaries")
        self.action_AddTranslation = QtWidgets.QAction(DictionariesWidget)
        icon5 = QtGui.QIcon()
        icon5.addFile(":/translation_add.svg", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_AddTranslation.setIcon(icon5)
        self.action_AddTranslation.setObjectName("action_AddTranslation")
        self.action_MoveDictionariesUp = QtWidgets.QAction(DictionariesWidget)
        icon6 = QtGui.QIcon()
        icon6.addFile(":/up.svg", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_MoveDictionariesUp.setIcon(icon6)
        self.action_MoveDictionariesUp.setObjectName("action_MoveDictionariesUp")
        self.action_MoveDictionariesDown = QtWidgets.QAction(DictionariesWidget)
        icon7 = QtGui.QIcon()
        icon7.addFile(":/down.svg", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_MoveDictionariesDown.setIcon(icon7)
        self.action_MoveDictionariesDown.setObjectName("action_MoveDictionariesDown")
        self.action_CopyDictionaries = QtWidgets.QAction(DictionariesWidget)
        self.action_CopyDictionaries.setObjectName("action_CopyDictionaries")
        self.action_MergeDictionaries = QtWidgets.QAction(DictionariesWidget)
        self.action_MergeDictionaries.setObjectName("action_MergeDictionaries")
        self.action_OpenDictionaries = QtWidgets.QAction(DictionariesWidget)
        self.action_OpenDictionaries.setObjectName("action_OpenDictionaries")
        self.action_CreateDictionary = QtWidgets.QAction(DictionariesWidget)
        self.action_CreateDictionary.setObjectName("action_CreateDictionary")

        self.retranslateUi(DictionariesWidget)
        self.action_RemoveDictionaries.triggered.connect(DictionariesWidget.on_remove_dictionaries) # type: ignore
        self.action_Undo.triggered.connect(DictionariesWidget.on_undo) # type: ignore
        self.action_EditDictionaries.triggered.connect(DictionariesWidget.on_edit_dictionaries) # type: ignore
        self.action_AddDictionaries.triggered.connect(DictionariesWidget.on_add_dictionaries) # type: ignore
        self.action_AddTranslation.triggered.connect(DictionariesWidget.on_add_translation) # type: ignore
        self.view.activated['QModelIndex'].connect(DictionariesWidget.on_activate_dictionary) # type: ignore
        self.action_MoveDictionariesDown.triggered.connect(DictionariesWidget.on_move_dictionaries_down) # type: ignore
        self.action_MoveDictionariesUp.triggered.connect(DictionariesWidget.on_move_dictionaries_up) # type: ignore
        self.action_OpenDictionaries.triggered.connect(DictionariesWidget.on_open_dictionaries) # type: ignore
        self.action_CreateDictionary.triggered.connect(DictionariesWidget.on_create_dictionary) # type: ignore
        self.action_MergeDictionaries.triggered.connect(DictionariesWidget.on_merge_dictionaries) # type: ignore
        self.action_CopyDictionaries.triggered.connect(DictionariesWidget.on_copy_dictionaries) # type: ignore

    def retranslateUi(self, DictionariesWidget):
        # i18n: Widget: “DictionariesWidget”, title.
        DictionariesWidget.setTitle(_("Dictionaries"))
        # i18n: Widget: “DictionariesWidget”, accessible name.
        self.view.setAccessibleName(_("Dictionaries"))
        # i18n: Widget: “DictionariesWidget”, text.
        self.action_EditDictionaries.setText(_("&Edit dictionaries"))
        # i18n: Widget: “DictionariesWidget”, tool tip.
        self.action_EditDictionaries.setToolTip(_("Edit selected dictionaries"))
        # i18n: Widget: “DictionariesWidget”, shortcut.
        self.action_EditDictionaries.setShortcut(_("Ctrl+E"))
        # i18n: Widget: “DictionariesWidget”, text.
        self.action_SaveDictionaries.setText(_("&Save dictionaries as..."))
        # i18n: Widget: “DictionariesWidget”, tool tip.
        self.action_SaveDictionaries.setToolTip(_("Save the selected dictionaries: create a new copy of each dictionary, or merge them into a new dictionary."))
        # i18n: Widget: “DictionariesWidget”, shortcut.
        self.action_SaveDictionaries.setShortcut(_("Ctrl+S"))
        # i18n: Widget: “DictionariesWidget”, text.
        self.action_RemoveDictionaries.setText(_("&Remove dictionaries"))
        # i18n: Widget: “DictionariesWidget”, tool tip.
        self.action_RemoveDictionaries.setToolTip(_("Remove selected dictionaries"))
        # i18n: Widget: “DictionariesWidget”, shortcut.
        self.action_RemoveDictionaries.setShortcut(_("Del"))
        # i18n: Widget: “DictionariesWidget”, text.
        self.action_Undo.setText(_("&Undo"))
        # i18n: Widget: “DictionariesWidget”, tool tip.
        self.action_Undo.setToolTip(_("Undo last add/delete/reorder operation."))
        # i18n: Widget: “DictionariesWidget”, shortcut.
        self.action_Undo.setShortcut(_("Ctrl+Z"))
        # i18n: Widget: “DictionariesWidget”, text.
        self.action_AddDictionaries.setText(_("&Add dictionaries"))
        # i18n: Widget: “DictionariesWidget”, tool tip.
        self.action_AddDictionaries.setToolTip(_("Add dictionaries"))
        # i18n: Widget: “DictionariesWidget”, shortcut.
        self.action_AddDictionaries.setShortcut(_("Ctrl+O"))
        # i18n: Widget: “DictionariesWidget”, text.
        self.action_AddTranslation.setText(_("Add &translation"))
        # i18n: Widget: “DictionariesWidget”, tool tip.
        self.action_AddTranslation.setToolTip(_("Add a new translation"))
        # i18n: Widget: “DictionariesWidget”, shortcut.
        self.action_AddTranslation.setShortcut(_("Ctrl+N"))
        # i18n: Widget: “DictionariesWidget”, text.
        self.action_MoveDictionariesUp.setText(_("Move dictionaries &up"))
        # i18n: Widget: “DictionariesWidget”, tool tip.
        self.action_MoveDictionariesUp.setToolTip(_("Move selected dictionaries up."))
        # i18n: Widget: “DictionariesWidget”, text.
        self.action_MoveDictionariesDown.setText(_("Move dictionaries &down"))
        # i18n: Widget: “DictionariesWidget”, tool tip.
        self.action_MoveDictionariesDown.setToolTip(_("Move selected dictionaries down."))
        # i18n: Widget: “DictionariesWidget”, text.
        self.action_CopyDictionaries.setText(_("Create a copy of each dictionary"))
        # i18n: Widget: “DictionariesWidget”, text.
        self.action_MergeDictionaries.setText(_("Merge dictionaries into a new one"))
        # i18n: Widget: “DictionariesWidget”, text.
        self.action_OpenDictionaries.setText(_("Load dictionaries"))
        # i18n: Widget: “DictionariesWidget”, text.
        self.action_CreateDictionary.setText(_("Create dictionary"))
from . import resources_rc
