# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class cmd_AxsProbeEx(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = cmd_AxsProbeEx()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAscmd_AxsProbeEx(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # cmd_AxsProbeEx
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # command base input
    # cmd_AxsProbeEx
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # probe index
    # cmd_AxsProbeEx
    def ProbeIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def cmd_AxsProbeExStart(builder): builder.StartObject(2)
def Start(builder):
    return cmd_AxsProbeExStart(builder)
def cmd_AxsProbeExAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return cmd_AxsProbeExAddBase(builder, base)
def cmd_AxsProbeExAddProbeIndex(builder, probeIndex): builder.PrependInt8Slot(1, probeIndex, 0)
def AddProbeIndex(builder, probeIndex):
    return cmd_AxsProbeExAddProbeIndex(builder, probeIndex)
def cmd_AxsProbeExEnd(builder): return builder.EndObject()
def End(builder):
    return cmd_AxsProbeExEnd(builder)
import script.manager.fbtypes.Cmd_Base
try:
    from typing import Optional
except:
    pass

class cmd_AxsProbeExT(object):

    # cmd_AxsProbeExT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.probeIndex = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdAxsProbeEx = cmd_AxsProbeEx()
        cmdAxsProbeEx.Init(buf, pos)
        return cls.InitFromObj(cmdAxsProbeEx)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdAxsProbeEx):
        x = cmd_AxsProbeExT()
        x._UnPack(cmdAxsProbeEx)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.probeIndex == other.probeIndex

    # cmd_AxsProbeExT
    def _UnPack(self, cmdAxsProbeEx):
        if cmdAxsProbeEx is None:
            return
        if cmdAxsProbeEx.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdAxsProbeEx.Base())
        self.probeIndex = cmdAxsProbeEx.ProbeIndex()

    # cmd_AxsProbeExT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        cmd_AxsProbeExStart(builder)
        if self.base is not None:
            cmd_AxsProbeExAddBase(builder, base)
        cmd_AxsProbeExAddProbeIndex(builder, self.probeIndex)
        cmdAxsProbeEx = cmd_AxsProbeExEnd(builder)
        return cmdAxsProbeEx
