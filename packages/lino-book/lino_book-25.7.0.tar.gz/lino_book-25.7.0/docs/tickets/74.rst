#74 [fixed] : A better name than ``settings.LINO``
==================================================

(Thoughts in this ticket are obsolete now, 
they are just a historic trace of why
`django-site <http://site.lino-framework.org>`__
was born)

Technically Lino is almost ready to have it's 
"kernel" or "essential part" split out into a 
separate code project, but I am lacking a proper name for it.

The name for the new project may be `django-startup`.

But before I can actually start to split it off
I'd need to find a new name for ``settings.LINO``.

Currently a Django project becomes a "Lino application" 
by the following two lines in its :xfile:`settings.py` file::

  from lino.projects.cosi.settings import *
  LINO = Lino()

But nobody knows what a "Lino" is. 
The name ``LINO`` says nothing about what it does. 
We should use some more meaningful name here. 


What a :class:`lino.Lino` really is
-----------------------------------

#.  Es ist ein Django-Setting, also ein globaler Name in der :xfile:`settings.py`, 
    der einmal gesetzt wird und dann im gesamten Leben des Prozesses konstant 
    bleibt und von überall her abgerufen werden kann.

#.  Es ist ein spezielles Setting, dessen Datentyp nicht wie bei allen anderen
    Settings `string`, `list` oder `dict` ist, sondern `object`. 
    
    Im Gegensatz zu normalen Settings hat dieses Setting also selber 
    Attribute, die dann nicht mehr groß geschrieben zu werden brauchen.
    Diese Attribute können Variablen oder Methoden sein.
    Die Instanzvariablen dieses Objekts können sich ändern, ohne dass Django 
    davon etwas mitbekommt.
    Außerdem kann man ein Lino unterklassieren, wie z.B. 
    :class:`lino.ui.Lino` es tut.
    
#.  It is a kind of extension to Django's setting concept.
    But it is not what Ryan Roemer describes in 
    `Extending Django Settings with Derived Attributes and Methods
    <http://loose-bits.com/2011/04/extending-django-settings-with-derived.html>`__

#.  Last but not least, it has a sophisticated method called `startup`,
    which analyzes the populated Django model cache. 
    This method is automagically being called when Django has 
    finished populating it's model cache.
    

The `LINO` setting describes a Lino application
-----------------------------------------------

The truth is that a Lino object describes a **Lino application**.
A Lino application is a software application which uses the Lino framework.
If we want to use meaningful names, 
the two lines of the above :xfile:`settings.py` file should rather be::

  from lino.projects.cosi.settings import *
  APP = App()

But the average Django programmer will object here because
Django uses the word "app" for something else. 
Daniel and Audrey say it in a diplomatic way:

  "It’s not uncommon for new Django developers to become understandably 
  confused by Django’s usage of the word ‘app’."

They are too polite to say the cruel truth:
Django is wrong. 
Django says "app" where it should say "plugin".
An application is a standalone piece of software.
`django.contrib.contenttypes` is not an application, it is a plugin.

Many Django people are probably aware of that problem,
but it would be really much work to fix this problem
because the word is used in variables like
`app_label` and :setting:`INSTALLED_APPS`.

Too much work for "just a linguistic" problem.
Still it's a pity because it leaves us
with no namespace left for what a `Software application 
<http://en.wikipedia.org/wiki/Software_application>`_ 
really is.

But it's clear that they won't fix it.
They are perfectionists, but they have deadlines.
We have to live with it.



Potential alternatives
----------------------

- ``settings.ENV``
  because one could call it the "environment".
  
- `settings.MAIN` or `settings.MASTER`
  and `MasterApp` or `MainApp` or `RootApp`,     
  introducing the concept of a "master app" (or "main app" or "root app").

- `settings.SITE` and `Site` because it describes the site.
  But that word is already used by `django.contrib.sites`...
  
- ``settings.SERVER``?
  Because it is the "server" who is starting...
  but the "server" is represented by all settings, not only this one.
  
- class `SettingObject`?
  But it is not just a stupid object because it has the startup method.
  
- ``settings.META``?
  But it has nothing to do with Python's `__metaclass__` 
  not Django's `_meta` attribute.

- ``settings.SITE`` and `Site`? Tilt!
  

The `LINO` setting describes a Lino site
----------------------------------------

Another meaningful name is "site".
The two lines of the above :xfile:`settings.py` file would then be::

  from lino.projects.cosi.settings import *
  SITE = Site()
  
Note that I even have been using this name in the beginning for 
this concept.
I dropped this name because it 
clashes with Django's "sites" framework
which defines two settings SITE_ID and a "Site" model.

After reading once more the official documentation about 
`the sites framework
<https://docs.djangoproject.com/en/5.0/ref/contrib/sites/>`__
and `Chapter 16 of the Django Book
<http://www.djangobook.com/en/2.0/chapter16.html>`__,
I dare now to say: 

  The kernel of Lino replaces ``django.contrib.sites``.

Hence I should maybe call the kernel split code project
"django-site" 

Note that the clash is only "conceptual", not "technical":
using `django-site` is technically possible on projects 
which also use `django.contrib.sites`.

On a new project you would rather say something like::

  dd.inject_field("ui.SiteConfig","domain",
      models.CharField(_('domain name'), max_length=100)
  
A :class:`django_site.Site` instance
describes and represents the software 
application running on a given Site.
Where "application" is as in 
`Software application 
<http://en.wikipedia.org/wiki/Software_application>`_,
not what Django calls an "app".

Provides a `Site` class designed to 
be subclassed and instantiated as `settings.SITE`.
The base class provides a `start` method
which runs after Django has populated it's model cache.
This method analyzes the installed apps and
emits different "site started" signals.

A Site is usually meant to work for a given set of Django apps. 
Each Lino application defines 
its :setting:`INSTALLED_APPS` setting.

A Site usually also defines a Django app, but not always:
it can consist of just a settings file (e.g. :mod:`lino_book.projects.min1`).

Google didn't let me create a project "django-start",
I guess because of "django-startup"

Name: django-start

Summary: An extensible replacement for `django.contrib.sites`

Description: Emits a "site started" signal after Django has populated 
its model cache. Defines a `Site` class to be subclassed and instantiated 
in `settings.SITE`.




