name: Build and Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build-windows:
    runs-on: windows-latest
    outputs:
      artifact-name: plua-windows-exe
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Windows executable
        run: |
          pyinstaller --onefile --collect-submodules lupa --collect-submodules toml --collect-submodules plua --collect-submodules extensions --collect-all requests src/plua/__main__.py --name plua --add-data "src/lua;lua" --add-data "src/extensions;extensions" --add-data "examples;examples" --add-data "pyproject.toml;."

      - name: Rename Windows executable
        run: |
          mv dist/plua.exe dist/plua-windows.exe

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: plua-windows-exe
          path: dist/plua-windows.exe

  build-macos-universal:
    runs-on: macos-latest
    outputs:
      artifact-name: plua-macos-universal
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build macOS Universal executable
        run: |
          pyinstaller --onefile --collect-submodules lupa --collect-submodules toml --collect-submodules plua --collect-submodules extensions --collect-all requests src/plua/__main__.py --name plua --add-data "src/lua:lua" --add-data "src/extensions:extensions" --add-data "examples:examples" --add-data "pyproject.toml:."

      - name: Rename macOS Universal executable
        run: |
          mv dist/plua dist/plua-macos-universal

      - name: Verify Universal architecture
        run: |
          file dist/plua-macos-universal
          echo "Architecture verification:"
          file dist/plua-macos-universal | grep -q "universal" && echo "✓ Universal binary confirmed" || echo "⚠ Not universal binary"

      - name: Upload macOS Universal artifact
        uses: actions/upload-artifact@v4
        with:
          name: plua-macos-universal
          path: dist/plua-macos-universal

  create-release:
    needs: [build-windows, build-macos-universal]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: PLua ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## PLua ${{ steps.get_version.outputs.VERSION }}
            
            ### Downloads
            
            Choose the executable for your platform:
            
            - **Windows**: `plua-windows.exe` - For Windows 10/11
            - **macOS Universal**: `plua-macos-universal` - For both Intel and Apple Silicon Macs
            
            ### Usage
            
            ```bash
            # Windows
            plua-windows.exe script.lua
            
            # macOS Universal
            chmod +x plua-macos-universal
            ./plua-macos-universal script.lua
            ```
            
            ### Features
            
            - Full Lua 5.4 compatibility
            - Fibaro HomeCenter 3 QuickApp development support
            - Async networking capabilities
            - Debugging support
            - Modular extension system
            
            ### Documentation
            
            See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for detailed usage instructions.
          files: |
            artifacts/plua-windows-exe/plua-windows.exe
            artifacts/plua-macos-universal/plua-macos-universal
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }} 