import threading
from .dobotConnection import DobotConnection as DobotConnection
from .enums.CommunicationProtocolIDs import CommunicationProtocolIDs as CommunicationProtocolIDs
from .enums.ControlValues import ControlValues as ControlValues
from .enums.HHTTrigMode import HHTTrigMode as HHTTrigMode
from .enums.alarm import Alarm as Alarm
from .enums.level import Level as Level
from .message import Message as Message
from .paramsStructures import tagARCCmd as tagARCCmd, tagARCParams as tagARCParams, tagAutoLevelingParams as tagAutoLevelingParams, tagCPCmd as tagCPCmd, tagCPParams as tagCPParams, tagDevice as tagDevice, tagEMOTOR as tagEMOTOR, tagEndEffectorParams as tagEndEffectorParams, tagHomeCmd as tagHomeCmd, tagHomeParams as tagHomeParams, tagIODO as tagIODO, tagIOMultiplexing as tagIOMultiplexing, tagIOPWM as tagIOPWM, tagJOGCmd as tagJOGCmd, tagJOGCommonParams as tagJOGCommonParams, tagJOGCoordinateParams as tagJOGCoordinateParams, tagJOGJointParams as tagJOGJointParams, tagJOGLParams as tagJOGLParams, tagPOCmd as tagPOCmd, tagPTPCmd as tagPTPCmd, tagPTPCommonParams as tagPTPCommonParams, tagPTPCoordinateParams as tagPTPCoordinateParams, tagPTPJointParams as tagPTPJointParams, tagPTPJump2Params as tagPTPJump2Params, tagPTPJumpParams as tagPTPJumpParams, tagPTPLParams as tagPTPLParams, tagPTPWithLCmd as tagPTPWithLCmd, tagPose as tagPose, tagTRIGCmd as tagTRIGCmd, tagWAITCmd as tagWAITCmd, tagWIFIDNS as tagWIFIDNS, tagWIFIGateway as tagWIFIGateway, tagWIFIIPAddress as tagWIFIIPAddress, tagWIFINetmask as tagWIFINetmask, tagWithL as tagWithL

class DobotApi(threading.Thread):
    verbose: bool
    lock: threading.Lock
    conn: DobotConnection
    def __init__(self, dobot_connection: DobotConnection, verbose: bool = False) -> None: ...
    def close(self) -> None: ...
    def __del__(self) -> None: ...
    def initialize_robot(self) -> None: ...
    def get_queued_cmd_current_index(self) -> int: ...
    def get_pose(self) -> tagPose: ...
    def set_cp_cmd(self, cmd: tagCPCmd, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_end_effector_gripper(self, enable: bool = True, grip: bool = False, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_end_effector_suction_cup(self, enable: bool = False, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_ptp_joint_params(self, params: tagPTPJointParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_ptp_coordinate_params(self, params: tagPTPCoordinateParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_ptp_jump_params(self, params: tagPTPJumpParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_ptp_common_params(self, params: tagPTPCommonParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_ptp_cmd(self, cmd: tagPTPCmd, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_queued_cmd_clear(self) -> Message: ...
    def set_queued_cmd_start_exec(self) -> Message: ...
    def set_wait_cmd(self, params: tagWAITCmd, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_queued_cmd_stop_exec(self) -> Message: ...
    def set_device_sn(self, device_serial_number: str) -> None: ...
    def get_device_sn(self) -> str: ...
    def set_device_name(self, device_name: str) -> None: ...
    def get_device_name(self) -> str: ...
    def get_device_version(self) -> tuple[int, int, int]: ...
    def set_device_rail_capability(self, params: tagWithL) -> None: ...
    def get_device_rail_capability(self) -> bool: ...
    def get_device_time(self) -> int: ...
    def get_device_id(self) -> tuple[int, int, int]: ...
    def reset_pose(self, manual: int, rear_arm_angle: float, front_arm_angle: float) -> None: ...
    def get_pose_rail(self) -> float: ...
    def get_active_alarms(self) -> set[Alarm]: ...
    def clear_all_alarms_state(self) -> None: ...
    def set_home_params(self, params: tagHomeParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_home_params(self) -> tagHomeParams: ...
    def set_home_cmd(self, params: tagHomeCmd, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_autoleveling(self, params: tagAutoLevelingParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_autoleveling(self) -> float: ...
    def set_hht_trig_mode(self, mode: HHTTrigMode) -> None: ...
    def get_hht_trig_mode(self) -> HHTTrigMode: ...
    def set_hht_trig_output_enabled(self, is_enabled: bool) -> None: ...
    def get_hht_trig_output_enabled(self) -> bool: ...
    def get_hht_trig_output(self) -> bool: ...
    def set_end_effector_params(self, params: tagEndEffectorParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_end_effector_params(self) -> tagEndEffectorParams: ...
    def set_end_effector_laser(self, enable_ctrl: bool, on: bool, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_end_effector_laser(self) -> tuple[bool, bool]: ...
    def get_end_effector_suction_cup(self) -> tuple[bool, bool]: ...
    def get_end_effector_gripper(self) -> tuple[bool, bool]: ...
    def set_jog_joint_params(self, params: tagJOGJointParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_jog_joint_params(self) -> tagJOGJointParams: ...
    def set_jog_coordinate_params(self, params: tagJOGCoordinateParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_jog_coordinate_params(self) -> tagJOGCoordinateParams: ...
    def set_jog_common_params(self, params: tagJOGCommonParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_jog_common_params(self) -> tagJOGCommonParams: ...
    def set_jog_cmd(self, cmd: tagJOGCmd, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_jogl_params(self, params: tagJOGLParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_jogl_params(self) -> tagJOGLParams: ...
    def get_ptp_joint_params(self) -> tagPTPJointParams: ...
    def get_ptp_coordinate_params(self) -> tagPTPCoordinateParams: ...
    def get_ptp_jump_params(self) -> tagPTPJumpParams: ...
    def get_ptp_common_params(self) -> tagPTPCommonParams: ...
    def set_ptpl_params(self, params: tagPTPLParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_ptpl_params(self) -> tagPTPLParams: ...
    def set_ptp_with_rail_cmd(self, cmd: tagPTPWithLCmd, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_ptp_jump2_params(self, params: tagPTPJump2Params, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_ptp_jump2_params(self) -> tagPTPJump2Params: ...
    def set_ptp_po_cmd(self, ptp_cmd: tagPTPCmd, po_cmds: list[tagPOCmd], wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_ptp_po_with_rail_cmd(self, ptp_cmd: tagPTPWithLCmd, po_cmds: list[tagPOCmd], wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_cp_params(self, params: tagCPParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_cp_params(self) -> tagCPParams: ...
    def set_cp_le_cmd(self, cmd: tagCPCmd, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_arc_params(self, params: tagARCParams, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_arc_params(self) -> tagARCParams: ...
    def set_arc_cmd(self, cmd: tagARCCmd, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_trig_cmd(self, cmd: tagTRIGCmd, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_io_multiplexing(self, params: tagIOMultiplexing, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_io_multiplexing(self, address: int) -> tagIOMultiplexing: ...
    def set_io_do(self, params: tagIODO, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_io_do(self, address: int) -> Level: ...
    def set_io_pwm(self, params: tagIOPWM, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_io_pwm(self, address: int) -> tagIOPWM: ...
    def get_io_di(self, address: int) -> Level: ...
    def get_io_adc(self, address: int) -> int: ...
    def set_e_motor(self, params: tagEMOTOR, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_color_sensor(self, params: tagDevice, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_color_sensor(self, port: int) -> tuple[int, int, int]: ...
    def set_ir_switch(self, params: tagDevice, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def get_ir_switch(self, port: int) -> bool: ...
    def set_angle_sensor_static_error(self, rear_arm_angle_error: float, front_arm_angle_error: float) -> Message: ...
    def get_angle_sensor_static_error(self) -> tuple[float, float]: ...
    def set_wifi_config_mode(self, enable: bool) -> Message: ...
    def get_wifi_config_mode(self) -> bool: ...
    def set_wifi_ssid(self, ssid: str) -> Message: ...
    def get_wifi_ssid(self) -> str: ...
    def set_wifi_password(self, password: str) -> Message: ...
    def get_wifi_password(self) -> str: ...
    def set_wifi_ip_address(self, params: tagWIFIIPAddress) -> Message: ...
    def get_wifi_ip_address(self) -> tagWIFIIPAddress: ...
    def set_wifi_netmask(self, params: tagWIFINetmask) -> Message: ...
    def get_wifi_netmask(self) -> tagWIFINetmask: ...
    def set_wifi_gateway(self, params: tagWIFIGateway) -> Message: ...
    def get_wifi_gateway(self) -> tagWIFIGateway: ...
    def set_wifi_dns(self, params: tagWIFIDNS) -> Message: ...
    def get_wifi_dns(self) -> tagWIFIDNS: ...
    def get_wifi_connect_status(self) -> bool: ...
    def set_lost_step_params(self, value: float) -> Message: ...
    def set_lost_step_cmd(self, wait: bool = False, is_queued: bool = False) -> int | None: ...
    def set_queued_cmd_force_stop_exec(self) -> Message: ...
    def set_queued_cmd_start_download(self, total_loop: int, line_per_loop: int) -> Message: ...
    def set_queued_cmd_stop_download(self) -> Message: ...
