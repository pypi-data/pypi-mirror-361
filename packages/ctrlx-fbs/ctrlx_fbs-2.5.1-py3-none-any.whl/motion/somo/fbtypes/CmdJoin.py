# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command join
class CmdJoin(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CmdJoin()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmdJoin(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CmdJoin
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # list of names of the motion objects in the join group
    # CmdJoin
    def Group(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CmdJoin
    def GroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CmdJoin
    def GroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # should wait until there is a next command available to be executed?
    # CmdJoin
    def SyncStartNextCmd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CmdJoinStart(builder): builder.StartObject(2)
def Start(builder):
    return CmdJoinStart(builder)
def CmdJoinAddGroup(builder, group): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(group), 0)
def AddGroup(builder, group):
    return CmdJoinAddGroup(builder, group)
def CmdJoinStartGroupVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartGroupVector(builder, numElems):
    return CmdJoinStartGroupVector(builder, numElems)
def CmdJoinAddSyncStartNextCmd(builder, syncStartNextCmd): builder.PrependBoolSlot(1, syncStartNextCmd, 0)
def AddSyncStartNextCmd(builder, syncStartNextCmd):
    return CmdJoinAddSyncStartNextCmd(builder, syncStartNextCmd)
def CmdJoinEnd(builder): return builder.EndObject()
def End(builder):
    return CmdJoinEnd(builder)
try:
    from typing import List
except:
    pass

class CmdJoinT(object):

    # CmdJoinT
    def __init__(self):
        self.group = None  # type: List[str]
        self.syncStartNextCmd = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdJoin = CmdJoin()
        cmdJoin.Init(buf, pos)
        return cls.InitFromObj(cmdJoin)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdJoin):
        x = CmdJoinT()
        x._UnPack(cmdJoin)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.group == other.group and \
            self.syncStartNextCmd == other.syncStartNextCmd

    # CmdJoinT
    def _UnPack(self, cmdJoin):
        if cmdJoin is None:
            return
        if not cmdJoin.GroupIsNone():
            self.group = []
            for i in range(cmdJoin.GroupLength()):
                self.group.append(cmdJoin.Group(i))
        self.syncStartNextCmd = cmdJoin.SyncStartNextCmd()

    # CmdJoinT
    def Pack(self, builder):
        if self.group is not None:
            grouplist = []
            for i in range(len(self.group)):
                grouplist.append(builder.CreateString(self.group[i]))
            CmdJoinStartGroupVector(builder, len(self.group))
            for i in reversed(range(len(self.group))):
                builder.PrependUOffsetTRelative(grouplist[i])
            group = builder.EndVector()
        CmdJoinStart(builder)
        if self.group is not None:
            CmdJoinAddGroup(builder, group)
        CmdJoinAddSyncStartNextCmd(builder, self.syncStartNextCmd)
        cmdJoin = CmdJoinEnd(builder)
        return cmdJoin
