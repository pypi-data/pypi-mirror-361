# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PubSubConnectionDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PubSubConnectionDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPubSubConnectionDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PubSubConnectionDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PubSubConnectionDataType
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PubSubConnectionDataType
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PubSubConnectionDataType
    def PublisherId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.Variant import Variant
            obj = Variant()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConnectionDataType
    def TransportProfileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PubSubConnectionDataType
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.NetworkAddressDataType import NetworkAddressDataType
            obj = NetworkAddressDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConnectionDataType
    def ConnectionProperties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.KeyValuePair import KeyValuePair
            obj = KeyValuePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConnectionDataType
    def ConnectionPropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubConnectionDataType
    def ConnectionPropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # PubSubConnectionDataType
    def TransportSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.ConnectionTransportDataType import ConnectionTransportDataType
            obj = ConnectionTransportDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConnectionDataType
    def WriterGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.WriterGroupDataType import WriterGroupDataType
            obj = WriterGroupDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConnectionDataType
    def WriterGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubConnectionDataType
    def WriterGroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # PubSubConnectionDataType
    def ReaderGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.ReaderGroupDataType import ReaderGroupDataType
            obj = ReaderGroupDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubConnectionDataType
    def ReaderGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubConnectionDataType
    def ReaderGroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def PubSubConnectionDataTypeStart(builder): builder.StartObject(9)
def Start(builder):
    return PubSubConnectionDataTypeStart(builder)
def PubSubConnectionDataTypeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return PubSubConnectionDataTypeAddName(builder, name)
def PubSubConnectionDataTypeAddEnabled(builder, enabled): builder.PrependBoolSlot(1, enabled, 0)
def AddEnabled(builder, enabled):
    return PubSubConnectionDataTypeAddEnabled(builder, enabled)
def PubSubConnectionDataTypeAddPublisherId(builder, publisherId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(publisherId), 0)
def AddPublisherId(builder, publisherId):
    return PubSubConnectionDataTypeAddPublisherId(builder, publisherId)
def PubSubConnectionDataTypeAddTransportProfileUri(builder, transportProfileUri): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(transportProfileUri), 0)
def AddTransportProfileUri(builder, transportProfileUri):
    return PubSubConnectionDataTypeAddTransportProfileUri(builder, transportProfileUri)
def PubSubConnectionDataTypeAddAddress(builder, address): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def AddAddress(builder, address):
    return PubSubConnectionDataTypeAddAddress(builder, address)
def PubSubConnectionDataTypeAddConnectionProperties(builder, connectionProperties): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(connectionProperties), 0)
def AddConnectionProperties(builder, connectionProperties):
    return PubSubConnectionDataTypeAddConnectionProperties(builder, connectionProperties)
def PubSubConnectionDataTypeStartConnectionPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartConnectionPropertiesVector(builder, numElems):
    return PubSubConnectionDataTypeStartConnectionPropertiesVector(builder, numElems)
def PubSubConnectionDataTypeAddTransportSettings(builder, transportSettings): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(transportSettings), 0)
def AddTransportSettings(builder, transportSettings):
    return PubSubConnectionDataTypeAddTransportSettings(builder, transportSettings)
def PubSubConnectionDataTypeAddWriterGroups(builder, writerGroups): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(writerGroups), 0)
def AddWriterGroups(builder, writerGroups):
    return PubSubConnectionDataTypeAddWriterGroups(builder, writerGroups)
def PubSubConnectionDataTypeStartWriterGroupsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartWriterGroupsVector(builder, numElems):
    return PubSubConnectionDataTypeStartWriterGroupsVector(builder, numElems)
def PubSubConnectionDataTypeAddReaderGroups(builder, readerGroups): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(readerGroups), 0)
def AddReaderGroups(builder, readerGroups):
    return PubSubConnectionDataTypeAddReaderGroups(builder, readerGroups)
def PubSubConnectionDataTypeStartReaderGroupsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartReaderGroupsVector(builder, numElems):
    return PubSubConnectionDataTypeStartReaderGroupsVector(builder, numElems)
def PubSubConnectionDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return PubSubConnectionDataTypeEnd(builder)
import comm.opcua.builtin.Variant
import comm.opcua.structure.KeyValuePair
import comm.opcua.structure.ReaderGroupDataType
import comm.opcua.structure.WriterGroupDataType
import comm.opcua.subtypes.ConnectionTransportDataType
import comm.opcua.subtypes.NetworkAddressDataType
try:
    from typing import List, Optional
except:
    pass

class PubSubConnectionDataTypeT(object):

    # PubSubConnectionDataTypeT
    def __init__(self):
        self.name = None  # type: str
        self.enabled = False  # type: bool
        self.publisherId = None  # type: Optional[comm.opcua.builtin.Variant.VariantT]
        self.transportProfileUri = None  # type: str
        self.address = None  # type: Optional[comm.opcua.subtypes.NetworkAddressDataType.NetworkAddressDataTypeT]
        self.connectionProperties = None  # type: List[comm.opcua.structure.KeyValuePair.KeyValuePairT]
        self.transportSettings = None  # type: Optional[comm.opcua.subtypes.ConnectionTransportDataType.ConnectionTransportDataTypeT]
        self.writerGroups = None  # type: List[comm.opcua.structure.WriterGroupDataType.WriterGroupDataTypeT]
        self.readerGroups = None  # type: List[comm.opcua.structure.ReaderGroupDataType.ReaderGroupDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pubSubConnectionDataType = PubSubConnectionDataType()
        pubSubConnectionDataType.Init(buf, pos)
        return cls.InitFromObj(pubSubConnectionDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, pubSubConnectionDataType):
        x = PubSubConnectionDataTypeT()
        x._UnPack(pubSubConnectionDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.enabled == other.enabled and \
            self.publisherId == other.publisherId and \
            self.transportProfileUri == other.transportProfileUri and \
            self.address == other.address and \
            self.connectionProperties == other.connectionProperties and \
            self.transportSettings == other.transportSettings and \
            self.writerGroups == other.writerGroups and \
            self.readerGroups == other.readerGroups

    # PubSubConnectionDataTypeT
    def _UnPack(self, pubSubConnectionDataType):
        if pubSubConnectionDataType is None:
            return
        self.name = pubSubConnectionDataType.Name()
        self.enabled = pubSubConnectionDataType.Enabled()
        if pubSubConnectionDataType.PublisherId() is not None:
            self.publisherId = comm.opcua.builtin.Variant.VariantT.InitFromObj(pubSubConnectionDataType.PublisherId())
        self.transportProfileUri = pubSubConnectionDataType.TransportProfileUri()
        if pubSubConnectionDataType.Address() is not None:
            self.address = comm.opcua.subtypes.NetworkAddressDataType.NetworkAddressDataTypeT.InitFromObj(pubSubConnectionDataType.Address())
        if not pubSubConnectionDataType.ConnectionPropertiesIsNone():
            self.connectionProperties = []
            for i in range(pubSubConnectionDataType.ConnectionPropertiesLength()):
                if pubSubConnectionDataType.ConnectionProperties(i) is None:
                    self.connectionProperties.append(None)
                else:
                    keyValuePair_ = comm.opcua.structure.KeyValuePair.KeyValuePairT.InitFromObj(pubSubConnectionDataType.ConnectionProperties(i))
                    self.connectionProperties.append(keyValuePair_)
        if pubSubConnectionDataType.TransportSettings() is not None:
            self.transportSettings = comm.opcua.subtypes.ConnectionTransportDataType.ConnectionTransportDataTypeT.InitFromObj(pubSubConnectionDataType.TransportSettings())
        if not pubSubConnectionDataType.WriterGroupsIsNone():
            self.writerGroups = []
            for i in range(pubSubConnectionDataType.WriterGroupsLength()):
                if pubSubConnectionDataType.WriterGroups(i) is None:
                    self.writerGroups.append(None)
                else:
                    writerGroupDataType_ = comm.opcua.structure.WriterGroupDataType.WriterGroupDataTypeT.InitFromObj(pubSubConnectionDataType.WriterGroups(i))
                    self.writerGroups.append(writerGroupDataType_)
        if not pubSubConnectionDataType.ReaderGroupsIsNone():
            self.readerGroups = []
            for i in range(pubSubConnectionDataType.ReaderGroupsLength()):
                if pubSubConnectionDataType.ReaderGroups(i) is None:
                    self.readerGroups.append(None)
                else:
                    readerGroupDataType_ = comm.opcua.structure.ReaderGroupDataType.ReaderGroupDataTypeT.InitFromObj(pubSubConnectionDataType.ReaderGroups(i))
                    self.readerGroups.append(readerGroupDataType_)

    # PubSubConnectionDataTypeT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.publisherId is not None:
            publisherId = self.publisherId.Pack(builder)
        if self.transportProfileUri is not None:
            transportProfileUri = builder.CreateString(self.transportProfileUri)
        if self.address is not None:
            address = self.address.Pack(builder)
        if self.connectionProperties is not None:
            connectionPropertieslist = []
            for i in range(len(self.connectionProperties)):
                connectionPropertieslist.append(self.connectionProperties[i].Pack(builder))
            PubSubConnectionDataTypeStartConnectionPropertiesVector(builder, len(self.connectionProperties))
            for i in reversed(range(len(self.connectionProperties))):
                builder.PrependUOffsetTRelative(connectionPropertieslist[i])
            connectionProperties = builder.EndVector()
        if self.transportSettings is not None:
            transportSettings = self.transportSettings.Pack(builder)
        if self.writerGroups is not None:
            writerGroupslist = []
            for i in range(len(self.writerGroups)):
                writerGroupslist.append(self.writerGroups[i].Pack(builder))
            PubSubConnectionDataTypeStartWriterGroupsVector(builder, len(self.writerGroups))
            for i in reversed(range(len(self.writerGroups))):
                builder.PrependUOffsetTRelative(writerGroupslist[i])
            writerGroups = builder.EndVector()
        if self.readerGroups is not None:
            readerGroupslist = []
            for i in range(len(self.readerGroups)):
                readerGroupslist.append(self.readerGroups[i].Pack(builder))
            PubSubConnectionDataTypeStartReaderGroupsVector(builder, len(self.readerGroups))
            for i in reversed(range(len(self.readerGroups))):
                builder.PrependUOffsetTRelative(readerGroupslist[i])
            readerGroups = builder.EndVector()
        PubSubConnectionDataTypeStart(builder)
        if self.name is not None:
            PubSubConnectionDataTypeAddName(builder, name)
        PubSubConnectionDataTypeAddEnabled(builder, self.enabled)
        if self.publisherId is not None:
            PubSubConnectionDataTypeAddPublisherId(builder, publisherId)
        if self.transportProfileUri is not None:
            PubSubConnectionDataTypeAddTransportProfileUri(builder, transportProfileUri)
        if self.address is not None:
            PubSubConnectionDataTypeAddAddress(builder, address)
        if self.connectionProperties is not None:
            PubSubConnectionDataTypeAddConnectionProperties(builder, connectionProperties)
        if self.transportSettings is not None:
            PubSubConnectionDataTypeAddTransportSettings(builder, transportSettings)
        if self.writerGroups is not None:
            PubSubConnectionDataTypeAddWriterGroups(builder, writerGroups)
        if self.readerGroups is not None:
            PubSubConnectionDataTypeAddReaderGroups(builder, readerGroups)
        pubSubConnectionDataType = PubSubConnectionDataTypeEnd(builder)
        return pubSubConnectionDataType
