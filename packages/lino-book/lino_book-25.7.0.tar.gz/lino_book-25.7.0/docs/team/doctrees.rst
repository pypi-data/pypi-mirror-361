=======================
Types of documentation
=======================

Technical documentation includes topic guides, :term:`reference documentation`,
the changelogs and others.

.. glossary::

  reference documentation

    A section of documentation pages that are intermediate between
    :term:`developer guide` and :term:`user guide`.

    Reference documentation is not only for developers, it can be a valuable
    help for :term:`support providers <support provider>` and motivated
    :term:`key users <key user>`.

    Reference docs contain class descriptions for :term:`database models
    <database model>` and :term:`data tables <data table>`.

    Reference docs are not translated like the :term:`user guide`.

  local help pages

    A :term:`doctree` that is automatically generated by a :term:`Lino site`.
    These pages are what opens when you click the help button (:guilabel:`?`).

    See also :ref:`dg.topics.makedocs`.

  site documentation

    Another name for :term:`local help pages`.

  end-user documentation

    Documentation for :term:`end users <end user>` of a given :term:`Lino
    site`.  Written in the language(s) requested by the :term:`site operator`.

  developer documentation

    Documentation written for :term:`software developers <software developer>` and motivated
    :term:`site experts <site expert>`. Only in English. May include tested
    source code snippets and part of the :term:`test suite`.


The developer documentation for :mod:`lino`, :mod:`lino_xl` and :mod:`getlino`
is in the Lino Developer Guide, the :term:`doctree` of the ``book`` repository.
The ``book`` repository contains Python source code for a package
:mod:`lino_book`. This package is not published on PyPI because it meant to be
cloned by developers who install it from the editable source code using
:cmd:`pip install -e`.

The book repository also includes the developer documentation for a set of
"privileged" applications (:ref:`noi`, :ref:`tera`, :ref:`avanti`, ...) because
it's difficult to explain Lino without examples, and because real applications
are the best example.

Otherwise every newer typical Lino application has its own doctree.
`Lino Amici <http://amici.lino-framework.org>`_ is an example.
The doctree of amici can refer to the book via Intersphinx.

We also maintain the :mod:`atelier` and :mod:`etgen` packages, which come
"before" Lino in the dependency chain. These packages have their own doctree,
which doesn't "know" about Lino. But the book "knows" about them and wants to
refer to them.

Most :xfile:`conf.py` files use :func:`atelier.interproject.configure`  to
configure intersphinx dependencies, and :func:`rstgen.sphinxconf.configure` to
install default Sphinx settings that are common to all doctrees.

Python dependencies :

- book -> xl -> lino
- book -> noi -> lino
- lino -> etgen -> atelier
- amici -> xl -> lino

Doctree intersphinx dependencies:

- amici -> book -> atelier

Documenting Django :xfile:`models.py` modules has the particular challenge that
they cannot be imported without a :envvar:`DJANGO_SETTINGS_MODULE`, and this
setting may not change within one Sphinx doctree.  That's why the doctree of the
book uses :mod:`lino_book.projects.max` as its :envvar:`DJANGO_SETTINGS_MODULE`
during build.
