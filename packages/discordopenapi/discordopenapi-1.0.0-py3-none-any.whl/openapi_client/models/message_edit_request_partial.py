# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.base_create_message_create_request_components_inner import BaseCreateMessageCreateRequestComponentsInner
from openapi_client.models.message_allowed_mentions_request import MessageAllowedMentionsRequest
from openapi_client.models.message_attachment_request import MessageAttachmentRequest
from openapi_client.models.rich_embed import RichEmbed
from typing import Optional, Set
from typing_extensions import Self

class MessageEditRequestPartial(BaseModel):
    """
    MessageEditRequestPartial
    """ # noqa: E501
    content: Optional[Annotated[str, Field(strict=True, max_length=4000)]] = None
    embeds: Optional[Annotated[List[RichEmbed], Field(max_length=10)]] = None
    flags: Optional[StrictInt] = None
    allowed_mentions: Optional[MessageAllowedMentionsRequest] = None
    sticker_ids: Optional[Annotated[List[Annotated[str, Field(strict=True)]], Field(max_length=1521)]] = None
    components: Optional[Annotated[List[BaseCreateMessageCreateRequestComponentsInner], Field(max_length=40)]] = None
    attachments: Optional[Annotated[List[MessageAttachmentRequest], Field(max_length=10)]] = None
    __properties: ClassVar[List[str]] = ["content", "embeds", "flags", "allowed_mentions", "sticker_ids", "components", "attachments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageEditRequestPartial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in embeds (list)
        _items = []
        if self.embeds:
            for _item_embeds in self.embeds:
                if _item_embeds:
                    _items.append(_item_embeds.to_dict())
            _dict['embeds'] = _items
        # override the default output from pydantic by calling `to_dict()` of allowed_mentions
        if self.allowed_mentions:
            _dict['allowed_mentions'] = self.allowed_mentions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in components (list)
        _items = []
        if self.components:
            for _item_components in self.components:
                if _item_components:
                    _items.append(_item_components.to_dict())
            _dict['components'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if embeds (nullable) is None
        # and model_fields_set contains the field
        if self.embeds is None and "embeds" in self.model_fields_set:
            _dict['embeds'] = None

        # set to None if flags (nullable) is None
        # and model_fields_set contains the field
        if self.flags is None and "flags" in self.model_fields_set:
            _dict['flags'] = None

        # set to None if allowed_mentions (nullable) is None
        # and model_fields_set contains the field
        if self.allowed_mentions is None and "allowed_mentions" in self.model_fields_set:
            _dict['allowed_mentions'] = None

        # set to None if sticker_ids (nullable) is None
        # and model_fields_set contains the field
        if self.sticker_ids is None and "sticker_ids" in self.model_fields_set:
            _dict['sticker_ids'] = None

        # set to None if components (nullable) is None
        # and model_fields_set contains the field
        if self.components is None and "components" in self.model_fields_set:
            _dict['components'] = None

        # set to None if attachments (nullable) is None
        # and model_fields_set contains the field
        if self.attachments is None and "attachments" in self.model_fields_set:
            _dict['attachments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageEditRequestPartial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "embeds": [RichEmbed.from_dict(_item) for _item in obj["embeds"]] if obj.get("embeds") is not None else None,
            "flags": obj.get("flags"),
            "allowed_mentions": MessageAllowedMentionsRequest.from_dict(obj["allowed_mentions"]) if obj.get("allowed_mentions") is not None else None,
            "sticker_ids": obj.get("sticker_ids"),
            "components": [BaseCreateMessageCreateRequestComponentsInner.from_dict(_item) for _item in obj["components"]] if obj.get("components") is not None else None,
            "attachments": [MessageAttachmentRequest.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None
        })
        return _obj


