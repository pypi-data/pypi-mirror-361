{"version":3,"file":"vendors-node_modules_jupyter_collaboration_lib_index_js.7e8c82f63eb3cff09aa3.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAC+B;AACS;AACW;AACH;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,iCAAiC,kDAAK;AAC7C;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,gCAAgC,6DAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,QAAQ,GAAG,QAAQ;AAC5D,0BAA0B,0DAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,yBAAyB,EAAE,WAAW,EAAE,QAAQ;AACnF,oBAAoB,gDAAmB,UAAU;AACjD,yBAAyB,8BAA8B,EAAE,mBAAmB;AAC5E,oEAAoE;AACpE,gBAAgB,gDAAmB,UAAU,6CAA6C,qCAAqC;AAC/H,oBAAoB,gDAAmB;AACvC,gBAAgB,gDAAmB;AACnC,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;AClGA;AACA;AAC+B;AAC/B;AACA;AACA;AACA;AACA;AACO;AACP,YAAY,OAAO;AACnB,YAAY,gDAAmB,UAAU,oCAAoC;AAC7E,QAAQ,gDAAmB,UAAU,kEAAkE,+BAA+B;AACtI,YAAY,gDAAmB;AAC/B,QAAQ,gDAAmB;AAC3B;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACuE;AACmC;AAC9D;AAC0F;AACtI;AACA;AACA;AACA,6BAA6B,oDAAK;AAClC;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,6BAA6B,wDAAU;AACvC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,mCAAmC,yDAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uBAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,sDAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAK;AAChC;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+EAA0C;AACzE,6BAA6B,+EAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAe;AAC/C,oCAAoC,6DAAe;AACnD;AACA,oDAAoD,kIAAkI;AACtL;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,kBAAkB,8DAAY;AAC9B;AACA,YAAY,mBAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+EAA0C;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA,6BAA6B,uDAAK;AAClC;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+EAA0C;AACzE,6BAA6B,+EAA0C;AACvE;AACA;AACA;AACA;AACA,oCAAoC,6DAAe,2BAA2B,8DAAe;AAC7F;AACA,oDAAoD,kIAAkI;AACtL;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,0BAA0B,wDAAU;AACpC;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA,gCAAgC,kDAAkD;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wEAAmC;AACtE,iCAAiC,wEAAmC;AACpE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mEAA8B;AAChE;AACA;AACA,kCAAkC,mEAA8B;AAChE;AACA;AACA,qBAAqB;AACrB,yBAAyB,sDAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAQ,GAAG,6CAA6C;AACpE;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrRA;AACA;AACA;AACA;AACA;AACA;AACyB;AACY;AACX;AACH;AACM;AACG;;;;;;;;;;;;;;;;;;;;;;ACXhC;AACA;AACqD;AACL;AACT;AACvC;AACA;AACA;AACO,+BAA+B,oDAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAC,MAAM,mEAAmE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAC,OAAO,oDAAoD;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAC;AACpB;AACA,aAAa,EAAE,iDAAC,OAAO,qCAAqC;AAC5D;AACA;AACA,mBAAmB,iDAAC;AACpB;AACA,yBAAyB;AACzB,aAAa,EAAE,iDAAC,QAAQ;AACxB;AACA;AACA,mBAAmB,iDAAC;AACpB;AACA,aAAa,EAAE,+DAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACO,uBAAuB,iDAAI;AAClC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1EA;AACA;AAC0D;AACC;AACF;AAChB;AACzC;AACA;AACA;AACA;AACA;AACA;AACO,sCAAsC,YAAY;AACzD,+EAA+E,mEAAc;AAC7F,kBAAkB,6DAAU;AAC5B,wBAAwB,yDAAM,WAAW,6DAAU;AACnD,mBAAmB,6DAAU;AAC7B,KAAK;AACL,WAAW,gEAAU;AACrB;AACA,wDAAwD,6DAAU;AAClE;AACA,YAAY,wDAAM;AAClB,YAAY,wDAAM;AAClB;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,6BAA6B,mDAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,UAAU;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACzHA;AACA;AAC0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACO,sBAAsB,oDAAK;AAClC;AACA;AACA;AACO,6BAA6B,oDAAK;;;;;;;;;;;;;;;;;;;;;;;ACbzC;AACA;AACmD;AACX;AACT;AACkB;AAC1C,4BAA4B,kDAAK;AACxC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,6DAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAmB,CAAC,0DAAiB,IAAI,kBAAkB;AAC1E;AACA","sources":["webpack://@jupyter-ai/core/../../node_modules/@jupyter/collaboration/lib/collaboratorspanel.js","webpack://@jupyter-ai/core/../../node_modules/@jupyter/collaboration/lib/components.js","webpack://@jupyter-ai/core/../../node_modules/@jupyter/collaboration/lib/cursors.js","webpack://@jupyter-ai/core/../../node_modules/@jupyter/collaboration/lib/index.js","webpack://@jupyter-ai/core/../../node_modules/@jupyter/collaboration/lib/menu.js","webpack://@jupyter-ai/core/../../node_modules/@jupyter/collaboration/lib/sharedlink.js","webpack://@jupyter-ai/core/../../node_modules/@jupyter/collaboration/lib/tokens.js","webpack://@jupyter-ai/core/../../node_modules/@jupyter/collaboration/lib/userinfopanel.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { Panel } from '@lumino/widgets';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\n/**\n * The CSS class added to collaborators panel.\n */\nconst COLLABORATORS_PANEL_CLASS = 'jp-CollaboratorsPanel';\n/**\n * The CSS class added to collaborators list container.\n */\nconst COLLABORATORS_LIST_CLASS = 'jp-CollaboratorsList';\n/**\n * The CSS class added to each collaborator element.\n */\nconst COLLABORATOR_CLASS = 'jp-Collaborator';\n/**\n * The CSS class added to each collaborator element.\n */\nconst CLICKABLE_COLLABORATOR_CLASS = 'jp-ClickableCollaborator';\n/**\n * The CSS class added to each collaborator icon.\n */\nconst COLLABORATOR_ICON_CLASS = 'jp-CollaboratorIcon';\nexport class CollaboratorsPanel extends Panel {\n    constructor(currentUser, awareness, fileopener) {\n        super({});\n        /**\n         * Handle collaborator change.\n         */\n        this._onAwarenessChanged = () => {\n            const state = this._awareness.getStates();\n            const collaborators = [];\n            state.forEach((value, key) => {\n                if (this._currentUser.isReady &&\n                    value.user.name !== this._currentUser.identity.name) {\n                    collaborators.push(value);\n                }\n            });\n            this._body.collaborators = collaborators;\n        };\n        this._awareness = awareness;\n        this._currentUser = currentUser;\n        this.addClass(COLLABORATORS_PANEL_CLASS);\n        this._body = new CollaboratorsBody(fileopener);\n        this.addWidget(this._body);\n        this.update();\n        this._awareness.on('change', this._onAwarenessChanged);\n    }\n}\n/**\n * The collaborators list.\n */\nexport class CollaboratorsBody extends ReactWidget {\n    constructor(fileopener) {\n        super();\n        this._collaborators = [];\n        this._fileopener = fileopener;\n        this.addClass(COLLABORATORS_LIST_CLASS);\n    }\n    get collaborators() {\n        return this._collaborators;\n    }\n    set collaborators(value) {\n        this._collaborators = value;\n        this.update();\n    }\n    render() {\n        return this._collaborators.map((value, i) => {\n            let canOpenCurrent = false;\n            let current = '';\n            let separator = '';\n            let currentFileLocation = '';\n            if (value.current) {\n                canOpenCurrent = true;\n                const path = value.current.split(':');\n                currentFileLocation = `${path[1]}:${path[2]}`;\n                current = PathExt.basename(path[2]);\n                current =\n                    current.length > 25 ? current.slice(0, 12).concat('…') : current;\n                separator = '•';\n            }\n            const onClick = () => {\n                if (canOpenCurrent) {\n                    this._fileopener(currentFileLocation);\n                }\n            };\n            const displayName = `${value.user.display_name} ${separator} ${current}`;\n            return (React.createElement(\"div\", { className: canOpenCurrent\n                    ? `${CLICKABLE_COLLABORATOR_CLASS} ${COLLABORATOR_CLASS}`\n                    : COLLABORATOR_CLASS, key: i, onClick: onClick },\n                React.createElement(\"div\", { className: COLLABORATOR_ICON_CLASS, style: { backgroundColor: value.user.color } },\n                    React.createElement(\"span\", null, value.user.initials)),\n                React.createElement(\"span\", null, displayName)));\n        });\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * React component for the user icon.\n *\n * @returns The React component\n */\nexport const UserIconComponent = props => {\n    const { user } = props;\n    return (React.createElement(\"div\", { className: \"jp-UserInfo-Container\" },\n        React.createElement(\"div\", { title: user.display_name, className: \"jp-UserInfo-Icon\", style: { backgroundColor: user.color } },\n            React.createElement(\"span\", null, user.initials)),\n        React.createElement(\"h3\", null, user.display_name)));\n};\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Annotation, EditorSelection, Facet } from '@codemirror/state';\nimport { EditorView, hoverTooltip, layer, RectangleMarker, tooltips, ViewPlugin } from '@codemirror/view';\nimport { JSONExt } from '@lumino/coreutils';\nimport { createAbsolutePositionFromRelativePosition, createRelativePositionFromJSON, createRelativePositionFromTypeIndex } from 'yjs';\n/**\n * Facet storing the Yjs document objects\n */\nconst editorAwarenessFacet = Facet.define({\n    combine(configs) {\n        return configs[configs.length - 1];\n    }\n});\n/**\n * Remote selection theme\n */\nconst remoteSelectionTheme = EditorView.baseTheme({\n    '.jp-remote-cursor': {\n        borderLeft: '1px solid black',\n        marginLeft: '-1px'\n    },\n    '.jp-remote-cursor.jp-mod-primary': {\n        borderLeftWidth: '2px'\n    },\n    '.jp-remote-selection': {\n        opacity: 0.5\n    },\n    '.cm-tooltip': {\n        border: 'none'\n    },\n    '.cm-tooltip .jp-remote-userInfo': {\n        color: 'var(--jp-ui-inverse-font-color0)',\n        padding: '0px 2px'\n    }\n});\n// TODO fix which user needs update\nconst remoteSelectionsAnnotation = Annotation.define();\n/**\n * Wrapper around RectangleMarker to be able to set the user color for the remote cursor and selection ranges.\n */\nclass RemoteMarker {\n    /**\n     * Constructor\n     *\n     * @param style Specific user style to be applied on the marker element\n     * @param marker {@link RectangleMarker} to wrap\n     */\n    constructor(style, marker) {\n        this.style = style;\n        this.marker = marker;\n    }\n    draw() {\n        const elt = this.marker.draw();\n        for (const [key, value] of Object.entries(this.style)) {\n            // @ts-expect-error Unknown key\n            elt.style[key] = value;\n        }\n        return elt;\n    }\n    eq(other) {\n        return (this.marker.eq(other.marker) && JSONExt.deepEqual(this.style, other.style));\n    }\n    update(dom, oldMarker) {\n        for (const [key, value] of Object.entries(this.style)) {\n            // @ts-expect-error Unknown key\n            dom.style[key] = value;\n        }\n        return this.marker.update(dom, oldMarker.marker);\n    }\n}\n/**\n * Extension defining a new editor layer storing the remote user cursors\n */\nconst remoteCursorsLayer = layer({\n    above: true,\n    markers(view) {\n        const { awareness, ytext } = view.state.facet(editorAwarenessFacet);\n        const ydoc = ytext.doc;\n        const cursors = [];\n        awareness.getStates().forEach((state, clientID) => {\n            var _a, _b, _c;\n            if (clientID === awareness.doc.clientID) {\n                return;\n            }\n            const cursors_ = state.cursors;\n            for (const cursor of cursors_ !== null && cursors_ !== void 0 ? cursors_ : []) {\n                if (!(cursor === null || cursor === void 0 ? void 0 : cursor.anchor) || !(cursor === null || cursor === void 0 ? void 0 : cursor.head)) {\n                    return;\n                }\n                const anchor = createAbsolutePositionFromRelativePosition(cursor.anchor, ydoc);\n                const head = createAbsolutePositionFromRelativePosition(cursor.head, ydoc);\n                if ((anchor === null || anchor === void 0 ? void 0 : anchor.type) !== ytext || (head === null || head === void 0 ? void 0 : head.type) !== ytext) {\n                    return;\n                }\n                const className = ((_a = cursor.primary) !== null && _a !== void 0 ? _a : true)\n                    ? 'jp-remote-cursor jp-mod-primary'\n                    : 'jp-remote-cursor';\n                const cursor_ = EditorSelection.cursor(head.index, head.index > anchor.index ? -1 : 1);\n                for (const piece of RectangleMarker.forRange(view, className, cursor_)) {\n                    // Wrap the rectangle marker to set the user color\n                    cursors.push(new RemoteMarker({ borderLeftColor: (_c = (_b = state.user) === null || _b === void 0 ? void 0 : _b.color) !== null && _c !== void 0 ? _c : 'black' }, piece));\n                }\n            }\n        });\n        return cursors;\n    },\n    update(update, layer) {\n        return !!update.transactions.find(t => t.annotation(remoteSelectionsAnnotation));\n    },\n    class: 'jp-remote-cursors'\n});\n/**\n * Tooltip extension to display user display name at cursor position\n */\nconst userHover = hoverTooltip((view, pos) => {\n    var _a;\n    const { awareness, ytext } = view.state.facet(editorAwarenessFacet);\n    const ydoc = ytext.doc;\n    for (const [clientID, state] of awareness.getStates()) {\n        if (clientID === awareness.doc.clientID) {\n            continue;\n        }\n        for (const cursor of (_a = state.cursors) !== null && _a !== void 0 ? _a : []) {\n            if (!(cursor === null || cursor === void 0 ? void 0 : cursor.head)) {\n                continue;\n            }\n            const head = createAbsolutePositionFromRelativePosition(cursor.head, ydoc);\n            if ((head === null || head === void 0 ? void 0 : head.type) !== ytext) {\n                continue;\n            }\n            // Use some margin around the cursor to display the user.\n            if (head.index - 1 <= pos && pos <= head.index + 1) {\n                return {\n                    pos: head.index,\n                    above: true,\n                    create: () => {\n                        var _a, _b, _c, _d;\n                        const dom = document.createElement('div');\n                        dom.classList.add('jp-remote-userInfo');\n                        dom.style.backgroundColor = (_b = (_a = state.user) === null || _a === void 0 ? void 0 : _a.color) !== null && _b !== void 0 ? _b : 'darkgrey';\n                        dom.textContent =\n                            (_d = (_c = state.user) === null || _c === void 0 ? void 0 : _c.display_name) !== null && _d !== void 0 ? _d : 'Anonymous';\n                        return { dom };\n                    }\n                };\n            }\n        }\n    }\n    return null;\n}, {\n    hideOn: (tr, tooltip) => !!tr.annotation(remoteSelectionsAnnotation)\n});\n/**\n * Extension defining a new editor layer storing the remote selections\n */\nconst remoteSelectionLayer = layer({\n    above: false,\n    markers(view) {\n        const { awareness, ytext } = view.state.facet(editorAwarenessFacet);\n        const ydoc = ytext.doc;\n        const cursors = [];\n        awareness.getStates().forEach((state, clientID) => {\n            var _a, _b, _c;\n            if (clientID === awareness.doc.clientID) {\n                return;\n            }\n            const cursors_ = state.cursors;\n            for (const cursor of cursors_ !== null && cursors_ !== void 0 ? cursors_ : []) {\n                if (((_a = cursor.empty) !== null && _a !== void 0 ? _a : true) || !(cursor === null || cursor === void 0 ? void 0 : cursor.anchor) || !(cursor === null || cursor === void 0 ? void 0 : cursor.head)) {\n                    return;\n                }\n                const anchor = createAbsolutePositionFromRelativePosition(cursor.anchor, ydoc);\n                const head = createAbsolutePositionFromRelativePosition(cursor.head, ydoc);\n                if ((anchor === null || anchor === void 0 ? void 0 : anchor.type) !== ytext || (head === null || head === void 0 ? void 0 : head.type) !== ytext) {\n                    return;\n                }\n                const className = 'jp-remote-selection';\n                for (const piece of RectangleMarker.forRange(view, className, EditorSelection.range(anchor.index, head.index))) {\n                    // Wrap the rectangle marker to set the user color\n                    cursors.push(new RemoteMarker({ backgroundColor: (_c = (_b = state.user) === null || _b === void 0 ? void 0 : _b.color) !== null && _c !== void 0 ? _c : 'black' }, piece));\n                }\n            }\n        });\n        return cursors;\n    },\n    update(update, layer) {\n        return !!update.transactions.find(t => t.annotation(remoteSelectionsAnnotation));\n    },\n    class: 'jp-remote-selections'\n});\n/**\n * CodeMirror extension exchanging and displaying remote user selection ranges (including cursors)\n */\nconst showCollaborators = ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.editorAwareness = view.state.facet(editorAwarenessFacet);\n        this._listener = ({ added, updated, removed }) => {\n            const clients = added.concat(updated).concat(removed);\n            if (clients.findIndex(id => id !== this.editorAwareness.awareness.doc.clientID) >= 0) {\n                // Trick to get the remoteCursorLayers to be updated\n                view.dispatch({ annotations: [remoteSelectionsAnnotation.of([])] });\n            }\n        };\n        this.editorAwareness.awareness.on('change', this._listener);\n    }\n    destroy() {\n        this.editorAwareness.awareness.off('change', this._listener);\n    }\n    /**\n     * Communicate the current user cursor position to all remotes\n     */\n    update(update) {\n        var _a;\n        if (!update.docChanged && !update.selectionSet) {\n            return;\n        }\n        const { awareness, ytext } = this.editorAwareness;\n        const localAwarenessState = awareness.getLocalState();\n        // set local awareness state (update cursors)\n        if (localAwarenessState) {\n            const hasFocus = update.view.hasFocus && update.view.dom.ownerDocument.hasFocus();\n            const selection = update.state.selection;\n            const cursors = new Array();\n            if (hasFocus && selection) {\n                for (const r of selection.ranges) {\n                    const primary = r === selection.main;\n                    const anchor = createRelativePositionFromTypeIndex(ytext, r.anchor);\n                    const head = createRelativePositionFromTypeIndex(ytext, r.head);\n                    cursors.push({\n                        anchor,\n                        head,\n                        primary,\n                        empty: r.empty\n                    });\n                }\n                if (!localAwarenessState.cursors || cursors.length > 0) {\n                    const oldCursors = (_a = localAwarenessState.cursors) === null || _a === void 0 ? void 0 : _a.map(cursor => {\n                        return {\n                            ...cursor,\n                            anchor: (cursor === null || cursor === void 0 ? void 0 : cursor.anchor)\n                                ? createRelativePositionFromJSON(cursor.anchor)\n                                : null,\n                            head: (cursor === null || cursor === void 0 ? void 0 : cursor.head)\n                                ? createRelativePositionFromJSON(cursor.head)\n                                : null\n                        };\n                    });\n                    if (!JSONExt.deepEqual(cursors, oldCursors)) {\n                        // Update cursors\n                        awareness.setLocalStateField('cursors', cursors);\n                    }\n                }\n            }\n        }\n    }\n}, {\n    provide: () => {\n        return [\n            remoteSelectionTheme,\n            remoteCursorsLayer,\n            remoteSelectionLayer,\n            userHover,\n            // As we use relative positioning of widget, the tooltip must be positioned absolutely\n            // And we attach the tooltip to the body to avoid overflow rules\n            tooltips({ position: 'absolute', parent: document.body })\n        ];\n    }\n});\n/**\n * CodeMirror extension to display remote users cursors\n *\n * @param config Editor source and awareness\n * @returns CodeMirror extension\n */\nexport function remoteUserCursors(config) {\n    return [editorAwarenessFacet.of(config), showCollaborators];\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module collaboration\n */\nexport * from './tokens';\nexport * from './collaboratorspanel';\nexport * from './cursors';\nexport * from './menu';\nexport * from './sharedlink';\nexport * from './userinfopanel';\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { userIcon } from '@jupyterlab/ui-components';\nimport { Menu, MenuBar } from '@lumino/widgets';\nimport { h } from '@lumino/virtualdom';\n/**\n * Custom renderer for the user menu.\n */\nexport class RendererUserMenu extends MenuBar.Renderer {\n    /**\n     * Constructor of the class RendererUserMenu.\n     *\n     * @argument user Current user object.\n     */\n    constructor(user) {\n        super();\n        this._user = user;\n    }\n    /**\n     * Render the virtual element for a menu bar item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     */\n    renderItem(data) {\n        const className = this.createItemClass(data);\n        const dataset = this.createItemDataset(data);\n        const aria = this.createItemARIA(data);\n        return h.li({ className, dataset, tabindex: '0', onfocus: data.onfocus, ...aria }, this._createUserIcon(), this.renderLabel(data), this.renderIcon(data));\n    }\n    /**\n     * Render the label element for a menu item.\n     *\n     * @param data - The data to use for rendering the label.\n     *\n     * @returns A virtual element representing the item label.\n     */\n    renderLabel(data) {\n        const content = this.formatLabel(data);\n        return h.div({ className: 'lm-MenuBar-itemLabel jp-MenuBar-label' }, content);\n    }\n    /**\n     * Render the user icon element for a menu item.\n     *\n     * @returns A virtual element representing the item label.\n     */\n    _createUserIcon() {\n        if (this._user.isReady && this._user.identity.avatar_url) {\n            return h.div({\n                className: 'lm-MenuBar-itemIcon jp-MenuBar-imageIcon'\n            }, h.img({ src: this._user.identity.avatar_url }));\n        }\n        else if (this._user.isReady) {\n            return h.div({\n                className: 'lm-MenuBar-itemIcon jp-MenuBar-anonymousIcon',\n                style: { backgroundColor: this._user.identity.color }\n            }, h.span({}, this._user.identity.initials));\n        }\n        else {\n            return h.div({\n                className: 'lm-MenuBar-itemIcon jp-MenuBar-anonymousIcon'\n            }, userIcon);\n        }\n    }\n}\n/**\n * This menu does not contain anything but we keep it around in case someone uses it.\n * Custom lumino Menu for the user menu.\n */\nexport class UserMenu extends Menu {\n    constructor(options) {\n        super(options);\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\n/**\n * Show the shared link dialog\n *\n * @param options Shared link dialog options\n * @returns Dialog result\n */\nexport async function showSharedLinkDialog({ translator }) {\n    const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('collaboration');\n    const token = PageConfig.getToken();\n    const url = new URL(URLExt.normalize(PageConfig.getUrl({\n        workspace: PageConfig.defaultWorkspace\n    })));\n    return showDialog({\n        title: trans.__('Share Jupyter Server Link'),\n        body: new SharedLinkBody(url.toString(), token, PageConfig.getOption('hubUser') !== '', trans),\n        buttons: [\n            Dialog.cancelButton(),\n            Dialog.okButton({\n                label: trans.__('Copy Link'),\n                caption: trans.__('Copy the link to the Jupyter Server')\n            })\n        ]\n    });\n}\nclass SharedLinkBody extends Widget {\n    constructor(_url, _token, _behindHub, _trans) {\n        super();\n        this._url = _url;\n        this._token = _token;\n        this._behindHub = _behindHub;\n        this._trans = _trans;\n        this._tokenCheckbox = null;\n        this.onTokenChange = (e) => {\n            const target = e.target;\n            this.updateContent(target === null || target === void 0 ? void 0 : target.checked);\n        };\n        this._warning = document.createElement('div');\n        this.populateBody(this.node);\n        this.addClass('jp-shared-link-body');\n    }\n    /**\n     * Returns the input value.\n     */\n    getValue() {\n        var _a;\n        const withToken = ((_a = this._tokenCheckbox) === null || _a === void 0 ? void 0 : _a.checked) === true;\n        if (withToken) {\n            const url_ = new URL(this._url);\n            url_.searchParams.set('token', this._token);\n            return url_.toString();\n        }\n        else {\n            return this._url;\n        }\n    }\n    onAfterAttach(msg) {\n        var _a;\n        super.onAfterAttach(msg);\n        (_a = this._tokenCheckbox) === null || _a === void 0 ? void 0 : _a.addEventListener('change', this.onTokenChange);\n    }\n    onBeforeDetach(msg) {\n        var _a;\n        (_a = this._tokenCheckbox) === null || _a === void 0 ? void 0 : _a.removeEventListener('change', this.onTokenChange);\n        super.onBeforeDetach(msg);\n    }\n    updateContent(withToken) {\n        this._warning.innerHTML = '';\n        const urlInput = this.node.querySelector('input[readonly]');\n        if (withToken) {\n            if (urlInput) {\n                const url_ = new URL(this._url);\n                url_.searchParams.set('token', this._token.slice(0, 5));\n                urlInput.value = url_.toString() + '…';\n            }\n            this._warning.appendChild(document.createElement('h3')).textContent =\n                this._trans.__('Security warning!');\n            this._warning.insertAdjacentText('beforeend', this._trans.__('Anyone with this link has full access to your notebook server, including all your files!'));\n            this._warning.insertAdjacentHTML('beforeend', '<br>');\n            this._warning.insertAdjacentText('beforeend', this._trans.__('Please be careful who you share it with.'));\n            this._warning.insertAdjacentHTML('beforeend', '<br>');\n            if (this._behindHub) {\n                this._warning.insertAdjacentText('beforeend', // You can restart the server to revoke the token in a JupyterHub\n                this._trans.__('They will be able to access this server AS YOU.'));\n                this._warning.insertAdjacentHTML('beforeend', '<br>');\n                this._warning.insertAdjacentText('beforeend', this._trans.__('To revoke access, go to File -> Hub Control Panel, and restart your server.'));\n            }\n            else {\n                this._warning.insertAdjacentText('beforeend', \n                // Elsewhere, you *must* shut down your server - no way to revoke it\n                this._trans.__('Currently, there is no way to revoke access other than shutting down your server.'));\n            }\n        }\n        else {\n            if (urlInput) {\n                urlInput.value = this._url;\n            }\n            if (this._behindHub) {\n                this._warning.insertAdjacentText('beforeend', this._trans.__('Only users with `access:servers` permissions for this server will be able to use this link.'));\n            }\n            else {\n                this._warning.insertAdjacentText('beforeend', this._trans.__('Only authenticated users will be able to use this link.'));\n            }\n        }\n    }\n    populateBody(dialogBody) {\n        dialogBody.insertAdjacentHTML('afterbegin', `<input readonly value=\"${this._url}\">`);\n        if (this._token) {\n            const label = dialogBody.appendChild(document.createElement('label'));\n            label.insertAdjacentHTML('beforeend', '<input type=\"checkbox\">');\n            this._tokenCheckbox = label.firstChild;\n            label.insertAdjacentText('beforeend', this._trans.__('Include token in URL'));\n            dialogBody.insertAdjacentElement('beforeend', this._warning);\n            this.updateContent(false);\n        }\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The user menu token.\n *\n * NOTE: Require this token in your extension to access the user menu\n * (top-right menu in JupyterLab's interface).\n */\nexport const IUserMenu = new Token('@jupyter/collaboration:IUserMenu');\n/**\n * The global awareness token.\n */\nexport const IGlobalAwareness = new Token('@jupyter/collaboration:IGlobalAwareness');\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { Panel } from '@lumino/widgets';\nimport * as React from 'react';\nimport { UserIconComponent } from './components';\nexport class UserInfoPanel extends Panel {\n    constructor(user) {\n        super({});\n        this.addClass('jp-UserInfoPanel');\n        this._profile = user;\n        this._body = null;\n        if (this._profile.isReady) {\n            this._body = new UserInfoBody(this._profile.identity);\n            this.addWidget(this._body);\n            this.update();\n        }\n        else {\n            this._profile.ready\n                .then(() => {\n                this._body = new UserInfoBody(this._profile.identity);\n                this.addWidget(this._body);\n                this.update();\n            })\n                .catch(e => console.error(e));\n        }\n    }\n}\n/**\n * A SettingsWidget for the user.\n */\nexport class UserInfoBody extends ReactWidget {\n    /**\n     * Constructs a new settings widget.\n     */\n    constructor(user) {\n        super();\n        this._user = user;\n    }\n    get user() {\n        return this._user;\n    }\n    set user(user) {\n        this._user = user;\n        this.update();\n    }\n    render() {\n        return React.createElement(UserIconComponent, { user: this._user });\n    }\n}\n"],"names":[],"sourceRoot":""}