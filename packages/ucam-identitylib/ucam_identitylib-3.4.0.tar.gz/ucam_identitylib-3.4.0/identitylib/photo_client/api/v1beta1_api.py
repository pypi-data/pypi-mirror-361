# coding: utf-8

"""
    University Photo API

     ## Introduction  The Photo API allows access to Photos of members of the University. The Photos exposed by this API are expected to be a good representation of the person they relate to.  The API broadly follows the principles of REST and strives to provide an interface that can be easily consumed by downstream systems.  ### Stability  This release of the Photo API is a `beta` offering: a service we are moving towards live but which requires wider testing with a broader group of users.  ### Versioning  The Photo API is versioned using URL path prefixes in the format: `/v1beta1/photos`. This follows the pattern established by the [GCP API](https://cloud.google.com/apis/design/versioning). Breaking changes will not be made without a change in API major version, however non-breaking changes will be introduced without changes to the version path prefix. All changes will be documented in the project's [CHANGELOG](https://gitlab.developers.cam.ac.uk/uis/devops/iam/photo-api/-/blob/master/CHANGELOG.md)  The available versions of the API are listed at the API's root.  ### Domain  The Photo API serves Photos of members of the University, linking a Photo to an individual through `PhotoIdentifiers` (see below) which pertain to a person record within an external system.  The Photos served by the Photo API are expected to be of sufficient quality to identify the person they represent. Photos which have been reviewed and determined to be sufficient quality are marked as having the status `approved` and exposed through the `approved-photos` endpoints.  ### Data source  The Photos exposed by the Photo API are currently a mirror of card Photos contained within the [Card Database](https://webservices.admin.cam.ac.uk/uc/). With Photos being synced from the Card Database to the Photo API hourly.  In future, the Photo API will be extended to allow Photos to be created and 'approved' using the API.  ## Core entities  ### The `Photo` Entity  The `Photo` entity contains information and metadata about a Photo of a member of the university. The `status` field on a Photo indicates whether this Photo has been reviewed and approved. Only Photos which have the status `approved` are exposed through the `approved-photos` endpoints. Each photo entity has a unique identifier - termed UUID - which is used in the system to refer to the specific photo entity. The UUID is provided in JSON documents as the `id` property.   Each Photo entity contains a link to the image data itself and a thumbnail for this Photo, which is guaranteed to be less than 128x128 pixels. Images are served by redirecting to a temporary URL provided by the service used to host images. These temporary URLs will expire after an hour and should not be retained for long-lasting access to a given Photo.  Each Photo may contain a block of JSON metadata recording information about the Photo. Photos cannot be updated once created (apart from to move their status to `approved`) hence this metadata should not be used to store application state or any other information which is not related to the content of the Photo.  Each Photo will have a set of `PhotoIdentifier` which allow the Photo to be linked to a person record within another system.  ### The `PhotoIdentifier` Entity  The `PhotoIdentifier` entity holds the `value` and `scheme` of a given identifier. The `value` field of a `PhotoIdentifier` is a simple ID string - e.g. `wgd23` or `000001`. The `scheme` field of a `PhotoIdentifier` indicates what system this identifier relates to or was issued by. This allows many identifiers which relate to different systems to be recorded against a single `Photo`.  The supported schemes are: * `v1.person.identifiers.cam.ac.uk`: The CRSID of the person represented by this Photo * `person.v1.student-records.university.identifiers.cam.ac.uk`: The CamSIS identifier (USN) of the person represented by this Photo * `person.v1.human-resources.university.identifiers.cam.ac.uk`: The CHRIS identifier (staff number) of the person represented by this Photo * `photo.v1.legacy-card.university.identifiers.cam.ac.uk`: The id of this Photo within the legacy card system  ## Using the API  ### Auth  To authenticate against the Photo API, an application must be registered within the API Gateway and granted access to the `University Photo` product. Details of how to register an application and grant access to products can be found in the [API Gateway Getting Started Guide](https://developer.api.apps.cam.ac.uk/start-using-an-api).  

    The version of the OpenAPI document: v1beta1
    Contact: devops+photoapi@uis.cam.ac.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from identitylib.photo_client.models.paginated_v1_beta1_photo_identifier_summary_list import PaginatedV1Beta1PhotoIdentifierSummaryList
from identitylib.photo_client.models.paginated_v1_beta1_photo_list import PaginatedV1Beta1PhotoList
from identitylib.photo_client.models.photo_identifier import PhotoIdentifier
from identitylib.photo_client.models.photo_identifier_bulk_update_request_request import PhotoIdentifierBulkUpdateRequestRequest
from identitylib.photo_client.models.transient_image_url import TransientImageUrl
from identitylib.photo_client.models.v1_beta1_photo import V1Beta1Photo

from identitylib.photo_client.api_client import ApiClient, RequestSerialized
from identitylib.photo_client.api_response import ApiResponse
from identitylib.photo_client.rest import RESTResponseType


class V1beta1Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def v1beta1_all_photos_list(
        self,
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedV1Beta1PhotoList:
        """List all photos

         # List all Photos  This endpoint allows information and metadata about all Photos to be fetched.  Results are ordered by `createdAt` ascending, and may be split over multiple 'pages'. Where more results exist a `next` URL will be provided which can be used to fetch the next page of results. The `previous` URL can be used to navigate backwards through the result pages. The `pageSize` query parameter can be used to request a specific amount of results per page. If not provided the `pageSize` is set to `200`. The amount of results per page is limited to `500`, if a number greater than `500` is specified in the `pageSize` parameter no error is returned but the number of results will be capped at 500 per page.  Only principals with the `PHOTO_ADMIN` permission can list all photos.  

        :param cursor: The pagination cursor value.
        :type cursor: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_all_photos_list_serialize(
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_all_photos_list_with_http_info(
        self,
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedV1Beta1PhotoList]:
        """List all photos

         # List all Photos  This endpoint allows information and metadata about all Photos to be fetched.  Results are ordered by `createdAt` ascending, and may be split over multiple 'pages'. Where more results exist a `next` URL will be provided which can be used to fetch the next page of results. The `previous` URL can be used to navigate backwards through the result pages. The `pageSize` query parameter can be used to request a specific amount of results per page. If not provided the `pageSize` is set to `200`. The amount of results per page is limited to `500`, if a number greater than `500` is specified in the `pageSize` parameter no error is returned but the number of results will be capped at 500 per page.  Only principals with the `PHOTO_ADMIN` permission can list all photos.  

        :param cursor: The pagination cursor value.
        :type cursor: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_all_photos_list_serialize(
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_all_photos_list_without_preload_content(
        self,
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all photos

         # List all Photos  This endpoint allows information and metadata about all Photos to be fetched.  Results are ordered by `createdAt` ascending, and may be split over multiple 'pages'. Where more results exist a `next` URL will be provided which can be used to fetch the next page of results. The `previous` URL can be used to navigate backwards through the result pages. The `pageSize` query parameter can be used to request a specific amount of results per page. If not provided the `pageSize` is set to `200`. The amount of results per page is limited to `500`, if a number greater than `500` is specified in the `pageSize` parameter no error is returned but the number of results will be capped at 500 per page.  Only principals with the `PHOTO_ADMIN` permission can list all photos.  

        :param cursor: The pagination cursor value.
        :type cursor: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_all_photos_list_serialize(
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_all_photos_list_serialize(
        self,
        cursor,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/all-photos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_approved_photos_content_retrieve(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get the image content of an approved photo using a person identifier

         # Get image content of an approved Photo  This endpoint redirects to the image content of the single, most recently approved, Photo for the given PhotoIdentifier.  The PhotoIdentifier should be included in the URL params in the format `<value>@<scheme>` - see the introduction to this API for a list of supported schemes. If the scheme is not provided it is assumed to be a CRSid (v1.person.identifiers.cam.ac.uk).  A given PhotoIdentifier may link to many approved Photos, in which case the most recently approved Photo is returned here. If a PhotoIdentifier does not link to an approved Photo a `404` response will be returned.  The Photo returned may change over time if a new Photo is approved for a given PhotoIdentifier. If you want to keep a reference to an exact Photo you can use the Photo's `id` (the UUID), or `contentLink` of the Photo returned from the `Get approved Photo` endpoint above, which is guaranteed to always give back the same Photo, regardless of whether a new Photo is approved for a given PhotoIdentifier.  This endpoint redirects to a temporary URL provided by the storage service used by this API. This temporary URL will expire after a short period of time and therefore should not be recorded or used as a permanent reference to this Photo.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_content_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_approved_photos_content_retrieve_with_http_info(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get the image content of an approved photo using a person identifier

         # Get image content of an approved Photo  This endpoint redirects to the image content of the single, most recently approved, Photo for the given PhotoIdentifier.  The PhotoIdentifier should be included in the URL params in the format `<value>@<scheme>` - see the introduction to this API for a list of supported schemes. If the scheme is not provided it is assumed to be a CRSid (v1.person.identifiers.cam.ac.uk).  A given PhotoIdentifier may link to many approved Photos, in which case the most recently approved Photo is returned here. If a PhotoIdentifier does not link to an approved Photo a `404` response will be returned.  The Photo returned may change over time if a new Photo is approved for a given PhotoIdentifier. If you want to keep a reference to an exact Photo you can use the Photo's `id` (the UUID), or `contentLink` of the Photo returned from the `Get approved Photo` endpoint above, which is guaranteed to always give back the same Photo, regardless of whether a new Photo is approved for a given PhotoIdentifier.  This endpoint redirects to a temporary URL provided by the storage service used by this API. This temporary URL will expire after a short period of time and therefore should not be recorded or used as a permanent reference to this Photo.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_content_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_approved_photos_content_retrieve_without_preload_content(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the image content of an approved photo using a person identifier

         # Get image content of an approved Photo  This endpoint redirects to the image content of the single, most recently approved, Photo for the given PhotoIdentifier.  The PhotoIdentifier should be included in the URL params in the format `<value>@<scheme>` - see the introduction to this API for a list of supported schemes. If the scheme is not provided it is assumed to be a CRSid (v1.person.identifiers.cam.ac.uk).  A given PhotoIdentifier may link to many approved Photos, in which case the most recently approved Photo is returned here. If a PhotoIdentifier does not link to an approved Photo a `404` response will be returned.  The Photo returned may change over time if a new Photo is approved for a given PhotoIdentifier. If you want to keep a reference to an exact Photo you can use the Photo's `id` (the UUID), or `contentLink` of the Photo returned from the `Get approved Photo` endpoint above, which is guaranteed to always give back the same Photo, regardless of whether a new Photo is approved for a given PhotoIdentifier.  This endpoint redirects to a temporary URL provided by the storage service used by this API. This temporary URL will expire after a short period of time and therefore should not be recorded or used as a permanent reference to this Photo.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_content_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_approved_photos_content_retrieve_serialize(
        self,
        identifier,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identifier is not None:
            _path_params['identifier'] = identifier
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'image/*', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/approved-photos/{identifier}/content',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_approved_photos_content_transient_url_retrieve(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TransientImageUrl:
        """Get the transient url of the content of this approved photo

         # Get transient URL of the content of an approved Photo  This endpoint returns a transient URL which can be used to fetch the most recently approved Photo's content for a PhotoIdentifier.  The PhotoIdentifier should be included in the URL params in the format `<value>@<scheme>` - see the introduction to this API for a list of supported schemes. If the scheme is not provided it is assumed to be a CRSid (v1.person.identifiers.cam.ac.uk).  A given PhotoIdentifier may link to many approved Photos, in which case the most recently approved Photo is returned here. If a PhotoIdentifier does not link to an approved Photo a `404` response will be returned.  The Photo returned may change over time if a new Photo is approved for a given PhotoIdentifier. If you want to keep a reference to an exact Photo you can use the Photo's `id` (the UUID), or `contentLink` of the Photo returned from the `Get approved Photo` endpoint above, which is guaranteed to always give back the same Photo, regardless of whether a new Photo is approved for a given PhotoIdentifier.  This endpoint returns both a publicly accessible URL and the expiry time of that URL in seconds.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_content_transient_url_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransientImageUrl",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_approved_photos_content_transient_url_retrieve_with_http_info(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TransientImageUrl]:
        """Get the transient url of the content of this approved photo

         # Get transient URL of the content of an approved Photo  This endpoint returns a transient URL which can be used to fetch the most recently approved Photo's content for a PhotoIdentifier.  The PhotoIdentifier should be included in the URL params in the format `<value>@<scheme>` - see the introduction to this API for a list of supported schemes. If the scheme is not provided it is assumed to be a CRSid (v1.person.identifiers.cam.ac.uk).  A given PhotoIdentifier may link to many approved Photos, in which case the most recently approved Photo is returned here. If a PhotoIdentifier does not link to an approved Photo a `404` response will be returned.  The Photo returned may change over time if a new Photo is approved for a given PhotoIdentifier. If you want to keep a reference to an exact Photo you can use the Photo's `id` (the UUID), or `contentLink` of the Photo returned from the `Get approved Photo` endpoint above, which is guaranteed to always give back the same Photo, regardless of whether a new Photo is approved for a given PhotoIdentifier.  This endpoint returns both a publicly accessible URL and the expiry time of that URL in seconds.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_content_transient_url_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransientImageUrl",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_approved_photos_content_transient_url_retrieve_without_preload_content(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the transient url of the content of this approved photo

         # Get transient URL of the content of an approved Photo  This endpoint returns a transient URL which can be used to fetch the most recently approved Photo's content for a PhotoIdentifier.  The PhotoIdentifier should be included in the URL params in the format `<value>@<scheme>` - see the introduction to this API for a list of supported schemes. If the scheme is not provided it is assumed to be a CRSid (v1.person.identifiers.cam.ac.uk).  A given PhotoIdentifier may link to many approved Photos, in which case the most recently approved Photo is returned here. If a PhotoIdentifier does not link to an approved Photo a `404` response will be returned.  The Photo returned may change over time if a new Photo is approved for a given PhotoIdentifier. If you want to keep a reference to an exact Photo you can use the Photo's `id` (the UUID), or `contentLink` of the Photo returned from the `Get approved Photo` endpoint above, which is guaranteed to always give back the same Photo, regardless of whether a new Photo is approved for a given PhotoIdentifier.  This endpoint returns both a publicly accessible URL and the expiry time of that URL in seconds.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_content_transient_url_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransientImageUrl",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_approved_photos_content_transient_url_retrieve_serialize(
        self,
        identifier,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identifier is not None:
            _path_params['identifier'] = identifier
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/approved-photos/{identifier}/content/transient-url',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_approved_photos_list(
        self,
        approved_since: Annotated[StrictStr, Field(description="Specify the earliest datetime at which approved photos should be returned in ISO datetime format.")],
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedV1Beta1PhotoList:
        """List approved photos

         # List approved Photos  Return list of approved photos.  This endpoint allows information and metadata about approved Photos to be fetched. Approved photos must be filtered by approvedSince - which returns only photos which have been approved after a given point in time. This is to allow for incremental export of data, where the approvedSince can be specified as the point of the last export and only an increment of approved photo data queried.  Results are ordered by `approvedAt` ascending and may be split over multiple 'pages'. Where more results exist a `next` URL will be provided which can be used to fetch the next page of results. The `previous` URL can be used to navigate backwards through the result pages. The `pageSize` query parameter can be used to request a specific amount of results per page. If not provided the `pageSize` is set to `200`. The amount of results per page is limited to `500`, if a number greater than `500` is specified in the `pageSize` parameter no error is returned but the number of results will be capped at 500 per page.  

        :param approved_since: Specify the earliest datetime at which approved photos should be returned in ISO datetime format. (required)
        :type approved_since: str
        :param cursor: The pagination cursor value.
        :type cursor: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_list_serialize(
            approved_since=approved_since,
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_approved_photos_list_with_http_info(
        self,
        approved_since: Annotated[StrictStr, Field(description="Specify the earliest datetime at which approved photos should be returned in ISO datetime format.")],
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedV1Beta1PhotoList]:
        """List approved photos

         # List approved Photos  Return list of approved photos.  This endpoint allows information and metadata about approved Photos to be fetched. Approved photos must be filtered by approvedSince - which returns only photos which have been approved after a given point in time. This is to allow for incremental export of data, where the approvedSince can be specified as the point of the last export and only an increment of approved photo data queried.  Results are ordered by `approvedAt` ascending and may be split over multiple 'pages'. Where more results exist a `next` URL will be provided which can be used to fetch the next page of results. The `previous` URL can be used to navigate backwards through the result pages. The `pageSize` query parameter can be used to request a specific amount of results per page. If not provided the `pageSize` is set to `200`. The amount of results per page is limited to `500`, if a number greater than `500` is specified in the `pageSize` parameter no error is returned but the number of results will be capped at 500 per page.  

        :param approved_since: Specify the earliest datetime at which approved photos should be returned in ISO datetime format. (required)
        :type approved_since: str
        :param cursor: The pagination cursor value.
        :type cursor: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_list_serialize(
            approved_since=approved_since,
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_approved_photos_list_without_preload_content(
        self,
        approved_since: Annotated[StrictStr, Field(description="Specify the earliest datetime at which approved photos should be returned in ISO datetime format.")],
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List approved photos

         # List approved Photos  Return list of approved photos.  This endpoint allows information and metadata about approved Photos to be fetched. Approved photos must be filtered by approvedSince - which returns only photos which have been approved after a given point in time. This is to allow for incremental export of data, where the approvedSince can be specified as the point of the last export and only an increment of approved photo data queried.  Results are ordered by `approvedAt` ascending and may be split over multiple 'pages'. Where more results exist a `next` URL will be provided which can be used to fetch the next page of results. The `previous` URL can be used to navigate backwards through the result pages. The `pageSize` query parameter can be used to request a specific amount of results per page. If not provided the `pageSize` is set to `200`. The amount of results per page is limited to `500`, if a number greater than `500` is specified in the `pageSize` parameter no error is returned but the number of results will be capped at 500 per page.  

        :param approved_since: Specify the earliest datetime at which approved photos should be returned in ISO datetime format. (required)
        :type approved_since: str
        :param cursor: The pagination cursor value.
        :type cursor: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_list_serialize(
            approved_since=approved_since,
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_approved_photos_list_serialize(
        self,
        approved_since,
        cursor,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if approved_since is not None:
            
            _query_params.append(('approvedSince', approved_since))
            
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/approved-photos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_approved_photos_retrieve(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V1Beta1Photo:
        """Get an approved photo of a person using a person identifier

         # Get approved Photo  Return the single, most recently approved, photo for a given PhotoIdentifier.  This endpoint allows information and metadata about an approved Photo to be fetched using a PhotoIdentifier. The PhotoIdentifier should be included in the URL params in the format `<value>@<scheme>` - see the introduction to this API for a list of supported schemes. If the scheme is not provided it is assumed to be a CRSid (v1.person.identifiers.cam.ac.uk).  A given PhotoIdentifier may link to many approved Photos, in which case the most recently approved Photo is returned here. If a PhotoIdentifier does not link to an approved Photo a `404` response is returned.  The Photo returned may change over time if a new Photo is approved for a given PhotoIdentifier. If you want to keep a reference to an exact Photo, you can use the Photo's `id` (the UUID), or `selfLink` returned to directly reference an instance of an immutable Photo.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Beta1Photo",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_approved_photos_retrieve_with_http_info(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V1Beta1Photo]:
        """Get an approved photo of a person using a person identifier

         # Get approved Photo  Return the single, most recently approved, photo for a given PhotoIdentifier.  This endpoint allows information and metadata about an approved Photo to be fetched using a PhotoIdentifier. The PhotoIdentifier should be included in the URL params in the format `<value>@<scheme>` - see the introduction to this API for a list of supported schemes. If the scheme is not provided it is assumed to be a CRSid (v1.person.identifiers.cam.ac.uk).  A given PhotoIdentifier may link to many approved Photos, in which case the most recently approved Photo is returned here. If a PhotoIdentifier does not link to an approved Photo a `404` response is returned.  The Photo returned may change over time if a new Photo is approved for a given PhotoIdentifier. If you want to keep a reference to an exact Photo, you can use the Photo's `id` (the UUID), or `selfLink` returned to directly reference an instance of an immutable Photo.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Beta1Photo",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_approved_photos_retrieve_without_preload_content(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an approved photo of a person using a person identifier

         # Get approved Photo  Return the single, most recently approved, photo for a given PhotoIdentifier.  This endpoint allows information and metadata about an approved Photo to be fetched using a PhotoIdentifier. The PhotoIdentifier should be included in the URL params in the format `<value>@<scheme>` - see the introduction to this API for a list of supported schemes. If the scheme is not provided it is assumed to be a CRSid (v1.person.identifiers.cam.ac.uk).  A given PhotoIdentifier may link to many approved Photos, in which case the most recently approved Photo is returned here. If a PhotoIdentifier does not link to an approved Photo a `404` response is returned.  The Photo returned may change over time if a new Photo is approved for a given PhotoIdentifier. If you want to keep a reference to an exact Photo, you can use the Photo's `id` (the UUID), or `selfLink` returned to directly reference an instance of an immutable Photo.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Beta1Photo",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_approved_photos_retrieve_serialize(
        self,
        identifier,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identifier is not None:
            _path_params['identifier'] = identifier
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/approved-photos/{identifier}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_approved_photos_thumbnail_retrieve(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get the thumbnail of an approved photo using a person identifier

         # Get thumbnail of an approved Photo  This endpoint redirects to the thumbnail of the most recently approved Photo for the given PhotoIdentifier.  This thumbnail is guaranteed to be smaller than 128x128 pixels and will be in png format.  The documentation for the `Get image content of an approved Photo` additionally applies to this endpoint, as all constraints are the same between the two endpoints.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_thumbnail_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_approved_photos_thumbnail_retrieve_with_http_info(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get the thumbnail of an approved photo using a person identifier

         # Get thumbnail of an approved Photo  This endpoint redirects to the thumbnail of the most recently approved Photo for the given PhotoIdentifier.  This thumbnail is guaranteed to be smaller than 128x128 pixels and will be in png format.  The documentation for the `Get image content of an approved Photo` additionally applies to this endpoint, as all constraints are the same between the two endpoints.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_thumbnail_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_approved_photos_thumbnail_retrieve_without_preload_content(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the thumbnail of an approved photo using a person identifier

         # Get thumbnail of an approved Photo  This endpoint redirects to the thumbnail of the most recently approved Photo for the given PhotoIdentifier.  This thumbnail is guaranteed to be smaller than 128x128 pixels and will be in png format.  The documentation for the `Get image content of an approved Photo` additionally applies to this endpoint, as all constraints are the same between the two endpoints.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_thumbnail_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_approved_photos_thumbnail_retrieve_serialize(
        self,
        identifier,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identifier is not None:
            _path_params['identifier'] = identifier
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'image/*', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/approved-photos/{identifier}/thumbnail',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_approved_photos_thumbnail_transient_url_retrieve(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TransientImageUrl:
        """Get the transient url of an the thumbnail of an approved photo using a person identifier

         # Get transient URL of the thumbnail of an approved Photo  This endpoint returns a transient URL which can be used to fetch the most recently approved Photo's thumbnail for a given PhotoIdentifier.  This endpoint returns both a publically accessible URL and the expiry time of that URL in seconds.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_thumbnail_transient_url_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransientImageUrl",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_approved_photos_thumbnail_transient_url_retrieve_with_http_info(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TransientImageUrl]:
        """Get the transient url of an the thumbnail of an approved photo using a person identifier

         # Get transient URL of the thumbnail of an approved Photo  This endpoint returns a transient URL which can be used to fetch the most recently approved Photo's thumbnail for a given PhotoIdentifier.  This endpoint returns both a publically accessible URL and the expiry time of that URL in seconds.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_thumbnail_transient_url_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransientImageUrl",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_approved_photos_thumbnail_transient_url_retrieve_without_preload_content(
        self,
        identifier: Annotated[StrictStr, Field(description="The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>`")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the transient url of an the thumbnail of an approved photo using a person identifier

         # Get transient URL of the thumbnail of an approved Photo  This endpoint returns a transient URL which can be used to fetch the most recently approved Photo's thumbnail for a given PhotoIdentifier.  This endpoint returns both a publically accessible URL and the expiry time of that URL in seconds.  

        :param identifier: The PhotoIdentifier to get an approved photo for in the format `<value>@<scheme>` (required)
        :type identifier: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_approved_photos_thumbnail_transient_url_retrieve_serialize(
            identifier=identifier,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransientImageUrl",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_approved_photos_thumbnail_transient_url_retrieve_serialize(
        self,
        identifier,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identifier is not None:
            _path_params['identifier'] = identifier
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/approved-photos/{identifier}/thumbnail/transient-url',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photo_identifiers_destroy(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo identifier.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Remove a photo identifier and associated photos by photo identifier UUID.

         ## Remove photo identifier  This method allows a client to remove a photo identifier and in the process delete all associated identifiers and photos.  ### Permissions  Principals with the `PHOTO_ADMIN` permission are able to affect this endpoint.  

        :param id: A UUID string identifying this photo identifier. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_destroy_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photo_identifiers_destroy_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo identifier.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Remove a photo identifier and associated photos by photo identifier UUID.

         ## Remove photo identifier  This method allows a client to remove a photo identifier and in the process delete all associated identifiers and photos.  ### Permissions  Principals with the `PHOTO_ADMIN` permission are able to affect this endpoint.  

        :param id: A UUID string identifying this photo identifier. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_destroy_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photo_identifiers_destroy_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo identifier.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove a photo identifier and associated photos by photo identifier UUID.

         ## Remove photo identifier  This method allows a client to remove a photo identifier and in the process delete all associated identifiers and photos.  ### Permissions  Principals with the `PHOTO_ADMIN` permission are able to affect this endpoint.  

        :param id: A UUID string identifying this photo identifier. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_destroy_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photo_identifiers_destroy_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1beta1/photo-identifiers/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photo_identifiers_list(
        self,
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        deleted_at__gte: Annotated[Optional[StrictStr], Field(description="Filter deletedAt by IsoDateTime greater than")] = None,
        deleted_at__is_null: Annotated[Optional[StrictBool], Field(description="Filter deletedAt by IsoDateTime is Null")] = None,
        deleted_at__isnull: Optional[StrictBool] = None,
        deleted_at__lte: Annotated[Optional[StrictStr], Field(description="Filter deletedAt by IsoDateTime less than")] = None,
        identifier: Annotated[Optional[StrictStr], Field(description="PhotoIdentifier to get photos for using format `<value>@<scheme>`")] = None,
        is_deleted: Annotated[Optional[StrictBool], Field(description="Filter isDeleted")] = None,
        is_highest_primary_identifier: Annotated[Optional[StrictBool], Field(description="Filter is_highest_primary_identifier")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        retain_until__gte: Annotated[Optional[StrictStr], Field(description="Filter retainUntil by IsoDateTime greater than")] = None,
        retain_until__is_null: Annotated[Optional[StrictBool], Field(description="Filter retainUntil by IsoDateTime is Null")] = None,
        retain_until__isnull: Optional[StrictBool] = None,
        retain_until__lte: Annotated[Optional[StrictStr], Field(description="Filter retainUntil by IsoDateTime less than")] = None,
        scheme: Annotated[Optional[StrictStr], Field(description="PhotoIdentifier scheme to get photos for using format `<scheme>`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedV1Beta1PhotoIdentifierSummaryList:
        """List photo identifiers

         ## List photo identifiers  Returns a list of photo identifiers associated with the photos.  ### Permissions  Principals with the `PHOTO_VIEWER` permission are able to view all photo identifiers contained within the photo system.  

        :param cursor: The pagination cursor value.
        :type cursor: str
        :param deleted_at__gte: Filter deletedAt by IsoDateTime greater than
        :type deleted_at__gte: str
        :param deleted_at__is_null: Filter deletedAt by IsoDateTime is Null
        :type deleted_at__is_null: bool
        :param deleted_at__isnull:
        :type deleted_at__isnull: bool
        :param deleted_at__lte: Filter deletedAt by IsoDateTime less than
        :type deleted_at__lte: str
        :param identifier: PhotoIdentifier to get photos for using format `<value>@<scheme>`
        :type identifier: str
        :param is_deleted: Filter isDeleted
        :type is_deleted: bool
        :param is_highest_primary_identifier: Filter is_highest_primary_identifier
        :type is_highest_primary_identifier: bool
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param retain_until__gte: Filter retainUntil by IsoDateTime greater than
        :type retain_until__gte: str
        :param retain_until__is_null: Filter retainUntil by IsoDateTime is Null
        :type retain_until__is_null: bool
        :param retain_until__isnull:
        :type retain_until__isnull: bool
        :param retain_until__lte: Filter retainUntil by IsoDateTime less than
        :type retain_until__lte: str
        :param scheme: PhotoIdentifier scheme to get photos for using format `<scheme>`
        :type scheme: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_list_serialize(
            cursor=cursor,
            deleted_at__gte=deleted_at__gte,
            deleted_at__is_null=deleted_at__is_null,
            deleted_at__isnull=deleted_at__isnull,
            deleted_at__lte=deleted_at__lte,
            identifier=identifier,
            is_deleted=is_deleted,
            is_highest_primary_identifier=is_highest_primary_identifier,
            page_size=page_size,
            retain_until__gte=retain_until__gte,
            retain_until__is_null=retain_until__is_null,
            retain_until__isnull=retain_until__isnull,
            retain_until__lte=retain_until__lte,
            scheme=scheme,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoIdentifierSummaryList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photo_identifiers_list_with_http_info(
        self,
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        deleted_at__gte: Annotated[Optional[StrictStr], Field(description="Filter deletedAt by IsoDateTime greater than")] = None,
        deleted_at__is_null: Annotated[Optional[StrictBool], Field(description="Filter deletedAt by IsoDateTime is Null")] = None,
        deleted_at__isnull: Optional[StrictBool] = None,
        deleted_at__lte: Annotated[Optional[StrictStr], Field(description="Filter deletedAt by IsoDateTime less than")] = None,
        identifier: Annotated[Optional[StrictStr], Field(description="PhotoIdentifier to get photos for using format `<value>@<scheme>`")] = None,
        is_deleted: Annotated[Optional[StrictBool], Field(description="Filter isDeleted")] = None,
        is_highest_primary_identifier: Annotated[Optional[StrictBool], Field(description="Filter is_highest_primary_identifier")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        retain_until__gte: Annotated[Optional[StrictStr], Field(description="Filter retainUntil by IsoDateTime greater than")] = None,
        retain_until__is_null: Annotated[Optional[StrictBool], Field(description="Filter retainUntil by IsoDateTime is Null")] = None,
        retain_until__isnull: Optional[StrictBool] = None,
        retain_until__lte: Annotated[Optional[StrictStr], Field(description="Filter retainUntil by IsoDateTime less than")] = None,
        scheme: Annotated[Optional[StrictStr], Field(description="PhotoIdentifier scheme to get photos for using format `<scheme>`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedV1Beta1PhotoIdentifierSummaryList]:
        """List photo identifiers

         ## List photo identifiers  Returns a list of photo identifiers associated with the photos.  ### Permissions  Principals with the `PHOTO_VIEWER` permission are able to view all photo identifiers contained within the photo system.  

        :param cursor: The pagination cursor value.
        :type cursor: str
        :param deleted_at__gte: Filter deletedAt by IsoDateTime greater than
        :type deleted_at__gte: str
        :param deleted_at__is_null: Filter deletedAt by IsoDateTime is Null
        :type deleted_at__is_null: bool
        :param deleted_at__isnull:
        :type deleted_at__isnull: bool
        :param deleted_at__lte: Filter deletedAt by IsoDateTime less than
        :type deleted_at__lte: str
        :param identifier: PhotoIdentifier to get photos for using format `<value>@<scheme>`
        :type identifier: str
        :param is_deleted: Filter isDeleted
        :type is_deleted: bool
        :param is_highest_primary_identifier: Filter is_highest_primary_identifier
        :type is_highest_primary_identifier: bool
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param retain_until__gte: Filter retainUntil by IsoDateTime greater than
        :type retain_until__gte: str
        :param retain_until__is_null: Filter retainUntil by IsoDateTime is Null
        :type retain_until__is_null: bool
        :param retain_until__isnull:
        :type retain_until__isnull: bool
        :param retain_until__lte: Filter retainUntil by IsoDateTime less than
        :type retain_until__lte: str
        :param scheme: PhotoIdentifier scheme to get photos for using format `<scheme>`
        :type scheme: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_list_serialize(
            cursor=cursor,
            deleted_at__gte=deleted_at__gte,
            deleted_at__is_null=deleted_at__is_null,
            deleted_at__isnull=deleted_at__isnull,
            deleted_at__lte=deleted_at__lte,
            identifier=identifier,
            is_deleted=is_deleted,
            is_highest_primary_identifier=is_highest_primary_identifier,
            page_size=page_size,
            retain_until__gte=retain_until__gte,
            retain_until__is_null=retain_until__is_null,
            retain_until__isnull=retain_until__isnull,
            retain_until__lte=retain_until__lte,
            scheme=scheme,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoIdentifierSummaryList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photo_identifiers_list_without_preload_content(
        self,
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        deleted_at__gte: Annotated[Optional[StrictStr], Field(description="Filter deletedAt by IsoDateTime greater than")] = None,
        deleted_at__is_null: Annotated[Optional[StrictBool], Field(description="Filter deletedAt by IsoDateTime is Null")] = None,
        deleted_at__isnull: Optional[StrictBool] = None,
        deleted_at__lte: Annotated[Optional[StrictStr], Field(description="Filter deletedAt by IsoDateTime less than")] = None,
        identifier: Annotated[Optional[StrictStr], Field(description="PhotoIdentifier to get photos for using format `<value>@<scheme>`")] = None,
        is_deleted: Annotated[Optional[StrictBool], Field(description="Filter isDeleted")] = None,
        is_highest_primary_identifier: Annotated[Optional[StrictBool], Field(description="Filter is_highest_primary_identifier")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        retain_until__gte: Annotated[Optional[StrictStr], Field(description="Filter retainUntil by IsoDateTime greater than")] = None,
        retain_until__is_null: Annotated[Optional[StrictBool], Field(description="Filter retainUntil by IsoDateTime is Null")] = None,
        retain_until__isnull: Optional[StrictBool] = None,
        retain_until__lte: Annotated[Optional[StrictStr], Field(description="Filter retainUntil by IsoDateTime less than")] = None,
        scheme: Annotated[Optional[StrictStr], Field(description="PhotoIdentifier scheme to get photos for using format `<scheme>`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List photo identifiers

         ## List photo identifiers  Returns a list of photo identifiers associated with the photos.  ### Permissions  Principals with the `PHOTO_VIEWER` permission are able to view all photo identifiers contained within the photo system.  

        :param cursor: The pagination cursor value.
        :type cursor: str
        :param deleted_at__gte: Filter deletedAt by IsoDateTime greater than
        :type deleted_at__gte: str
        :param deleted_at__is_null: Filter deletedAt by IsoDateTime is Null
        :type deleted_at__is_null: bool
        :param deleted_at__isnull:
        :type deleted_at__isnull: bool
        :param deleted_at__lte: Filter deletedAt by IsoDateTime less than
        :type deleted_at__lte: str
        :param identifier: PhotoIdentifier to get photos for using format `<value>@<scheme>`
        :type identifier: str
        :param is_deleted: Filter isDeleted
        :type is_deleted: bool
        :param is_highest_primary_identifier: Filter is_highest_primary_identifier
        :type is_highest_primary_identifier: bool
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param retain_until__gte: Filter retainUntil by IsoDateTime greater than
        :type retain_until__gte: str
        :param retain_until__is_null: Filter retainUntil by IsoDateTime is Null
        :type retain_until__is_null: bool
        :param retain_until__isnull:
        :type retain_until__isnull: bool
        :param retain_until__lte: Filter retainUntil by IsoDateTime less than
        :type retain_until__lte: str
        :param scheme: PhotoIdentifier scheme to get photos for using format `<scheme>`
        :type scheme: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_list_serialize(
            cursor=cursor,
            deleted_at__gte=deleted_at__gte,
            deleted_at__is_null=deleted_at__is_null,
            deleted_at__isnull=deleted_at__isnull,
            deleted_at__lte=deleted_at__lte,
            identifier=identifier,
            is_deleted=is_deleted,
            is_highest_primary_identifier=is_highest_primary_identifier,
            page_size=page_size,
            retain_until__gte=retain_until__gte,
            retain_until__is_null=retain_until__is_null,
            retain_until__isnull=retain_until__isnull,
            retain_until__lte=retain_until__lte,
            scheme=scheme,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoIdentifierSummaryList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photo_identifiers_list_serialize(
        self,
        cursor,
        deleted_at__gte,
        deleted_at__is_null,
        deleted_at__isnull,
        deleted_at__lte,
        identifier,
        is_deleted,
        is_highest_primary_identifier,
        page_size,
        retain_until__gte,
        retain_until__is_null,
        retain_until__isnull,
        retain_until__lte,
        scheme,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if deleted_at__gte is not None:
            
            _query_params.append(('deleted_at__gte', deleted_at__gte))
            
        if deleted_at__is_null is not None:
            
            _query_params.append(('deleted_at__isNull', deleted_at__is_null))
            
        if deleted_at__isnull is not None:
            
            _query_params.append(('deleted_at__isnull', deleted_at__isnull))
            
        if deleted_at__lte is not None:
            
            _query_params.append(('deleted_at__lte', deleted_at__lte))
            
        if identifier is not None:
            
            _query_params.append(('identifier', identifier))
            
        if is_deleted is not None:
            
            _query_params.append(('is_deleted', is_deleted))
            
        if is_highest_primary_identifier is not None:
            
            _query_params.append(('is_highest_primary_identifier', is_highest_primary_identifier))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if retain_until__gte is not None:
            
            _query_params.append(('retain_until__gte', retain_until__gte))
            
        if retain_until__is_null is not None:
            
            _query_params.append(('retain_until__isNull', retain_until__is_null))
            
        if retain_until__isnull is not None:
            
            _query_params.append(('retain_until__isnull', retain_until__isnull))
            
        if retain_until__lte is not None:
            
            _query_params.append(('retain_until__lte', retain_until__lte))
            
        if scheme is not None:
            
            _query_params.append(('scheme', scheme))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/photo-identifiers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photo_identifiers_retrieve(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo identifier.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PhotoIdentifier:
        """Get a photo identifier by identifier UUID.

         ## Get photo identifier detail  Allows the detail of a single Photo Identifier to be retrieved by UUID. The Photo Identifier entity returned contains the information as presented in the list operation above plus additional fields.  ### Permissions  Principals with the `PHOTO_VIEWER` permission are able to view the photo identifier detail of any photo identifier contained within the photo system.  

        :param id: A UUID string identifying this photo identifier. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PhotoIdentifier",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photo_identifiers_retrieve_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo identifier.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PhotoIdentifier]:
        """Get a photo identifier by identifier UUID.

         ## Get photo identifier detail  Allows the detail of a single Photo Identifier to be retrieved by UUID. The Photo Identifier entity returned contains the information as presented in the list operation above plus additional fields.  ### Permissions  Principals with the `PHOTO_VIEWER` permission are able to view the photo identifier detail of any photo identifier contained within the photo system.  

        :param id: A UUID string identifying this photo identifier. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PhotoIdentifier",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photo_identifiers_retrieve_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo identifier.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a photo identifier by identifier UUID.

         ## Get photo identifier detail  Allows the detail of a single Photo Identifier to be retrieved by UUID. The Photo Identifier entity returned contains the information as presented in the list operation above plus additional fields.  ### Permissions  Principals with the `PHOTO_VIEWER` permission are able to view the photo identifier detail of any photo identifier contained within the photo system.  

        :param id: A UUID string identifying this photo identifier. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PhotoIdentifier",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photo_identifiers_retrieve_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/photo-identifiers/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photo_identifiers_update(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo identifier.")],
        action: Annotated[Optional[StrictStr], Field(description="Action applied to the photo identifier.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a photo identifier by photo identifier UUID.

         ## Update the photo identifier  This method allows a client to submit an action in the request query for a given photo identifier. The allowed actions are `repair`, `restore`, `soft_delete` and `hard_delete`.  ### Permissions  Principals with the `PHOTO_ADMIN` permission will be able to affect this endpoint.  

        :param id: A UUID string identifying this photo identifier. (required)
        :type id: str
        :param action: Action applied to the photo identifier.
        :type action: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_update_serialize(
            id=id,
            action=action,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photo_identifiers_update_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo identifier.")],
        action: Annotated[Optional[StrictStr], Field(description="Action applied to the photo identifier.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a photo identifier by photo identifier UUID.

         ## Update the photo identifier  This method allows a client to submit an action in the request query for a given photo identifier. The allowed actions are `repair`, `restore`, `soft_delete` and `hard_delete`.  ### Permissions  Principals with the `PHOTO_ADMIN` permission will be able to affect this endpoint.  

        :param id: A UUID string identifying this photo identifier. (required)
        :type id: str
        :param action: Action applied to the photo identifier.
        :type action: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_update_serialize(
            id=id,
            action=action,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photo_identifiers_update_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo identifier.")],
        action: Annotated[Optional[StrictStr], Field(description="Action applied to the photo identifier.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a photo identifier by photo identifier UUID.

         ## Update the photo identifier  This method allows a client to submit an action in the request query for a given photo identifier. The allowed actions are `repair`, `restore`, `soft_delete` and `hard_delete`.  ### Permissions  Principals with the `PHOTO_ADMIN` permission will be able to affect this endpoint.  

        :param id: A UUID string identifying this photo identifier. (required)
        :type id: str
        :param action: Action applied to the photo identifier.
        :type action: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_update_serialize(
            id=id,
            action=action,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photo_identifiers_update_serialize(
        self,
        id,
        action,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if action is not None:
            
            _query_params.append(('action', action))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1beta1/photo-identifiers/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photo_identifiers_update_update(
        self,
        photo_identifier_bulk_update_request_request: PhotoIdentifierBulkUpdateRequestRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Bulk update photo identifiers by photo identifier UUID.

         ## Bulk update the photo identifier  This method allows a client to submit a list of photo identifiers and corresponding action to apply to the photo identifier. The allowed actions are `repair`, `restore`, `soft_delete` and `hard_delete`.  ### Permissions  Principals with the `PHOTO_ADMIN` permission will be able to affect this endpoint.  

        :param photo_identifier_bulk_update_request_request: (required)
        :type photo_identifier_bulk_update_request_request: PhotoIdentifierBulkUpdateRequestRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_update_update_serialize(
            photo_identifier_bulk_update_request_request=photo_identifier_bulk_update_request_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photo_identifiers_update_update_with_http_info(
        self,
        photo_identifier_bulk_update_request_request: PhotoIdentifierBulkUpdateRequestRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Bulk update photo identifiers by photo identifier UUID.

         ## Bulk update the photo identifier  This method allows a client to submit a list of photo identifiers and corresponding action to apply to the photo identifier. The allowed actions are `repair`, `restore`, `soft_delete` and `hard_delete`.  ### Permissions  Principals with the `PHOTO_ADMIN` permission will be able to affect this endpoint.  

        :param photo_identifier_bulk_update_request_request: (required)
        :type photo_identifier_bulk_update_request_request: PhotoIdentifierBulkUpdateRequestRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_update_update_serialize(
            photo_identifier_bulk_update_request_request=photo_identifier_bulk_update_request_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photo_identifiers_update_update_without_preload_content(
        self,
        photo_identifier_bulk_update_request_request: PhotoIdentifierBulkUpdateRequestRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Bulk update photo identifiers by photo identifier UUID.

         ## Bulk update the photo identifier  This method allows a client to submit a list of photo identifiers and corresponding action to apply to the photo identifier. The allowed actions are `repair`, `restore`, `soft_delete` and `hard_delete`.  ### Permissions  Principals with the `PHOTO_ADMIN` permission will be able to affect this endpoint.  

        :param photo_identifier_bulk_update_request_request: (required)
        :type photo_identifier_bulk_update_request_request: PhotoIdentifierBulkUpdateRequestRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photo_identifiers_update_update_serialize(
            photo_identifier_bulk_update_request_request=photo_identifier_bulk_update_request_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photo_identifiers_update_update_serialize(
        self,
        photo_identifier_bulk_update_request_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if photo_identifier_bulk_update_request_request is not None:
            _body_params = photo_identifier_bulk_update_request_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded', 
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1beta1/photo-identifiers/update',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photos_content_retrieve(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get the image content of a photo by photo UUID

         # Get Photo content  This endpoint redirects to the image content of a Photo by Photo `id`. Note that this `id` is the UUID field included on a Photo, not a PhotoIdentifier. To get the Photo content for an identifier either filter for a Photo by PhotoIdentifier using the `Get Photo List by PhotoIdentifier` endpoint above and then call this endpoint with the Photo's `id` field, or use the `Get image content of an approved Photo` endpoint documented above if you only want to fetch approved Photos.  Unlike the `Get image content of an approved Photo` which may return a different images if a new Photo is approved, this endpoint will always return the same Photo content for a given Photo UUID.  This endpoint redirects to a temporary URL provided by the storage service used by this API. This temporary URL will expire after a short period of time and therefore should not be recorded or used as a permanent reference to this Photo.  This endpoint will return a `404` status code if a Photo cannot be found by the UUID provided.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_content_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photos_content_retrieve_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get the image content of a photo by photo UUID

         # Get Photo content  This endpoint redirects to the image content of a Photo by Photo `id`. Note that this `id` is the UUID field included on a Photo, not a PhotoIdentifier. To get the Photo content for an identifier either filter for a Photo by PhotoIdentifier using the `Get Photo List by PhotoIdentifier` endpoint above and then call this endpoint with the Photo's `id` field, or use the `Get image content of an approved Photo` endpoint documented above if you only want to fetch approved Photos.  Unlike the `Get image content of an approved Photo` which may return a different images if a new Photo is approved, this endpoint will always return the same Photo content for a given Photo UUID.  This endpoint redirects to a temporary URL provided by the storage service used by this API. This temporary URL will expire after a short period of time and therefore should not be recorded or used as a permanent reference to this Photo.  This endpoint will return a `404` status code if a Photo cannot be found by the UUID provided.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_content_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photos_content_retrieve_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the image content of a photo by photo UUID

         # Get Photo content  This endpoint redirects to the image content of a Photo by Photo `id`. Note that this `id` is the UUID field included on a Photo, not a PhotoIdentifier. To get the Photo content for an identifier either filter for a Photo by PhotoIdentifier using the `Get Photo List by PhotoIdentifier` endpoint above and then call this endpoint with the Photo's `id` field, or use the `Get image content of an approved Photo` endpoint documented above if you only want to fetch approved Photos.  Unlike the `Get image content of an approved Photo` which may return a different images if a new Photo is approved, this endpoint will always return the same Photo content for a given Photo UUID.  This endpoint redirects to a temporary URL provided by the storage service used by this API. This temporary URL will expire after a short period of time and therefore should not be recorded or used as a permanent reference to this Photo.  This endpoint will return a `404` status code if a Photo cannot be found by the UUID provided.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_content_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photos_content_retrieve_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'image/*', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/photos/{id}/content',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photos_create(
        self,
        identifiers: Annotated[Optional[StrictStr], Field(description="A comma (urlencoded as `%2C`) separated list of identifiers in the format `<value>@<scheme>` to attach to this photo. Only principals with `PHOTO_CREATOR` permission are permitted to specify identifiers. If identifiers are provided by a client without the `PHOTO_CREATOR` permission a Forbidden (403) response will be returned.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The status of this photo. Only principals with the `PHOTO_REVIEWER` permission can set the status to `APPROVED`. Defaults to `UNAPPROVED`.")] = None,
        body: Optional[Union[StrictBytes, StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V1Beta1Photo:
        """Create a new photo with a set of identifiers

         # Create a new Photo  This endpoint allows a new photo to be created and associated with a given set of PhotoIdentifiers.  At present only principals with the `PHOTO_CREATOR` permission are granted access to create new photos.  The image should be provided as a file upload on the request body and should be in any of the following formats:  * image/png, * image/jpeg, * image/heic, * image/heif,  Images should be at minimum 640 x 480 pixels, maximum 50,000,000 total pixels, and should not exceed 10MB in file size.  If the principal has the permission `PHOTO_CREATOR`, a list of PhotoIdentifiers for the person represented by a given photo can be provided on the request's query parameters in the `<value>@<scheme>` format, with each PhotoIdentifier separated by a comma. This is to allow an authorized client to create photos of other members of the University, linking a photo to an identity record held in another service. If PhotoIdentifiers are not provided, a PhotoIdentifier with the current principal's CRSid as the value and 'v1.person.identifiers.cam.ac.uk' as the scheme will be attached to the photo, as it is assumed that the given photo represents the current principal.  Principals with the `PHOTO_REVIEWER` permission can additionally provide the `status` query parameter which allows the photo to either be set as `APPROVED` or `UNAPPROVED`. If not provided or the principal does not have the `PHOTO_REVIEWER` permission the photo's status will be `UNAPPROVED`.  When a photo is created with the `UNAPPROVED` status, any existing photos with the `UNAPPROVED` status that match the PhotoIdentifiers provided on the request's query parameters will be deleted from the Photo API, with the photos no longer being available for query from the API.  

        :param identifiers: A comma (urlencoded as `%2C`) separated list of identifiers in the format `<value>@<scheme>` to attach to this photo. Only principals with `PHOTO_CREATOR` permission are permitted to specify identifiers. If identifiers are provided by a client without the `PHOTO_CREATOR` permission a Forbidden (403) response will be returned.
        :type identifiers: str
        :param status: The status of this photo. Only principals with the `PHOTO_REVIEWER` permission can set the status to `APPROVED`. Defaults to `UNAPPROVED`.
        :type status: str
        :param body:
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_create_serialize(
            identifiers=identifiers,
            status=status,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "V1Beta1Photo",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photos_create_with_http_info(
        self,
        identifiers: Annotated[Optional[StrictStr], Field(description="A comma (urlencoded as `%2C`) separated list of identifiers in the format `<value>@<scheme>` to attach to this photo. Only principals with `PHOTO_CREATOR` permission are permitted to specify identifiers. If identifiers are provided by a client without the `PHOTO_CREATOR` permission a Forbidden (403) response will be returned.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The status of this photo. Only principals with the `PHOTO_REVIEWER` permission can set the status to `APPROVED`. Defaults to `UNAPPROVED`.")] = None,
        body: Optional[Union[StrictBytes, StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V1Beta1Photo]:
        """Create a new photo with a set of identifiers

         # Create a new Photo  This endpoint allows a new photo to be created and associated with a given set of PhotoIdentifiers.  At present only principals with the `PHOTO_CREATOR` permission are granted access to create new photos.  The image should be provided as a file upload on the request body and should be in any of the following formats:  * image/png, * image/jpeg, * image/heic, * image/heif,  Images should be at minimum 640 x 480 pixels, maximum 50,000,000 total pixels, and should not exceed 10MB in file size.  If the principal has the permission `PHOTO_CREATOR`, a list of PhotoIdentifiers for the person represented by a given photo can be provided on the request's query parameters in the `<value>@<scheme>` format, with each PhotoIdentifier separated by a comma. This is to allow an authorized client to create photos of other members of the University, linking a photo to an identity record held in another service. If PhotoIdentifiers are not provided, a PhotoIdentifier with the current principal's CRSid as the value and 'v1.person.identifiers.cam.ac.uk' as the scheme will be attached to the photo, as it is assumed that the given photo represents the current principal.  Principals with the `PHOTO_REVIEWER` permission can additionally provide the `status` query parameter which allows the photo to either be set as `APPROVED` or `UNAPPROVED`. If not provided or the principal does not have the `PHOTO_REVIEWER` permission the photo's status will be `UNAPPROVED`.  When a photo is created with the `UNAPPROVED` status, any existing photos with the `UNAPPROVED` status that match the PhotoIdentifiers provided on the request's query parameters will be deleted from the Photo API, with the photos no longer being available for query from the API.  

        :param identifiers: A comma (urlencoded as `%2C`) separated list of identifiers in the format `<value>@<scheme>` to attach to this photo. Only principals with `PHOTO_CREATOR` permission are permitted to specify identifiers. If identifiers are provided by a client without the `PHOTO_CREATOR` permission a Forbidden (403) response will be returned.
        :type identifiers: str
        :param status: The status of this photo. Only principals with the `PHOTO_REVIEWER` permission can set the status to `APPROVED`. Defaults to `UNAPPROVED`.
        :type status: str
        :param body:
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_create_serialize(
            identifiers=identifiers,
            status=status,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "V1Beta1Photo",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photos_create_without_preload_content(
        self,
        identifiers: Annotated[Optional[StrictStr], Field(description="A comma (urlencoded as `%2C`) separated list of identifiers in the format `<value>@<scheme>` to attach to this photo. Only principals with `PHOTO_CREATOR` permission are permitted to specify identifiers. If identifiers are provided by a client without the `PHOTO_CREATOR` permission a Forbidden (403) response will be returned.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The status of this photo. Only principals with the `PHOTO_REVIEWER` permission can set the status to `APPROVED`. Defaults to `UNAPPROVED`.")] = None,
        body: Optional[Union[StrictBytes, StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a new photo with a set of identifiers

         # Create a new Photo  This endpoint allows a new photo to be created and associated with a given set of PhotoIdentifiers.  At present only principals with the `PHOTO_CREATOR` permission are granted access to create new photos.  The image should be provided as a file upload on the request body and should be in any of the following formats:  * image/png, * image/jpeg, * image/heic, * image/heif,  Images should be at minimum 640 x 480 pixels, maximum 50,000,000 total pixels, and should not exceed 10MB in file size.  If the principal has the permission `PHOTO_CREATOR`, a list of PhotoIdentifiers for the person represented by a given photo can be provided on the request's query parameters in the `<value>@<scheme>` format, with each PhotoIdentifier separated by a comma. This is to allow an authorized client to create photos of other members of the University, linking a photo to an identity record held in another service. If PhotoIdentifiers are not provided, a PhotoIdentifier with the current principal's CRSid as the value and 'v1.person.identifiers.cam.ac.uk' as the scheme will be attached to the photo, as it is assumed that the given photo represents the current principal.  Principals with the `PHOTO_REVIEWER` permission can additionally provide the `status` query parameter which allows the photo to either be set as `APPROVED` or `UNAPPROVED`. If not provided or the principal does not have the `PHOTO_REVIEWER` permission the photo's status will be `UNAPPROVED`.  When a photo is created with the `UNAPPROVED` status, any existing photos with the `UNAPPROVED` status that match the PhotoIdentifiers provided on the request's query parameters will be deleted from the Photo API, with the photos no longer being available for query from the API.  

        :param identifiers: A comma (urlencoded as `%2C`) separated list of identifiers in the format `<value>@<scheme>` to attach to this photo. Only principals with `PHOTO_CREATOR` permission are permitted to specify identifiers. If identifiers are provided by a client without the `PHOTO_CREATOR` permission a Forbidden (403) response will be returned.
        :type identifiers: str
        :param status: The status of this photo. Only principals with the `PHOTO_REVIEWER` permission can set the status to `APPROVED`. Defaults to `UNAPPROVED`.
        :type status: str
        :param body:
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_create_serialize(
            identifiers=identifiers,
            status=status,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "V1Beta1Photo",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photos_create_serialize(
        self,
        identifiers,
        status,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if identifiers is not None:
            
            _query_params.append(('identifiers', identifiers))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with open(body, "rb") as _fp:
                    _body_params = _fp.read()
            else:
                _body_params = body


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'image/heic', 
                        'image/heif', 
                        'image/jpeg', 
                        'image/png'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1beta1/photos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photos_destroy(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        reason: Annotated[Optional[StrictStr], Field(description="The reason the photo was rejected, to be sent to the photo uploader in an email.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Remove a photo

         # Remove a photo by UUID  This endpoint allows an unapproved photo to be deleted from the Photo API, with the photo no longer being available for query from the API. Removing a photo is not reversible, once a photo has been removed it cannot be restored.  Only principals with the `PHOTO_REVIEWER` permission can remove photos.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param reason: The reason the photo was rejected, to be sent to the photo uploader in an email.
        :type reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_destroy_serialize(
            id=id,
            reason=reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photos_destroy_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        reason: Annotated[Optional[StrictStr], Field(description="The reason the photo was rejected, to be sent to the photo uploader in an email.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Remove a photo

         # Remove a photo by UUID  This endpoint allows an unapproved photo to be deleted from the Photo API, with the photo no longer being available for query from the API. Removing a photo is not reversible, once a photo has been removed it cannot be restored.  Only principals with the `PHOTO_REVIEWER` permission can remove photos.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param reason: The reason the photo was rejected, to be sent to the photo uploader in an email.
        :type reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_destroy_serialize(
            id=id,
            reason=reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photos_destroy_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        reason: Annotated[Optional[StrictStr], Field(description="The reason the photo was rejected, to be sent to the photo uploader in an email.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove a photo

         # Remove a photo by UUID  This endpoint allows an unapproved photo to be deleted from the Photo API, with the photo no longer being available for query from the API. Removing a photo is not reversible, once a photo has been removed it cannot be restored.  Only principals with the `PHOTO_REVIEWER` permission can remove photos.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param reason: The reason the photo was rejected, to be sent to the photo uploader in an email.
        :type reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_destroy_serialize(
            id=id,
            reason=reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photos_destroy_serialize(
        self,
        id,
        reason,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if reason is not None:
            
            _query_params.append(('reason', reason))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1beta1/photos/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photos_list(
        self,
        identifier: Annotated[StrictStr, Field(description="PhotoIdentifier to get photos for using format `<value>@<scheme>`")],
        status: Annotated[Optional[StrictStr], Field(description="Photo status to filter by (defaults to all statuses)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[V1Beta1Photo]:
        """Get the photos related to a given photo identifier

         # Get Photo List by PhotoIdentifier  This endpoint returns the details and metadata of all Photos related to a given PhotoIdentifier. This endpoint will return all Photos regardless of whether they have been approved - so Photos returned are not guaranteed to be good quality.  The PhotoIdentifier should be provided on the query string in the format of `<value>@<scheme>`, see the introduction to this API for a list of supported schemes. If the scheme is not provided the it is assumed to be a CRSid (v1.person.identifiers.cam.ac.uk).  By default all Photos related to a given PhotoIdentifier are included in the responses. Photos can be filtered by `status` using the `status` query parameter.  Each Photo contains a link to the content and thumbnail which can be used to fetch the content of the Photo itself.  If no Photos can be found for a given identifier an empty array will be returned.  

        :param identifier: PhotoIdentifier to get photos for using format `<value>@<scheme>` (required)
        :type identifier: str
        :param status: Photo status to filter by (defaults to all statuses)
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_list_serialize(
            identifier=identifier,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[V1Beta1Photo]",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photos_list_with_http_info(
        self,
        identifier: Annotated[StrictStr, Field(description="PhotoIdentifier to get photos for using format `<value>@<scheme>`")],
        status: Annotated[Optional[StrictStr], Field(description="Photo status to filter by (defaults to all statuses)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[V1Beta1Photo]]:
        """Get the photos related to a given photo identifier

         # Get Photo List by PhotoIdentifier  This endpoint returns the details and metadata of all Photos related to a given PhotoIdentifier. This endpoint will return all Photos regardless of whether they have been approved - so Photos returned are not guaranteed to be good quality.  The PhotoIdentifier should be provided on the query string in the format of `<value>@<scheme>`, see the introduction to this API for a list of supported schemes. If the scheme is not provided the it is assumed to be a CRSid (v1.person.identifiers.cam.ac.uk).  By default all Photos related to a given PhotoIdentifier are included in the responses. Photos can be filtered by `status` using the `status` query parameter.  Each Photo contains a link to the content and thumbnail which can be used to fetch the content of the Photo itself.  If no Photos can be found for a given identifier an empty array will be returned.  

        :param identifier: PhotoIdentifier to get photos for using format `<value>@<scheme>` (required)
        :type identifier: str
        :param status: Photo status to filter by (defaults to all statuses)
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_list_serialize(
            identifier=identifier,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[V1Beta1Photo]",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photos_list_without_preload_content(
        self,
        identifier: Annotated[StrictStr, Field(description="PhotoIdentifier to get photos for using format `<value>@<scheme>`")],
        status: Annotated[Optional[StrictStr], Field(description="Photo status to filter by (defaults to all statuses)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the photos related to a given photo identifier

         # Get Photo List by PhotoIdentifier  This endpoint returns the details and metadata of all Photos related to a given PhotoIdentifier. This endpoint will return all Photos regardless of whether they have been approved - so Photos returned are not guaranteed to be good quality.  The PhotoIdentifier should be provided on the query string in the format of `<value>@<scheme>`, see the introduction to this API for a list of supported schemes. If the scheme is not provided the it is assumed to be a CRSid (v1.person.identifiers.cam.ac.uk).  By default all Photos related to a given PhotoIdentifier are included in the responses. Photos can be filtered by `status` using the `status` query parameter.  Each Photo contains a link to the content and thumbnail which can be used to fetch the content of the Photo itself.  If no Photos can be found for a given identifier an empty array will be returned.  

        :param identifier: PhotoIdentifier to get photos for using format `<value>@<scheme>` (required)
        :type identifier: str
        :param status: Photo status to filter by (defaults to all statuses)
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_list_serialize(
            identifier=identifier,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[V1Beta1Photo]",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photos_list_serialize(
        self,
        identifier,
        status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if identifier is not None:
            
            _query_params.append(('identifier', identifier))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/photos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photos_no_primary_identifier_list(
        self,
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedV1Beta1PhotoList:
        """Get list of all photos missing a primary identifier

         # Get a list of photos without a primary identifier (CRSid)  This endpoint returns a list of all photos which do not have an associated PhotoIdentifier with the CRSid scheme. This is further filtered to only those photos that have an associated PhotoIdentifier with a USN or HRN scheme as there would be no way to lookup the owner. This endpoint will return all Photos regardless of whether they have been approved - so Photos returned are not guaranteed to be good quality.  Each Photo contains a link to the content and thumbnail which can be used to fetch the content of the Photo itself.  If no Photos are found without CRSids an empty array will be returned.  

        :param cursor: The pagination cursor value.
        :type cursor: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_no_primary_identifier_list_serialize(
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photos_no_primary_identifier_list_with_http_info(
        self,
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedV1Beta1PhotoList]:
        """Get list of all photos missing a primary identifier

         # Get a list of photos without a primary identifier (CRSid)  This endpoint returns a list of all photos which do not have an associated PhotoIdentifier with the CRSid scheme. This is further filtered to only those photos that have an associated PhotoIdentifier with a USN or HRN scheme as there would be no way to lookup the owner. This endpoint will return all Photos regardless of whether they have been approved - so Photos returned are not guaranteed to be good quality.  Each Photo contains a link to the content and thumbnail which can be used to fetch the content of the Photo itself.  If no Photos are found without CRSids an empty array will be returned.  

        :param cursor: The pagination cursor value.
        :type cursor: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_no_primary_identifier_list_serialize(
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photos_no_primary_identifier_list_without_preload_content(
        self,
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get list of all photos missing a primary identifier

         # Get a list of photos without a primary identifier (CRSid)  This endpoint returns a list of all photos which do not have an associated PhotoIdentifier with the CRSid scheme. This is further filtered to only those photos that have an associated PhotoIdentifier with a USN or HRN scheme as there would be no way to lookup the owner. This endpoint will return all Photos regardless of whether they have been approved - so Photos returned are not guaranteed to be good quality.  Each Photo contains a link to the content and thumbnail which can be used to fetch the content of the Photo itself.  If no Photos are found without CRSids an empty array will be returned.  

        :param cursor: The pagination cursor value.
        :type cursor: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_no_primary_identifier_list_serialize(
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photos_no_primary_identifier_list_serialize(
        self,
        cursor,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/photos/no-primary-identifier',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photos_original_retrieve(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get the original (uncropped) image uploaded when this photo was created

         # Get Photo original  This endpoint redirects to the original version of a Photo (as uploaded) by UUID.  This image will be uncropped and in whatever format was originally uploaded.  This endpoint redirects to a temporary URL provided by the storage service used by this API. This temporary URL will expire after a short period of time and therefore should not be recorded or used as a permanent reference to this Photo.  This endpoint will return a `404` status code if a Photo cannot be found by the UUID provided or if the original image is not available - which will be the case for photos synced from the legacy card system.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_original_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photos_original_retrieve_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get the original (uncropped) image uploaded when this photo was created

         # Get Photo original  This endpoint redirects to the original version of a Photo (as uploaded) by UUID.  This image will be uncropped and in whatever format was originally uploaded.  This endpoint redirects to a temporary URL provided by the storage service used by this API. This temporary URL will expire after a short period of time and therefore should not be recorded or used as a permanent reference to this Photo.  This endpoint will return a `404` status code if a Photo cannot be found by the UUID provided or if the original image is not available - which will be the case for photos synced from the legacy card system.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_original_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photos_original_retrieve_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the original (uncropped) image uploaded when this photo was created

         # Get Photo original  This endpoint redirects to the original version of a Photo (as uploaded) by UUID.  This image will be uncropped and in whatever format was originally uploaded.  This endpoint redirects to a temporary URL provided by the storage service used by this API. This temporary URL will expire after a short period of time and therefore should not be recorded or used as a permanent reference to this Photo.  This endpoint will return a `404` status code if a Photo cannot be found by the UUID provided or if the original image is not available - which will be the case for photos synced from the legacy card system.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_original_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photos_original_retrieve_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'image/*', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/photos/{id}/original',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photos_partial_update(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        identifiers: Annotated[Optional[StrictStr], Field(description="A comma (urlencoded as `%2C`) separated list of identifiers in the format `<value>@<scheme>` to attach to this photo. Only principals with `PHOTO_REVIEWER` permission are permitted to change a photo's identifiers. If identifiers are updated by a client without the `PHOTO_REVIEWER` permission a Forbidden (403) response will be returned.")] = None,
        postpone_review: Annotated[Optional[StrictBool], Field(description="If set to true, postpone the review of this photo.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The status to assign to this photo. This can be `APPROVED` or `INVALIDATED` and only principals with the `PHOTO_REVIEWER` permission  can set this status.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V1Beta1Photo:
        """Update a photo

         # Update a photo by UUID  This endpoint allows a photo to be updated from the Photo API. The modifications that can be made are: to approve an unapproved photo by changing the `status` of the photo to the value `APPROVED`, and to modify the list of PhotoIdentifiers associated with the photo.  Only principals with the `PHOTO_REVIEWER` permission can set the status of photos. Only principals with the `PHOTO_ADMIN` permission can set the PhotoIdentifiers associated with the photo.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param identifiers: A comma (urlencoded as `%2C`) separated list of identifiers in the format `<value>@<scheme>` to attach to this photo. Only principals with `PHOTO_REVIEWER` permission are permitted to change a photo's identifiers. If identifiers are updated by a client without the `PHOTO_REVIEWER` permission a Forbidden (403) response will be returned.
        :type identifiers: str
        :param postpone_review: If set to true, postpone the review of this photo.
        :type postpone_review: bool
        :param status: The status to assign to this photo. This can be `APPROVED` or `INVALIDATED` and only principals with the `PHOTO_REVIEWER` permission  can set this status.
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_partial_update_serialize(
            id=id,
            identifiers=identifiers,
            postpone_review=postpone_review,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Beta1Photo",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photos_partial_update_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        identifiers: Annotated[Optional[StrictStr], Field(description="A comma (urlencoded as `%2C`) separated list of identifiers in the format `<value>@<scheme>` to attach to this photo. Only principals with `PHOTO_REVIEWER` permission are permitted to change a photo's identifiers. If identifiers are updated by a client without the `PHOTO_REVIEWER` permission a Forbidden (403) response will be returned.")] = None,
        postpone_review: Annotated[Optional[StrictBool], Field(description="If set to true, postpone the review of this photo.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The status to assign to this photo. This can be `APPROVED` or `INVALIDATED` and only principals with the `PHOTO_REVIEWER` permission  can set this status.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V1Beta1Photo]:
        """Update a photo

         # Update a photo by UUID  This endpoint allows a photo to be updated from the Photo API. The modifications that can be made are: to approve an unapproved photo by changing the `status` of the photo to the value `APPROVED`, and to modify the list of PhotoIdentifiers associated with the photo.  Only principals with the `PHOTO_REVIEWER` permission can set the status of photos. Only principals with the `PHOTO_ADMIN` permission can set the PhotoIdentifiers associated with the photo.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param identifiers: A comma (urlencoded as `%2C`) separated list of identifiers in the format `<value>@<scheme>` to attach to this photo. Only principals with `PHOTO_REVIEWER` permission are permitted to change a photo's identifiers. If identifiers are updated by a client without the `PHOTO_REVIEWER` permission a Forbidden (403) response will be returned.
        :type identifiers: str
        :param postpone_review: If set to true, postpone the review of this photo.
        :type postpone_review: bool
        :param status: The status to assign to this photo. This can be `APPROVED` or `INVALIDATED` and only principals with the `PHOTO_REVIEWER` permission  can set this status.
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_partial_update_serialize(
            id=id,
            identifiers=identifiers,
            postpone_review=postpone_review,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Beta1Photo",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photos_partial_update_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        identifiers: Annotated[Optional[StrictStr], Field(description="A comma (urlencoded as `%2C`) separated list of identifiers in the format `<value>@<scheme>` to attach to this photo. Only principals with `PHOTO_REVIEWER` permission are permitted to change a photo's identifiers. If identifiers are updated by a client without the `PHOTO_REVIEWER` permission a Forbidden (403) response will be returned.")] = None,
        postpone_review: Annotated[Optional[StrictBool], Field(description="If set to true, postpone the review of this photo.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The status to assign to this photo. This can be `APPROVED` or `INVALIDATED` and only principals with the `PHOTO_REVIEWER` permission  can set this status.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a photo

         # Update a photo by UUID  This endpoint allows a photo to be updated from the Photo API. The modifications that can be made are: to approve an unapproved photo by changing the `status` of the photo to the value `APPROVED`, and to modify the list of PhotoIdentifiers associated with the photo.  Only principals with the `PHOTO_REVIEWER` permission can set the status of photos. Only principals with the `PHOTO_ADMIN` permission can set the PhotoIdentifiers associated with the photo.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param identifiers: A comma (urlencoded as `%2C`) separated list of identifiers in the format `<value>@<scheme>` to attach to this photo. Only principals with `PHOTO_REVIEWER` permission are permitted to change a photo's identifiers. If identifiers are updated by a client without the `PHOTO_REVIEWER` permission a Forbidden (403) response will be returned.
        :type identifiers: str
        :param postpone_review: If set to true, postpone the review of this photo.
        :type postpone_review: bool
        :param status: The status to assign to this photo. This can be `APPROVED` or `INVALIDATED` and only principals with the `PHOTO_REVIEWER` permission  can set this status.
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_partial_update_serialize(
            id=id,
            identifiers=identifiers,
            postpone_review=postpone_review,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Beta1Photo",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photos_partial_update_serialize(
        self,
        id,
        identifiers,
        postpone_review,
        status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if identifiers is not None:
            
            _query_params.append(('identifiers', identifiers))
            
        if postpone_review is not None:
            
            _query_params.append(('postponeReview', postpone_review))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1beta1/photos/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photos_retrieve(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V1Beta1Photo:
        """Get a photo by photo UUID

         # Get Photo  This endpoint returns the details and metadata for a single Photo by Photo `id`. Note that this `id` is the UUID field included on a Photo, not a PhotoIdentifier. To get Photos related to a PhotoIdentifier use the `Get Photo List by PhotoIdentifier` endpoint documented above.  This endpoint will return a `404` status code if a Photo cannot be found by the UUID provided.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Beta1Photo",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photos_retrieve_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V1Beta1Photo]:
        """Get a photo by photo UUID

         # Get Photo  This endpoint returns the details and metadata for a single Photo by Photo `id`. Note that this `id` is the UUID field included on a Photo, not a PhotoIdentifier. To get Photos related to a PhotoIdentifier use the `Get Photo List by PhotoIdentifier` endpoint documented above.  This endpoint will return a `404` status code if a Photo cannot be found by the UUID provided.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Beta1Photo",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photos_retrieve_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a photo by photo UUID

         # Get Photo  This endpoint returns the details and metadata for a single Photo by Photo `id`. Note that this `id` is the UUID field included on a Photo, not a PhotoIdentifier. To get Photos related to a PhotoIdentifier use the `Get Photo List by PhotoIdentifier` endpoint documented above.  This endpoint will return a `404` status code if a Photo cannot be found by the UUID provided.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Beta1Photo",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photos_retrieve_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/photos/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_photos_thumbnail_retrieve(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get the thumbnail of a photo by photo UUID

         # Get Photo thumbnail  This endpoint redirects to the thumbnail of a Photo by UUID.  This thumbnail is guaranteed to be smaller than 128x128 pixels and will be in png format.  The documentation for the `Get Photo content` additionally applies to this endpoint, as all constraints are the same between the two endpoints.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_thumbnail_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_photos_thumbnail_retrieve_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get the thumbnail of a photo by photo UUID

         # Get Photo thumbnail  This endpoint redirects to the thumbnail of a Photo by UUID.  This thumbnail is guaranteed to be smaller than 128x128 pixels and will be in png format.  The documentation for the `Get Photo content` additionally applies to this endpoint, as all constraints are the same between the two endpoints.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_thumbnail_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_photos_thumbnail_retrieve_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="A UUID string identifying this photo.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the thumbnail of a photo by photo UUID

         # Get Photo thumbnail  This endpoint redirects to the thumbnail of a Photo by UUID.  This thumbnail is guaranteed to be smaller than 128x128 pixels and will be in png format.  The documentation for the `Get Photo content` additionally applies to this endpoint, as all constraints are the same between the two endpoints.  

        :param id: A UUID string identifying this photo. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_photos_thumbnail_retrieve_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': "object",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '404': "NotFound",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_photos_thumbnail_retrieve_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'image/*', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/photos/{id}/thumbnail',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1beta1_unapproved_photos_list(
        self,
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        has_identifier_scheme: Annotated[Optional[StrictStr], Field(description="If provided, only returns photos with at least one identifier.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedV1Beta1PhotoList:
        """List unapproved photos

         # List unapproved Photos  This endpoint allows information and metadata about all unapproved Photos to be fetched.  Results are ordered by `createdAt` ascending, and may be split over multiple 'pages'. Where more results exist a `next` URL will be provided which can be used to fetch the next page of results. The `previous` URL can be used to navigate backwards through the result pages. The `pageSize` query parameter can be used to request a specific amount of results per page. If not provided the `pageSize` is set to `200`. The amount of results per page is limited to `500`, if a number greater than `500` is specified in the `pageSize` parameter no error is returned but the number of results will be capped at 500 per page.  Only principals with the `PHOTO_CREATOR` or `PHOTO_REVIEWER` permission can list all unapproved photos.  

        :param cursor: The pagination cursor value.
        :type cursor: str
        :param has_identifier_scheme: If provided, only returns photos with at least one identifier.
        :type has_identifier_scheme: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_unapproved_photos_list_serialize(
            cursor=cursor,
            has_identifier_scheme=has_identifier_scheme,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1beta1_unapproved_photos_list_with_http_info(
        self,
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        has_identifier_scheme: Annotated[Optional[StrictStr], Field(description="If provided, only returns photos with at least one identifier.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedV1Beta1PhotoList]:
        """List unapproved photos

         # List unapproved Photos  This endpoint allows information and metadata about all unapproved Photos to be fetched.  Results are ordered by `createdAt` ascending, and may be split over multiple 'pages'. Where more results exist a `next` URL will be provided which can be used to fetch the next page of results. The `previous` URL can be used to navigate backwards through the result pages. The `pageSize` query parameter can be used to request a specific amount of results per page. If not provided the `pageSize` is set to `200`. The amount of results per page is limited to `500`, if a number greater than `500` is specified in the `pageSize` parameter no error is returned but the number of results will be capped at 500 per page.  Only principals with the `PHOTO_CREATOR` or `PHOTO_REVIEWER` permission can list all unapproved photos.  

        :param cursor: The pagination cursor value.
        :type cursor: str
        :param has_identifier_scheme: If provided, only returns photos with at least one identifier.
        :type has_identifier_scheme: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_unapproved_photos_list_serialize(
            cursor=cursor,
            has_identifier_scheme=has_identifier_scheme,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1beta1_unapproved_photos_list_without_preload_content(
        self,
        cursor: Annotated[Optional[StrictStr], Field(description="The pagination cursor value.")] = None,
        has_identifier_scheme: Annotated[Optional[StrictStr], Field(description="If provided, only returns photos with at least one identifier.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List unapproved photos

         # List unapproved Photos  This endpoint allows information and metadata about all unapproved Photos to be fetched.  Results are ordered by `createdAt` ascending, and may be split over multiple 'pages'. Where more results exist a `next` URL will be provided which can be used to fetch the next page of results. The `previous` URL can be used to navigate backwards through the result pages. The `pageSize` query parameter can be used to request a specific amount of results per page. If not provided the `pageSize` is set to `200`. The amount of results per page is limited to `500`, if a number greater than `500` is specified in the `pageSize` parameter no error is returned but the number of results will be capped at 500 per page.  Only principals with the `PHOTO_CREATOR` or `PHOTO_REVIEWER` permission can list all unapproved photos.  

        :param cursor: The pagination cursor value.
        :type cursor: str
        :param has_identifier_scheme: If provided, only returns photos with at least one identifier.
        :type has_identifier_scheme: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1beta1_unapproved_photos_list_serialize(
            cursor=cursor,
            has_identifier_scheme=has_identifier_scheme,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedV1Beta1PhotoList",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '500': "InternalServerError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1beta1_unapproved_photos_list_serialize(
        self,
        cursor,
        has_identifier_scheme,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if has_identifier_scheme is not None:
            
            _query_params.append(('has_identifier_scheme', has_identifier_scheme))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiGatewayAuthorizationCodeSecurityScheme', 
            'apiGatewayClientCredentialsSecurityScheme'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1beta1/unapproved-photos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


