# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command wait for signal
class CmdWaitForSignal(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CmdWaitForSignal()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmdWaitForSignal(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CmdWaitForSignal
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # signal Id
    # CmdWaitForSignal
    def SignalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # automatically reset the signal
    # CmdWaitForSignal
    def AutoReset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CmdWaitForSignalStart(builder): builder.StartObject(2)
def Start(builder):
    return CmdWaitForSignalStart(builder)
def CmdWaitForSignalAddSignalId(builder, signalId): builder.PrependUint32Slot(0, signalId, 0)
def AddSignalId(builder, signalId):
    return CmdWaitForSignalAddSignalId(builder, signalId)
def CmdWaitForSignalAddAutoReset(builder, autoReset): builder.PrependBoolSlot(1, autoReset, 0)
def AddAutoReset(builder, autoReset):
    return CmdWaitForSignalAddAutoReset(builder, autoReset)
def CmdWaitForSignalEnd(builder): return builder.EndObject()
def End(builder):
    return CmdWaitForSignalEnd(builder)

class CmdWaitForSignalT(object):

    # CmdWaitForSignalT
    def __init__(self):
        self.signalId = 0  # type: int
        self.autoReset = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdWaitForSignal = CmdWaitForSignal()
        cmdWaitForSignal.Init(buf, pos)
        return cls.InitFromObj(cmdWaitForSignal)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdWaitForSignal):
        x = CmdWaitForSignalT()
        x._UnPack(cmdWaitForSignal)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.signalId == other.signalId and \
            self.autoReset == other.autoReset

    # CmdWaitForSignalT
    def _UnPack(self, cmdWaitForSignal):
        if cmdWaitForSignal is None:
            return
        self.signalId = cmdWaitForSignal.SignalId()
        self.autoReset = cmdWaitForSignal.AutoReset()

    # CmdWaitForSignalT
    def Pack(self, builder):
        CmdWaitForSignalStart(builder)
        CmdWaitForSignalAddSignalId(builder, self.signalId)
        CmdWaitForSignalAddAutoReset(builder, self.autoReset)
        cmdWaitForSignal = CmdWaitForSignalEnd(builder)
        return cmdWaitForSignal
