# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis abort command
class AxsCmdStopData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdStopData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdStopData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdStopData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # execute the stopAxsCommand? doStop=True -> stop command; doStop=False -> unstop command
    # AxsCmdStopData
    def DoStop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # commanded deceleration limit (must be a positive value)
    # AxsCmdStopData
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 1.0

    # commanded deceleration jerk limit (must be a positive value OR zero), zero means "not jerk limited"
    # AxsCmdStopData
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def AxsCmdStopDataStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsCmdStopDataStart(builder)
def AxsCmdStopDataAddDoStop(builder, doStop): builder.PrependBoolSlot(0, doStop, 1)
def AddDoStop(builder, doStop):
    return AxsCmdStopDataAddDoStop(builder, doStop)
def AxsCmdStopDataAddDec(builder, dec): builder.PrependFloat64Slot(1, dec, 1.0)
def AddDec(builder, dec):
    return AxsCmdStopDataAddDec(builder, dec)
def AxsCmdStopDataAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(2, jrkDec, 0.0)
def AddJrkDec(builder, jrkDec):
    return AxsCmdStopDataAddJrkDec(builder, jrkDec)
def AxsCmdStopDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdStopDataEnd(builder)

class AxsCmdStopDataT(object):

    # AxsCmdStopDataT
    def __init__(self):
        self.doStop = True  # type: bool
        self.dec = 1.0  # type: float
        self.jrkDec = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdStopData = AxsCmdStopData()
        axsCmdStopData.Init(buf, pos)
        return cls.InitFromObj(axsCmdStopData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdStopData):
        x = AxsCmdStopDataT()
        x._UnPack(axsCmdStopData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.doStop == other.doStop and \
            self.dec == other.dec and \
            self.jrkDec == other.jrkDec

    # AxsCmdStopDataT
    def _UnPack(self, axsCmdStopData):
        if axsCmdStopData is None:
            return
        self.doStop = axsCmdStopData.DoStop()
        self.dec = axsCmdStopData.Dec()
        self.jrkDec = axsCmdStopData.JrkDec()

    # AxsCmdStopDataT
    def Pack(self, builder):
        AxsCmdStopDataStart(builder)
        AxsCmdStopDataAddDoStop(builder, self.doStop)
        AxsCmdStopDataAddDec(builder, self.dec)
        AxsCmdStopDataAddJrkDec(builder, self.jrkDec)
        axsCmdStopData = AxsCmdStopDataEnd(builder)
        return axsCmdStopData
