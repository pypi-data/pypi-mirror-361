# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# all supported calculation steps
class StateCalcSteps(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StateCalcSteps()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStateCalcSteps(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StateCalcSteps
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all supported calculation steps
    # StateCalcSteps
    def Steps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.StateCalcSingleStep import StateCalcSingleStep
            obj = StateCalcSingleStep()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StateCalcSteps
    def StepsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StateCalcSteps
    def StepsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def StateCalcStepsStart(builder): builder.StartObject(1)
def Start(builder):
    return StateCalcStepsStart(builder)
def StateCalcStepsAddSteps(builder, steps): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(steps), 0)
def AddSteps(builder, steps):
    return StateCalcStepsAddSteps(builder, steps)
def StateCalcStepsStartStepsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStepsVector(builder, numElems):
    return StateCalcStepsStartStepsVector(builder, numElems)
def StateCalcStepsEnd(builder): return builder.EndObject()
def End(builder):
    return StateCalcStepsEnd(builder)
import motion.sync.fbtypes.StateCalcSingleStep
try:
    from typing import List
except:
    pass

class StateCalcStepsT(object):

    # StateCalcStepsT
    def __init__(self):
        self.steps = None  # type: List[motion.sync.fbtypes.StateCalcSingleStep.StateCalcSingleStepT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateCalcSteps = StateCalcSteps()
        stateCalcSteps.Init(buf, pos)
        return cls.InitFromObj(stateCalcSteps)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateCalcSteps):
        x = StateCalcStepsT()
        x._UnPack(stateCalcSteps)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.steps == other.steps

    # StateCalcStepsT
    def _UnPack(self, stateCalcSteps):
        if stateCalcSteps is None:
            return
        if not stateCalcSteps.StepsIsNone():
            self.steps = []
            for i in range(stateCalcSteps.StepsLength()):
                if stateCalcSteps.Steps(i) is None:
                    self.steps.append(None)
                else:
                    stateCalcSingleStep_ = motion.sync.fbtypes.StateCalcSingleStep.StateCalcSingleStepT.InitFromObj(stateCalcSteps.Steps(i))
                    self.steps.append(stateCalcSingleStep_)

    # StateCalcStepsT
    def Pack(self, builder):
        if self.steps is not None:
            stepslist = []
            for i in range(len(self.steps)):
                stepslist.append(self.steps[i].Pack(builder))
            StateCalcStepsStartStepsVector(builder, len(self.steps))
            for i in reversed(range(len(self.steps))):
                builder.PrependUOffsetTRelative(stepslist[i])
            steps = builder.EndVector()
        StateCalcStepsStart(builder)
        if self.steps is not None:
            StateCalcStepsAddSteps(builder, steps)
        stateCalcSteps = StateCalcStepsEnd(builder)
        return stateCalcSteps
