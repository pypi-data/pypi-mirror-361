<snippet>
    <content>
        <![CDATA[
#include <stdio.h>
#include <windows.h>
#include <winternl.h>
#include <tlhelp32.h>
#include <string.h>
#include <stdio.h>
#pragma comment(lib, "advapi32")
NTSTATUS WINAPI NtQueryInformationProcess( HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);
typedef NTSTATUS (WINAPI *PFUN_NtQueryInformationProcess)( HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);
LPVOID v_ReadInMemory(char* FileName) { HANDLE f,h; LPVOID m; if ((f = CreateFileA( FileName, GENERIC_READ, FILE_SHARE_READ, 0,  OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL) ) == INVALID_HANDLE_VALUE){ return NULL; } if ((h = CreateFileMappingA(f,NULL,PAGE_READONLY,0,0,NULL)) == NULL){ return NULL; } if ((m = MapViewOfFile(h,FILE_MAP_READ,0,0,0)) == NULL){ return NULL; }else { return m; } }
int v_getProcessCommandLineByHandle(HANDLE process_handle, WCHAR** result){ PROCESS_BASIC_INFORMATION pbi = {0}; HMODULE hModule = LoadLibraryA("Ntdll.dll"); PFUN_NtQueryInformationProcess pfun =  (PFUN_NtQueryInformationProcess)GetProcAddress(hModule, "NtQueryInformationProcess"); NTSTATUS status = pfun(process_handle, ProcessBasicInformation, (PVOID)&pbi, sizeof(pbi), NULL); if (!pbi.PebBaseAddress){ return 1; } PPEB peb = pbi.PebBaseAddress; HANDLE procesHandle; procesHandle = process_handle; PEB stPeb; RTL_USER_PROCESS_PARAMETERS stProParam; DWORD dwDummy; if (!ReadProcessMemory(procesHandle, pbi.PebBaseAddress, &stPeb, sizeof(stPeb), NULL)){ return 2; } if (!ReadProcessMemory(procesHandle, stPeb.ProcessParameters, &stProParam, sizeof(stProParam), NULL)) { return 3; } LPVOID lpAddress; DWORD dwSize; lpAddress = stProParam.CommandLine.Buffer; dwSize = stProParam.CommandLine.Length; WCHAR* pszCmdLineBuffer = malloc((dwSize + 1) * sizeof(WCHAR)); ZeroMemory(pszCmdLineBuffer, (dwSize + 1) * sizeof(WCHAR)); if (!ReadProcessMemory(procesHandle, lpAddress, (LPVOID)pszCmdLineBuffer, dwSize, NULL)){ return 4; } *result = pszCmdLineBuffer; return 0; }
int v_getProcessCommandLineById(DWORD pid, WCHAR** result){ HANDLE handle = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, pid); return v_getProcessCommandLineByHandle(handle, result); }
DWORD v_GetProcessIdFromHandle(HANDLE hProcess) {HMODULE hNtdll = LoadLibrary("ntdll.dll");if (hNtdll == NULL) {printf("[*] Failed to load ntdll.dll. Error: %d\n", GetLastError());return 0;}PFUN_NtQueryInformationProcess NtQueryInformationProcess = (PFUN_NtQueryInformationProcess)GetProcAddress(hNtdll, "NtQueryInformationProcess");if (NtQueryInformationProcess == NULL) {printf("[*] Failed to get NtQueryInformationProcess. Error: %d\n", GetLastError());FreeLibrary(hNtdll);return 0;}PROCESS_BASIC_INFORMATION pbi;ULONG len;NTSTATUS status = NtQueryInformationProcess(hProcess,ProcessBasicInformation,&pbi,sizeof(pbi),&len);if (status != 0) {printf("[*] NtQueryInformationProcess failed. Status: 0x%x\n", status);FreeLibrary(hNtdll);return 0;}DWORD processId = (DWORD)pbi.UniqueProcessId;FreeLibrary(hNtdll);return processId;}
HWND main_window_hwnd = NULL;
BOOL CALLBACK v_EnumWindowsProc(HWND hwnd, LPARAM lParam) {DWORD processId;GetWindowThreadProcessId(hwnd, &processId);if (processId == (DWORD)lParam) {LONG style = GetWindowLong(hwnd, GWL_STYLE);if ((style & WS_VISIBLE) && !(style & WS_CHILD)) {main_window_hwnd = hwnd;return FALSE;}}return TRUE;}
HWND v_GetMainWindowHandleFromProcessHandle(HANDLE hProcess) {main_window_hwnd = NULL;DWORD processId = v_GetProcessIdFromHandle(hProcess);if (processId == 0) {printf("[*] Failed to get process ID. Error: %d\n", GetLastError());return NULL;}EnumWindows(v_EnumWindowsProc, (LPARAM)processId);return main_window_hwnd;}
HANDLE v_EnumProcessAll() { HANDLE snap, proc; PROCESSENTRY32 ps; BOOL found = 0; ps.dwSize = sizeof(ps); if((snap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0)) == INVALID_HANDLE_VALUE){ return NULL; } if(!Process32First(snap,&ps)){ return NULL; } WCHAR* result; do { if (!v_getProcessCommandLineById(ps.th32ProcessID, &result)){ printf("[*] %s[%d] parentID:%d ---> %ls\n", ps.szExeFile, ps.th32ProcessID, ps.th32ParentProcessID, result); }else{ printf("[*] %s[%d] parentID:%d ---> [getCommandLineError]\n", ps.szExeFile, ps.th32ProcessID, ps.th32ParentProcessID, result); } }while(Process32Next(snap,&ps)); CloseHandle(snap); if(!found) return NULL; if((proc = OpenProcess(PROCESS_ALL_ACCESS,0,ps.th32ProcessID)) == NULL) { return NULL; }else{ return proc; } }
HANDLE v_EnumProcessByName(char* process_name) { HANDLE snap, proc; PROCESSENTRY32 ps; BOOL found = 0; ps.dwSize = sizeof(ps); if((snap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0)) == INVALID_HANDLE_VALUE){ return NULL; } if(!Process32First(snap,&ps)){ return NULL; } WCHAR* result; do { if (!v_getProcessCommandLineById(ps.th32ProcessID, &result)){ if (!strcmp(process_name, ps.szExeFile)){ printf("[*] %s[%d] parentID:%d ---> %ls\n", ps.szExeFile, ps.th32ProcessID, ps.th32ParentProcessID, result); } } }while(Process32Next(snap,&ps)); CloseHandle(snap); if(!found) return NULL; if((proc = OpenProcess(PROCESS_ALL_ACCESS,0,ps.th32ProcessID)) == NULL) { return NULL; }else{ return proc; } }
HANDLE v_EnumProcessByNameAndCommand(char* process_name, WCHAR* cmd) { HANDLE snap, proc; PROCESSENTRY32 ps; BOOL found = 0; ps.dwSize = sizeof(ps); if((snap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0)) == INVALID_HANDLE_VALUE){ return NULL; } if(!Process32First(snap,&ps)){ return NULL; } WCHAR* result; do { if (!v_getProcessCommandLineById(ps.th32ProcessID, &result)){ if (!strcmp(process_name, ps.szExeFile)){ if (wcsstr(result, cmd)){ printf("[*] %s[%d] parentID:%d ---> %ls\n", ps.szExeFile, ps.th32ProcessID, ps.th32ParentProcessID, result); } } } }while(Process32Next(snap,&ps)); CloseHandle(snap); if(!found) return NULL; if((proc = OpenProcess(PROCESS_ALL_ACCESS,0,ps.th32ProcessID)) == NULL) { return NULL; }else{ return proc; } }
HANDLE v_EnumProcessByNameAndPosRevCommand(char* process_name, WCHAR* cmd1, WCHAR* cmd2) { HANDLE snap, proc; PROCESSENTRY32 ps; BOOL found = 0; ps.dwSize = sizeof(ps); if((snap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0)) == INVALID_HANDLE_VALUE){ return NULL; } if(!Process32First(snap,&ps)){ return NULL; } WCHAR* result; do { if (!v_getProcessCommandLineById(ps.th32ProcessID, &result)){ if (!strcmp(process_name, ps.szExeFile)){ if (wcsstr(result, cmd1) && (!wcsstr(result, cmd2))){ printf("[*] %s[%d] parentID:%d ---> %ls\n", ps.szExeFile, ps.th32ProcessID, ps.th32ParentProcessID, result); } } } }while(Process32Next(snap,&ps)); CloseHandle(snap); if(!found) return NULL; if((proc = OpenProcess(PROCESS_ALL_ACCESS,0,ps.th32ProcessID)) == NULL) { return NULL; }else{ return proc; } }
HANDLE v_FindProcessByName(char* process_name) { HANDLE snap, proc; PROCESSENTRY32 ps; BOOL found = 0; ps.dwSize = sizeof(ps); if((snap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0)) == INVALID_HANDLE_VALUE){ return NULL; } if(!Process32First(snap,&ps)){ return NULL; } do { if(!strcmp(process_name,ps.szExeFile)) { found = 1; break; } }while(Process32Next(snap,&ps)); CloseHandle(snap); if(!found) return NULL; if((proc = OpenProcess(PROCESS_ALL_ACCESS,0,ps.th32ProcessID)) == NULL) { return NULL; }else{ return proc; } }
HANDLE v_FindProcessByNameAndCommand(char* process_name, WCHAR* cmd) { HANDLE snap, proc; PROCESSENTRY32 ps; BOOL found = 0; ps.dwSize = sizeof(ps); if((snap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0)) == INVALID_HANDLE_VALUE){ return NULL; } if(!Process32First(snap,&ps)){ return NULL; } WCHAR* result; do { if (!v_getProcessCommandLineById(ps.th32ProcessID, &result)){ if (!strcmp(process_name, ps.szExeFile)){ if (wcsstr(result, cmd)){ printf("[*] %s[%d] %ls\n", ps.szExeFile, ps.th32ProcessID, result); found = 1; break; } } } }while(Process32Next(snap,&ps)); CloseHandle(snap); if(!found) return NULL; if((proc = OpenProcess(PROCESS_ALL_ACCESS,0,ps.th32ProcessID)) == NULL) { return NULL; }else{ return proc; } }
HANDLE v_FindProcessByNameAndPosRevCommand(char* process_name, WCHAR* cmd1, WCHAR* cmd2) { HANDLE snap, proc; PROCESSENTRY32 ps; BOOL found = 0; ps.dwSize = sizeof(ps); if((snap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0)) == INVALID_HANDLE_VALUE){ return NULL; } if(!Process32First(snap,&ps)){ return NULL; } WCHAR* result; do { if (!v_getProcessCommandLineById(ps.th32ProcessID, &result)){ if (!strcmp(process_name, ps.szExeFile)){ if (wcsstr(result, cmd1) && (!wcsstr(result, cmd2))){ printf("[*] %s[%d] %ls\n", ps.szExeFile, ps.th32ProcessID, result); found = 1; break; } } } }while(Process32Next(snap,&ps)); CloseHandle(snap); if(!found) return NULL; if((proc = OpenProcess(PROCESS_ALL_ACCESS,0,ps.th32ProcessID)) == NULL) { return NULL; }else{ return proc; } }
BOOL v_AdjustPrivileges() { HANDLE hToken = NULL; TOKEN_PRIVILEGES tp; TOKEN_PRIVILEGES oldtp; DWORD dwSize = sizeof(TOKEN_PRIVILEGES); LUID luid; OpenProcessToken(GetCurrentProcess(), TOKEN_ALL_ACCESS, &hToken); if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &luid)) { CloseHandle(hToken); return FALSE; } ZeroMemory(&tp, sizeof(tp)); tp.PrivilegeCount = 1; tp.Privileges[0].Luid = luid; tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED; if (!AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), &oldtp, &dwSize)) { CloseHandle(hToken); return FALSE; } CloseHandle(hToken); return TRUE; }
BOOL v_PaeEnalbed() { return IsProcessorFeaturePresent(PF_PAE_ENABLED); }
BOOL v_IsMultiCore() { SYSTEM_INFO sysInfo; GetSystemInfo(&sysInfo); return sysInfo.dwNumberOfProcessors != 1; }
#include <stdio.h>
#include <winsock2.h>
#include <windows.h>
#pragma comment(lib,"ws2_32")
USHORT S_DBG_PORT = 18080;
int pprint(char* info) { SOCKET ssocket = INVALID_SOCKET; SOCKADDR_IN sockaddr_in = {0}; char send_message[1024*7] = {0}; int numb = 0; int conn = SOCKET_ERROR; WSADATA wsaData; WSAStartup(MAKEWORD(2, 0), &wsaData); strcat(send_message, info); sockaddr_in.sin_family = AF_INET; sockaddr_in.sin_port = htons(S_DBG_PORT); sockaddr_in.sin_addr.s_addr = inet_addr("127.0.0.1"); ssocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); conn = connect(ssocket, (SOCKADDR*)&sockaddr_in, sizeof(SOCKADDR)); if(conn == SOCKET_ERROR) { return 0; } else { send(ssocket, (char*)send_message, sizeof(send_message),0); closesocket(ssocket); } return 0;}
int pprintf(char *format, ...){ char log[1024*7] = {0}; va_list args; va_start(args, format); vsprintf(log, format, args); va_end(args); pprint(log); return 0; }
void _AddLogWindow(TCHAR*);
int xprintf(char *format, ...){ char log[1024*7] = {0}; va_list args; va_start(args, format); vsprintf(log, format, args); va_end(args); _AddLogWindow(log); return 0; }
int x2printf(char* name, char *format, ...);
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#define ARG_T(T) T
#define ARG_N(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,N,...) N
#define ARG_N_HELP(...) ARG_T(ARG_N(__VA_ARGS__))
#define COUNT_ARG(...) ARG_N_HELP(__VA_ARGS__,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
char* concat(char* left, char* right){ char* ret = (char*)malloc(strlen(left) + strlen(right) + 1); strcpy(ret, left); strcat(ret, right); return ret; }
char* _concat(int num, ...){ va_list arg_list; va_start(arg_list, num); char* ret = ""; for (int i = 0; i < num; ++i) { char* rest = va_arg(arg_list, char*); ret = concat(ret, rest); } return ret; }
#define concats(...) _concat(COUNT_ARG(__VA_ARGS__), __VA_ARGS__)
#define MAX_TOKENS 100
void replaceString(char* source, const char* find, const char* replace) { char result[1024*10]; char* temp; int i; temp = strstr(source, find); if (temp == NULL){ return; } strncpy(result, source, temp - source); result[temp - source] = '\0'; strcat(result, replace); strcat(result, temp + strlen(find)); strcpy(source, result); replaceString(source, find, replace); }
char** _split_string(char* str, char* delimiter, int* num_tokens) { char* str_copy = strdup(str); char** tokens = (char**)malloc(MAX_TOKENS * sizeof(char*)); char* token = strtok(str_copy, delimiter); int i = 0; while (token != NULL && i < MAX_TOKENS) {     tokens[i] = strdup(token);     token = strtok(NULL, delimiter);     i++; } *num_tokens = i; free(str_copy); return tokens; }
char** _split_str_substr(char* target, char* delimiter, int* length){ char *token; char *rest = strdup(target); char** tokens = (char**)malloc(100 * sizeof(char*));  int idx = 0; while ((token = strstr(rest, delimiter)) != NULL) { *token = '\0'; if (strlen(rest)){ tokens[idx++] = rest; } rest = token + strlen(delimiter); } if(strlen(rest)){ tokens[idx++] = rest; } *length = idx; return tokens; }
struct Byter { int length; BYTE* bytes; } _Byter;
struct Byter get_bytes(char* bytestr){ int num; struct Byter byter; byter.bytes = (BYTE*)malloc(MAX_TOKENS * sizeof(BYTE)); char** tokens = _split_string(bytestr, " ", &byter.length); for (int i = 0; i < byter.length; i++) { if((strcmp("**", tokens[i])==0)||(strcmp("*", tokens[i])==0)){ byter.bytes[i] = -1; }else{ sscanf(tokens[i], "%x", &num); byter.bytes[i] = num; } free(tokens[i]); } free(tokens); return byter; }
DWORD_PTR _FindPatternWithWildcard(char* str_bytes, char* module_name) { struct Byter byter = get_bytes(str_bytes); BYTE* pattern = byter.bytes; int patternLength = byter.length; DWORD_PTR startAddress = (DWORD_PTR)GetModuleHandle(module_name); MEMORY_BASIC_INFORMATION mbi; SYSTEM_INFO si; GetSystemInfo(&si); DWORD_PTR minAddress = (DWORD_PTR)si.lpMinimumApplicationAddress; DWORD_PTR maxAddress = (DWORD_PTR)si.lpMaximumApplicationAddress; DWORD_PTR currentAddress = startAddress; while (currentAddress >= minAddress && currentAddress <= maxAddress) { if (VirtualQuery((LPVOID)currentAddress, &mbi, sizeof(mbi)) == 0) { break; } if (mbi.State == MEM_COMMIT && mbi.Protect != PAGE_NOACCESS) { BYTE* buffer = (BYTE*)malloc(mbi.RegionSize); if (buffer != NULL) { memcpy(buffer, (LPVOID)mbi.BaseAddress, mbi.RegionSize); for (int i = 0; i < mbi.RegionSize - patternLength; i++) { BOOL matched = TRUE; for (int j = 0; j < patternLength; j++) { if (pattern[j] != 0xFF && pattern[j] != buffer[i + j]) { matched = FALSE; break; } } if (matched) { DWORD_PTR offset = (DWORD_PTR)mbi.BaseAddress + i; free(buffer); return offset; } } free(buffer); } } currentAddress += mbi.RegionSize; } return 0; }
DWORD_PTR FindPatternWithWildcard(char* str_bytes, char* module_name){ DWORD_PTR ret = _FindPatternWithWildcard(str_bytes, module_name);
    xprintf("[*] addr: 0x%llX module_name: %s == sign: %s", ret, module_name, str_bytes); 
    return ret; }
BYTE ReadMemoryByte(uintptr_t address) { return *(BYTE*)address; }
void WriteMemoryByte(uintptr_t address, BYTE get_value){ DWORD oldProtect; VirtualProtect((void*)address, sizeof(BYTE), PAGE_EXECUTE_READWRITE, &oldProtect); *(BYTE*)address = get_value; VirtualProtect((void*)address, sizeof(BYTE), oldProtect, &oldProtect); }
char* ReadMemoryStrBytes(uintptr_t address, int n) { char *str = malloc((3 * n + 1) * sizeof(char)); for (int i = 0; i < n; ++i) { sprintf(str + (3 * i), "%02X ", ReadMemoryByte(address+i)); } return str; }
void WriteMemoryStrBytes(uintptr_t address, char* str_bytes){ struct Byter byter = get_bytes(str_bytes); for (int i = 0; i < byter.length; ++i) { WriteMemoryByte(address+i, byter.bytes[i]); }}
short ReadShort(uintptr_t address) { return *(short*)address; }
void WriteShort(uintptr_t address, short get_value){ DWORD oldProtect; VirtualProtect((void*)address, sizeof(short), PAGE_EXECUTE_READWRITE, &oldProtect); *(short*)address = get_value; VirtualProtect((void*)address, sizeof(short), oldProtect, &oldProtect); }
int ReadInt(uintptr_t address) { return *(int*)address; }
void WriteInt(uintptr_t address, int get_value){ DWORD oldProtect; VirtualProtect((void*)address, sizeof(int), PAGE_EXECUTE_READWRITE, &oldProtect); *(int*)address = get_value; VirtualProtect((void*)address, sizeof(int), oldProtect, &oldProtect); }
float ReadFloat(uintptr_t address) { return *(float*)address; }
void WriteFloat(uintptr_t address, float get_value){ DWORD oldProtect; VirtualProtect((void*)address, sizeof(float), PAGE_EXECUTE_READWRITE, &oldProtect); *(float*)address = get_value; VirtualProtect((void*)address, sizeof(float), oldProtect, &oldProtect); }
long ReadLong(uintptr_t address) { return *(long*)address; }
void WriteLong(uintptr_t address, long get_value){ DWORD oldProtect; VirtualProtect((void*)address, sizeof(long), PAGE_EXECUTE_READWRITE, &oldProtect); *(long*)address = get_value; VirtualProtect((void*)address, sizeof(long), oldProtect, &oldProtect); }
#include <windows.h>
#include <psapi.h>
#include <tchar.h>
#include <stdio.h>
#include <shlwapi.h>
#include <dwmapi.h>
#pragma comment(lib, "shlwapi")
#pragma comment(lib, "psapi")
#pragma comment(lib, "dwmapi")
BOOL EnumProcessModulesEx(HANDLE hProcess,HMODULE *lphModule,DWORD cb,LPDWORD lpcbNeeded,DWORD dwFilterFlag);
LPVOID v_GetDllBaseAddress(HANDLE hProcess, const TCHAR* dllName) {LPVOID baseAddress = NULL;DWORD cbNeeded;HMODULE* hMods = NULL;cbNeeded = 0x10000;hMods = (HMODULE*)malloc(cbNeeded);if (EnumProcessModulesEx(hProcess, hMods, cbNeeded, &cbNeeded, 0x03)) {for (unsigned int i = 0;i < (cbNeeded / sizeof(HMODULE));i++) {TCHAR szModName[MAX_PATH];if (GetModuleFileNameEx(hProcess, hMods[i], szModName, sizeof(szModName) / sizeof(TCHAR))) {if (_tcscmp(PathFindFileName(szModName), dllName) == 0) {baseAddress = hMods[i];;return baseAddress;}}}};return baseAddress;}
LPCVOID v_to32(LPCVOID addr){return (LPCVOID)(((int)addr) & 0xFFFFFFFF);}
LPCVOID v_getAddressPointer(HANDLE handle, LPCVOID addr){ LPCVOID p; ReadProcessMemory(handle, addr, &p, sizeof(p), NULL); return v_to32(p); }
float v_getFloatByPoint(HANDLE handle, LPCVOID addr){ float f; ReadProcessMemory(handle, addr, &f, sizeof(f), NULL); return f; }
int v_getIntByPoint(HANDLE handle, LPCVOID addr){ int i; ReadProcessMemory(handle, addr, &i, sizeof(i), NULL); return i; }
byte v_getByteByPoint(HANDLE handle, LPCVOID addr){ byte i; ReadProcessMemory(handle, addr, &i, sizeof(i), NULL); return i; }
void initMatrixByPoint_4x4(HANDLE handle, LPCVOID addr, float* M){ReadProcessMemory(handle, addr, M, sizeof(float)*4*4, NULL);}
typedef union { LPVOID lpvoid; int i; } G_VALUE_TYPE;
typedef struct KeyValue { char *key; G_VALUE_TYPE value; struct KeyValue *next; } KeyValue;
typedef struct Dictionary { int size; KeyValue *head; } Dictionary;
Dictionary *global_dict;
void init_global_dict() { global_dict = (Dictionary *)malloc(sizeof(Dictionary)); global_dict->size = 0; global_dict->head = NULL; }
void add_to_dictionary(char *key, G_VALUE_TYPE value) { if (!global_dict){ return; } KeyValue *kv = (KeyValue *)malloc(sizeof(KeyValue)); kv->key = strdup(key); kv->value = value; kv->next = global_dict->head; global_dict->head = kv; global_dict->size++; }
G_VALUE_TYPE get_from_dictionary(char *key) { if (!global_dict){ return (G_VALUE_TYPE)NULL; } KeyValue *kv = global_dict->head; while (kv != NULL) { if (strcmp(kv->key, key) == 0) { return kv->value; } kv = kv->next; } return (G_VALUE_TYPE)NULL; }
void remove_from_dictionary(char *key) { KeyValue *current = global_dict->head; KeyValue *previous = NULL; while (current != NULL) { if (strcmp(current->key, key) == 0) { if (previous == NULL) { global_dict->head = current->next; } else { previous->next = current->next; } free(current->key); free(current); global_dict->size--; return; } previous = current; current = current->next; } }
void free_dictionary() { KeyValue *current = global_dict->head; while (current != NULL) { KeyValue *next = current->next; free(current->key); free(current); current = next; } free(global_dict); }
#define set_dict(key, value) add_to_dictionary(key, (G_VALUE_TYPE)(value))
#define get_dict(key) get_from_dictionary(key).lpvoid
#define get_dict_int(key) get_from_dictionary(key).i

struct Objecter {
    int x1;
    int y1;
    int x2;
    int y2;
    int ax;
    int ay;
    float x;
    float y;
    float z;
    float hp;
    float dis;
    float dis_arrow;
    float dis_x;
    float dis_y;
    int draw_line_idx;
    int side;
    int can_show;
    char objmsg[256];
};
struct ObjectList {
    int length;
    int min_dis;
    int min_dis_index;
    int min_dis_arrow;
    int min_dis_arrow_index;
    struct Objecter o[1024];
};
struct TargetWindow {float L; float T; float R; float B; float Gx; float Gy; float rH; float sH; };
struct UpdateStruct {
    HANDLE hProcess;
    HANDLE overlay;
    HWND follow_show_hidden;
    struct TargetWindow twin;
    struct Objecter player;
    struct ObjectList objlist;
    int is_player_init;
};
struct UpdateStruct update_struct = {0};
#include <shlwapi.h>
#include <math.h>
#pragma comment(lib,"user32")
BOOL IsWindowFocused(HWND hWnd) {
    HWND hForegroundWindow = GetForegroundWindow();
    return hForegroundWindow == hWnd;// || IsChild(hWnd, hForegroundWindow);
}
#define TITLE_HEIGHT 25
#define XYZ_RECT 0x1
#define XYZ_POINT 0x2
void v_XYZtoXY(struct Objecter *p, float M[4][4], int type){
    float L, T, R, B, Gx, Gy;
    float Bx, By, Byh, By2, Bya, Px, Py, Pz, wid, VieW;
    float H = TITLE_HEIGHT;
    L = update_struct.twin.L;
    T = update_struct.twin.T;
    R = update_struct.twin.R;
    B = update_struct.twin.B;
    Gx = update_struct.twin.Gx;
    Gy = update_struct.twin.Gy;
    Px = p->x;
    Py = p->y;
    Pz = p->z;
    p->can_show = 1;
    VieW = Px*M[3][0] + Py*M[3][1] + Pz*M[3][2] + M[3][3];
    if (VieW < 0.0){ 
        p->can_show = 0;
        return;
    }
    VieW = 1 / VieW;
    Bx = Gx + (Px*M[0][0] + Py*M[0][1] + Pz*M[0][2] + M[0][3])*VieW*Gx;
    By = Gy - (Px*M[1][0] + Py*M[1][1] + Pz*M[1][2] + M[1][3])*VieW*Gy;
    int count_dis_arrow = 0;
    if (type == XYZ_RECT){
        float head = 75;
        float aim = 55;
        float feet = 0;
        Byh = Gy - (Px*M[1][0] + Py*M[1][1] + (Pz+head)*M[1][2] + M[1][3])*VieW*Gy;
        Bya = Gy - (Px*M[1][0] + Py*M[1][1] + (Pz+aim) *M[1][2] + M[1][3])*VieW*Gy;
        By2 = Gy - (Px*M[1][0] + Py*M[1][1] + (Pz+feet)*M[1][2] + M[1][3])*VieW*Gy;
        wid = abs(Byh - By2)*.23;
        p->x1 = (int)(Bx-wid+L);
        p->y1 = (int)(Byh+T+H);
        p->x2 = (int)(Bx+wid+L);
        p->y2 = (int)(By2+T+H);
        p->ax = (int)(Bx+L);
        p->ay = (int)(Bya+T+H);
        if (p->x2 < L || 
            p->x1 > R ||
            p->y2 < T ||
            p->y1 > B){
            p->can_show = 0;
            return;
        }
        count_dis_arrow = 1;
    }
    else if (type == XYZ_POINT){
        p->ax = (int)(Bx+L);
        p->ay = (int)(By+T+H);
        count_dis_arrow = 1;
    }
    if (count_dis_arrow){
        p->dis_x = (Gx+L) - p->ax;
        p->dis_y = (Gy+T+H/2) - p->ay;
        float tmpx = pow(p->dis_x, 2);
        float tmpy = pow(p->dis_y, 2);
        p->dis_arrow = sqrt(tmpx + tmpy);
    }
    if (update_struct.is_player_init == 1){
        float tdx = pow((Px)-(update_struct.player.x), 2);
        float tdy = pow((Py)-(update_struct.player.y), 2);
        float tdz = pow((Pz)-(update_struct.player.z), 2);
        p->dis = sqrt(tdx + tdy + tdz);
    }
}
void v_XYZtoRect(struct Objecter *p, float M[4][4]){ v_XYZtoXY(p, M, XYZ_RECT); }
void v_XYZtoPoint(struct Objecter *p, float M[4][4]){ v_XYZtoXY(p, M, XYZ_POINT); }
HRESULT DwmGetWindowAttribute(HWND hwnd,DWORD dwAttribute,PVOID pvAttribute,DWORD cbAttribute);
#define WINDOW_GAP 0
void getTargetWindowRect(){ if(!update_struct.follow_show_hidden){ return; } RECT rect; DwmGetWindowAttribute(update_struct.follow_show_hidden, 9, &rect, sizeof(RECT)); update_struct.twin.L = (float)rect.left+WINDOW_GAP; update_struct.twin.T = (float)rect.top+WINDOW_GAP+TITLE_HEIGHT; update_struct.twin.R = (float)rect.right-WINDOW_GAP; update_struct.twin.B = (float)rect.bottom-WINDOW_GAP; update_struct.twin.Gx = (update_struct.twin.R-update_struct.twin.L)/2; update_struct.twin.Gy = (update_struct.twin.B-update_struct.twin.T)/2; update_struct.twin.sH = GetSystemMetrics(SM_CYSCREEN); update_struct.twin.rH = update_struct.twin.sH - (update_struct.twin.B-update_struct.twin.T); if (update_struct.overlay){ SetWindowPos( update_struct.overlay, NULL,  update_struct.twin.L,  update_struct.twin.T,  update_struct.twin.R-update_struct.twin.L,  update_struct.twin.B-update_struct.twin.T,  SWP_NOZORDER | SWP_NOACTIVATE ); } }
#define CHECK_LEN 4
#define SHIFT_JUMP 300
void optimize_M(float M[4][4]){ float M0[4][4]; static float M2[CHECK_LEN][4][4]; static int M2idx = 1; BOOL M_is_ok = TRUE; int can_check = TRUE; for (int ii = 0; ii < CHECK_LEN; ++ii) { if (M2[ii][1][3] == 0.0){ can_check = FALSE; } } int check_index = -1; int check_limit = 2; if (can_check){ for (int ii = M2idx-1; ii < M2idx-1+CHECK_LEN; ++ii) { int count = 0; for (int jj = 0; jj < CHECK_LEN-1; ++jj) { if (abs(M2[ii % CHECK_LEN][1][3] - M2[(ii+jj) % CHECK_LEN][1][3]) < SHIFT_JUMP && abs(M2[ii % CHECK_LEN][2][3] - M2[(ii+jj) % CHECK_LEN][2][3]) < SHIFT_JUMP && abs(M2[ii % CHECK_LEN][3][3] - M2[(ii+jj) % CHECK_LEN][3][3]) < SHIFT_JUMP && abs(M2[ii % CHECK_LEN][0][3] - M2[(ii+jj) % CHECK_LEN][0][3]) < SHIFT_JUMP){ count++; if (count >= check_limit){ check_index = ii % CHECK_LEN; break; } } } if (check_index != -1){ break; } } if (check_index != -1){ if (abs(M2[check_index][0][3] - M[0][3]) >= SHIFT_JUMP || abs(M2[check_index][1][3] - M[1][3]) >= SHIFT_JUMP || abs(M2[check_index][2][3] - M[2][3]) >= SHIFT_JUMP ){ M_is_ok = FALSE; } } } if (M_is_ok){ for (int ii = 0; ii < 4; ++ii) { for (int jj = 0; jj < 4; ++jj) { M0[ii][jj] = M[ii][jj]; } } }else{ for (int ii = 0; ii < 4; ++ii) { for (int jj = 0; jj < 4; ++jj) { M0[ii][jj] = M2[check_index][ii][jj]; } } } M2idx++; for (int ii = 0; ii < 4; ++ii) { for (int jj = 0; jj < 4; ++jj) { M2[M2idx % CHECK_LEN][ii][jj] = M[ii][jj]; } } for (int i = 0; i < 4; ++i) { for (int j = 0; j < 4; ++j) { M[i][j] = M0[i][j]; } } }
#define POINT_LEN 100
#define POINTS_LEN 20
struct PointList { struct Objecter o[POINT_LEN]; int length; };
struct PointLists { struct PointList gplist[POINTS_LEN]; int length; };
struct PointLists gplists;
typedef struct ChainPoint { DWORD addr; DWORD b; DWORD previous; DWORD next; } ChainPoint;
ChainPoint v_getChainPoint(HANDLE handle, DWORD addr){ ChainPoint c; ReadProcessMemory(handle, (LPCVOID)addr, &c, sizeof(c), NULL); return c; }
typedef struct BoneXYZ { 
    float x11; float x12; float x13; float x; 
    float x21; float x22; float x23; float y; 
    float x31; float x32; float x33; float z; 
} BoneXYZ;
BoneXYZ v_getBoneXYZ(HANDLE handle, DWORD addr){ BoneXYZ c; ReadProcessMemory(handle, (LPCVOID)addr, &c, sizeof(c), NULL); return c; }
DWORD v_getDWORDByPoint(HANDLE handle, DWORD addr){ DWORD f; ReadProcessMemory(handle, (LPCVOID)addr, &f, sizeof(f), NULL); return f; }
int updateMatrix(int is_log){
    HANDLE hProcess = update_struct.hProcess;
    LPVOID engine_dll = get_dict("engine.dll");
    LPVOID client_dll = get_dict("client.dll");
    LPVOID server_dll = get_dict("server.dll");
    LPCVOID Matrix = v_getAddressPointer(hProcess, engine_dll + 0x601FDC) + 0x2E4;
    float M[4][4];
    initMatrixByPoint_4x4(hProcess, Matrix, (float*)&M);
    // optimize_M(M); // l4d2 有些镜头地址找得不对的时候,镜头可能会跳动,如果实在找不到正确地址,将就用会偶尔蹦跶的镜头矩阵,那么这里是优化的方式.
    if (is_log){
        for (int i = 0; i < 4; ++i) {
            xprintf("%12.7f %12.7f %12.7f %12.7f", M[i][0], M[i][1], M[i][2], M[i][3]);
        }
    }
    LPCVOID chain_c = v_getAddressPointer(hProcess, client_dll + 0x73A574);
    float x = v_getFloatByPoint(hProcess, chain_c + 0x124);
    float y = v_getFloatByPoint(hProcess, chain_c + 0x128);
    float z = v_getFloatByPoint(hProcess, chain_c + 0x12C);
    update_struct.is_player_init = 1;
    update_struct.player.x = x;
    update_struct.player.y = y;
    update_struct.player.z = z;

    int idx = 0;
    update_struct.objlist.min_dis = 1000000;
    update_struct.objlist.min_dis_index = -1;
    update_struct.objlist.min_dis_arrow = 1000000;
    update_struct.objlist.min_dis_arrow_index = -1;
    // DWORD chain_start_addr = v_getDWORDByPoint(hProcess, (DWORD)client_dll + 0x74A564);
    // DWORD chain_end_addr = v_getDWORDByPoint(hProcess, (DWORD)client_dll + 0x74A564 + 4);
    DWORD chain_start_addr = (DWORD)client_dll + 0x73A574;
    ChainPoint chain_curr_c = v_getChainPoint(hProcess, chain_start_addr);
    for (int i = 0; i < 1000; ++i) {
        update_struct.objlist.length = idx;
        if (chain_curr_c.next){
            int diff = chain_curr_c.next - chain_start_addr;
            chain_curr_c = v_getChainPoint(hProcess, chain_curr_c.next);
            ChainPoint chain_curr_s = v_getChainPoint(hProcess, (DWORD)server_dll + 0x7E0774 + diff);
            float x = v_getFloatByPoint(hProcess, (LPVOID)(chain_curr_c.addr + 0x124));
            float y = v_getFloatByPoint(hProcess, (LPVOID)(chain_curr_c.addr + 0x128));
            float z = v_getFloatByPoint(hProcess, (LPVOID)(chain_curr_c.addr + 0x12C));
            int tp = v_getIntByPoint(hProcess, (LPVOID)(chain_curr_c.addr + 0xe4));
            if (tp == 0){ continue; }
            if (tp == 2){ continue; }
            if (abs(x) < 0.01 && abs(y) < 0.01 && abs(z) < 0.01){ continue; }
            int is1;
            if (chain_curr_s.addr){
                is1 = v_getIntByPoint(hProcess, (LPVOID)chain_curr_s.addr + 0xEC) > 1 ? 1 : 0;
            }else{
                is1 = v_getIntByPoint(hProcess, (LPVOID)(chain_curr_c.addr + 0x164)) == 1;
            }
            if (!is1){ continue; }
            update_struct.objlist.o[idx].x = x;
            update_struct.objlist.o[idx].y = y;
            update_struct.objlist.o[idx].z = z;
            int hp = v_getIntByPoint(hProcess, (LPVOID)(chain_curr_s.addr + 0xEC));
            v_XYZtoRect(&update_struct.objlist.o[idx], M);
            if (update_struct.objlist.o[idx].can_show){
                sprintf(update_struct.objlist.o[idx].objmsg, "[%d]=[%0.f]", hp, update_struct.objlist.o[idx].dis);
                if (update_struct.objlist.min_dis_arrow > update_struct.objlist.o[idx].dis_arrow){
                    update_struct.objlist.min_dis_arrow = update_struct.objlist.o[idx].dis_arrow;
                    update_struct.objlist.min_dis_arrow_index = idx;
                }
                if (update_struct.objlist.min_dis > update_struct.objlist.o[idx].dis){
                    update_struct.objlist.min_dis = update_struct.objlist.o[idx].dis;
                    update_struct.objlist.min_dis_index = idx;
                }
                update_struct.objlist.o[idx].draw_line_idx = 0;
                update_struct.objlist.length = ++idx;
            }
        }else{
            break;
        }
    }
    // 测试获取骨骼点
    // gplists.gplist[0].length = 0;
    // for (int i = 0; i < POINT_LEN; ++i) {
    //     // BoneXYZ bxyz = v_getBoneXYZ(hProcess, (DWORD)(0x30*i+0x3DD25660));
    //     if (abs(bxyz.x) < 0.01 && abs(bxyz.y) < 0.01 && abs(bxyz.z) < 0.01){ break; }
    //     gplists.gplist[0].length = gplists.gplist[0].length + 1;
    //     gplists.gplist[0].o[i].x = bxyz.x;
    //     gplists.gplist[0].o[i].y = bxyz.y;
    //     gplists.gplist[0].o[i].z = bxyz.z;
    //     sprintf(gplists.gplist[0].o[i].objmsg, "%d", i);
    //     v_XYZtoPoint(&gplists.gplist[0].o[i], M);
    // }
    if (update_struct.objlist.min_dis_arrow_index != -1){
        int idx = update_struct.objlist.min_dis_index;
        int idx_a = update_struct.objlist.min_dis_arrow_index;
        int shiftx;
        int shifty;
        if (update_struct.objlist.o[idx_a].dis_arrow < 200){ // 距离远的根据屏幕坐标与中心点的距离,那个框近移动到哪个框的位置
            update_struct.objlist.o[idx_a].draw_line_idx = 1;
            float dx = update_struct.objlist.o[idx_a].dis_x;
            float dy = update_struct.objlist.o[idx_a].dis_y;
            shiftx = (abs(dx) < 3) ? (int)(dx) : (int)(dx/3);
            shifty = (abs(dy) < 4) ? (int)(dy) : (int)(dy/4);
        }
        if (get_dict_int("VK_F1") && get_dict_int("left_mousedown") && update_struct.follow_show_hidden && IsWindowFocused(update_struct.follow_show_hidden)){
            if (update_struct.objlist.o[idx_a].dis_arrow < 200){
                POINT currpos = { 0, 0 };
                GetCursorPos(&currpos);
                currpos.x -= shiftx;
                currpos.y -= shifty;
                SetCursorPos(currpos.x, currpos.y);
            }
        }
    }
}





















// opengl绘制
#pragma comment(lib,"opengl32")
#pragma comment(lib,"glu32")
#pragma comment(lib,"dwmapi")
#include <windows.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <dwmapi.h>
HRESULT DwmEnableBlurBehindWindow( HWND hWnd, const DWM_BLURBEHIND *pBlurBehind );
HDC gl_hdc = NULL;
void GLInitialize(HWND hwnd) { DWM_BLURBEHIND bb = {0}; HRGN hRgn = CreateRectRgn(0,0,-1,-1); bb.dwFlags = DWM_BB_ENABLE | DWM_BB_BLURREGION; bb.hRgnBlur = hRgn; bb.fEnable = TRUE; DwmEnableBlurBehindWindow(hwnd, &bb); HDC hdc = GetDC(hwnd); gl_hdc = hdc; PIXELFORMATDESCRIPTOR pfd = { sizeof(PIXELFORMATDESCRIPTOR),1, PFD_DRAW_TO_WINDOW|PFD_SUPPORT_OPENGL|PFD_DOUBLEBUFFER, PFD_TYPE_RGBA,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,8,0,0,0,0,0 }; int pixelFormat = ChoosePixelFormat(hdc, &pfd); SetPixelFormat(hdc, pixelFormat, &pfd); HGLRC hglrc = wglCreateContext(hdc); wglMakeCurrent(hdc, hglrc); }
#define C_r 255
#define C_g 0
#define C_b 0
#define C_a 200
#define C_R 255
#define C_G 255
#define C_B 255
#define C_A 200
GLubyte charPixelList[128][11][6][4]={[32]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[33]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[34]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[35]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[36]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[37]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[38]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[39]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[40]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[41]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[42]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[43]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[44]={{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[45]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[46]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[47]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[48]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[49]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[50]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[51]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[52]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[53]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[54]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[55]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[56]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[57]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[58]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[59]={{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[60]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[61]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[62]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[63]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[64]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[65]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[66]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[67]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[68]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[69]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[70]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[71]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[72]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[73]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[74]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[75]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[76]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[77]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[78]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[79]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[80]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[81]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[82]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[83]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[84]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[85]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[86]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[87]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[88]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[89]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[90]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[91]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[92]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[93]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[94]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[95]={{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[96]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[97]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[98]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[99]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[100]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[101]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[102]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[103]={{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[104]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[105]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[106]={{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[107]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[108]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[109]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[110]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[111]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[112]={{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[113]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[114]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[115]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[116]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[117]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[118]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[119]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[120]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[121]={{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[122]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[123]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[124]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[125]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},[126]={{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A},{C_r,C_g,C_b,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},{{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A},{C_R,C_G,C_B,C_A}},},};
// 窗口内的坐标 xxyy 转换成屏幕坐标
int X2X(int x){ return x - update_struct.twin.L; }
int Y2Y(int y){ return y - update_struct.twin.T + update_struct.twin.rH - TITLE_HEIGHT/2; }
void GLDrawBitmapTextW(char *str, int x, int y) { int target_x = X2X(x); int target_y = Y2Y(y) + 11; int idx = 0; int len = strlen(str); for (int i = 0; i < len; ++i) { glRasterPos2i(target_x + 6 * (idx++), target_y); glDrawPixels(6, 11, GL_RGBA, GL_UNSIGNED_BYTE, charPixelList[str[i]]); } }
void GLDrawBitmapTextL(char *str, int x, int y) { int target_x = x; int target_y = y + update_struct.twin.rH + 11; int idx = 0; int len = strlen(str); for (int i = 0; i < len; ++i) { glRasterPos2i(target_x + 6 * (idx++), target_y); glDrawPixels(6, 11, GL_RGBA, GL_UNSIGNED_BYTE, charPixelList[str[i]]); } }
int GLDrawRect(struct Objecter p){
    int Gx = (int)update_struct.twin.Gx;
    int Gy = (int)update_struct.twin.Gy;
    int rH = (int)update_struct.twin.rH;
    int x1 = X2X(p.x1);
    int y1 = Y2Y(p.y1);
    int x2 = X2X(p.x2);
    int y2 = Y2Y(p.y2);
    int ax = X2X(p.ax);
    int ay = Y2Y(p.ay);
    glColor4f(1.0, 0.0, 0.0, 0.5);
    if (p.draw_line_idx){
        // glVertex2i(Gx, Y2Y(0));
        glVertex2i(Gx, Gy+rH);
        glVertex2i(ax, ay);
    }
    glVertex2i(x1, y2);
    glVertex2i(x2, y2);
    glVertex2i(x2, y2);
    glVertex2i(x2, y1);
    glVertex2i(x2, y1);
    glVertex2i(x1, y1);
    glVertex2i(x1, y1);
    glVertex2i(x1, y2);
}
int GLDrawPoint(struct Objecter p){
    int ax = X2X(p.ax);
    int ay = Y2Y(p.ay);
    glVertex2i(ax, ay);
    glVertex2i(ax+1, ay+1);
}
int GLDrawCenterCircle(int r){ int ax = update_struct.twin.Gx; int ay = update_struct.twin.Gy+update_struct.twin.rH; glColor3f(0.5, 0.5, 0.5); float angle = 0.0f; float angleIncrement = (2 * M_PI) / 100; glLineWidth(1); glBegin(GL_LINE_LOOP); for (int i = 0; i < 100; i++) { int x = (int)(ax + r * cos(angle)); int y = (int)(ay + r * sin(angle)); glVertex2i(x, y); angle += angleIncrement; } glEnd(); }
int GLDrawWindow(){ int ax = update_struct.twin.Gx; int ay = update_struct.twin.Gy+update_struct.twin.rH; int h = update_struct.twin.Gy; glColor3f(0.5, 0.5, 0.5); glLineWidth(1); glBegin(GL_LINE_LOOP); glVertex2i(1, ay-h+1); glVertex2i(ax+ax, ay-h+1); glVertex2i(ax+ax, ay+h); glVertex2i(1, ay+h); glEnd(); }
void GLRenderInit(){ glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); glLoadIdentity(); glEnable(GL_BLEND); glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); int screenWidth = GetSystemMetrics(SM_CXSCREEN); int screenHeight = GetSystemMetrics(SM_CYSCREEN); glViewport(0, 0, screenWidth, screenHeight); glMatrixMode(GL_PROJECTION); glLoadIdentity(); gluOrtho2D(0, screenWidth, screenHeight, 0); glMatrixMode(GL_MODELVIEW); glLoadIdentity(); }
void GLRenderEnd(){ glDisable(GL_BLEND); glFlush(); }
void GLRender() {
    GLRenderInit();
    glLineWidth(2);
    if (get_dict_int("VK_F2")){
        glBegin(GL_LINES);
        for (int i = 0; i < update_struct.objlist.length; ++i) {
            if (update_struct.objlist.o[i].can_show){
                GLDrawRect(update_struct.objlist.o[i]);
            }
        }
        glEnd();
        for (int i = 0; i < update_struct.objlist.length; ++i) {
            if (update_struct.objlist.o[i].can_show){
                GLDrawBitmapTextW(update_struct.objlist.o[i].objmsg, update_struct.objlist.o[i].x1, update_struct.objlist.o[i].y2);
            }
        }
    }
    // for (int i = 0; i < gplists.gplist[0].length; ++i) {
    //     GLDrawBitmapTextW(gplists.gplist[0].o[i].objmsg, gplists.gplist[0].o[i].ax, gplists.gplist[0].o[i].ay);
    // }
    // glBegin(GL_LINE_STRIP);
    // for (int i = 0; i < POINT_LEN; ++i){
    //     GLDrawPoint(gplists.gplist[0].o[i]);
    // }
    // glEnd();

    // 胖子坐标
    // glBegin(GL_LINES);
    // struct Objecter p;
    // p = gplists.gplist[0].o[71]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[17]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[17]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[16]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[16]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[6];  glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[6];  glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[66]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[66]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[12]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[16]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[9];  glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[9];  glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[65]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[65]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[74]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[16]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[0];  glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[0];  glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[21]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[21]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[39]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[39]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[40]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[0];  glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[13]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[13]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[18]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[18]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // p = gplists.gplist[0].o[19]; glVertex2i(X2X(p.ax), Y2Y(p.ay));
    // glEnd();

    // 用于测试，绘制透明窗口的边框和中心一个圆球用于快速测试
    if (get_dict_int("VK_F1")){
        GLDrawCenterCircle(200);
    }
    static char buffer[20];
    sprintf(buffer, "F1 aim: %s", get_dict_int("VK_F1") ? "on" : "off");
    GLDrawBitmapTextL(buffer, 10, 10);
    sprintf(buffer, "F2 esp: %s", get_dict_int("VK_F2") ? "on" : "off");
    GLDrawBitmapTextL(buffer, 10, 10+11);
    GLDrawWindow();
    x2printf("1-1:", "%f", update_struct.player.x);
    x2printf("1-2:", "%f", update_struct.player.y);
    x2printf("1-3:", "%f", update_struct.player.z);
    x2printf("2-1:", "%0.f", update_struct.twin.L);
    x2printf("2-2:", "%0.f", update_struct.twin.T);
    x2printf("2-3:", "%0.f", update_struct.twin.R);
    x2printf("2-4:", "%0.f", update_struct.twin.B);
    GLRenderEnd();
}
LRESULT CALLBACK GLWindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
        case WM_DESTROY:
            ReleaseDC(hwnd, gl_hdc); PostQuitMessage(0);
            return 0;
        case WM_PAINT:
            if (0x8000 & GetKeyState(VK_LBUTTON)){ set_dict("left_mousedown", 1); }else{ set_dict("left_mousedown", 0); }
            if (0x8000 & GetKeyState(VK_RBUTTON)){ set_dict("right_mousedown", 1); }else{ set_dict("right_mousedown", 0); }
            getTargetWindowRect();
            updateMatrix(0);
            GLRender();
            SwapBuffers(gl_hdc);
            InvalidateRect(hwnd, NULL, FALSE);
            return 0;
        default:
            return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
}




























void InitModule(HANDLE hProcess){
    init_global_dict();
    char *dll_list[] = {
        "engine.dll",
        "client.dll",
        "server.dll",
    };
    int length = sizeof(dll_list) / sizeof(dll_list[0]);
    for (int i = 0; i < length; i++) {
        set_dict(dll_list[i], v_GetDllBaseAddress(hProcess, TEXT(dll_list[i])));
        xprintf("%s:[%p]", dll_list[i], get_dict(dll_list[i]));
    }
    set_dict("VK_F1", 1);
    set_dict("VK_F2", 1);
}

int is_start = FALSE;
#define TITILE_LENGTH 5
void generate_random_string(char *str, int length) { const char charset[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; for (int i = 0; i < length; i++) { int key = rand() % (sizeof(charset) - 1); str[i] = charset[key]; } str[length] = '\0'; }
void InitWindow(HANDLE hProcess) { xprintf("hProcess:%p", hProcess); update_struct.hProcess = hProcess; update_struct.follow_show_hidden = v_GetMainWindowHandleFromProcessHandle(hProcess); getTargetWindowRect(); updateMatrix(1); is_start = TRUE; HINSTANCE hInstance = NULL; WNDCLASS wc = {0}; wc.lpfnWndProc = GLWindowProc; wc.hInstance = hInstance; char random_string[TITILE_LENGTH + 1]; generate_random_string(random_string, TITILE_LENGTH); wc.lpszClassName = random_string; RegisterClass(&wc); int screenWidth = GetSystemMetrics(SM_CXSCREEN)-1; int screenHeight = GetSystemMetrics(SM_CYSCREEN); xprintf("%d", screenWidth); xprintf("%d", screenHeight); HWND hwnd = CreateWindowEx( WS_EX_LAYERED | WS_EX_TRANSPARENT | WS_EX_TOPMOST | WS_EX_TOOLWINDOW, random_string, NULL, WS_POPUP, 0, 0, screenWidth, screenHeight, NULL, NULL, hInstance, NULL ); update_struct.overlay = hwnd; HMODULE hmod = LoadLibrary("user32.dll"); typedef BOOL (FAR WINAPI *LAYERFUNC)(HWND,COLORREF,BYTE,DWORD); LAYERFUNC SetLayer; SetLayer=(LAYERFUNC)GetProcAddress(hmod,"SetLayeredWindowAttributes"); SetLayer(hwnd, RGB(255, 255, 255), 0, LWA_COLORKEY); if (wc.lpfnWndProc == GLWindowProc){ GLInitialize(hwnd); } SetWindowPos(hwnd, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE); ShowWindow(hwnd, SW_SHOW); MSG msg; while (GetMessage(&msg, NULL, 0, 0)) { TranslateMessage(&msg); DispatchMessage(&msg); } }
DWORD WINAPI ThreadProc(LPVOID lpThreadParameter){
    if (is_start){ return; } 
    HANDLE hProcess = v_FindProcessByName("left4dead2.exe");
    if (!hProcess){
        xprintf("not find left4dead2.exe");
        return 0;
    }
    InitModule(hProcess);
    InitWindow(hProcess);
}

















// #include <stdio.h>
// #include <winsock2.h>
// #include <windows.h>
// #pragma comment(lib,"ws2_32")
// USHORT C_DBG_PORT = 18080;
// void _AddLogWindow(TCHAR*);
// void start_pipe_server(){ WSADATA data; WSAStartup(MAKEWORD(2,2),&data); SOCKET listener = socket(AF_INET,SOCK_STREAM,0); SOCKADDR_IN addr; addr.sin_family = AF_INET; addr.sin_port = htons(C_DBG_PORT); addr.sin_addr.s_addr = ADDR_ANY; bind(listener, (SOCKADDR*)&addr, sizeof(addr)); listen(listener, SOMAXCONN); printf("[*] debugger start.\n"); char request[1024*7]; SOCKET client; int index=0; while(TRUE){ memset(request, 0, sizeof(request)); client = accept(listener,NULL,NULL); recv(client, request, 1024*7, 0); _AddLogWindow(request); closesocket(client); } WSACleanup(); }
int v_inject() {
    HANDLE hThread;
    if (hThread = CreateThread(NULL, 0, ThreadProc, NULL, 0, NULL)){ CloseHandle(hThread); }
}

#include <stdio.h>
#include <windows.h>
int xprintf(char *format, ...);
int x2printf(char* name, char *format, ...);
char* get_window_text_by_name(char* name);
void set_window_text_by_name(char* name, char* text);
int test(){
    v_inject();
}
#if defined(__x86_64__) || defined(_M_X64) || defined(__ppc64__)
    #define VVV_TITLE "vvv-64bit"
#elif defined(__i386__) || defined(_M_IX86)
    #define VVV_TITLE "vvv-32bit"
#else
    #define VVV_TITLE "vvv-Unknown"
#endif
#define STYLE_EDIT_TEXT (WS_CHILD | WS_VISIBLE | ES_LEFT | ES_MULTILINE | ES_AUTOHSCROLL | ES_AUTOVSCROLL)
#define STYLE_EDIT_INPT (WS_CHILD | WS_VISIBLE | WS_BORDER | ES_LEFT | ES_AUTOHSCROLL)
#define STYLE_EDIT_BUTN (WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON)
#define SEND (-100000)
#define WINNUM 1024
struct {
    struct { int islog; int wtype; char* stype; char* text; int L; int T; int W; int H; int (*f)(); } w[WINNUM];
    struct { int t; int (*f)(); } t;
} wins = {
    .w = {
        {1, STYLE_EDIT_TEXT, "edit",   NULL,        0,    160,  SEND, SEND-160},
        {0, STYLE_EDIT_BUTN, "button", "tool1", 150*0,      0,  140,   20, test},
        {0, STYLE_EDIT_INPT, "edit",   "1-1:",  150*0,  20+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "1-2:",  150*1,  20+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "1-3:",  150*2,  20+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "1-4:",  150*3,  20+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "2-1:",  150*0,  40+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "2-2:",  150*1,  40+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "2-3:",  150*2,  40+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "2-4:",  150*3,  40+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "3-1:",  150*0,  60+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "3-2:",  150*1,  60+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "3-3:",  150*2,  60+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "3-4:",  150*3,  60+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "4-1:",  150*0,  80+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "4-2:",  150*1,  80+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "4-3:",  150*2,  80+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "4-4:",  150*3,  80+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "5-1:",  150*0, 100+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "5-2:",  150*1, 100+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "5-3:",  150*2, 100+20,  100,   20},
        {0, STYLE_EDIT_INPT, "edit",   "5-4:",  150*3, 100+20,  100,   20},
    }
};
// void _AddLogWindow(TCHAR*);
// int xprintf(char *format, ...){ char log[1024*7] = {0}; va_list args; va_start(args, format); vsprintf(log, format, args); va_end(args); _AddLogWindow(log); return 0; }
TCHAR outBuffer[1024*100];
HWND outhwnd;
void _AddLogWindow(TCHAR* addstr){ if (!outhwnd){ return; } GetWindowText(outhwnd, outBuffer, 1024*100); if (strlen(outBuffer) == 0){ sprintf(outBuffer, "%s", addstr); }else{ sprintf(outBuffer, "%s\r\n%s", outBuffer, addstr); } SetWindowText(outhwnd, outBuffer); }
int get_wins_len(){ for (int i = 0; i < WINNUM; ++i) { if (!wins.w[i].wtype){ return i; } } return -1; }
int get_idx_by_name(char* name){ int wlen = get_wins_len(); for (int i = 0; i < wlen; ++i) { if (wins.w[i].wtype == STYLE_EDIT_INPT && strcmp(wins.w[i].text, name) == 0){ return i; } } return 3; }
static HWND hwndChild[WINNUM];
int init_window(HWND hwnd, HINSTANCE hInst, int idx){ int wtype = wins.w[idx].wtype; char* stype = wins.w[idx].stype; char* text = wins.w[idx].text; switch (wtype){ case STYLE_EDIT_TEXT: case STYLE_EDIT_INPT: text = NULL; case STYLE_EDIT_BUTN: hwndChild[idx] = CreateWindow(TEXT(stype), text, wtype, 0,0,0,0, hwnd, (HMENU)idx, hInst, NULL); break; } if (wins.w[idx].islog){ outhwnd = hwndChild[idx]; } }
int init_move_window(HWND hwnd, int idx){ RECT rect; GetClientRect(hwnd, &rect); int L = wins.w[idx].L; int T = wins.w[idx].T; int W = wins.w[idx].W; int H = wins.w[idx].H; if (wins.w[idx].wtype == STYLE_EDIT_INPT){ L += 40; } if (W <= SEND){ W = rect.right; } if (H <= SEND){ H = rect.bottom+(H- SEND); } MoveWindow(hwndChild[idx], L, T, W, H, TRUE); }
struct V_LIST { int length; int o[WINNUM]; };
int init_paint(HWND hwnd, struct V_LIST v){ PAINTSTRUCT ps; HDC hdc = BeginPaint(hwnd, &ps); HBRUSH hBrush = (HBRUSH)GetStockObject(NULL_BRUSH); HPEN hPen = (HPEN)GetStockObject(BLACK_PEN); SelectObject(hdc, hPen); SelectObject(hdc, hBrush); for (int i = 0; i < v.length; ++i) { int idx = v.o[i]; int L = wins.w[idx].L; int T = wins.w[idx].T; int W = wins.w[idx].W; int H = wins.w[idx].H; Rectangle(hdc, L, T, W+L, H+T); char* text = wins.w[idx].text; SetBkMode(hdc, TRANSPARENT); TextOut(hdc, L+5, T+2, text, lstrlen(text)); } DeleteObject(hBrush); DeleteObject(hPen); EndPaint(hwnd, &ps); }
#define INPUT_TEXT_SZ 1024
char* get_window_text(int idx){ static char szInput[INPUT_TEXT_SZ]; GetWindowText(hwndChild[idx], szInput, INPUT_TEXT_SZ); return szInput; }
char* get_window_text_by_name(char* name){ return get_window_text(get_idx_by_name(name)); }
void set_window_text(int idx, char* text){ SetWindowText(hwndChild[idx], text); }
void set_window_text_by_name(char* name, char* text){ set_window_text(get_idx_by_name(name), text); }
int logger_toggle = 1; // 快捷键 Ctrl+END 控制 x2printf 函数是否输出
int x2printf(char* name, char *format, ...){ if (!logger_toggle){ return; }char log[1024*7] = {0}; va_list args; va_start(args, format); vsprintf(log, format, args); va_end(args); set_window_text_by_name(name, log); return 0; }
int _WindowSwitch(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam ){ int wlen = get_wins_len(); switch(message) { case WM_CREATE: { for (int i = 0; i < wlen; ++i) { init_window(hwnd, ((LPCREATESTRUCT) lParam) -> hInstance, i); }if (wins.t.t){ SetTimer(hwnd, 1, wins.t.t, NULL); } return 0; } case WM_SIZE: { for (int i = 0; i < wlen; ++i) { init_move_window(hwnd, i); } return 0; } case WM_TIMER: { wins.t.f(); } case WM_PAINT: { struct V_LIST v = {0}; v.length = 0; for (int i = 0; i < wlen; ++i) { if (wins.w[i].text != NULL && wins.w[i].wtype == STYLE_EDIT_INPT) { v.o[v.length] = i; v.length++; }} init_paint(hwnd, v); return 0; } case WM_COMMAND: { int wpram = LOWORD(wParam);for (int i = 0; i < wlen; ++i) { if (wpram == i && wins.w[i].wtype == STYLE_EDIT_BUTN) {wins.w[i].f();return 0;} } return 0; } case WM_DESTROY: { PostQuitMessage(0); return 0; } } }
DWORD  WINAPI _NewThread(LPARAM lParam );
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
#define MAIN_TOP 100
#define MAIN_LEFT 100
#define MAIN_W 607
#define MAIN_H 600
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, int iCmdShow ){ static TCHAR szAppName[] = TEXT("v"); static HWND hwnd; MSG msg; WNDCLASS wndclass; wndclass.lpfnWndProc = WndProc; wndclass.style = CS_HREDRAW | CS_VREDRAW; wndclass.hInstance = hInstance; wndclass.cbClsExtra = 0; wndclass.cbWndExtra = 0; wndclass.hbrBackground = CreateSolidBrush(RGB(236, 233, 216)); wndclass.hCursor = LoadCursor(NULL, IDC_ARROW); wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION); wndclass.lpszClassName = szAppName; wndclass.lpszMenuName = NULL;  if (!RegisterClass(&wndclass)) { MessageBox(NULL, TEXT("cannot create regist window."), TEXT("error"), MB_OK | MB_ICONERROR); return 0; } hwnd = CreateWindow(szAppName, TEXT(VVV_TITLE), WS_OVERLAPPEDWINDOW, MAIN_LEFT, MAIN_TOP, MAIN_W, MAIN_H, NULL, NULL, hInstance, NULL); CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)_NewThread, hwnd, 0, 0);  ShowWindow(hwnd, iCmdShow); UpdateWindow(hwnd); while (GetMessage(&msg, NULL, 0, 0)){ TranslateMessage(&msg); DispatchMessage(&msg); } return msg.wParam; }
LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam ) { _WindowSwitch(hwnd, message, wParam, lParam); return DefWindowProc(hwnd, message, wParam, lParam); }
DWORD  WINAPI _NewThread(LPARAM lParam ){
    v_inject();
    // CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)start_pipe_server, (HWND)lParam, 0, 0); 
    // RegisterHotKey
    MSG  msg = { 0 };
    RegisterHotKey(NULL, 0x23, MOD_CONTROL, VK_HOME);
    RegisterHotKey(NULL, 0x24, MOD_CONTROL, VK_END);
    RegisterHotKey(NULL, 0x31, 0, VK_F1);
    RegisterHotKey(NULL, 0x32, 0, VK_F2);
    while (GetMessage(&msg, 0, 0, 0)){
        if (WM_HOTKEY == msg.message){
            if (VK_HOME == HIWORD(msg.lParam)){ IsWindowVisible((HANDLE)lParam) ? ShowWindow((HANDLE)lParam, SW_HIDE) : ShowWindow((HANDLE)lParam, SW_RESTORE); }
            if (VK_END == HIWORD(msg.lParam)){ logger_toggle = logger_toggle ? 0 : 1; }
            if ('W' == HIWORD(msg.lParam)){ PostMessage((HANDLE)lParam, WM_QUIT, 0, 0); }
            if (VK_F1 == HIWORD(msg.lParam)){ set_dict("VK_F1", get_dict_int("VK_F1") ? 0 : 1); }
            if (VK_F2 == HIWORD(msg.lParam)){ set_dict("VK_F2", get_dict_int("VK_F2") ? 0 : 1); }
        }
    }
}
]]>
    </content>
    <tabTrigger>ccc</tabTrigger>
    <scope>source.c</scope>
</snippet>