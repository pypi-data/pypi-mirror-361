name: Release on Main Merge

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_tag.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Get latest version
        id: get_version
        run: |
          version=$(curl -s https://pypi.org/pypi/judgeval/json | jq -r .info.version)
          echo "latest_version=$version" >> $GITHUB_OUTPUT

      - name: Bump version and create new tag
        id: bump_tag
        run: |
          latest_version=${{ steps.get_version.outputs.latest_version }}
          echo "Latest version: $latest_version"

          # Extract version numbers
          IFS='.' read -r major minor patch <<< "$latest_version"

          # Bump patch version
          patch=$((patch + 1))
          new_version="$major.$minor.$patch"

          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v$new_version
          git push origin v$new_version

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump_tag.outputs.new_version }}
          generate_release_notes: true
          body: |
            You can find this package release on PyPI: https://pypi.org/project/judgeval/${{ steps.bump_tag.outputs.new_version }}/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Bump pyproject.toml version
        run: |
          python update_version.py ${{ steps.bump_tag.outputs.new_version }}

      - name: Build PyPI package
        run: |
          python -m pip install --upgrade build
          python -m build

      - name: Create PyPI release
        run: |
          python -m pip install --upgrade twine
          python -m twine upload --repository pypi -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }} dist/*

  cleanup:
    needs: release
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Delete tag and release
        run: |
          gh release delete v${{ needs.release.outputs.new_version }} --yes
          git push --delete origin v${{ needs.release.outputs.new_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
