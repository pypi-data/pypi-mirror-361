Metadata-Version: 2.4
Name: caelum-sys
Version: 0.1.0
Summary: A human-friendly system automation layer for scripting and AI agents
Author: Your Name
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: Topic :: System :: Shells
Classifier: License :: OSI Approved :: MIT License
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: psutil
Requires-Dist: pyautogui
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# caelum-sys

**caelum-sys** is a human-friendly system automation toolkit for Python.  
It allows natural language commands to control local system behavior â€” perfect for scripting, AI agents, or personal assistants like Caelum.

---

## âœ¨ Features

- ðŸ”Œ Plugin-based architecture for easy command extension
- ðŸ§  `do("open notepad")` style control
- ðŸ§ª Fully tested with `pytest`
- ðŸ§© Built-in plugins: file ops, browser control, Spotify, system stats, screenshots
- ðŸ’¬ Designed for LLM integration (text in, result out)

---

## ðŸ“¦ Installation
pip install caelum-sys

Or for local development:
git clone https://github.com/blackbeardjw/caelum-sys.git
cd caelum-sys
pip install -e .

ðŸš€ Usage
Python:
    from caelum_sys import do

    do("open notepad")
    do("play spotify chill vibes")
    do("list files in Downloads")

CLI:
    caelum-sys "get cpu usage"
    caelum-sys "open browser"

| Plugin       | Example Command                              |
| ------------ | -------------------------------------------- |
| Spotify      | `play spotify chill vibes`                   |
| Filesystem   | `list files in .`, `delete file example.txt` |
| Browser      | `open browser`, `open url github.com`        |
| Screenshot   | `take screenshot`                            |
| System Stats | `get cpu usage`, `get memory stats`          |


ðŸ§© Adding Your Own Plugin
Create a .py file in caelum_sys/plugins/ and use the decorator:
    from caelum_sys.registry import register_command

    @register_command("run my task")
    def my_command(command: str):
        return "Command executed!"

ðŸ§ª Running Tests
    pytest tests

    All plugins are safely mocked (no system damage during testing).
