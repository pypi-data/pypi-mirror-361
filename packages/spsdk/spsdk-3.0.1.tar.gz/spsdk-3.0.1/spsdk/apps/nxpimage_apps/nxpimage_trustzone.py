#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2025 NXP
#
# SPDX-License-Identifier: BSD-3-Clause
"""Nxpimage Trustzone group."""

import click

from spsdk.apps.utils.common_cli_options import (
    SpsdkClickGroup,
    spsdk_config_option,
    spsdk_family_option,
    spsdk_output_option,
)
from spsdk.image.trustzone import TrustZone
from spsdk.utils.config import Config
from spsdk.utils.family import FamilyRevision
from spsdk.utils.misc import get_printable_path, write_file


@click.group(name="tz", cls=SpsdkClickGroup)
def tz_group() -> None:
    """Group of sub-commands related to Trust Zone."""


@tz_group.command(name="export", no_args_is_help=True)
@spsdk_config_option(klass=TrustZone)
def tz_export_command(config: Config) -> None:
    """Generate TrustZone Image from YAML/JSON configuration.

    The configuration template files could be generated by subcommand 'get-template'.
    """
    tz_export(config)


def tz_export(config: Config) -> None:
    """Generate TrustZone Image from YAML/JSON configuration."""
    trust_zone = TrustZone.load_from_config(config)
    tz_data = trust_zone.export()
    output_file = config.get_output_file_name("tzpOutputFile")
    write_file(tz_data, output_file, mode="wb")
    click.echo(f"Success. (Trust Zone binary: {get_printable_path(output_file)} created.)")


@tz_group.command(name="get-template", no_args_is_help=True)
@spsdk_family_option(families=TrustZone.get_supported_families())
@spsdk_output_option(force=True)
def tz_get_template_command(family: FamilyRevision, output: str) -> None:
    """Create template of configuration in YAML format.

    The template file name is specified as argument of this command.
    """
    tz_get_template(family, output)


def tz_get_template(family: FamilyRevision, output: str) -> None:
    """Create template of configuration in YAML format."""
    write_file(TrustZone.get_config_template(family), output)
    click.echo(f"Trust zone template file has been created: {output}.")
