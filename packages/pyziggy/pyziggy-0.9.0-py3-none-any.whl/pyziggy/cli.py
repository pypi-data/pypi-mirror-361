# pyziggy - Run automation scripts that interact with zigbee2mqtt.
# Copyright (C) 2025 Attila Szarvas
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

from __future__ import annotations

import argparse
import logging
import os
from pathlib import Path
from typing import List

from .run import run, PyziggyConfig


def parent_exists(parser, arg):
    path = Path(os.path.expanduser(arg))

    if not path.parent.exists():
        parser.error(
            f"The directory '{path.parent.absolute()}' does not exist!"
        )

    return path


def run_cmd(args, pre_run_check_only=False):
    project_dir = Path(args.devices_client_module).parent
    config_file = project_dir / "config.toml"

    if not config_file.exists():
        print(
            f"Creating empty template for missing config file: {config_file}.\n"
            f"Review and edit the config file, then relaunch this command."
        )
        PyziggyConfig.write_default(config_file)
        exit(0)

    config = PyziggyConfig.load(config_file)

    if config is None:
        print(f"Failed to load config file: {config_file.absolute()}")
        exit(1)

    devices_client_module_path = Path(args.devices_client_module)

    if not devices_client_module_path.exists():
        print(
            f"The specified devices client module {devices_client_module_path.absolute()} is missing\n"
            f"Using template to generate {devices_client_module_path.absolute()}.\n\n"
            f"To add your modifications, open the directory {project_dir.absolute()} as a Python project "
            f"and edit {devices_client_module_path.absolute()}"
        )

        module_code = """from pyziggy_autogenerate.available_devices import AvailableDevices

devices = AvailableDevices()"""

        with open(devices_client_module_path, "w") as f:
            f.write(module_code)

    run(
        devices_client_module_path,
        config,
        skip_initial_query=args.skip_initial_query if not pre_run_check_only else False,
        no_mypy=args.no_mypy if not pre_run_check_only else False,
        pre_run_check_only=pre_run_check_only
    )


def pre_run_check_cmd(args):
    run_cmd(args, pre_run_check_only=True)


def main(args: List[str] | None = None):
    parser = argparse.ArgumentParser(
        description="Maintains communications with an MQTT server and can run "
                    "automations. It can automatically generate an automation "
                    "project. It only needs an empty project directory and a "
                    "name for the project Python file. "
                    ""
                    "E.g. `pyziggy run path/to/empty_home_automation_dir/automation.py`",
    )
    parser.add_argument(
        "-v", "--verbose", help="enables debug level logging", action="store_true"
    )
    subparsers = parser.add_subparsers(
        title="subcommands", description="valid subcommands", required=True
    )

    parser_run = subparsers.add_parser(
        "run",
        help="This command does it all. It always automatically regenerates "
             "device definitions using the information provided by the "
             "MQTT server. The definitions are saved in "
             "pyziggy_autogenerate/available_devices.py. This file "
             "will be overwritten every time this command runs. "
             ""
             "If no config.toml file is found next to the specified file, it also "
             "autogenerates an empty config template and exits. "
             ""
             "It then imports the specified module file and if it instantiates "
             "a DevicesClient object, it will launch it. "
             ""
             "If the specified module file doesn't exist, it autogenerates a "
             "template. This file however isn't always overwritten like "
             "devices.py. You shouldn't call this file devices.py, because "
             "that is used by the autogenerated device definitions as explained "
             "above.",
    )
    parser_run.set_defaults(func=run_cmd)
    parser_run.add_argument(
        "devices_client_module",
        type=lambda x: parent_exists(parser_run, x),
        help="Python module file that instantiates a DevicesClient object. "
             "For simple use-cases it should specifically instantiate an "
             "AvailableDevices(DevicesClient) object.",
    )
    parser_run.add_argument(
        "--skip_initial_query",
        help="skips querying devices states on startup",
        action="store_true",
    )
    parser_run.add_argument(
        "--no_mypy",
        help="skips running mypy on your project",
        action="store_true",
    )

    parser_check = subparsers.add_parser(
        "check",
        help="Dingdong",
    )
    parser_check.set_defaults(func=pre_run_check_cmd)
    parser_check.add_argument(
        "devices_client_module",
        type=lambda x: parent_exists(parser_run, x),
        help="Python module file that instantiates a DevicesClient object. "
             "For simple use-cases it should specifically instantiate an "
             "AvailableDevices(DevicesClient) object.",
    )

    parsed_args = parser.parse_args(args)
    logging.basicConfig(level=logging.DEBUG if parsed_args.verbose else logging.INFO)
    parsed_args.func(parsed_args)
