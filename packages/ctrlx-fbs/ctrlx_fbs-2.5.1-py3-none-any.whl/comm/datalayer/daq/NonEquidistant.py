# automatically generated by the FlatBuffers compiler, do not modify

# namespace: daq

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#  non-equidistant DAQ data
class NonEquidistant(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NonEquidistant()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNonEquidistant(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NonEquidistant
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # unique name of the non-equidistant data
    # NonEquidistant
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # array of tags for meta data
    # NonEquidistant
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.daq.Tag import Tag
            obj = Tag()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NonEquidistant
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NonEquidistant
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # array of unix epoch time (since 1.1.1970) in [ns]
    # NonEquidistant
    def TimestampsNs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # NonEquidistant
    def TimestampsNsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # NonEquidistant
    def TimestampsNsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NonEquidistant
    def TimestampsNsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # NonEquidistant
    def ArrayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # array of sampled values at the corresponding timestamps
    # NonEquidistant
    def Array(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def NonEquidistantStart(builder): builder.StartObject(5)
def Start(builder):
    return NonEquidistantStart(builder)
def NonEquidistantAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return NonEquidistantAddName(builder, name)
def NonEquidistantAddTags(builder, tags): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)
def AddTags(builder, tags):
    return NonEquidistantAddTags(builder, tags)
def NonEquidistantStartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTagsVector(builder, numElems):
    return NonEquidistantStartTagsVector(builder, numElems)
def NonEquidistantAddTimestampsNs(builder, timestampsNs): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(timestampsNs), 0)
def AddTimestampsNs(builder, timestampsNs):
    return NonEquidistantAddTimestampsNs(builder, timestampsNs)
def NonEquidistantStartTimestampsNsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartTimestampsNsVector(builder, numElems):
    return NonEquidistantStartTimestampsNsVector(builder, numElems)
def NonEquidistantAddArrayType(builder, arrayType): builder.PrependUint8Slot(3, arrayType, 0)
def AddArrayType(builder, arrayType):
    return NonEquidistantAddArrayType(builder, arrayType)
def NonEquidistantAddArray(builder, array): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(array), 0)
def AddArray(builder, array):
    return NonEquidistantAddArray(builder, array)
def NonEquidistantEnd(builder): return builder.EndObject()
def End(builder):
    return NonEquidistantEnd(builder)
import comm.datalayer.ArrayOfBool8
import comm.datalayer.ArrayOfDouble
import comm.datalayer.ArrayOfFloat32
import comm.datalayer.ArrayOfFloat64
import comm.datalayer.ArrayOfInt16
import comm.datalayer.ArrayOfInt32
import comm.datalayer.ArrayOfInt64
import comm.datalayer.ArrayOfInt8
import comm.datalayer.ArrayOfString
import comm.datalayer.ArrayOfTimestamp
import comm.datalayer.ArrayOfUInt16
import comm.datalayer.ArrayOfUInt32
import comm.datalayer.ArrayOfUInt64
import comm.datalayer.ArrayOfUInt8
import comm.datalayer.daq.Array
import comm.datalayer.daq.Tag
try:
    from typing import List, Union
except:
    pass

class NonEquidistantT(object):

    # NonEquidistantT
    def __init__(self):
        self.name = None  # type: str
        self.tags = None  # type: List[comm.datalayer.daq.Tag.TagT]
        self.timestampsNs = None  # type: List[int]
        self.arrayType = 0  # type: int
        self.array = None  # type: Union[None, comm.datalayer.ArrayOfBool8.ArrayOfBool8T, comm.datalayer.ArrayOfFloat32.ArrayOfFloat32T, comm.datalayer.ArrayOfFloat64.ArrayOfFloat64T, comm.datalayer.ArrayOfDouble.ArrayOfDoubleT, comm.datalayer.ArrayOfInt8.ArrayOfInt8T, comm.datalayer.ArrayOfInt16.ArrayOfInt16T, comm.datalayer.ArrayOfInt32.ArrayOfInt32T, comm.datalayer.ArrayOfInt64.ArrayOfInt64T, comm.datalayer.ArrayOfUInt8.ArrayOfUInt8T, comm.datalayer.ArrayOfUInt16.ArrayOfUInt16T, comm.datalayer.ArrayOfUInt32.ArrayOfUInt32T, comm.datalayer.ArrayOfUInt64.ArrayOfUInt64T, comm.datalayer.ArrayOfTimestamp.ArrayOfTimestampT, comm.datalayer.ArrayOfString.ArrayOfStringT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        nonEquidistant = NonEquidistant()
        nonEquidistant.Init(buf, pos)
        return cls.InitFromObj(nonEquidistant)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, nonEquidistant):
        x = NonEquidistantT()
        x._UnPack(nonEquidistant)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.tags == other.tags and \
            self.timestampsNs == other.timestampsNs and \
            self.arrayType == other.arrayType and \
            self.array == other.array

    # NonEquidistantT
    def _UnPack(self, nonEquidistant):
        if nonEquidistant is None:
            return
        self.name = nonEquidistant.Name()
        if not nonEquidistant.TagsIsNone():
            self.tags = []
            for i in range(nonEquidistant.TagsLength()):
                if nonEquidistant.Tags(i) is None:
                    self.tags.append(None)
                else:
                    tag_ = comm.datalayer.daq.Tag.TagT.InitFromObj(nonEquidistant.Tags(i))
                    self.tags.append(tag_)
        if not nonEquidistant.TimestampsNsIsNone():
            if np is None:
                self.timestampsNs = []
                for i in range(nonEquidistant.TimestampsNsLength()):
                    self.timestampsNs.append(nonEquidistant.TimestampsNs(i))
            else:
                self.timestampsNs = nonEquidistant.TimestampsNsAsNumpy()
        self.arrayType = nonEquidistant.ArrayType()
        self.array = comm.datalayer.daq.Array.ArrayCreator(self.arrayType, nonEquidistant.Array())

    # NonEquidistantT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(self.tags[i].Pack(builder))
            NonEquidistantStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.timestampsNs is not None:
            if np is not None and type(self.timestampsNs) is np.ndarray:
                timestampsNs = builder.CreateNumpyVector(self.timestampsNs)
            else:
                NonEquidistantStartTimestampsNsVector(builder, len(self.timestampsNs))
                for i in reversed(range(len(self.timestampsNs))):
                    builder.PrependUint64(self.timestampsNs[i])
                timestampsNs = builder.EndVector()
        if self.array is not None:
            array = self.array.Pack(builder)
        NonEquidistantStart(builder)
        if self.name is not None:
            NonEquidistantAddName(builder, name)
        if self.tags is not None:
            NonEquidistantAddTags(builder, tags)
        if self.timestampsNs is not None:
            NonEquidistantAddTimestampsNs(builder, timestampsNs)
        NonEquidistantAddArrayType(builder, self.arrayType)
        if self.array is not None:
            NonEquidistantAddArray(builder, array)
        nonEquidistant = NonEquidistantEnd(builder)
        return nonEquidistant
