name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - feat/smart-multiprocessing

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install Dependencies
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]] && [[ -d ".venv" ]]; then
            echo "Removing existing .venv directory on Windows"
            rm -rf .venv
          fi
          uv sync --all-packages --all-extras --dev

      - name: Load Cached Pre-Commit Dependencies
        id: cached-pre-commit-dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Execute Pre-Commit
        run: uv run pre-commit run --show-diff-on-failure --color=always --all-files

  test:
    strategy:
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        python: ${{ github.event_name == 'pull_request' && fromJSON('["3.13"]') || fromJSON('["3.10", "3.11", "3.12", "3.13"]') }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install Python
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ matrix.python }}

      - name: Cache Python Dependencies
        id: python-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: python-dependencies-${{ matrix.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            python-dependencies-${{ matrix.os }}-${{ matrix.python }}-

      - name: Install Dependencies
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]] && [[ -d ".venv" ]]; then
            echo "Removing existing .venv directory on Windows"
            rm -rf .venv
          fi
          uv sync --all-packages --all-extras --dev

      - name: Cache Test Artifacts
        uses: actions/cache@v4
        with:
          path: .pytest_cache/
          key: pytest-cache-${{ matrix.os }}-${{ matrix.python }}

      - name: Cache and Install Homebrew (macOS)
        if: runner.os == 'macOS'
        uses: tecolicom/actions-use-homebrew-tools@v1
        with:
          tools: 'tesseract tesseract-lang pandoc'
          key: 'homebrew-tools-${{ runner.os }}'
          cache: yes
          verbose: false

      - name: Cache and Install APT Packages (Linux)
        if: runner.os == 'Linux'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: tesseract-ocr tesseract-ocr-deu pandoc
          version: 1.0

      - name: Install System Dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y tesseract pandoc
          Write-Output "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Output "C:\Program Files\Pandoc" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          $env:PATH = "C:\Program Files\Tesseract-OCR;C:\Program Files\Pandoc;" + $env:PATH
          tesseract --version
          pandoc --version

      - name: Run Tests
        run: uv run pytest -s -vvv
