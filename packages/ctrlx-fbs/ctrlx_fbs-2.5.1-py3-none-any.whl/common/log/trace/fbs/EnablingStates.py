# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines the enabling states of all trace units for a specific device.
class EnablingStates(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EnablingStates()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEnablingStates(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EnablingStates
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # All enabling states.
    # EnablingStates
    def EnablingStates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from common.log.trace.fbs.EnablingState import EnablingState
            obj = EnablingState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EnablingStates
    def EnablingStatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EnablingStates
    def EnablingStatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Machine identification to identify a specific device.
    # EnablingStates
    def MachineIdentification(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EnablingStatesStart(builder): builder.StartObject(2)
def Start(builder):
    return EnablingStatesStart(builder)
def EnablingStatesAddEnablingStates(builder, enablingStates): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(enablingStates), 0)
def AddEnablingStates(builder, enablingStates):
    return EnablingStatesAddEnablingStates(builder, enablingStates)
def EnablingStatesStartEnablingStatesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEnablingStatesVector(builder, numElems):
    return EnablingStatesStartEnablingStatesVector(builder, numElems)
def EnablingStatesAddMachineIdentification(builder, machineIdentification): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(machineIdentification), 0)
def AddMachineIdentification(builder, machineIdentification):
    return EnablingStatesAddMachineIdentification(builder, machineIdentification)
def EnablingStatesEnd(builder): return builder.EndObject()
def End(builder):
    return EnablingStatesEnd(builder)
import common.log.trace.fbs.EnablingState
try:
    from typing import List
except:
    pass

class EnablingStatesT(object):

    # EnablingStatesT
    def __init__(self):
        self.enablingStates = None  # type: List[common.log.trace.fbs.EnablingState.EnablingStateT]
        self.machineIdentification = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        enablingStates = EnablingStates()
        enablingStates.Init(buf, pos)
        return cls.InitFromObj(enablingStates)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, enablingStates):
        x = EnablingStatesT()
        x._UnPack(enablingStates)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.enablingStates == other.enablingStates and \
            self.machineIdentification == other.machineIdentification

    # EnablingStatesT
    def _UnPack(self, enablingStates):
        if enablingStates is None:
            return
        if not enablingStates.EnablingStatesIsNone():
            self.enablingStates = []
            for i in range(enablingStates.EnablingStatesLength()):
                if enablingStates.EnablingStates(i) is None:
                    self.enablingStates.append(None)
                else:
                    enablingState_ = common.log.trace.fbs.EnablingState.EnablingStateT.InitFromObj(enablingStates.EnablingStates(i))
                    self.enablingStates.append(enablingState_)
        self.machineIdentification = enablingStates.MachineIdentification()

    # EnablingStatesT
    def Pack(self, builder):
        if self.enablingStates is not None:
            enablingStateslist = []
            for i in range(len(self.enablingStates)):
                enablingStateslist.append(self.enablingStates[i].Pack(builder))
            EnablingStatesStartEnablingStatesVector(builder, len(self.enablingStates))
            for i in reversed(range(len(self.enablingStates))):
                builder.PrependUOffsetTRelative(enablingStateslist[i])
            enablingStates = builder.EndVector()
        if self.machineIdentification is not None:
            machineIdentification = builder.CreateString(self.machineIdentification)
        EnablingStatesStart(builder)
        if self.enablingStates is not None:
            EnablingStatesAddEnablingStates(builder, enablingStates)
        if self.machineIdentification is not None:
            EnablingStatesAddMachineIdentification(builder, machineIdentification)
        enablingStates = EnablingStatesEnd(builder)
        return enablingStates
