# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# TODO: Provide description
class AxsCfgErrReactionSlaveLimExceeded(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgErrReactionSlaveLimExceeded()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgErrReactionSlaveLimExceeded(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgErrReactionSlaveLimExceeded
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TODO: Provide description
    # AxsCfgErrReactionSlaveLimExceeded
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 2

    # TODO: Provide description
    # AxsCfgErrReactionSlaveLimExceeded
    def Diagnosis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 2

def AxsCfgErrReactionSlaveLimExceededStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCfgErrReactionSlaveLimExceededStart(builder)
def AxsCfgErrReactionSlaveLimExceededAddType(builder, type): builder.PrependInt8Slot(0, type, 2)
def AddType(builder, type):
    return AxsCfgErrReactionSlaveLimExceededAddType(builder, type)
def AxsCfgErrReactionSlaveLimExceededAddDiagnosis(builder, diagnosis): builder.PrependInt8Slot(1, diagnosis, 2)
def AddDiagnosis(builder, diagnosis):
    return AxsCfgErrReactionSlaveLimExceededAddDiagnosis(builder, diagnosis)
def AxsCfgErrReactionSlaveLimExceededEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgErrReactionSlaveLimExceededEnd(builder)

class AxsCfgErrReactionSlaveLimExceededT(object):

    # AxsCfgErrReactionSlaveLimExceededT
    def __init__(self):
        self.type = 2  # type: int
        self.diagnosis = 2  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgErrReactionSlaveLimExceeded = AxsCfgErrReactionSlaveLimExceeded()
        axsCfgErrReactionSlaveLimExceeded.Init(buf, pos)
        return cls.InitFromObj(axsCfgErrReactionSlaveLimExceeded)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgErrReactionSlaveLimExceeded):
        x = AxsCfgErrReactionSlaveLimExceededT()
        x._UnPack(axsCfgErrReactionSlaveLimExceeded)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.type == other.type and \
            self.diagnosis == other.diagnosis

    # AxsCfgErrReactionSlaveLimExceededT
    def _UnPack(self, axsCfgErrReactionSlaveLimExceeded):
        if axsCfgErrReactionSlaveLimExceeded is None:
            return
        self.type = axsCfgErrReactionSlaveLimExceeded.Type()
        self.diagnosis = axsCfgErrReactionSlaveLimExceeded.Diagnosis()

    # AxsCfgErrReactionSlaveLimExceededT
    def Pack(self, builder):
        AxsCfgErrReactionSlaveLimExceededStart(builder)
        AxsCfgErrReactionSlaveLimExceededAddType(builder, self.type)
        AxsCfgErrReactionSlaveLimExceededAddDiagnosis(builder, self.diagnosis)
        axsCfgErrReactionSlaveLimExceeded = AxsCfgErrReactionSlaveLimExceededEnd(builder)
        return axsCfgErrReactionSlaveLimExceeded
