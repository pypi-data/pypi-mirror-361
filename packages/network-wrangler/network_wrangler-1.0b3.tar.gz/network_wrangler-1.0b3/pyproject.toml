[build-system]
requires = ["setuptools", "setuptools-scm", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "network-wrangler"
dynamic = ["version"]
description = ""
license =  {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.9"
authors = [
    { name = "Elizabeth Sall", email = "elizabeth@urbanlabs.io" },
    { name = "Sijia Wang", email = "Sijia.Wang@wsp.com"},
    { name = "Lisa Zorn", email = "lzorn@bayareametro.gov"},
    { name = "Ashish Kulshrestha", email = "Ashish.Kulshrestha@wsp.com"}
]
classifiers = [
    "Development Status :: 1 - Planning",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
]
dependencies = [
    "fiona>=1.10.1",
    "geographiclib>=2.0",
    "geojson>=3.1.0",
    "geopandas>=1.0.1",
    "ijson>=3.3.0",
    "osmnx>=1.9.3",
    "pandas>=2.2.3",
    "pandera[pandas,geopandas]>=0.24.0",
    "projectcard>=0.3.3",
    "psutil>=6.0.0",
    "pyarrow>=17.0.0",
    "pydantic>=2.9.2",
    "pyogrio>=0.9.0",
    "pyyaml>=6.0.2",
    "typing-extensions>=4.12.2"
]

[project.optional-dependencies]
viz = [
    "folium",
    "ipywidgets",
    "notebook",
]
docs = [
    "fontawesome_markdown",
    "jupyter",
    "markdown == 3.3.1",
    "mike",
    "mkdocs",
    "mkdocs-autorefs",
    "mkdocs-awesome-pages-plugin",
    "mkdocs-include-markdown-plugin",
    "mkdocs-jupyter",
    "mkdocs-material",
    "mkdocs-mermaid2-plugin",
    "mkdocstrings",
    "mkdocstrings-python",
]
tests = [
    "coverage",
    "mypy",
    "mypy_extensions",
    "pre-commit",
    "pytest",
    "pytest-benchmark",
    "pytest-cov",
    "pytest-profiling",
    "radon",
    "ruff",
    "snakeviz",
    "vulture",
    "network-wrangler[viz]",
    "network-wrangler[docs]",
]


[tool.setuptools]
packages = ["network_wrangler"]
script-files = [
    "network_wrangler/bin/clip_roadway.py",
    "network_wrangler/bin/clip_transit.py",
    "network_wrangler/bin/convert_network.py",
    "network_wrangler/bin/validate_roadway.py",
    "network_wrangler/bin/validate_transit.py",
    "network_wrangler/bin/build_scenario_from_config.py",
    "network_wrangler/bin/build_basic_osm_roadnet.py",
]

[tool.setuptools.dynamic]
version = {attr = "network_wrangler.__version__"}

[tool.pytest.ini_options]
markers = [
    "skipci: mark a test as a test that should be skipped in CI",
    "failing: tests that are known to be failing and need to be fixed"
]
log_cli = true
log_cli_level = "INFO"

[tool.radon]
exclude = ["tests/", "docs/"]  # Use a list for multiple paths
cc_min = "B"  # Keep the minimum cyclomatic complexity threshold

[tool.coverage.run]
relative_files = true
source = ["network_wrangler"]

[tool.mypy]
files = "network_wrangler"
python_version = "3.9"
follow_imports = "skip"
show_error_codes = true
show_error_context = true
ignore_missing_imports = true
disable_error_code = ["attr-defined", "import-untyped"]
warn_unused_ignores = true

[tool.ruff]
line-length = 99
exclude = ["notebook/*.ipynb"]


[tool.ruff.lint]
select = ["D"]
ignore = [
    "RET504",  # Unnecessary assignment  before `return` statement
    "UP007", # non pep-604 annotations.
    "C416", # non pep-604 annotations.
    "UP007", # non pep-604 annotations.
    "PLR0913", # too many args
    "UP045", # Use `X | None` for type annotations
    "UP006", # Use `list` instead of `List` for type annotation
]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PTH",         # flake8-use-pathlib
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "PYI",         # flake8-pyi
]
[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "D103",
    "D106",
    "D101",
    "D104",
    "D100",
    "PLR2004" # magic # comparisons
]
"**/__init__.py" = ["F401", "F403"]
"test_dependencies.py" = ["F401"]
"bin/*.py" = ["E501"]
