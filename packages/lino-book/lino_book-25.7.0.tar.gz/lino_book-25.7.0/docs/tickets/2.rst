#2 [closed] : Deleting a NoteType will delete all Notes with that type (oops!)
==============================================================================

Solved by :meth:`lino.reports.Report.disable_delete` 
and :func:`lino.lino_site.discover`.

:meth:`lino.lino_site.LinoSite.setup` 
analyzes the models 
and installs a method `disable_delete` 
on each model that is used as foreign key in some other model. 
This "automatic" `disable_delete` refuses to delete any object 
that is being refered by one or more other objects.

You may change this default behaviour by writing yourself a `disable_delete`
method either in a Report or in a Model (meaning for all Reports that 
use this model).

This solution is different from the approach in :djangoticket:`7539` 
in that it doesn't change Django's behaviour at all:
if you call `delete()` on an object being refered by other objects, 
the refering objects will also be deleted (`on_delete=CASCADE`).
It just adds a new piece of info to the json structure returned 
by an element request (:func:`lino.ui.extjs.ext_ui.elem2rec_detailed`).
The front end (i.e. :js:func:`Lino.delete_selected`)
is responsible for not requesting to DELETE a record 
that has a message in `disable_delete`.

Another reason why we don't use Django's 
`ForeignKey.on_delete
<https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.ForeignKey.on_delete>`_ 
is that we need a way to tell *in advance* 
whether a delete will succeed or not.



    
Blog entries:

- :blogref:`20101011`
- :blogref:`20101103`
- :blogref:`20101104`
