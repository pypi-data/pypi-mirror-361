# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PubSubKeyPushTargetDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PubSubKeyPushTargetDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPubSubKeyPushTargetDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PubSubKeyPushTargetDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PubSubKeyPushTargetDataType
    def ApplicationUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PubSubKeyPushTargetDataType
    def PushTargetFolder(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # PubSubKeyPushTargetDataType
    def PushTargetFolderLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubKeyPushTargetDataType
    def PushTargetFolderIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # PubSubKeyPushTargetDataType
    def EndpointUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PubSubKeyPushTargetDataType
    def SecurityPolicyUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PubSubKeyPushTargetDataType
    def UserTokenType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.structure.UserTokenPolicy import UserTokenPolicy
            obj = UserTokenPolicy()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubKeyPushTargetDataType
    def RequestedKeyCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # PubSubKeyPushTargetDataType
    def RetryInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # PubSubKeyPushTargetDataType
    def PushTargetProperties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.KeyValuePair import KeyValuePair
            obj = KeyValuePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PubSubKeyPushTargetDataType
    def PushTargetPropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubKeyPushTargetDataType
    def PushTargetPropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # PubSubKeyPushTargetDataType
    def SecurityGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # PubSubKeyPushTargetDataType
    def SecurityGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PubSubKeyPushTargetDataType
    def SecurityGroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def PubSubKeyPushTargetDataTypeStart(builder): builder.StartObject(9)
def Start(builder):
    return PubSubKeyPushTargetDataTypeStart(builder)
def PubSubKeyPushTargetDataTypeAddApplicationUri(builder, applicationUri): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(applicationUri), 0)
def AddApplicationUri(builder, applicationUri):
    return PubSubKeyPushTargetDataTypeAddApplicationUri(builder, applicationUri)
def PubSubKeyPushTargetDataTypeAddPushTargetFolder(builder, pushTargetFolder): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pushTargetFolder), 0)
def AddPushTargetFolder(builder, pushTargetFolder):
    return PubSubKeyPushTargetDataTypeAddPushTargetFolder(builder, pushTargetFolder)
def PubSubKeyPushTargetDataTypeStartPushTargetFolderVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPushTargetFolderVector(builder, numElems):
    return PubSubKeyPushTargetDataTypeStartPushTargetFolderVector(builder, numElems)
def PubSubKeyPushTargetDataTypeAddEndpointUrl(builder, endpointUrl): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(endpointUrl), 0)
def AddEndpointUrl(builder, endpointUrl):
    return PubSubKeyPushTargetDataTypeAddEndpointUrl(builder, endpointUrl)
def PubSubKeyPushTargetDataTypeAddSecurityPolicyUri(builder, securityPolicyUri): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(securityPolicyUri), 0)
def AddSecurityPolicyUri(builder, securityPolicyUri):
    return PubSubKeyPushTargetDataTypeAddSecurityPolicyUri(builder, securityPolicyUri)
def PubSubKeyPushTargetDataTypeAddUserTokenType(builder, userTokenType): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(userTokenType), 0)
def AddUserTokenType(builder, userTokenType):
    return PubSubKeyPushTargetDataTypeAddUserTokenType(builder, userTokenType)
def PubSubKeyPushTargetDataTypeAddRequestedKeyCount(builder, requestedKeyCount): builder.PrependUint16Slot(5, requestedKeyCount, 0)
def AddRequestedKeyCount(builder, requestedKeyCount):
    return PubSubKeyPushTargetDataTypeAddRequestedKeyCount(builder, requestedKeyCount)
def PubSubKeyPushTargetDataTypeAddRetryInterval(builder, retryInterval): builder.PrependFloat64Slot(6, retryInterval, 0.0)
def AddRetryInterval(builder, retryInterval):
    return PubSubKeyPushTargetDataTypeAddRetryInterval(builder, retryInterval)
def PubSubKeyPushTargetDataTypeAddPushTargetProperties(builder, pushTargetProperties): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(pushTargetProperties), 0)
def AddPushTargetProperties(builder, pushTargetProperties):
    return PubSubKeyPushTargetDataTypeAddPushTargetProperties(builder, pushTargetProperties)
def PubSubKeyPushTargetDataTypeStartPushTargetPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPushTargetPropertiesVector(builder, numElems):
    return PubSubKeyPushTargetDataTypeStartPushTargetPropertiesVector(builder, numElems)
def PubSubKeyPushTargetDataTypeAddSecurityGroups(builder, securityGroups): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(securityGroups), 0)
def AddSecurityGroups(builder, securityGroups):
    return PubSubKeyPushTargetDataTypeAddSecurityGroups(builder, securityGroups)
def PubSubKeyPushTargetDataTypeStartSecurityGroupsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSecurityGroupsVector(builder, numElems):
    return PubSubKeyPushTargetDataTypeStartSecurityGroupsVector(builder, numElems)
def PubSubKeyPushTargetDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return PubSubKeyPushTargetDataTypeEnd(builder)
import comm.opcua.structure.KeyValuePair
import comm.opcua.structure.UserTokenPolicy
try:
    from typing import List, Optional
except:
    pass

class PubSubKeyPushTargetDataTypeT(object):

    # PubSubKeyPushTargetDataTypeT
    def __init__(self):
        self.applicationUri = None  # type: str
        self.pushTargetFolder = None  # type: List[str]
        self.endpointUrl = None  # type: str
        self.securityPolicyUri = None  # type: str
        self.userTokenType = None  # type: Optional[comm.opcua.structure.UserTokenPolicy.UserTokenPolicyT]
        self.requestedKeyCount = 0  # type: int
        self.retryInterval = 0.0  # type: float
        self.pushTargetProperties = None  # type: List[comm.opcua.structure.KeyValuePair.KeyValuePairT]
        self.securityGroups = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pubSubKeyPushTargetDataType = PubSubKeyPushTargetDataType()
        pubSubKeyPushTargetDataType.Init(buf, pos)
        return cls.InitFromObj(pubSubKeyPushTargetDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, pubSubKeyPushTargetDataType):
        x = PubSubKeyPushTargetDataTypeT()
        x._UnPack(pubSubKeyPushTargetDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.applicationUri == other.applicationUri and \
            self.pushTargetFolder == other.pushTargetFolder and \
            self.endpointUrl == other.endpointUrl and \
            self.securityPolicyUri == other.securityPolicyUri and \
            self.userTokenType == other.userTokenType and \
            self.requestedKeyCount == other.requestedKeyCount and \
            self.retryInterval == other.retryInterval and \
            self.pushTargetProperties == other.pushTargetProperties and \
            self.securityGroups == other.securityGroups

    # PubSubKeyPushTargetDataTypeT
    def _UnPack(self, pubSubKeyPushTargetDataType):
        if pubSubKeyPushTargetDataType is None:
            return
        self.applicationUri = pubSubKeyPushTargetDataType.ApplicationUri()
        if not pubSubKeyPushTargetDataType.PushTargetFolderIsNone():
            self.pushTargetFolder = []
            for i in range(pubSubKeyPushTargetDataType.PushTargetFolderLength()):
                self.pushTargetFolder.append(pubSubKeyPushTargetDataType.PushTargetFolder(i))
        self.endpointUrl = pubSubKeyPushTargetDataType.EndpointUrl()
        self.securityPolicyUri = pubSubKeyPushTargetDataType.SecurityPolicyUri()
        if pubSubKeyPushTargetDataType.UserTokenType() is not None:
            self.userTokenType = comm.opcua.structure.UserTokenPolicy.UserTokenPolicyT.InitFromObj(pubSubKeyPushTargetDataType.UserTokenType())
        self.requestedKeyCount = pubSubKeyPushTargetDataType.RequestedKeyCount()
        self.retryInterval = pubSubKeyPushTargetDataType.RetryInterval()
        if not pubSubKeyPushTargetDataType.PushTargetPropertiesIsNone():
            self.pushTargetProperties = []
            for i in range(pubSubKeyPushTargetDataType.PushTargetPropertiesLength()):
                if pubSubKeyPushTargetDataType.PushTargetProperties(i) is None:
                    self.pushTargetProperties.append(None)
                else:
                    keyValuePair_ = comm.opcua.structure.KeyValuePair.KeyValuePairT.InitFromObj(pubSubKeyPushTargetDataType.PushTargetProperties(i))
                    self.pushTargetProperties.append(keyValuePair_)
        if not pubSubKeyPushTargetDataType.SecurityGroupsIsNone():
            self.securityGroups = []
            for i in range(pubSubKeyPushTargetDataType.SecurityGroupsLength()):
                self.securityGroups.append(pubSubKeyPushTargetDataType.SecurityGroups(i))

    # PubSubKeyPushTargetDataTypeT
    def Pack(self, builder):
        if self.applicationUri is not None:
            applicationUri = builder.CreateString(self.applicationUri)
        if self.pushTargetFolder is not None:
            pushTargetFolderlist = []
            for i in range(len(self.pushTargetFolder)):
                pushTargetFolderlist.append(builder.CreateString(self.pushTargetFolder[i]))
            PubSubKeyPushTargetDataTypeStartPushTargetFolderVector(builder, len(self.pushTargetFolder))
            for i in reversed(range(len(self.pushTargetFolder))):
                builder.PrependUOffsetTRelative(pushTargetFolderlist[i])
            pushTargetFolder = builder.EndVector()
        if self.endpointUrl is not None:
            endpointUrl = builder.CreateString(self.endpointUrl)
        if self.securityPolicyUri is not None:
            securityPolicyUri = builder.CreateString(self.securityPolicyUri)
        if self.userTokenType is not None:
            userTokenType = self.userTokenType.Pack(builder)
        if self.pushTargetProperties is not None:
            pushTargetPropertieslist = []
            for i in range(len(self.pushTargetProperties)):
                pushTargetPropertieslist.append(self.pushTargetProperties[i].Pack(builder))
            PubSubKeyPushTargetDataTypeStartPushTargetPropertiesVector(builder, len(self.pushTargetProperties))
            for i in reversed(range(len(self.pushTargetProperties))):
                builder.PrependUOffsetTRelative(pushTargetPropertieslist[i])
            pushTargetProperties = builder.EndVector()
        if self.securityGroups is not None:
            securityGroupslist = []
            for i in range(len(self.securityGroups)):
                securityGroupslist.append(builder.CreateString(self.securityGroups[i]))
            PubSubKeyPushTargetDataTypeStartSecurityGroupsVector(builder, len(self.securityGroups))
            for i in reversed(range(len(self.securityGroups))):
                builder.PrependUOffsetTRelative(securityGroupslist[i])
            securityGroups = builder.EndVector()
        PubSubKeyPushTargetDataTypeStart(builder)
        if self.applicationUri is not None:
            PubSubKeyPushTargetDataTypeAddApplicationUri(builder, applicationUri)
        if self.pushTargetFolder is not None:
            PubSubKeyPushTargetDataTypeAddPushTargetFolder(builder, pushTargetFolder)
        if self.endpointUrl is not None:
            PubSubKeyPushTargetDataTypeAddEndpointUrl(builder, endpointUrl)
        if self.securityPolicyUri is not None:
            PubSubKeyPushTargetDataTypeAddSecurityPolicyUri(builder, securityPolicyUri)
        if self.userTokenType is not None:
            PubSubKeyPushTargetDataTypeAddUserTokenType(builder, userTokenType)
        PubSubKeyPushTargetDataTypeAddRequestedKeyCount(builder, self.requestedKeyCount)
        PubSubKeyPushTargetDataTypeAddRetryInterval(builder, self.retryInterval)
        if self.pushTargetProperties is not None:
            PubSubKeyPushTargetDataTypeAddPushTargetProperties(builder, pushTargetProperties)
        if self.securityGroups is not None:
            PubSubKeyPushTargetDataTypeAddSecurityGroups(builder, securityGroups)
        pubSubKeyPushTargetDataType = PubSubKeyPushTargetDataTypeEnd(builder)
        return pubSubKeyPushTargetDataType
