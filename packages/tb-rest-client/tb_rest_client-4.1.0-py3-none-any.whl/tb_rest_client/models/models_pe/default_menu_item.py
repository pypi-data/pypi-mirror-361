# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard Professional Edition IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.1.0PE
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from tb_rest_client.models.models_pe.menu_item import MenuItem  # noqa: F401,E501

class DefaultMenuItem(MenuItem):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'icon': 'str',
        'visible': 'bool',
        'pages': 'list[DefaultMenuItem]'
    }
    if hasattr(MenuItem, "swagger_types"):
        swagger_types.update(MenuItem.swagger_types)

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'icon': 'icon',
        'visible': 'visible',
        'pages': 'pages'
    }
    if hasattr(MenuItem, "attribute_map"):
        attribute_map.update(MenuItem.attribute_map)

    def __init__(self, id=None, name=None, icon=None, visible=None, pages=None, *args, **kwargs):  # noqa: E501
        """DefaultMenuItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._icon = None
        self._visible = None
        self._pages = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if icon is not None:
            self.icon = icon
        if visible is not None:
            self.visible = visible
        if pages is not None:
            self.pages = pages
        MenuItem.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this DefaultMenuItem.  # noqa: E501

        Unique identifier for predefined menu items  # noqa: E501

        :return: The id of this DefaultMenuItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DefaultMenuItem.

        Unique identifier for predefined menu items  # noqa: E501

        :param id: The id of this DefaultMenuItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DefaultMenuItem.  # noqa: E501

        Name of the menu item  # noqa: E501

        :return: The name of this DefaultMenuItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DefaultMenuItem.

        Name of the menu item  # noqa: E501

        :param name: The name of this DefaultMenuItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def icon(self):
        """Gets the icon of this DefaultMenuItem.  # noqa: E501

        URL of the menu item icon. Overrides 'materialIcon'  # noqa: E501

        :return: The icon of this DefaultMenuItem.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this DefaultMenuItem.

        URL of the menu item icon. Overrides 'materialIcon'  # noqa: E501

        :param icon: The icon of this DefaultMenuItem.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def visible(self):
        """Gets the visible of this DefaultMenuItem.  # noqa: E501

        Mark if menu item is visible for user  # noqa: E501

        :return: The visible of this DefaultMenuItem.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this DefaultMenuItem.

        Mark if menu item is visible for user  # noqa: E501

        :param visible: The visible of this DefaultMenuItem.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def pages(self):
        """Gets the pages of this DefaultMenuItem.  # noqa: E501

        List of child menu items  # noqa: E501

        :return: The pages of this DefaultMenuItem.  # noqa: E501
        :rtype: list[DefaultMenuItem]
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this DefaultMenuItem.

        List of child menu items  # noqa: E501

        :param pages: The pages of this DefaultMenuItem.  # noqa: E501
        :type: list[DefaultMenuItem]
        """

        self._pages = pages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DefaultMenuItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefaultMenuItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
