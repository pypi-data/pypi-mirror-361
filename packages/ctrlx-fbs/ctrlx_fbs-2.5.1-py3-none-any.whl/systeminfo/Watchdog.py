# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Watchdog(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Watchdog()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWatchdog(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Watchdog
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Watchdog
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Watchdog
    def Identity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def WatchdogStart(builder): builder.StartObject(2)
def Start(builder):
    return WatchdogStart(builder)
def WatchdogAddEnabled(builder, enabled): builder.PrependBoolSlot(0, enabled, 0)
def AddEnabled(builder, enabled):
    return WatchdogAddEnabled(builder, enabled)
def WatchdogAddIdentity(builder, identity): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(identity), 0)
def AddIdentity(builder, identity):
    return WatchdogAddIdentity(builder, identity)
def WatchdogEnd(builder): return builder.EndObject()
def End(builder):
    return WatchdogEnd(builder)

class WatchdogT(object):

    # WatchdogT
    def __init__(self):
        self.enabled = False  # type: bool
        self.identity = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        watchdog = Watchdog()
        watchdog.Init(buf, pos)
        return cls.InitFromObj(watchdog)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, watchdog):
        x = WatchdogT()
        x._UnPack(watchdog)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.enabled == other.enabled and \
            self.identity == other.identity

    # WatchdogT
    def _UnPack(self, watchdog):
        if watchdog is None:
            return
        self.enabled = watchdog.Enabled()
        self.identity = watchdog.Identity()

    # WatchdogT
    def Pack(self, builder):
        if self.identity is not None:
            identity = builder.CreateString(self.identity)
        WatchdogStart(builder)
        WatchdogAddEnabled(builder, self.enabled)
        if self.identity is not None:
            WatchdogAddIdentity(builder, identity)
        watchdog = WatchdogEnd(builder)
        return watchdog
