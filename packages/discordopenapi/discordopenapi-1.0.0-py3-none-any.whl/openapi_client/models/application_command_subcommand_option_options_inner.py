# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.application_command_attachment_option import ApplicationCommandAttachmentOption
from openapi_client.models.application_command_boolean_option import ApplicationCommandBooleanOption
from openapi_client.models.application_command_channel_option import ApplicationCommandChannelOption
from openapi_client.models.application_command_integer_option import ApplicationCommandIntegerOption
from openapi_client.models.application_command_mentionable_option import ApplicationCommandMentionableOption
from openapi_client.models.application_command_number_option import ApplicationCommandNumberOption
from openapi_client.models.application_command_role_option import ApplicationCommandRoleOption
from openapi_client.models.application_command_string_option import ApplicationCommandStringOption
from openapi_client.models.application_command_user_option import ApplicationCommandUserOption
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

APPLICATIONCOMMANDSUBCOMMANDOPTIONOPTIONSINNER_ONE_OF_SCHEMAS = ["ApplicationCommandAttachmentOption", "ApplicationCommandBooleanOption", "ApplicationCommandChannelOption", "ApplicationCommandIntegerOption", "ApplicationCommandMentionableOption", "ApplicationCommandNumberOption", "ApplicationCommandRoleOption", "ApplicationCommandStringOption", "ApplicationCommandUserOption"]

class ApplicationCommandSubcommandOptionOptionsInner(BaseModel):
    """
    ApplicationCommandSubcommandOptionOptionsInner
    """
    # data type: ApplicationCommandAttachmentOption
    oneof_schema_1_validator: Optional[ApplicationCommandAttachmentOption] = None
    # data type: ApplicationCommandBooleanOption
    oneof_schema_2_validator: Optional[ApplicationCommandBooleanOption] = None
    # data type: ApplicationCommandChannelOption
    oneof_schema_3_validator: Optional[ApplicationCommandChannelOption] = None
    # data type: ApplicationCommandIntegerOption
    oneof_schema_4_validator: Optional[ApplicationCommandIntegerOption] = None
    # data type: ApplicationCommandMentionableOption
    oneof_schema_5_validator: Optional[ApplicationCommandMentionableOption] = None
    # data type: ApplicationCommandNumberOption
    oneof_schema_6_validator: Optional[ApplicationCommandNumberOption] = None
    # data type: ApplicationCommandRoleOption
    oneof_schema_7_validator: Optional[ApplicationCommandRoleOption] = None
    # data type: ApplicationCommandStringOption
    oneof_schema_8_validator: Optional[ApplicationCommandStringOption] = None
    # data type: ApplicationCommandUserOption
    oneof_schema_9_validator: Optional[ApplicationCommandUserOption] = None
    actual_instance: Optional[Union[ApplicationCommandAttachmentOption, ApplicationCommandBooleanOption, ApplicationCommandChannelOption, ApplicationCommandIntegerOption, ApplicationCommandMentionableOption, ApplicationCommandNumberOption, ApplicationCommandRoleOption, ApplicationCommandStringOption, ApplicationCommandUserOption]] = None
    one_of_schemas: Set[str] = { "ApplicationCommandAttachmentOption", "ApplicationCommandBooleanOption", "ApplicationCommandChannelOption", "ApplicationCommandIntegerOption", "ApplicationCommandMentionableOption", "ApplicationCommandNumberOption", "ApplicationCommandRoleOption", "ApplicationCommandStringOption", "ApplicationCommandUserOption" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ApplicationCommandSubcommandOptionOptionsInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: ApplicationCommandAttachmentOption
        if not isinstance(v, ApplicationCommandAttachmentOption):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApplicationCommandAttachmentOption`")
        else:
            match += 1
        # validate data type: ApplicationCommandBooleanOption
        if not isinstance(v, ApplicationCommandBooleanOption):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApplicationCommandBooleanOption`")
        else:
            match += 1
        # validate data type: ApplicationCommandChannelOption
        if not isinstance(v, ApplicationCommandChannelOption):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApplicationCommandChannelOption`")
        else:
            match += 1
        # validate data type: ApplicationCommandIntegerOption
        if not isinstance(v, ApplicationCommandIntegerOption):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApplicationCommandIntegerOption`")
        else:
            match += 1
        # validate data type: ApplicationCommandMentionableOption
        if not isinstance(v, ApplicationCommandMentionableOption):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApplicationCommandMentionableOption`")
        else:
            match += 1
        # validate data type: ApplicationCommandNumberOption
        if not isinstance(v, ApplicationCommandNumberOption):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApplicationCommandNumberOption`")
        else:
            match += 1
        # validate data type: ApplicationCommandRoleOption
        if not isinstance(v, ApplicationCommandRoleOption):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApplicationCommandRoleOption`")
        else:
            match += 1
        # validate data type: ApplicationCommandStringOption
        if not isinstance(v, ApplicationCommandStringOption):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApplicationCommandStringOption`")
        else:
            match += 1
        # validate data type: ApplicationCommandUserOption
        if not isinstance(v, ApplicationCommandUserOption):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ApplicationCommandUserOption`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ApplicationCommandSubcommandOptionOptionsInner with oneOf schemas: ApplicationCommandAttachmentOption, ApplicationCommandBooleanOption, ApplicationCommandChannelOption, ApplicationCommandIntegerOption, ApplicationCommandMentionableOption, ApplicationCommandNumberOption, ApplicationCommandRoleOption, ApplicationCommandStringOption, ApplicationCommandUserOption. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ApplicationCommandSubcommandOptionOptionsInner with oneOf schemas: ApplicationCommandAttachmentOption, ApplicationCommandBooleanOption, ApplicationCommandChannelOption, ApplicationCommandIntegerOption, ApplicationCommandMentionableOption, ApplicationCommandNumberOption, ApplicationCommandRoleOption, ApplicationCommandStringOption, ApplicationCommandUserOption. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ApplicationCommandAttachmentOption
        try:
            instance.actual_instance = ApplicationCommandAttachmentOption.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApplicationCommandBooleanOption
        try:
            instance.actual_instance = ApplicationCommandBooleanOption.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApplicationCommandChannelOption
        try:
            instance.actual_instance = ApplicationCommandChannelOption.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApplicationCommandIntegerOption
        try:
            instance.actual_instance = ApplicationCommandIntegerOption.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApplicationCommandMentionableOption
        try:
            instance.actual_instance = ApplicationCommandMentionableOption.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApplicationCommandNumberOption
        try:
            instance.actual_instance = ApplicationCommandNumberOption.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApplicationCommandRoleOption
        try:
            instance.actual_instance = ApplicationCommandRoleOption.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApplicationCommandStringOption
        try:
            instance.actual_instance = ApplicationCommandStringOption.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ApplicationCommandUserOption
        try:
            instance.actual_instance = ApplicationCommandUserOption.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ApplicationCommandSubcommandOptionOptionsInner with oneOf schemas: ApplicationCommandAttachmentOption, ApplicationCommandBooleanOption, ApplicationCommandChannelOption, ApplicationCommandIntegerOption, ApplicationCommandMentionableOption, ApplicationCommandNumberOption, ApplicationCommandRoleOption, ApplicationCommandStringOption, ApplicationCommandUserOption. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ApplicationCommandSubcommandOptionOptionsInner with oneOf schemas: ApplicationCommandAttachmentOption, ApplicationCommandBooleanOption, ApplicationCommandChannelOption, ApplicationCommandIntegerOption, ApplicationCommandMentionableOption, ApplicationCommandNumberOption, ApplicationCommandRoleOption, ApplicationCommandStringOption, ApplicationCommandUserOption. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ApplicationCommandAttachmentOption, ApplicationCommandBooleanOption, ApplicationCommandChannelOption, ApplicationCommandIntegerOption, ApplicationCommandMentionableOption, ApplicationCommandNumberOption, ApplicationCommandRoleOption, ApplicationCommandStringOption, ApplicationCommandUserOption]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


