[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"
[project]
name = "pydantic_mini"
version="1.0.8"
requires-python = ">=3.8"
authors = [
    {name = "nshaibu", email = "nafiushaibu1@gmail.com"},
]
description="Dataclass with validation"
keywords=["pydantic-mini", "Schema", "ORM", "dataclass", "pydantic", "data-validation", "simple", "dataclass with vaidation"]
readme = "README.md"
license = { file = "LICENSE" }
dependencies = [
    "typing-extensions==4.12.2"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
[project.urls]
"Issue Tracker"="https://github.com/nshaibu/pydantic-mini/issues"
CI="https://github.com/nshaibu/pydantic-mini/actions"
[project.optional-dependencies]
dev = [
    "coverage>=7.4.1",
    "iniconfig==2.0.0",
    "packaging==24.2",
    "pluggy==1.5.0",
    "pytest==8.3.4",
    "pyflakes==3.2.0",
    "mccabe==0.7.0",
    "flake8==7.1.1",
    "pycodestyle==2.12.1",
    "flake8-black==0.3.6",
    "black>=22.1.0",
    "click==8.1.8",
    "mypy-extensions==1.0.0",
    "pathspec==0.12.1",
    "platformdirs==4.3.6"
]
[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if typing.TYPE_CHECKING:",
    "if TYPE_CHECKING:",
    "if sys.version_info *",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
skip_empty = true
skip_covered = true
