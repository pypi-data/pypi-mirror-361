# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# the describe parameters of filter
class DescribeParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DescribeParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDescribeParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DescribeParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of current parameter
    # DescribeParam
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of current filter parameter
    # DescribeParam
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Is this parameter mandatory
    # DescribeParam
    def Mandatory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Type of the variable
    # DescribeParam
    def Datatype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit
    # DescribeParam
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DescribeParamStart(builder): builder.StartObject(5)
def Start(builder):
    return DescribeParamStart(builder)
def DescribeParamAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return DescribeParamAddName(builder, name)
def DescribeParamAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return DescribeParamAddDescription(builder, description)
def DescribeParamAddMandatory(builder, mandatory): builder.PrependBoolSlot(2, mandatory, 0)
def AddMandatory(builder, mandatory):
    return DescribeParamAddMandatory(builder, mandatory)
def DescribeParamAddDatatype(builder, datatype): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(datatype), 0)
def AddDatatype(builder, datatype):
    return DescribeParamAddDatatype(builder, datatype)
def DescribeParamAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def AddUnit(builder, unit):
    return DescribeParamAddUnit(builder, unit)
def DescribeParamEnd(builder): return builder.EndObject()
def End(builder):
    return DescribeParamEnd(builder)

class DescribeParamT(object):

    # DescribeParamT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str
        self.mandatory = False  # type: bool
        self.datatype = None  # type: str
        self.unit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        describeParam = DescribeParam()
        describeParam.Init(buf, pos)
        return cls.InitFromObj(describeParam)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, describeParam):
        x = DescribeParamT()
        x._UnPack(describeParam)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.description == other.description and \
            self.mandatory == other.mandatory and \
            self.datatype == other.datatype and \
            self.unit == other.unit

    # DescribeParamT
    def _UnPack(self, describeParam):
        if describeParam is None:
            return
        self.name = describeParam.Name()
        self.description = describeParam.Description()
        self.mandatory = describeParam.Mandatory()
        self.datatype = describeParam.Datatype()
        self.unit = describeParam.Unit()

    # DescribeParamT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.datatype is not None:
            datatype = builder.CreateString(self.datatype)
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        DescribeParamStart(builder)
        if self.name is not None:
            DescribeParamAddName(builder, name)
        if self.description is not None:
            DescribeParamAddDescription(builder, description)
        DescribeParamAddMandatory(builder, self.mandatory)
        if self.datatype is not None:
            DescribeParamAddDatatype(builder, datatype)
        if self.unit is not None:
            DescribeParamAddUnit(builder, unit)
        describeParam = DescribeParamEnd(builder)
        return describeParam
