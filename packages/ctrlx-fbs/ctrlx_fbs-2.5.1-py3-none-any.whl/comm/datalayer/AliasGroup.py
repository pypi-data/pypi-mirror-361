# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Related aliases can be grouped together.
# Multiple alias groups can be handled in the data layer.
# This we it is possible manage many aliases which originate from different clients.
# The table AliasGroup encapsulates an array of Aliases.
class AliasGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AliasGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAliasGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AliasGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # A name for the group of aliases.
    # AliasGroup
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # An array of aliases which belong to this group.
    # AliasGroup
    def Aliases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.Alias import Alias
            obj = Alias()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AliasGroup
    def AliasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AliasGroup
    def AliasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def AliasGroupStart(builder): builder.StartObject(2)
def Start(builder):
    return AliasGroupStart(builder)
def AliasGroupAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return AliasGroupAddName(builder, name)
def AliasGroupAddAliases(builder, aliases): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(aliases), 0)
def AddAliases(builder, aliases):
    return AliasGroupAddAliases(builder, aliases)
def AliasGroupStartAliasesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAliasesVector(builder, numElems):
    return AliasGroupStartAliasesVector(builder, numElems)
def AliasGroupEnd(builder): return builder.EndObject()
def End(builder):
    return AliasGroupEnd(builder)
import comm.datalayer.Alias
try:
    from typing import List
except:
    pass

class AliasGroupT(object):

    # AliasGroupT
    def __init__(self):
        self.name = None  # type: str
        self.aliases = None  # type: List[comm.datalayer.Alias.AliasT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aliasGroup = AliasGroup()
        aliasGroup.Init(buf, pos)
        return cls.InitFromObj(aliasGroup)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, aliasGroup):
        x = AliasGroupT()
        x._UnPack(aliasGroup)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.aliases == other.aliases

    # AliasGroupT
    def _UnPack(self, aliasGroup):
        if aliasGroup is None:
            return
        self.name = aliasGroup.Name()
        if not aliasGroup.AliasesIsNone():
            self.aliases = []
            for i in range(aliasGroup.AliasesLength()):
                if aliasGroup.Aliases(i) is None:
                    self.aliases.append(None)
                else:
                    alias_ = comm.datalayer.Alias.AliasT.InitFromObj(aliasGroup.Aliases(i))
                    self.aliases.append(alias_)

    # AliasGroupT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.aliases is not None:
            aliaseslist = []
            for i in range(len(self.aliases)):
                aliaseslist.append(self.aliases[i].Pack(builder))
            AliasGroupStartAliasesVector(builder, len(self.aliases))
            for i in reversed(range(len(self.aliases))):
                builder.PrependUOffsetTRelative(aliaseslist[i])
            aliases = builder.EndVector()
        AliasGroupStart(builder)
        if self.name is not None:
            AliasGroupAddName(builder, name)
        if self.aliases is not None:
            AliasGroupAddAliases(builder, aliases)
        aliasGroup = AliasGroupEnd(builder)
        return aliasGroup
