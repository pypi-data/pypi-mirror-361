# automatically generated by the FlatBuffers compiler, do not modify

# namespace: builtin

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NumericNodeId(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NumericNodeId()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNumericNodeId(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NumericNodeId
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NumericNodeId
    def NsIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # NumericNodeId
    def Identifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def NumericNodeIdStart(builder): builder.StartObject(2)
def Start(builder):
    return NumericNodeIdStart(builder)
def NumericNodeIdAddNsIndex(builder, nsIndex): builder.PrependUint16Slot(0, nsIndex, 0)
def AddNsIndex(builder, nsIndex):
    return NumericNodeIdAddNsIndex(builder, nsIndex)
def NumericNodeIdAddIdentifier(builder, identifier): builder.PrependUint32Slot(1, identifier, 0)
def AddIdentifier(builder, identifier):
    return NumericNodeIdAddIdentifier(builder, identifier)
def NumericNodeIdEnd(builder): return builder.EndObject()
def End(builder):
    return NumericNodeIdEnd(builder)

class NumericNodeIdT(object):

    # NumericNodeIdT
    def __init__(self):
        self.nsIndex = 0  # type: int
        self.identifier = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        numericNodeId = NumericNodeId()
        numericNodeId.Init(buf, pos)
        return cls.InitFromObj(numericNodeId)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, numericNodeId):
        x = NumericNodeIdT()
        x._UnPack(numericNodeId)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.nsIndex == other.nsIndex and \
            self.identifier == other.identifier

    # NumericNodeIdT
    def _UnPack(self, numericNodeId):
        if numericNodeId is None:
            return
        self.nsIndex = numericNodeId.NsIndex()
        self.identifier = numericNodeId.Identifier()

    # NumericNodeIdT
    def Pack(self, builder):
        NumericNodeIdStart(builder)
        NumericNodeIdAddNsIndex(builder, self.nsIndex)
        NumericNodeIdAddIdentifier(builder, self.identifier)
        numericNodeId = NumericNodeIdEnd(builder)
        return numericNodeId
