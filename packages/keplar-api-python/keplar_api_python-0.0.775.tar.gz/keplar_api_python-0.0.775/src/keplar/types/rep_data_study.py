# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .rep_data_study_qualifications_item import RepDataStudyQualificationsItem


class RepDataStudy(UniversalBaseModel):
    name: str
    compensation: float
    length_of_interview: typing_extensions.Annotated[float, FieldMetadata(alias="lengthOfInterview")]
    incidence_rate: typing_extensions.Annotated[float, FieldMetadata(alias="incidenceRate")]
    country_code: typing_extensions.Annotated[str, FieldMetadata(alias="countryCode")]
    language_code: typing_extensions.Annotated[str, FieldMetadata(alias="languageCode")]
    device_compatibility: typing_extensions.Annotated[typing.List[str], FieldMetadata(alias="deviceCompatibility")]
    min_age: typing_extensions.Annotated[float, FieldMetadata(alias="minAge")]
    max_age: typing_extensions.Annotated[float, FieldMetadata(alias="maxAge")]
    genders: typing.List[str]
    qualifications: typing.List[RepDataStudyQualificationsItem]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
