#30 [closed] : Developing a Qooxdoo application for a Django server
-------------------------------------------------------------------

This problem is now solved. See :doc:`/topics/qooxdoo`.

When launching my Qooxdoo application from a Django server,
I'd like to be able to switch 
between "source" and "build" versions of my application.

Currently I need to do a :command:`generate.py source build` 
each time I want to test a code change.

The problem when trying to use the source version
is that Qooxdoo 
does a complex job when generating the JavaScript 
code that is actually being used,
and it probably hasn't been designed to generate "source" code that will be 
running somewhere else than on the machine on which it 
has been generated.

Surfing for "Django Qooxdoo" didn't bring helpful
results. A project 
`qooxdoo integration for Django <http://code.google.com/p/qxdjango/>`_
was started and appearently dropped again in May 2009.

The most useful document is
`Running a Source Version from a Web Server <http://qooxdoo.org/documentation/general/snippets#running_a_source_version_from_a_web_server>`_ 
which explains the problem.

Related blog entries: 

- :blogref:`20110308`
- :blogref:`20110331`
- :blogref:`20110401`


Here are some fragments of the things I tried without success:
   
#.  In my Qx application's `config.json` I changed
    `QOOXDOO_PATH` to ``"../../../../../qooxdoo"``.
    The path needs to be relative to the Lino 
    source directory.
    So I had to install my copy of the Qooxdoo SDK 
    into a directory called "qooxdoo" and situated 
    in the same directory as the lino source tree
    (that is, `/var/snapshots/qooxdoo` in a normal 
    :doc:`Lino installation </admin/install>`).
    
    
#.  On the development server I have in my 
    :srcref:`urls.py </lino/lino/ui/qx/urls.py>`::

      QX_PATH = os.path.abspath(os.path.dirname(__file__))
      prefix = settings.MEDIA_URL[1:]
      assert prefix.endswith('/')
      urlpatterns += patterns('django.views.static',
      (r'^%sqx/(?P<path>.*)$' % prefix, 
          'serve', {
          'document_root': QX_PATH
          }),)

    On a production server, I'll do something like::

      cd /usr/local/django/myproject/media
      ln -s /var/snapshots/lino/lino/ui/qx qt

#.  Then I have the index view redirect to my application's index.html as follows::

        def index_view(self, request,**kw):
            if settings.DEBUG:
                target = "/media/qx/app/source/index.html"
            else:
                target = "/media/qx/app/build/index.html"
            return http.HttpResponseRedirect(target)
            
    Redirecting has the disadvantage that the final user 
    will see a complicated URI in her browser. 
    Also here I hope for ideas on how to avoid it.





In file :srcref:`/lino/lino/ui/qx/app/source/index.html`, 
I manually replaced the line

::

  <script type="text/javascript" src="script/lino.js"></script>

by

::

  <script type="text/javascript" src="media/qx/script/lino.js"></script>
  
In file :srcref:`/lino/lino/ui/qx/app/config.json`, I added a 
configuration key ``uris/resource`` to 
`compile-options <http://manual.qooxdoo.org/1.3.x/pages/tool/generator_config_ref.html#compile-options>`_.

On the development server I have in my :file:`urls.py`::

    QXAPP_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__),'app','build'))
    prefix = settings.MEDIA_URL[1:]
    assert prefix.endswith('/')
    urlpatterns += patterns('django.views.static',
    (r'^%sqx/(?P<path>.*)$' % prefix, 
        'serve', {
        'document_root': QXAPP_ROOT,
        }),)
        
On a production server::

  cd /usr/local/django/myproject/media
  ln -s /var/snapshots/lino/lino/ui/qx/app/build qt


In :file:`config.json` I replaced

::

    "QOOXDOO_PATH" : "S:/qooxdoo-1.3-sdk",
    
by

::

    "QOOXDOO_PATH" : "/media/qx",


Or in `generate.py`, I replaced line

::

  qxpath = getQxPath()
  
by

::

  qxpath = QOOXDOO_PATH
  
  



