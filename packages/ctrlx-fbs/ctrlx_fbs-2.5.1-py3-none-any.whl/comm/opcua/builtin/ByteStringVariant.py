# automatically generated by the FlatBuffers compiler, do not modify

# namespace: builtin

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ByteStringVariant(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ByteStringVariant()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsByteStringVariant(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ByteStringVariant
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ByteStringVariant
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.ByteString import ByteString
            obj = ByteString()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ByteStringVariantStart(builder): builder.StartObject(1)
def Start(builder):
    return ByteStringVariantStart(builder)
def ByteStringVariantAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return ByteStringVariantAddValue(builder, value)
def ByteStringVariantEnd(builder): return builder.EndObject()
def End(builder):
    return ByteStringVariantEnd(builder)
import comm.opcua.builtin.ByteString
try:
    from typing import Optional
except:
    pass

class ByteStringVariantT(object):

    # ByteStringVariantT
    def __init__(self):
        self.value = None  # type: Optional[comm.opcua.builtin.ByteString.ByteStringT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        byteStringVariant = ByteStringVariant()
        byteStringVariant.Init(buf, pos)
        return cls.InitFromObj(byteStringVariant)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, byteStringVariant):
        x = ByteStringVariantT()
        x._UnPack(byteStringVariant)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value

    # ByteStringVariantT
    def _UnPack(self, byteStringVariant):
        if byteStringVariant is None:
            return
        if byteStringVariant.Value() is not None:
            self.value = comm.opcua.builtin.ByteString.ByteStringT.InitFromObj(byteStringVariant.Value())

    # ByteStringVariantT
    def Pack(self, builder):
        if self.value is not None:
            value = self.value.Pack(builder)
        ByteStringVariantStart(builder)
        if self.value is not None:
            ByteStringVariantAddValue(builder, value)
        byteStringVariant = ByteStringVariantEnd(builder)
        return byteStringVariant
