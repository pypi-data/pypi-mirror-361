name: Automated Release

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  check-release:
    name: Check for Release
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      next_version: ${{ steps.check.outputs.next_version }}
      release_type: ${{ steps.check.outputs.release_type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check commit messages
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            // Get commits since last tag
            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            
            const lastTag = tags[0]?.name || 'v0.0.0';
            const lastVersion = lastTag.replace('v', '');
            
            // Get commits since last tag
            const { stdout } = await exec.getExecOutput('git', [
              'log',
              `${lastTag}..HEAD`,
              '--pretty=format:%s'
            ]);
            
            const commits = stdout.split('\n').filter(Boolean);
            
            // Analyze commits for version bump
            let major = false, minor = false, patch = false;
            
            commits.forEach(commit => {
              if (commit.includes('BREAKING CHANGE') || commit.startsWith('!')) {
                major = true;
              } else if (commit.startsWith('feat')) {
                minor = true;
              } else if (commit.startsWith('fix')) {
                patch = true;
              }
            });
            
            // Determine release type
            let releaseType = '';
            if (major) releaseType = 'major';
            else if (minor) releaseType = 'minor';
            else if (patch) releaseType = 'patch';
            
            // Calculate next version
            const [currentMajor, currentMinor, currentPatch] = lastVersion.split('.').map(Number);
            let nextVersion = '';
            
            if (releaseType === 'major') {
              nextVersion = `${currentMajor + 1}.0.0`;
            } else if (releaseType === 'minor') {
              nextVersion = `${currentMajor}.${currentMinor + 1}.0`;
            } else if (releaseType === 'patch') {
              nextVersion = `${currentMajor}.${currentMinor}.${currentPatch + 1}`;
            }
            
            const shouldRelease = releaseType !== '';
            
            console.log(`Last version: ${lastVersion}`);
            console.log(`Release type: ${releaseType}`);
            console.log(`Next version: ${nextVersion}`);
            console.log(`Should release: ${shouldRelease}`);
            
            core.setOutput('should_release', shouldRelease);
            core.setOutput('next_version', nextVersion);
            core.setOutput('release_type', releaseType);

  create-release-pr:
    name: Create Release PR
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Create release branch
        run: |
          VERSION=${{ needs.check-release.outputs.next_version }}
          BRANCH_NAME="release/v${VERSION}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git checkout -b $BRANCH_NAME
      
      - name: Update version
        run: |
          VERSION=${{ needs.check-release.outputs.next_version }}
          
          # Update pyproject.toml
          sed -i "s/^version = .*/version = \"${VERSION}\"/" pyproject.toml
          
          # Update __init__.py if it exists
          if [ -f "src/fastmcp_mysql/__init__.py" ]; then
            sed -i "s/__version__ = .*/__version__ = \"${VERSION}\"/" src/fastmcp_mysql/__init__.py
          fi
      
      - name: Generate changelog
        run: |
          VERSION=${{ needs.check-release.outputs.next_version }}
          DATE=$(date +%Y-%m-%d)
          
          # Create CHANGELOG.md if it doesn't exist
          if [ ! -f "CHANGELOG.md" ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
            echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Create temporary changelog entry
          echo "## [${VERSION}] - ${DATE}" > changelog_entry.md
          echo "" >> changelog_entry.md
          
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Categorize commits
          echo "### Added" >> changelog_entry.md
          git log ${PREV_TAG}..HEAD --pretty=format:"%s" | grep "^feat" | sed 's/^feat[(:]*/-/' >> changelog_entry.md || true
          echo "" >> changelog_entry.md
          
          echo "### Fixed" >> changelog_entry.md
          git log ${PREV_TAG}..HEAD --pretty=format:"%s" | grep "^fix" | sed 's/^fix[(:]*/-/' >> changelog_entry.md || true
          echo "" >> changelog_entry.md
          
          echo "### Changed" >> changelog_entry.md
          git log ${PREV_TAG}..HEAD --pretty=format:"%s" | grep -E "^(refactor|perf)" | sed 's/^[a-z]*[(:]*/-/' >> changelog_entry.md || true
          echo "" >> changelog_entry.md
          
          # Insert new entry after the header
          sed -i '/^## \[/,$d' CHANGELOG.md
          cat changelog_entry.md >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Append previous entries
          if [ -n "$PREV_TAG" ]; then
            git show ${PREV_TAG}:CHANGELOG.md 2>/dev/null | sed -n '/^## \[/,$p' >> CHANGELOG.md || true
          fi
          
          rm changelog_entry.md
      
      - name: Commit changes
        run: |
          VERSION=${{ needs.check-release.outputs.next_version }}
          BRANCH_NAME="release/v${VERSION}"
          
          git add pyproject.toml CHANGELOG.md
          git add src/fastmcp_mysql/__init__.py 2>/dev/null || true
          git commit -m "chore: prepare release v${VERSION}"
          git push origin $BRANCH_NAME
      
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.check-release.outputs.next_version }}';
            const releaseType = '${{ needs.check-release.outputs.release_type }}';
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${version}`,
              head: `release/v${version}`,
              base: 'main',
              body: `## ðŸš€ Release v${version}\n\n` +
                    `This is an automated ${releaseType} release.\n\n` +
                    `### Release Checklist\n` +
                    `- [ ] Review CHANGELOG.md\n` +
                    `- [ ] Verify version bumps\n` +
                    `- [ ] Run final tests\n` +
                    `- [ ] Approve and merge\n\n` +
                    `After merging, this will automatically:\n` +
                    `1. Create a GitHub release\n` +
                    `2. Publish to PyPI\n` +
                    `3. Create a development version bump PR`,
              labels: ['release', releaseType]
            });
            
            console.log(`Created PR #${pr.number}`);

  notify-no-release:
    name: Notify No Release Needed
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'false'
    steps:
      - name: Log status
        run: |
          echo "No release needed. No conventional commits found that trigger a version bump."