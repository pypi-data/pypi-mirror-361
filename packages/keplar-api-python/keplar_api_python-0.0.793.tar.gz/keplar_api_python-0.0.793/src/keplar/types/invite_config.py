# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .rep_data_config import RepDataConfig


class InviteConfig(UniversalBaseModel):
    max_responses: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="maxResponses")] = None
    max_responses_per_participant: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="maxResponsesPerParticipant")
    ] = None
    allowed_origins: typing_extensions.Annotated[typing.List[str], FieldMetadata(alias="allowedOrigins")]
    allow_anonymous_responses: typing_extensions.Annotated[bool, FieldMetadata(alias="allowAnonymousResponses")]
    collect_email: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="collectEmail")] = None
    privacy_notice: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="privacyNotice")] = None
    show_call_metadata: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="showCallMetadata")] = (
        None
    )
    rep_data: typing_extensions.Annotated[typing.Optional[RepDataConfig], FieldMetadata(alias="repData")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
