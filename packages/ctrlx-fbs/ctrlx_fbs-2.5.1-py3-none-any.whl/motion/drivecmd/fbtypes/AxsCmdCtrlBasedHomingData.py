# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of control based homing
class AxsCmdCtrlBasedHomingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdCtrlBasedHomingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdCtrlBasedHomingData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdCtrlBasedHomingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # homing basic parameters
    # AxsCmdCtrlBasedHomingData
    def HomingParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.drivecmd.fbtypes.HomingParam import HomingParam
            obj = HomingParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCmdCtrlBasedHomingDataStart(builder): builder.StartObject(1)
def Start(builder):
    return AxsCmdCtrlBasedHomingDataStart(builder)
def AxsCmdCtrlBasedHomingDataAddHomingParam(builder, homingParam): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(homingParam), 0)
def AddHomingParam(builder, homingParam):
    return AxsCmdCtrlBasedHomingDataAddHomingParam(builder, homingParam)
def AxsCmdCtrlBasedHomingDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdCtrlBasedHomingDataEnd(builder)
import motion.drivecmd.fbtypes.HomingParam
try:
    from typing import Optional
except:
    pass

class AxsCmdCtrlBasedHomingDataT(object):

    # AxsCmdCtrlBasedHomingDataT
    def __init__(self):
        self.homingParam = None  # type: Optional[motion.drivecmd.fbtypes.HomingParam.HomingParamT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdCtrlBasedHomingData = AxsCmdCtrlBasedHomingData()
        axsCmdCtrlBasedHomingData.Init(buf, pos)
        return cls.InitFromObj(axsCmdCtrlBasedHomingData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdCtrlBasedHomingData):
        x = AxsCmdCtrlBasedHomingDataT()
        x._UnPack(axsCmdCtrlBasedHomingData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.homingParam == other.homingParam

    # AxsCmdCtrlBasedHomingDataT
    def _UnPack(self, axsCmdCtrlBasedHomingData):
        if axsCmdCtrlBasedHomingData is None:
            return
        if axsCmdCtrlBasedHomingData.HomingParam() is not None:
            self.homingParam = motion.drivecmd.fbtypes.HomingParam.HomingParamT.InitFromObj(axsCmdCtrlBasedHomingData.HomingParam())

    # AxsCmdCtrlBasedHomingDataT
    def Pack(self, builder):
        if self.homingParam is not None:
            homingParam = self.homingParam.Pack(builder)
        AxsCmdCtrlBasedHomingDataStart(builder)
        if self.homingParam is not None:
            AxsCmdCtrlBasedHomingDataAddHomingParam(builder, homingParam)
        axsCmdCtrlBasedHomingData = AxsCmdCtrlBasedHomingDataEnd(builder)
        return axsCmdCtrlBasedHomingData
