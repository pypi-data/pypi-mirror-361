# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of single probe data
class AxsCfgProbeMarkerFailureData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgProbeMarkerFailureData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgProbeMarkerFailureData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgProbeMarkerFailureData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # enable marker failure check
    # AxsCfgProbeMarkerFailureData
    def Enable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # max marker failure number
    # AxsCfgProbeMarkerFailureData
    def MaxNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def AxsCfgProbeMarkerFailureDataStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCfgProbeMarkerFailureDataStart(builder)
def AxsCfgProbeMarkerFailureDataAddEnable(builder, enable): builder.PrependBoolSlot(0, enable, 0)
def AddEnable(builder, enable):
    return AxsCfgProbeMarkerFailureDataAddEnable(builder, enable)
def AxsCfgProbeMarkerFailureDataAddMaxNum(builder, maxNum): builder.PrependInt32Slot(1, maxNum, 0)
def AddMaxNum(builder, maxNum):
    return AxsCfgProbeMarkerFailureDataAddMaxNum(builder, maxNum)
def AxsCfgProbeMarkerFailureDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgProbeMarkerFailureDataEnd(builder)

class AxsCfgProbeMarkerFailureDataT(object):

    # AxsCfgProbeMarkerFailureDataT
    def __init__(self):
        self.enable = False  # type: bool
        self.maxNum = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgProbeMarkerFailureData = AxsCfgProbeMarkerFailureData()
        axsCfgProbeMarkerFailureData.Init(buf, pos)
        return cls.InitFromObj(axsCfgProbeMarkerFailureData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgProbeMarkerFailureData):
        x = AxsCfgProbeMarkerFailureDataT()
        x._UnPack(axsCfgProbeMarkerFailureData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.enable == other.enable and \
            self.maxNum == other.maxNum

    # AxsCfgProbeMarkerFailureDataT
    def _UnPack(self, axsCfgProbeMarkerFailureData):
        if axsCfgProbeMarkerFailureData is None:
            return
        self.enable = axsCfgProbeMarkerFailureData.Enable()
        self.maxNum = axsCfgProbeMarkerFailureData.MaxNum()

    # AxsCfgProbeMarkerFailureDataT
    def Pack(self, builder):
        AxsCfgProbeMarkerFailureDataStart(builder)
        AxsCfgProbeMarkerFailureDataAddEnable(builder, self.enable)
        AxsCfgProbeMarkerFailureDataAddMaxNum(builder, self.maxNum)
        axsCfgProbeMarkerFailureData = AxsCfgProbeMarkerFailureDataEnd(builder)
        return axsCfgProbeMarkerFailureData
