# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.onboarding_prompt_option_request import OnboardingPromptOptionRequest
from typing import Optional, Set
from typing_extensions import Self

class UpdateOnboardingPromptRequest(BaseModel):
    """
    UpdateOnboardingPromptRequest
    """ # noqa: E501
    title: Annotated[str, Field(min_length=1, strict=True, max_length=100)]
    options: Annotated[List[OnboardingPromptOptionRequest], Field(min_length=1, max_length=50)]
    single_select: Optional[StrictBool] = None
    required: Optional[StrictBool] = None
    in_onboarding: Optional[StrictBool] = None
    type: Optional[StrictInt] = None
    id: Annotated[str, Field(strict=True)]
    __properties: ClassVar[List[str]] = ["title", "options", "single_select", "required", "in_onboarding", "type", "id"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateOnboardingPromptRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item_options in self.options:
                if _item_options:
                    _items.append(_item_options.to_dict())
            _dict['options'] = _items
        # set to None if single_select (nullable) is None
        # and model_fields_set contains the field
        if self.single_select is None and "single_select" in self.model_fields_set:
            _dict['single_select'] = None

        # set to None if required (nullable) is None
        # and model_fields_set contains the field
        if self.required is None and "required" in self.model_fields_set:
            _dict['required'] = None

        # set to None if in_onboarding (nullable) is None
        # and model_fields_set contains the field
        if self.in_onboarding is None and "in_onboarding" in self.model_fields_set:
            _dict['in_onboarding'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateOnboardingPromptRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "options": [OnboardingPromptOptionRequest.from_dict(_item) for _item in obj["options"]] if obj.get("options") is not None else None,
            "single_select": obj.get("single_select"),
            "required": obj.get("required"),
            "in_onboarding": obj.get("in_onboarding"),
            "type": obj.get("type"),
            "id": obj.get("id")
        })
        return _obj


