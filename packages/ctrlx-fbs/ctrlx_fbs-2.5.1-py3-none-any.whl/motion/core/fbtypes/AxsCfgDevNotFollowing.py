# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of reaction if axis device no longer follows the control's command values
class AxsCfgDevNotFollowing(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgDevNotFollowing()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgDevNotFollowing(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgDevNotFollowing
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # error reaction
    # AxsCfgDevNotFollowing
    def ErrReaction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 4

def AxsCfgDevNotFollowingStart(builder): builder.StartObject(1)
def Start(builder):
    return AxsCfgDevNotFollowingStart(builder)
def AxsCfgDevNotFollowingAddErrReaction(builder, errReaction): builder.PrependUint32Slot(0, errReaction, 4)
def AddErrReaction(builder, errReaction):
    return AxsCfgDevNotFollowingAddErrReaction(builder, errReaction)
def AxsCfgDevNotFollowingEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgDevNotFollowingEnd(builder)

class AxsCfgDevNotFollowingT(object):

    # AxsCfgDevNotFollowingT
    def __init__(self):
        self.errReaction = 4  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgDevNotFollowing = AxsCfgDevNotFollowing()
        axsCfgDevNotFollowing.Init(buf, pos)
        return cls.InitFromObj(axsCfgDevNotFollowing)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgDevNotFollowing):
        x = AxsCfgDevNotFollowingT()
        x._UnPack(axsCfgDevNotFollowing)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.errReaction == other.errReaction

    # AxsCfgDevNotFollowingT
    def _UnPack(self, axsCfgDevNotFollowing):
        if axsCfgDevNotFollowing is None:
            return
        self.errReaction = axsCfgDevNotFollowing.ErrReaction()

    # AxsCfgDevNotFollowingT
    def Pack(self, builder):
        AxsCfgDevNotFollowingStart(builder)
        AxsCfgDevNotFollowingAddErrReaction(builder, self.errReaction)
        axsCfgDevNotFollowing = AxsCfgDevNotFollowingEnd(builder)
        return axsCfgDevNotFollowing
