# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connected_account_integration_response import ConnectedAccountIntegrationResponse
from typing import Optional, Set
from typing_extensions import Self

class ConnectedAccountResponse(BaseModel):
    """
    ConnectedAccountResponse
    """ # noqa: E501
    id: StrictStr
    name: Optional[StrictStr] = None
    type: Optional[StrictStr]
    friend_sync: StrictBool
    integrations: Optional[List[ConnectedAccountIntegrationResponse]] = None
    show_activity: StrictBool
    two_way_link: StrictBool
    verified: StrictBool
    visibility: Optional[StrictInt]
    revoked: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "name", "type", "friend_sync", "integrations", "show_activity", "two_way_link", "verified", "visibility", "revoked"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectedAccountResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in integrations (list)
        _items = []
        if self.integrations:
            for _item_integrations in self.integrations:
                if _item_integrations:
                    _items.append(_item_integrations.to_dict())
            _dict['integrations'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if integrations (nullable) is None
        # and model_fields_set contains the field
        if self.integrations is None and "integrations" in self.model_fields_set:
            _dict['integrations'] = None

        # set to None if visibility (nullable) is None
        # and model_fields_set contains the field
        if self.visibility is None and "visibility" in self.model_fields_set:
            _dict['visibility'] = None

        # set to None if revoked (nullable) is None
        # and model_fields_set contains the field
        if self.revoked is None and "revoked" in self.model_fields_set:
            _dict['revoked'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectedAccountResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "friend_sync": obj.get("friend_sync"),
            "integrations": [ConnectedAccountIntegrationResponse.from_dict(_item) for _item in obj["integrations"]] if obj.get("integrations") is not None else None,
            "show_activity": obj.get("show_activity"),
            "two_way_link": obj.get("two_way_link"),
            "verified": obj.get("verified"),
            "visibility": obj.get("visibility"),
            "revoked": obj.get("revoked")
        })
        return _obj


