# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameter defines the buffer type of generic command
class CmdBufferType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CmdBufferType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmdBufferType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CmdBufferType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # buffered type for generic command
    # CmdBufferType
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CmdBufferTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return CmdBufferTypeStart(builder)
def CmdBufferTypeAddBuffered(builder, buffered): builder.PrependBoolSlot(0, buffered, 0)
def AddBuffered(builder, buffered):
    return CmdBufferTypeAddBuffered(builder, buffered)
def CmdBufferTypeEnd(builder): return builder.EndObject()
def End(builder):
    return CmdBufferTypeEnd(builder)

class CmdBufferTypeT(object):

    # CmdBufferTypeT
    def __init__(self):
        self.buffered = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdBufferType = CmdBufferType()
        cmdBufferType.Init(buf, pos)
        return cls.InitFromObj(cmdBufferType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdBufferType):
        x = CmdBufferTypeT()
        x._UnPack(cmdBufferType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.buffered == other.buffered

    # CmdBufferTypeT
    def _UnPack(self, cmdBufferType):
        if cmdBufferType is None:
            return
        self.buffered = cmdBufferType.Buffered()

    # CmdBufferTypeT
    def Pack(self, builder):
        CmdBufferTypeStart(builder)
        CmdBufferTypeAddBuffered(builder, self.buffered)
        cmdBufferType = CmdBufferTypeEnd(builder)
        return cmdBufferType
