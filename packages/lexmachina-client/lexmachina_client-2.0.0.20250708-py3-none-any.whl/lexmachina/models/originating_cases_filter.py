# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20250708
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from lexmachina.models.originating_district_case_filter import OriginatingDistrictCaseFilter
from lexmachina.models.originating_judge_filter import OriginatingJudgeFilter
from typing import Optional, Set
from typing_extensions import Self

class OriginatingCasesFilter(BaseModel):
    """
    OriginatingCasesFilter
    """ # noqa: E501
    include_district_case_ids: Optional[List[StrictInt]] = Field(default=None, alias="includeDistrictCaseIds")
    exclude_district_case_ids: Optional[List[StrictInt]] = Field(default=None, alias="excludeDistrictCaseIds")
    include_originating_judges: Optional[OriginatingJudgeFilter] = Field(default=None, alias="includeOriginatingJudges")
    originating_district_case_criteria: Optional[OriginatingDistrictCaseFilter] = Field(default=None, alias="originatingDistrictCaseCriteria")
    __properties: ClassVar[List[str]] = ["includeDistrictCaseIds", "excludeDistrictCaseIds", "includeOriginatingJudges", "originatingDistrictCaseCriteria"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OriginatingCasesFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of include_originating_judges
        if self.include_originating_judges:
            _dict['includeOriginatingJudges'] = self.include_originating_judges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of originating_district_case_criteria
        if self.originating_district_case_criteria:
            _dict['originatingDistrictCaseCriteria'] = self.originating_district_case_criteria.to_dict()
        # set to None if include_district_case_ids (nullable) is None
        # and model_fields_set contains the field
        if self.include_district_case_ids is None and "include_district_case_ids" in self.model_fields_set:
            _dict['includeDistrictCaseIds'] = None

        # set to None if exclude_district_case_ids (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_district_case_ids is None and "exclude_district_case_ids" in self.model_fields_set:
            _dict['excludeDistrictCaseIds'] = None

        # set to None if include_originating_judges (nullable) is None
        # and model_fields_set contains the field
        if self.include_originating_judges is None and "include_originating_judges" in self.model_fields_set:
            _dict['includeOriginatingJudges'] = None

        # set to None if originating_district_case_criteria (nullable) is None
        # and model_fields_set contains the field
        if self.originating_district_case_criteria is None and "originating_district_case_criteria" in self.model_fields_set:
            _dict['originatingDistrictCaseCriteria'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OriginatingCasesFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includeDistrictCaseIds": obj.get("includeDistrictCaseIds"),
            "excludeDistrictCaseIds": obj.get("excludeDistrictCaseIds"),
            "includeOriginatingJudges": OriginatingJudgeFilter.from_dict(obj["includeOriginatingJudges"]) if obj.get("includeOriginatingJudges") is not None else None,
            "originatingDistrictCaseCriteria": OriginatingDistrictCaseFilter.from_dict(obj["originatingDistrictCaseCriteria"]) if obj.get("originatingDistrictCaseCriteria") is not None else None
        })
        return _obj


