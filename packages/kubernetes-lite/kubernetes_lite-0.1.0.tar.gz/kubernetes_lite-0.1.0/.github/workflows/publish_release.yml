name: Publish Release

on:
  release:
    types: [published]
  push: 
    branches: [main]

jobs:
  build_bdist:
    name: Build binary distribution on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        #  soon
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-13, macos-14, windows-latest]

    steps:
      - uses: actions/checkout@v4

      # Used to host cibuildwheel
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11' 
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.23.2

      - name: Build release wheels
        if: github.event_name == 'release'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION_FOR_KUBERNETES_LITE: ${{github.event.release.tag_name}}

      - name: Build test wheels
        if: github.event_name != 'release'
        run: python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: kubernetes-lite-release-bdist-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: kubernetes-lite-release-src-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./dist/*.tar.gz


  upload_pypi:
    name: Upload artifacts
    needs: [build_bdist, build_sdist]
    runs-on: ubuntu-latest
    environment: "pypi"
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all kubernetes lite artifacts into dist/
          pattern: kubernetes-lite-release-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1