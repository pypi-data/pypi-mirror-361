# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WriterGroupDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WriterGroupDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWriterGroupDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WriterGroupDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WriterGroupDataType
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WriterGroupDataType
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WriterGroupDataType
    def SecurityMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # WriterGroupDataType
    def SecurityGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WriterGroupDataType
    def SecurityKeyServices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.EndpointDescription import EndpointDescription
            obj = EndpointDescription()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WriterGroupDataType
    def SecurityKeyServicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WriterGroupDataType
    def SecurityKeyServicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # WriterGroupDataType
    def MaxNetworkMessageSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # WriterGroupDataType
    def GroupProperties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.KeyValuePair import KeyValuePair
            obj = KeyValuePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WriterGroupDataType
    def GroupPropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WriterGroupDataType
    def GroupPropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # WriterGroupDataType
    def WriterGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # WriterGroupDataType
    def PublishingInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WriterGroupDataType
    def KeepAliveTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WriterGroupDataType
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # WriterGroupDataType
    def LocaleIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WriterGroupDataType
    def LocaleIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WriterGroupDataType
    def LocaleIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # WriterGroupDataType
    def HeaderLayoutUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WriterGroupDataType
    def TransportSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.WriterGroupTransportDataType import WriterGroupTransportDataType
            obj = WriterGroupTransportDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WriterGroupDataType
    def MessageSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.subtypes.WriterGroupMessageDataType import WriterGroupMessageDataType
            obj = WriterGroupMessageDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WriterGroupDataType
    def DataSetWriters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.DataSetWriterDataType import DataSetWriterDataType
            obj = DataSetWriterDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WriterGroupDataType
    def DataSetWritersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WriterGroupDataType
    def DataSetWritersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

def WriterGroupDataTypeStart(builder): builder.StartObject(16)
def Start(builder):
    return WriterGroupDataTypeStart(builder)
def WriterGroupDataTypeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return WriterGroupDataTypeAddName(builder, name)
def WriterGroupDataTypeAddEnabled(builder, enabled): builder.PrependBoolSlot(1, enabled, 0)
def AddEnabled(builder, enabled):
    return WriterGroupDataTypeAddEnabled(builder, enabled)
def WriterGroupDataTypeAddSecurityMode(builder, securityMode): builder.PrependInt32Slot(2, securityMode, 0)
def AddSecurityMode(builder, securityMode):
    return WriterGroupDataTypeAddSecurityMode(builder, securityMode)
def WriterGroupDataTypeAddSecurityGroupId(builder, securityGroupId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(securityGroupId), 0)
def AddSecurityGroupId(builder, securityGroupId):
    return WriterGroupDataTypeAddSecurityGroupId(builder, securityGroupId)
def WriterGroupDataTypeAddSecurityKeyServices(builder, securityKeyServices): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(securityKeyServices), 0)
def AddSecurityKeyServices(builder, securityKeyServices):
    return WriterGroupDataTypeAddSecurityKeyServices(builder, securityKeyServices)
def WriterGroupDataTypeStartSecurityKeyServicesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSecurityKeyServicesVector(builder, numElems):
    return WriterGroupDataTypeStartSecurityKeyServicesVector(builder, numElems)
def WriterGroupDataTypeAddMaxNetworkMessageSize(builder, maxNetworkMessageSize): builder.PrependUint32Slot(5, maxNetworkMessageSize, 0)
def AddMaxNetworkMessageSize(builder, maxNetworkMessageSize):
    return WriterGroupDataTypeAddMaxNetworkMessageSize(builder, maxNetworkMessageSize)
def WriterGroupDataTypeAddGroupProperties(builder, groupProperties): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(groupProperties), 0)
def AddGroupProperties(builder, groupProperties):
    return WriterGroupDataTypeAddGroupProperties(builder, groupProperties)
def WriterGroupDataTypeStartGroupPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartGroupPropertiesVector(builder, numElems):
    return WriterGroupDataTypeStartGroupPropertiesVector(builder, numElems)
def WriterGroupDataTypeAddWriterGroupId(builder, writerGroupId): builder.PrependUint16Slot(7, writerGroupId, 0)
def AddWriterGroupId(builder, writerGroupId):
    return WriterGroupDataTypeAddWriterGroupId(builder, writerGroupId)
def WriterGroupDataTypeAddPublishingInterval(builder, publishingInterval): builder.PrependFloat64Slot(8, publishingInterval, 0.0)
def AddPublishingInterval(builder, publishingInterval):
    return WriterGroupDataTypeAddPublishingInterval(builder, publishingInterval)
def WriterGroupDataTypeAddKeepAliveTime(builder, keepAliveTime): builder.PrependFloat64Slot(9, keepAliveTime, 0.0)
def AddKeepAliveTime(builder, keepAliveTime):
    return WriterGroupDataTypeAddKeepAliveTime(builder, keepAliveTime)
def WriterGroupDataTypeAddPriority(builder, priority): builder.PrependUint8Slot(10, priority, 0)
def AddPriority(builder, priority):
    return WriterGroupDataTypeAddPriority(builder, priority)
def WriterGroupDataTypeAddLocaleIds(builder, localeIds): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(localeIds), 0)
def AddLocaleIds(builder, localeIds):
    return WriterGroupDataTypeAddLocaleIds(builder, localeIds)
def WriterGroupDataTypeStartLocaleIdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartLocaleIdsVector(builder, numElems):
    return WriterGroupDataTypeStartLocaleIdsVector(builder, numElems)
def WriterGroupDataTypeAddHeaderLayoutUri(builder, headerLayoutUri): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(headerLayoutUri), 0)
def AddHeaderLayoutUri(builder, headerLayoutUri):
    return WriterGroupDataTypeAddHeaderLayoutUri(builder, headerLayoutUri)
def WriterGroupDataTypeAddTransportSettings(builder, transportSettings): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(transportSettings), 0)
def AddTransportSettings(builder, transportSettings):
    return WriterGroupDataTypeAddTransportSettings(builder, transportSettings)
def WriterGroupDataTypeAddMessageSettings(builder, messageSettings): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(messageSettings), 0)
def AddMessageSettings(builder, messageSettings):
    return WriterGroupDataTypeAddMessageSettings(builder, messageSettings)
def WriterGroupDataTypeAddDataSetWriters(builder, dataSetWriters): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetWriters), 0)
def AddDataSetWriters(builder, dataSetWriters):
    return WriterGroupDataTypeAddDataSetWriters(builder, dataSetWriters)
def WriterGroupDataTypeStartDataSetWritersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDataSetWritersVector(builder, numElems):
    return WriterGroupDataTypeStartDataSetWritersVector(builder, numElems)
def WriterGroupDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return WriterGroupDataTypeEnd(builder)
import comm.opcua.structure.DataSetWriterDataType
import comm.opcua.structure.EndpointDescription
import comm.opcua.structure.KeyValuePair
import comm.opcua.subtypes.WriterGroupMessageDataType
import comm.opcua.subtypes.WriterGroupTransportDataType
try:
    from typing import List, Optional
except:
    pass

class WriterGroupDataTypeT(object):

    # WriterGroupDataTypeT
    def __init__(self):
        self.name = None  # type: str
        self.enabled = False  # type: bool
        self.securityMode = 0  # type: int
        self.securityGroupId = None  # type: str
        self.securityKeyServices = None  # type: List[comm.opcua.structure.EndpointDescription.EndpointDescriptionT]
        self.maxNetworkMessageSize = 0  # type: int
        self.groupProperties = None  # type: List[comm.opcua.structure.KeyValuePair.KeyValuePairT]
        self.writerGroupId = 0  # type: int
        self.publishingInterval = 0.0  # type: float
        self.keepAliveTime = 0.0  # type: float
        self.priority = 0  # type: int
        self.localeIds = None  # type: List[str]
        self.headerLayoutUri = None  # type: str
        self.transportSettings = None  # type: Optional[comm.opcua.subtypes.WriterGroupTransportDataType.WriterGroupTransportDataTypeT]
        self.messageSettings = None  # type: Optional[comm.opcua.subtypes.WriterGroupMessageDataType.WriterGroupMessageDataTypeT]
        self.dataSetWriters = None  # type: List[comm.opcua.structure.DataSetWriterDataType.DataSetWriterDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        writerGroupDataType = WriterGroupDataType()
        writerGroupDataType.Init(buf, pos)
        return cls.InitFromObj(writerGroupDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, writerGroupDataType):
        x = WriterGroupDataTypeT()
        x._UnPack(writerGroupDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.enabled == other.enabled and \
            self.securityMode == other.securityMode and \
            self.securityGroupId == other.securityGroupId and \
            self.securityKeyServices == other.securityKeyServices and \
            self.maxNetworkMessageSize == other.maxNetworkMessageSize and \
            self.groupProperties == other.groupProperties and \
            self.writerGroupId == other.writerGroupId and \
            self.publishingInterval == other.publishingInterval and \
            self.keepAliveTime == other.keepAliveTime and \
            self.priority == other.priority and \
            self.localeIds == other.localeIds and \
            self.headerLayoutUri == other.headerLayoutUri and \
            self.transportSettings == other.transportSettings and \
            self.messageSettings == other.messageSettings and \
            self.dataSetWriters == other.dataSetWriters

    # WriterGroupDataTypeT
    def _UnPack(self, writerGroupDataType):
        if writerGroupDataType is None:
            return
        self.name = writerGroupDataType.Name()
        self.enabled = writerGroupDataType.Enabled()
        self.securityMode = writerGroupDataType.SecurityMode()
        self.securityGroupId = writerGroupDataType.SecurityGroupId()
        if not writerGroupDataType.SecurityKeyServicesIsNone():
            self.securityKeyServices = []
            for i in range(writerGroupDataType.SecurityKeyServicesLength()):
                if writerGroupDataType.SecurityKeyServices(i) is None:
                    self.securityKeyServices.append(None)
                else:
                    endpointDescription_ = comm.opcua.structure.EndpointDescription.EndpointDescriptionT.InitFromObj(writerGroupDataType.SecurityKeyServices(i))
                    self.securityKeyServices.append(endpointDescription_)
        self.maxNetworkMessageSize = writerGroupDataType.MaxNetworkMessageSize()
        if not writerGroupDataType.GroupPropertiesIsNone():
            self.groupProperties = []
            for i in range(writerGroupDataType.GroupPropertiesLength()):
                if writerGroupDataType.GroupProperties(i) is None:
                    self.groupProperties.append(None)
                else:
                    keyValuePair_ = comm.opcua.structure.KeyValuePair.KeyValuePairT.InitFromObj(writerGroupDataType.GroupProperties(i))
                    self.groupProperties.append(keyValuePair_)
        self.writerGroupId = writerGroupDataType.WriterGroupId()
        self.publishingInterval = writerGroupDataType.PublishingInterval()
        self.keepAliveTime = writerGroupDataType.KeepAliveTime()
        self.priority = writerGroupDataType.Priority()
        if not writerGroupDataType.LocaleIdsIsNone():
            self.localeIds = []
            for i in range(writerGroupDataType.LocaleIdsLength()):
                self.localeIds.append(writerGroupDataType.LocaleIds(i))
        self.headerLayoutUri = writerGroupDataType.HeaderLayoutUri()
        if writerGroupDataType.TransportSettings() is not None:
            self.transportSettings = comm.opcua.subtypes.WriterGroupTransportDataType.WriterGroupTransportDataTypeT.InitFromObj(writerGroupDataType.TransportSettings())
        if writerGroupDataType.MessageSettings() is not None:
            self.messageSettings = comm.opcua.subtypes.WriterGroupMessageDataType.WriterGroupMessageDataTypeT.InitFromObj(writerGroupDataType.MessageSettings())
        if not writerGroupDataType.DataSetWritersIsNone():
            self.dataSetWriters = []
            for i in range(writerGroupDataType.DataSetWritersLength()):
                if writerGroupDataType.DataSetWriters(i) is None:
                    self.dataSetWriters.append(None)
                else:
                    dataSetWriterDataType_ = comm.opcua.structure.DataSetWriterDataType.DataSetWriterDataTypeT.InitFromObj(writerGroupDataType.DataSetWriters(i))
                    self.dataSetWriters.append(dataSetWriterDataType_)

    # WriterGroupDataTypeT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.securityGroupId is not None:
            securityGroupId = builder.CreateString(self.securityGroupId)
        if self.securityKeyServices is not None:
            securityKeyServiceslist = []
            for i in range(len(self.securityKeyServices)):
                securityKeyServiceslist.append(self.securityKeyServices[i].Pack(builder))
            WriterGroupDataTypeStartSecurityKeyServicesVector(builder, len(self.securityKeyServices))
            for i in reversed(range(len(self.securityKeyServices))):
                builder.PrependUOffsetTRelative(securityKeyServiceslist[i])
            securityKeyServices = builder.EndVector()
        if self.groupProperties is not None:
            groupPropertieslist = []
            for i in range(len(self.groupProperties)):
                groupPropertieslist.append(self.groupProperties[i].Pack(builder))
            WriterGroupDataTypeStartGroupPropertiesVector(builder, len(self.groupProperties))
            for i in reversed(range(len(self.groupProperties))):
                builder.PrependUOffsetTRelative(groupPropertieslist[i])
            groupProperties = builder.EndVector()
        if self.localeIds is not None:
            localeIdslist = []
            for i in range(len(self.localeIds)):
                localeIdslist.append(builder.CreateString(self.localeIds[i]))
            WriterGroupDataTypeStartLocaleIdsVector(builder, len(self.localeIds))
            for i in reversed(range(len(self.localeIds))):
                builder.PrependUOffsetTRelative(localeIdslist[i])
            localeIds = builder.EndVector()
        if self.headerLayoutUri is not None:
            headerLayoutUri = builder.CreateString(self.headerLayoutUri)
        if self.transportSettings is not None:
            transportSettings = self.transportSettings.Pack(builder)
        if self.messageSettings is not None:
            messageSettings = self.messageSettings.Pack(builder)
        if self.dataSetWriters is not None:
            dataSetWriterslist = []
            for i in range(len(self.dataSetWriters)):
                dataSetWriterslist.append(self.dataSetWriters[i].Pack(builder))
            WriterGroupDataTypeStartDataSetWritersVector(builder, len(self.dataSetWriters))
            for i in reversed(range(len(self.dataSetWriters))):
                builder.PrependUOffsetTRelative(dataSetWriterslist[i])
            dataSetWriters = builder.EndVector()
        WriterGroupDataTypeStart(builder)
        if self.name is not None:
            WriterGroupDataTypeAddName(builder, name)
        WriterGroupDataTypeAddEnabled(builder, self.enabled)
        WriterGroupDataTypeAddSecurityMode(builder, self.securityMode)
        if self.securityGroupId is not None:
            WriterGroupDataTypeAddSecurityGroupId(builder, securityGroupId)
        if self.securityKeyServices is not None:
            WriterGroupDataTypeAddSecurityKeyServices(builder, securityKeyServices)
        WriterGroupDataTypeAddMaxNetworkMessageSize(builder, self.maxNetworkMessageSize)
        if self.groupProperties is not None:
            WriterGroupDataTypeAddGroupProperties(builder, groupProperties)
        WriterGroupDataTypeAddWriterGroupId(builder, self.writerGroupId)
        WriterGroupDataTypeAddPublishingInterval(builder, self.publishingInterval)
        WriterGroupDataTypeAddKeepAliveTime(builder, self.keepAliveTime)
        WriterGroupDataTypeAddPriority(builder, self.priority)
        if self.localeIds is not None:
            WriterGroupDataTypeAddLocaleIds(builder, localeIds)
        if self.headerLayoutUri is not None:
            WriterGroupDataTypeAddHeaderLayoutUri(builder, headerLayoutUri)
        if self.transportSettings is not None:
            WriterGroupDataTypeAddTransportSettings(builder, transportSettings)
        if self.messageSettings is not None:
            WriterGroupDataTypeAddMessageSettings(builder, messageSettings)
        if self.dataSetWriters is not None:
            WriterGroupDataTypeAddDataSetWriters(builder, dataSetWriters)
        writerGroupDataType = WriterGroupDataTypeEnd(builder)
        return writerGroupDataType
