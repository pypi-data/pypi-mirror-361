
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { SyncDescriptor } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/descriptors';
import { IQuickInputService } from '@codingame/monaco-vscode-api/vscode/vs/platform/quickinput/common/quickInput.service';
import { CancellationToken } from '@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation';
import { StandaloneQuickInputService } from '@codingame/monaco-vscode-api/vscode/vs/editor/standalone/browser/quickInput/standaloneQuickInputService';
import { StandaloneServices } from '@codingame/monaco-vscode-api/vscode/vs/editor/standalone/browser/standaloneServices';
import { IInstantiationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import '@codingame/monaco-vscode-api/vscode/vs/platform/quickinput/browser/quickInputController';
import { QuickInputService } from './vscode/src/vs/workbench/services/quickinput/browser/quickInputService.js';
import { ICodeEditorService } from '@codingame/monaco-vscode-api/vscode/vs/editor/browser/services/codeEditorService.service';
import { StandaloneCodeEditor } from '@codingame/monaco-vscode-api/vscode/vs/editor/standalone/browser/standaloneCodeEditor';
import { CommandsQuickAccessProvider } from './vscode/src/vs/workbench/contrib/quickaccess/browser/commandsQuickAccess.js';
import './vscode/src/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoLineQuickAccess.js';
import '@codingame/monaco-vscode-ea14e352-8f1c-5569-b79a-8a96a53e8abe-common/vscode/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoSymbolQuickAccess';
import './vscode/src/vs/workbench/browser/actions/quickAccessActions.js';
import './vscode/src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.js';
import './vscode/src/vs/workbench/contrib/url/browser/url.contribution.js';
import '@codingame/monaco-vscode-40cada32-7e9c-528a-81fc-766e4da54147-common/vscode/vs/workbench/browser/workbench.contribution';

let isKeybindingConfigurationVisible = () => {
    return false;
};
let shouldUseGlobalPicker = () => {
    return false;
};
const original = CommandsQuickAccessProvider.prototype['getCommandPicks'];
CommandsQuickAccessProvider.prototype['getCommandPicks'] = async function (token) {
    let result = await original.call(this, token);
    if (!isKeybindingConfigurationVisible()) {
        result = result.map((picks) => ({
            ...picks,
            buttons: undefined
        }));
    }
    return result;
};
let DelegateQuickInputService = class DelegateQuickInputService {
    constructor(instantiationService) {
        this.instantiationService = instantiationService;
        this.workbenchQuickInputService = instantiationService.createInstance(QuickInputService);
    }
    toggleHover() {
        return this.activeService.toggleHover();
    }
    get activeService() {
        const activeCodeEditor = StandaloneServices.get(ICodeEditorService).getFocusedCodeEditor();
        if (activeCodeEditor == null ||
            shouldUseGlobalPicker(activeCodeEditor, activeCodeEditor instanceof StandaloneCodeEditor)) {
            return this.workbenchQuickInputService;
        }
        this.standaloneQuickInputService ?? (this.standaloneQuickInputService = this.instantiationService.createInstance(StandaloneQuickInputService));
        return this.standaloneQuickInputService;
    }
    get currentQuickInput() {
        return this.activeService.currentQuickInput;
    }
    get quickAccess() {
        return this.activeService.quickAccess;
    }
    get backButton() {
        return this.activeService.backButton;
    }
    get onShow() {
        return this.activeService.onShow;
    }
    get onHide() {
        return this.activeService.onHide;
    }
    createQuickWidget() {
        return this.activeService.createQuickWidget();
    }
    pick(picks, options = {}, token = CancellationToken.None) {
        return this.activeService
            .pick(picks, options, token);
    }
    input(options, token) {
        return this.activeService.input(options, token);
    }
    createQuickPick(options = { useSeparators: false }) {
        return this.activeService.createQuickPick(options);
    }
    createInputBox() {
        return this.activeService.createInputBox();
    }
    focus() {
        return this.activeService.focus();
    }
    toggle() {
        return this.activeService.toggle();
    }
    navigate(next, quickNavigate) {
        return this.activeService.navigate(next, quickNavigate);
    }
    accept() {
        return this.activeService.accept();
    }
    back() {
        return this.activeService.back();
    }
    cancel() {
        return this.activeService.cancel();
    }
    setAlignment(alignment) {
        return this.activeService.setAlignment(alignment);
    }
};
DelegateQuickInputService = __decorate([
    __param(0, IInstantiationService)
], DelegateQuickInputService);
function getServiceOverride({ isKeybindingConfigurationVisible: _isKeybindingConfigurationVisible, shouldUseGlobalPicker: _shouldUseGlobalPicker } = {}) {
    if (_isKeybindingConfigurationVisible != null) {
        isKeybindingConfigurationVisible = _isKeybindingConfigurationVisible;
    }
    if (_shouldUseGlobalPicker != null) {
        shouldUseGlobalPicker = _shouldUseGlobalPicker;
    }
    return {
        [IQuickInputService.toString()]: new SyncDescriptor(DelegateQuickInputService, [], true)
    };
}

export { getServiceOverride as default };
