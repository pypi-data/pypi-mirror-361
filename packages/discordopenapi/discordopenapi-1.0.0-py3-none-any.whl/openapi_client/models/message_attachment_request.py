# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MessageAttachmentRequest(BaseModel):
    """
    MessageAttachmentRequest
    """ # noqa: E501
    id: Annotated[str, Field(strict=True)]
    filename: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = None
    duration_secs: Optional[Union[Annotated[float, Field(le=2147483647, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = None
    waveform: Optional[Annotated[str, Field(strict=True, max_length=400)]] = None
    title: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = None
    is_remix: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "filename", "description", "duration_secs", "waveform", "title", "is_remix"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageAttachmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if filename (nullable) is None
        # and model_fields_set contains the field
        if self.filename is None and "filename" in self.model_fields_set:
            _dict['filename'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if duration_secs (nullable) is None
        # and model_fields_set contains the field
        if self.duration_secs is None and "duration_secs" in self.model_fields_set:
            _dict['duration_secs'] = None

        # set to None if waveform (nullable) is None
        # and model_fields_set contains the field
        if self.waveform is None and "waveform" in self.model_fields_set:
            _dict['waveform'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if is_remix (nullable) is None
        # and model_fields_set contains the field
        if self.is_remix is None and "is_remix" in self.model_fields_set:
            _dict['is_remix'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageAttachmentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "filename": obj.get("filename"),
            "description": obj.get("description"),
            "duration_secs": obj.get("duration_secs"),
            "waveform": obj.get("waveform"),
            "title": obj.get("title"),
            "is_remix": obj.get("is_remix")
        })
        return _obj


