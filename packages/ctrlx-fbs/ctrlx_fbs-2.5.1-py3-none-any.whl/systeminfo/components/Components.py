# automatically generated by the FlatBuffers compiler, do not modify

# namespace: components

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Components(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Components()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsComponents(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Components
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Components
    def Components(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from systeminfo.components.Component import Component
            obj = Component()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Components
    def ComponentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Components
    def ComponentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ComponentsStart(builder): builder.StartObject(1)
def Start(builder):
    return ComponentsStart(builder)
def ComponentsAddComponents(builder, components): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(components), 0)
def AddComponents(builder, components):
    return ComponentsAddComponents(builder, components)
def ComponentsStartComponentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartComponentsVector(builder, numElems):
    return ComponentsStartComponentsVector(builder, numElems)
def ComponentsEnd(builder): return builder.EndObject()
def End(builder):
    return ComponentsEnd(builder)
import systeminfo.components.Component
try:
    from typing import List
except:
    pass

class ComponentsT(object):

    # ComponentsT
    def __init__(self):
        self.components = None  # type: List[systeminfo.components.Component.ComponentT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        components = Components()
        components.Init(buf, pos)
        return cls.InitFromObj(components)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, components):
        x = ComponentsT()
        x._UnPack(components)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.components == other.components

    # ComponentsT
    def _UnPack(self, components):
        if components is None:
            return
        if not components.ComponentsIsNone():
            self.components = []
            for i in range(components.ComponentsLength()):
                if components.Components(i) is None:
                    self.components.append(None)
                else:
                    component_ = systeminfo.components.Component.ComponentT.InitFromObj(components.Components(i))
                    self.components.append(component_)

    # ComponentsT
    def Pack(self, builder):
        if self.components is not None:
            componentslist = []
            for i in range(len(self.components)):
                componentslist.append(self.components[i].Pack(builder))
            ComponentsStartComponentsVector(builder, len(self.components))
            for i in reversed(range(len(self.components))):
                builder.PrependUOffsetTRelative(componentslist[i])
            components = builder.EndVector()
        ComponentsStart(builder)
        if self.components is not None:
            ComponentsAddComponents(builder, components)
        components = ComponentsEnd(builder)
        return components
