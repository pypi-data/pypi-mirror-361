# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.user_response import UserResponse
from openapi_client.models.webhook_source_channel_response import WebhookSourceChannelResponse
from openapi_client.models.webhook_source_guild_response import WebhookSourceGuildResponse
from typing import Optional, Set
from typing_extensions import Self

class ChannelFollowerWebhookResponse(BaseModel):
    """
    ChannelFollowerWebhookResponse
    """ # noqa: E501
    application_id: Optional[Annotated[str, Field(strict=True)]] = None
    avatar: Optional[StrictStr] = None
    channel_id: Optional[Annotated[str, Field(strict=True)]] = None
    guild_id: Optional[Annotated[str, Field(strict=True)]] = None
    id: Annotated[str, Field(strict=True)]
    name: StrictStr
    type: StrictInt
    user: Optional[UserResponse] = None
    source_guild: Optional[WebhookSourceGuildResponse] = None
    source_channel: Optional[WebhookSourceChannelResponse] = None
    __properties: ClassVar[List[str]] = ["application_id", "avatar", "channel_id", "guild_id", "id", "name", "type", "user", "source_guild", "source_channel"]

    @field_validator('application_id')
    def application_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    @field_validator('channel_id')
    def channel_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    @field_validator('guild_id')
    def guild_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChannelFollowerWebhookResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_guild
        if self.source_guild:
            _dict['source_guild'] = self.source_guild.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_channel
        if self.source_channel:
            _dict['source_channel'] = self.source_channel.to_dict()
        # set to None if avatar (nullable) is None
        # and model_fields_set contains the field
        if self.avatar is None and "avatar" in self.model_fields_set:
            _dict['avatar'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        # set to None if source_guild (nullable) is None
        # and model_fields_set contains the field
        if self.source_guild is None and "source_guild" in self.model_fields_set:
            _dict['source_guild'] = None

        # set to None if source_channel (nullable) is None
        # and model_fields_set contains the field
        if self.source_channel is None and "source_channel" in self.model_fields_set:
            _dict['source_channel'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChannelFollowerWebhookResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application_id": obj.get("application_id"),
            "avatar": obj.get("avatar"),
            "channel_id": obj.get("channel_id"),
            "guild_id": obj.get("guild_id"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "user": UserResponse.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "source_guild": WebhookSourceGuildResponse.from_dict(obj["source_guild"]) if obj.get("source_guild") is not None else None,
            "source_channel": WebhookSourceChannelResponse.from_dict(obj["source_channel"]) if obj.get("source_channel") is not None else None
        })
        return _obj


