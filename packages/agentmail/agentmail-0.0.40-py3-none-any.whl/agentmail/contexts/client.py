# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.limit import Limit
from ..types.page_token import PageToken
from .raw_client import AsyncRawContextsClient, RawContextsClient
from .types.context import Context
from .types.context_data import ContextData
from .types.context_id import ContextId
from .types.context_is_event import ContextIsEvent
from .types.context_metadata import ContextMetadata
from .types.context_type import ContextType
from .types.list_contexts_response import ListContextsResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ContextsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawContextsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawContextsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawContextsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        limit: typing.Optional[Limit] = None,
        page_token: typing.Optional[PageToken] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListContextsResponse:
        """
        Parameters
        ----------
        limit : typing.Optional[Limit]

        page_token : typing.Optional[PageToken]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListContextsResponse

        Examples
        --------
        from agentmail import AgentMail
        client = AgentMail(api_key="YOUR_API_KEY", )
        client.contexts.list()
        """
        _response = self._raw_client.list(limit=limit, page_token=page_token, request_options=request_options)
        return _response.data

    def get(self, context_id: ContextId, *, request_options: typing.Optional[RequestOptions] = None) -> Context:
        """
        Parameters
        ----------
        context_id : ContextId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Context

        Examples
        --------
        from agentmail import AgentMail
        client = AgentMail(api_key="YOUR_API_KEY", )
        client.contexts.get(context_id='context_id', )
        """
        _response = self._raw_client.get(context_id, request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        type: ContextType,
        data: ContextData,
        is_event: ContextIsEvent,
        metadata: typing.Optional[ContextMetadata] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Context:
        """
        Parameters
        ----------
        type : ContextType

        data : ContextData

        is_event : ContextIsEvent

        metadata : typing.Optional[ContextMetadata]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Context

        Examples
        --------
        from agentmail import AgentMail
        client = AgentMail(api_key="YOUR_API_KEY", )
        client.contexts.create(type='type', data={'data': {'key': 'value'}
        }, is_event=True, )
        """
        _response = self._raw_client.create(
            type=type, data=data, is_event=is_event, metadata=metadata, request_options=request_options
        )
        return _response.data

    def delete(self, context_id: ContextId, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        context_id : ContextId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from agentmail import AgentMail
        client = AgentMail(api_key="YOUR_API_KEY", )
        client.contexts.delete(context_id='context_id', )
        """
        _response = self._raw_client.delete(context_id, request_options=request_options)
        return _response.data


class AsyncContextsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawContextsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawContextsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawContextsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        limit: typing.Optional[Limit] = None,
        page_token: typing.Optional[PageToken] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListContextsResponse:
        """
        Parameters
        ----------
        limit : typing.Optional[Limit]

        page_token : typing.Optional[PageToken]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListContextsResponse

        Examples
        --------
        from agentmail import AsyncAgentMail
        import asyncio
        client = AsyncAgentMail(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.contexts.list()
        asyncio.run(main())
        """
        _response = await self._raw_client.list(limit=limit, page_token=page_token, request_options=request_options)
        return _response.data

    async def get(self, context_id: ContextId, *, request_options: typing.Optional[RequestOptions] = None) -> Context:
        """
        Parameters
        ----------
        context_id : ContextId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Context

        Examples
        --------
        from agentmail import AsyncAgentMail
        import asyncio
        client = AsyncAgentMail(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.contexts.get(context_id='context_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(context_id, request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        type: ContextType,
        data: ContextData,
        is_event: ContextIsEvent,
        metadata: typing.Optional[ContextMetadata] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Context:
        """
        Parameters
        ----------
        type : ContextType

        data : ContextData

        is_event : ContextIsEvent

        metadata : typing.Optional[ContextMetadata]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Context

        Examples
        --------
        from agentmail import AsyncAgentMail
        import asyncio
        client = AsyncAgentMail(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.contexts.create(type='type', data={'data': {'key': 'value'}
            }, is_event=True, )
        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            type=type, data=data, is_event=is_event, metadata=metadata, request_options=request_options
        )
        return _response.data

    async def delete(self, context_id: ContextId, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        context_id : ContextId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from agentmail import AsyncAgentMail
        import asyncio
        client = AsyncAgentMail(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.contexts.delete(context_id='context_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete(context_id, request_options=request_options)
        return _response.data
