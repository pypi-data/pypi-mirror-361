# automatically generated by the FlatBuffers compiler, do not modify

# namespace: client

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AddressPlaceholders(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AddressPlaceholders()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAddressPlaceholders(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AddressPlaceholders
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Placeholder for the namespace index
    # AddressPlaceholders
    def Ns(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Placeholder for string identifiers
    # AddressPlaceholders
    def String(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Placeholder for numeric identifiers
    # AddressPlaceholders
    def Integer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Placeholder for guid identifiers
    # AddressPlaceholders
    def Guid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Placeholder for opaque identifiers
    # AddressPlaceholders
    def Opaque(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AddressPlaceholdersStart(builder): builder.StartObject(5)
def Start(builder):
    return AddressPlaceholdersStart(builder)
def AddressPlaceholdersAddNs(builder, ns): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ns), 0)
def AddNs(builder, ns):
    return AddressPlaceholdersAddNs(builder, ns)
def AddressPlaceholdersAddString(builder, string): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(string), 0)
def AddString(builder, string):
    return AddressPlaceholdersAddString(builder, string)
def AddressPlaceholdersAddInteger(builder, integer): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(integer), 0)
def AddInteger(builder, integer):
    return AddressPlaceholdersAddInteger(builder, integer)
def AddressPlaceholdersAddGuid(builder, guid): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(guid), 0)
def AddGuid(builder, guid):
    return AddressPlaceholdersAddGuid(builder, guid)
def AddressPlaceholdersAddOpaque(builder, opaque): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(opaque), 0)
def AddOpaque(builder, opaque):
    return AddressPlaceholdersAddOpaque(builder, opaque)
def AddressPlaceholdersEnd(builder): return builder.EndObject()
def End(builder):
    return AddressPlaceholdersEnd(builder)

class AddressPlaceholdersT(object):

    # AddressPlaceholdersT
    def __init__(self):
        self.ns = None  # type: str
        self.string = None  # type: str
        self.integer = None  # type: str
        self.guid = None  # type: str
        self.opaque = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        addressPlaceholders = AddressPlaceholders()
        addressPlaceholders.Init(buf, pos)
        return cls.InitFromObj(addressPlaceholders)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, addressPlaceholders):
        x = AddressPlaceholdersT()
        x._UnPack(addressPlaceholders)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.ns == other.ns and \
            self.string == other.string and \
            self.integer == other.integer and \
            self.guid == other.guid and \
            self.opaque == other.opaque

    # AddressPlaceholdersT
    def _UnPack(self, addressPlaceholders):
        if addressPlaceholders is None:
            return
        self.ns = addressPlaceholders.Ns()
        self.string = addressPlaceholders.String()
        self.integer = addressPlaceholders.Integer()
        self.guid = addressPlaceholders.Guid()
        self.opaque = addressPlaceholders.Opaque()

    # AddressPlaceholdersT
    def Pack(self, builder):
        if self.ns is not None:
            ns = builder.CreateString(self.ns)
        if self.string is not None:
            string = builder.CreateString(self.string)
        if self.integer is not None:
            integer = builder.CreateString(self.integer)
        if self.guid is not None:
            guid = builder.CreateString(self.guid)
        if self.opaque is not None:
            opaque = builder.CreateString(self.opaque)
        AddressPlaceholdersStart(builder)
        if self.ns is not None:
            AddressPlaceholdersAddNs(builder, ns)
        if self.string is not None:
            AddressPlaceholdersAddString(builder, string)
        if self.integer is not None:
            AddressPlaceholdersAddInteger(builder, integer)
        if self.guid is not None:
            AddressPlaceholdersAddGuid(builder, guid)
        if self.opaque is not None:
            AddressPlaceholdersAddOpaque(builder, opaque)
        addressPlaceholders = AddressPlaceholdersEnd(builder)
        return addressPlaceholders
