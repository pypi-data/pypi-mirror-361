[1m========================================================================= test session starts =========================================================================[0m
platform darwin -- Python 3.13.5, pytest-8.4.0, pluggy-1.6.0 -- /Users/les/Projects/jinja2-async-environment/.venv/bin/python
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /Users/les/Projects/jinja2-async-environment
configfile: pyproject.toml
testpaths: tests, jinja2_async_environment
plugins: xdist-3.7.0, anyio-4.9.0, timeout-2.4.0, cov-6.2.1, mock-3.14.1, benchmark-5.1.0, asyncio-1.0.0
timeout: 300.0s
timeout method: thread
timeout func_only: False
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
[1mcollecting ... [0m[1mcollecting 11 items                                                                                                                                                   [0m[1mcollecting 125 items                                                                                                                                                  [0m[1mcollected 132 items                                                                                                                                                   [0m

tests/test_bccache.py::TestAsyncBytecodeCache::test_get_cache_key [32mPASSED[0m[32m                                                                                        [  0%][0m
tests/test_bccache.py::TestAsyncBytecodeCache::test_get_source_checksum [32mPASSED[0m[32m                                                                                  [  1%][0m
tests/test_bccache.py::TestAsyncBytecodeCache::test_not_implemented_methods [32mPASSED[0m[32m                                                                              [  2%][0m
tests/test_choice_loader.py::TestAsyncChoiceLoader::test_init [32mPASSED[0m[32m                                                                                            [  3%][0m
tests/test_choice_loader.py::TestAsyncChoiceLoader::test_get_source_async_first_loader [32mPASSED[0m[32m                                                                   [  3%][0m
tests/test_choice_loader.py::TestAsyncChoiceLoader::test_get_source_async_second_loader [32mPASSED[0m[32m                                                                  [  4%][0m
tests/test_choice_loader.py::TestAsyncChoiceLoader::test_get_source_async_shared_template [32mPASSED[0m[32m                                                                [  5%][0m
tests/test_choice_loader.py::TestAsyncChoiceLoader::test_get_source_async_nonexistent_template [32mPASSED[0m[32m                                                           [  6%][0m
tests/test_choice_loader.py::TestAsyncChoiceLoader::test_get_source_async_with_path_object [32mPASSED[0m[32m                                                               [  6%][0m
tests/test_choice_loader.py::TestAsyncChoiceLoader::test_list_templates_async [32mPASSED[0m[32m                                                                            [  7%][0m
tests/test_choice_loader.py::TestAsyncChoiceLoader::test_load_async [32mPASSED[0m[32m                                                                                      [  8%][0m
tests/test_compiler.py::TestAsyncFrame::test_copy [32mPASSED[0m[32m                                                                                                        [  9%][0m
tests/test_compiler.py::TestAsyncCodeGenerator::test_visit_block_has_known_extends [32mPASSED[0m[32m                                                                       [  9%][0m
tests/test_compiler.py::TestAsyncCodeGenerator::test_visit_block_normal [32mPASSED[0m[32m                                                                                  [ 10%][0m
tests/test_compiler.py::TestAsyncCodeGenerator::test_visit_extends_exit_on_no_output_check [32mPASSED[0m[32m                                                               [ 11%][0m
tests/test_compiler.py::TestAsyncCodeGenerator::test_visit_extends_fail_on_non_toplevel [32mPASSED[0m[32m                                                                  [ 12%][0m
tests/test_compiler.py::TestAsyncCodeGenerator::test_visit_extends_multiple_times [32mPASSED[0m[32m                                                                        [ 12%][0m
tests/test_compiler.py::TestAsyncCodeGenerator::test_visit_extends_with_known_extends [32mPASSED[0m[32m                                                                    [ 13%][0m
tests/test_compiler.py::TestAsyncCodeGenerator::test_visit_extends_normal [32mPASSED[0m[32m                                                                                [ 14%][0m
tests/test_compiler.py::TestAsyncCodeGenerator::test_visit_extends_set_has_known_extends [32mPASSED[0m[32m                                                                 [ 15%][0m
tests/test_compiler.py::TestAsyncCodeGenerator::test_visit_include_ignore_missing [32mPASSED[0m[32m                                                                        [ 15%][0m
tests/test_compiler.py::TestAsyncCodeGenerator::test_visit_include_with_context [32mPASSED[0m[32m                                                                          [ 16%][0m
tests/test_compiler.py::TestAsyncCodeGenerator::test_visit_include_without_context [32mPASSED[0m[32m                                                                       [ 17%][0m
tests/test_compiler.py::TestAsyncCodeGenerator::test_import_common [32mPASSED[0m[32m                                                                                       [ 18%][0m
tests/test_compiler_coverage.py::test_async_code_generator_init [32mPASSED[0m[32m                                                                                          [ 18%][0m
tests/test_compiler_coverage.py::test_async_code_generator_inheritance [32mPASSED[0m[32m                                                                                   [ 19%][0m
tests/test_compiler_coverage.py::test_visit_asyncfor [31mFAILED[0m[31m                                                                                                     [ 20%][0m
tests/test_compiler_coverage.py::test_visit_asynccall [31mFAILED[0m[31m                                                                                                    [ 21%][0m
tests/test_compiler_coverage.py::test_visit_asyncfilterblock [31mFAILED[0m[31m                                                                                             [ 21%][0m
tests/test_compiler_coverage.py::test_visit_asyncwith [31mFAILED[0m[31m                                                                                                    [ 22%][0m
tests/test_compiler_coverage.py::test_func_code_generator [31mFAILED[0m[31m                                                                                                [ 23%][0m
tests/test_compiler_coverage.py::test_return_buffer_contents [31mFAILED[0m[31m                                                                                             [ 24%][0m
tests/test_compiler_coverage.py::test_visit_asyncblock [31mFAILED[0m[31m                                                                                                   [ 25%][0m
tests/test_dict_loader.py::TestAsyncDictLoader::test_init [32mPASSED[0m[31m                                                                                                [ 25%][0m
tests/test_dict_loader.py::TestAsyncDictLoader::test_get_source_async_existing_template [32mPASSED[0m[31m                                                                  [ 26%][0m
tests/test_dict_loader.py::TestAsyncDictLoader::test_get_source_async_nonexistent_template [32mPASSED[0m[31m                                                               [ 27%][0m
tests/test_dict_loader.py::TestAsyncDictLoader::test_get_source_async_with_path_object [32mPASSED[0m[31m                                                                   [ 28%][0m
tests/test_dict_loader.py::TestAsyncDictLoader::test_list_templates_async [32mPASSED[0m[31m                                                                                [ 28%][0m
tests/test_dict_loader.py::TestAsyncDictLoader::test_load_async [32mPASSED[0m[31m                                                                                          [ 29%][0m
tests/test_dict_loader.py::TestAsyncDictLoader::test_uptodate_function [32mPASSED[0m[31m                                                                                   [ 30%][0m
tests/test_e2e.py::TestEndToEnd::test_render_from_dict_loader [32mPASSED[0m[31m                                                                                            [ 31%][0m
tests/test_e2e.py::TestEndToEnd::test_render_from_function_loader [32mPASSED[0m[31m                                                                                        [ 31%][0m
tests/test_e2e.py::TestEndToEnd::test_template_inheritance [32mPASSED[0m[31m                                                                                               [ 32%][0m
tests/test_e2e.py::TestEndToEnd::test_template_include [32mPASSED[0m[31m                                                                                                   [ 33%][0m
tests/test_e2e.py::TestEndToEnd::test_async_content_generation [32mPASSED[0m[31m                                                                                           [ 34%][0m
tests/test_e2e.py::TestEndToEnd::test_template_not_found [32mPASSED[0m[31m                                                                                                 [ 34%][0m
tests/test_e2e.py::TestEndToEnd::test_select_template [32mPASSED[0m[31m                                                                                                    [ 35%][0m
tests/test_e2e.py::TestEndToEnd::test_get_or_select_template [32mPASSED[0m[31m                                                                                             [ 36%][0m
tests/test_environment.py::TestAsyncEnvironment::test_init [32mPASSED[0m[31m                                                                                               [ 37%][0m
tests/test_environment.py::TestAsyncEnvironment::test_get_template_not_implemented [32mPASSED[0m[31m                                                                       [ 37%][0m
tests/test_environment.py::TestAsyncEnvironment::test_select_template_not_implemented [32mPASSED[0m[31m                                                                    [ 38%][0m
tests/test_environment.py::TestAsyncEnvironment::test_get_or_select_template_not_implemented [32mPASSED[0m[31m                                                             [ 39%][0m
tests/test_environment.py::TestAsyncEnvironment::test_get_template_async_with_template_object [32mPASSED[0m[31m                                                            [ 40%][0m
tests/test_environment.py::TestAsyncEnvironment::test_get_template_async_with_parent [32mPASSED[0m[31m                                                                     [ 40%][0m
tests/test_environment.py::TestAsyncEnvironment::test_get_template_async_with_globals [32mPASSED[0m[31m                                                                    [ 41%][0m
tests/test_environment.py::TestAsyncEnvironment::test_select_template_async_with_empty_list [32mPASSED[0m[31m                                                              [ 42%][0m
tests/test_environment.py::TestAsyncEnvironment::test_select_template_async_with_undefined [32mPASSED[0m[31m                                                               [ 43%][0m
tests/test_environment.py::TestAsyncEnvironment::test_select_template_async_with_template_object [32mPASSED[0m[31m                                                         [ 43%][0m
tests/test_environment.py::TestAsyncEnvironment::test_select_template_async_with_parent [32mPASSED[0m[31m                                                                  [ 44%][0m
tests/test_environment.py::TestAsyncEnvironment::test_select_template_async_not_found [32mPASSED[0m[31m                                                                    [ 45%][0m
tests/test_environment.py::TestAsyncEnvironment::test_get_or_select_template_async_with_string [32mPASSED[0m[31m                                                           [ 46%][0m
tests/test_environment.py::TestAsyncEnvironment::test_get_or_select_template_async_with_template_object [32mPASSED[0m[31m                                                  [ 46%][0m
tests/test_environment.py::TestAsyncEnvironment::test_get_or_select_template_async_with_list [32mPASSED[0m[31m                                                             [ 47%][0m
tests/test_environment.py::TestAsyncEnvironment::test_load_template_async_with_template_object [32mPASSED[0m[31m                                                           [ 48%][0m
tests/test_environment.py::TestAsyncEnvironment::test_load_template_async_with_string [32mPASSED[0m[31m                                                                    [ 49%][0m
tests/test_environment.py::TestAsyncEnvironment::test_load_template_async_with_iterable [32mPASSED[0m[31m                                                                  [ 50%][0m
tests/test_environment.py::TestAsyncEnvironment::test_load_template_async_with_iterable_all_not_found [32mPASSED[0m[31m                                                    [ 50%][0m
tests/test_environment.py::TestAsyncEnvironment::test_get_template_no_loader [32mPASSED[0m[31m                                                                             [ 51%][0m
tests/test_environment.py::TestAsyncEnvironment::test_get_template_with_cache_hit [32mPASSED[0m[31m                                                                        [ 52%][0m
tests/test_environment.py::TestAsyncEnvironment::test_get_template_with_cache_hit_and_globals [32mPASSED[0m[31m                                                            [ 53%][0m
tests/test_environment.py::TestAsyncEnvironment::test_get_template_with_cache_miss [32mPASSED[0m[31m                                                                       [ 53%][0m
tests/test_environment_coverage.py::test_async_environment_init [32mPASSED[0m[31m                                                                                          [ 54%][0m
tests/test_environment_coverage.py::test_generate [32mPASSED[0m[31m                                                                                                        [ 55%][0m
tests/test_environment_coverage.py::test_compile [31mFAILED[0m[31m                                                                                                         [ 56%][0m
tests/test_environment_coverage.py::test_async_yield_from [31mFAILED[0m[31m                                                                                                [ 56%][0m
tests/test_environment_coverage.py::test_get_template_async [32mPASSED[0m[31m                                                                                              [ 57%][0m
tests/test_environment_coverage.py::test_select_template_async [32mPASSED[0m[31m                                                                                           [ 58%][0m
tests/test_environment_coverage.py::test_get_or_select_template_async [31mFAILED[0m[31m                                                                                    [ 59%][0m
tests/test_environment_coverage.py::test_load_template_async [31mFAILED[0m[31m                                                                                             [ 59%][0m
tests/test_environment_coverage.py::test_get_template_async_with_cache [31mFAILED[0m[31m                                                                                   [ 60%][0m
tests/test_function_loader.py::TestAsyncFunctionLoader::test_init [32mPASSED[0m[31m                                                                                        [ 61%][0m
tests/test_function_loader.py::TestAsyncFunctionLoader::test_get_source_async_with_sync_function [32mPASSED[0m[31m                                                         [ 62%][0m
tests/test_function_loader.py::TestAsyncFunctionLoader::test_get_source_async_with_async_function [32mPASSED[0m[31m                                                        [ 62%][0m
tests/test_function_loader.py::TestAsyncFunctionLoader::test_get_source_async_with_string_function [32mPASSED[0m[31m                                                       [ 63%][0m
tests/test_function_loader.py::TestAsyncFunctionLoader::test_get_source_async_nonexistent_template [32mPASSED[0m[31m                                                       [ 64%][0m
tests/test_function_loader.py::TestAsyncFunctionLoader::test_get_source_async_with_path_object [32mPASSED[0m[31m                                                           [ 65%][0m
tests/test_function_loader.py::TestAsyncFunctionLoader::test_load_async [32mPASSED[0m[31m                                                                                  [ 65%][0m
tests/test_function_loader.py::TestAsyncFunctionLoader::test_invalid_return_type [32mPASSED[0m[31m                                                                         [ 66%][0m
tests/test_loaders.py::TestAsyncBaseLoader::test_init_with_single_path [32mPASSED[0m[31m                                                                                   [ 67%][0m
tests/test_loaders.py::TestAsyncBaseLoader::test_init_with_multiple_paths [32mPASSED[0m[31m                                                                                [ 68%][0m
tests/test_loaders.py::TestAsyncBaseLoader::test_not_implemented_methods [32mPASSED[0m[31m                                                                                 [ 68%][0m
tests/test_loaders.py::TestAsyncBaseLoader::test_load [32mPASSED[0m[31m                                                                                                    [ 69%][0m
tests/test_loaders.py::TestAsyncBaseLoader::test_load_with_bytes [32mPASSED[0m[31m                                                                                         [ 70%][0m
tests/test_loaders_coverage.py::test_async_filesystem_loader_error_handling [31mFAILED[0m[31m                                                                              [ 71%][0m
tests/test_loaders_coverage.py::test_async_package_loader_error_handling [31mFAILED[0m[31m                                                                                 [ 71%][0m
tests/test_loaders_coverage.py::test_async_choice_loader_error_handling [31mFAILED[0m[31m                                                                                  [ 72%][0m
tests/test_loaders_coverage.py::test_async_function_loader_error_handling [31mFAILED[0m[31m                                                                                [ 73%][0m
tests/test_loaders_coverage.py::test_async_dict_loader_error_handling [31mFAILED[0m[31m                                                                                    [ 74%][0m
tests/test_loaders_coverage.py::test_async_filesystem_loader_with_encoding [31mFAILED[0m[31m                                                                               [ 75%][0m
tests/test_loaders_coverage.py::test_async_package_loader_with_encoding [31mFAILED[0m[31m                                                                                  [ 75%][0m
tests/test_loaders_coverage.py::test_async_choice_loader_with_multiple_loaders [31mFAILED[0m[31m                                                                           [ 76%][0m
tests/test_loaders_coverage.py::test_async_function_loader_with_uptodate [31mFAILED[0m[31m                                                                                 [ 77%][0m
tests/test_loaders_coverage.py::test_async_dict_loader_with_prefix [31mFAILED[0m[31m                                                                                       [ 78%][0m
tests/test_package_loader.py::TestAsyncPackageLoader::test_init_package_not_found [32mPASSED[0m[31m                                                                        [ 78%][0m
tests/test_package_loader.py::TestAsyncPackageLoader::test_init_loader_not_found [32mPASSED[0m[31m                                                                         [ 79%][0m
tests/test_package_loader.py::TestAsyncPackageLoader::test_init_template_root_not_found [32mPASSED[0m[31m                                                                  [ 80%][0m
tests/test_package_loader.py::TestAsyncPackageLoader::test_init_success [32mPASSED[0m[31m                                                                                  [ 81%][0m
tests/test_package_loader.py::TestAsyncPackageLoader::test_get_source_async_not_found [32mPASSED[0m[31m                                                                    [ 81%][0m
tests/test_package_loader.py::TestAsyncPackageLoader::test_get_source_async_success [32mPASSED[0m[31m                                                                      [ 82%][0m
tests/test_package_loader.py::TestAsyncPackageLoader::test_get_source_async_with_archive [32mPASSED[0m[31m                                                                 [ 83%][0m
tests/test_package_loader.py::TestAsyncPackageLoader::test_list_templates_async_regular [32mPASSED[0m[31m                                                                  [ 84%][0m
tests/test_package_loader.py::TestAsyncPackageLoader::test_list_templates_async_zip [32mPASSED[0m[31m                                                                      [ 84%][0m
tests/test_package_loader.py::TestAsyncPackageLoader::test_list_templates_async_zip_no_files [32mPASSED[0m[31m                                                             [ 85%][0m
tests/test_redis_bccache.py::TestAsyncRedisBytecodeCache::test_init_with_client [32mPASSED[0m[31m                                                                          [ 86%][0m
tests/test_redis_bccache.py::TestAsyncRedisBytecodeCache::test_init_with_configs [32mPASSED[0m[31m                                                                         [ 87%][0m
tests/test_redis_bccache.py::TestAsyncRedisBytecodeCache::test_get_cache_key [32mPASSED[0m[31m                                                                             [ 87%][0m
tests/test_redis_bccache.py::TestAsyncRedisBytecodeCache::test_get_source_checksum [32mPASSED[0m[31m                                                                       [ 88%][0m
tests/test_redis_bccache.py::TestAsyncRedisBytecodeCache::test_get_bucket_name [32mPASSED[0m[31m                                                                           [ 89%][0m
tests/test_redis_bccache.py::TestAsyncRedisBytecodeCache::test_load_bytecode_hit [32mPASSED[0m[31m                                                                         [ 90%][0m
tests/test_redis_bccache.py::TestAsyncRedisBytecodeCache::test_load_bytecode_miss [32mPASSED[0m[31m                                                                        [ 90%][0m
tests/test_redis_bccache.py::TestAsyncRedisBytecodeCache::test_dump_bytecode [32mPASSED[0m[31m                                                                             [ 91%][0m
tests/test_redis_bccache.py::TestAsyncRedisBytecodeCache::test_get_bucket [32mPASSED[0m[31m                                                                                [ 92%][0m
tests/test_redis_bccache.py::TestAsyncRedisBytecodeCache::test_set_bucket [32mPASSED[0m[31m                                                                                [ 93%][0m
tests/test_redis_bccache.py::TestAsyncRedisBytecodeCache::test_get_bucket_async [32mPASSED[0m[31m                                                                          [ 93%][0m
tests/test_redis_bccache.py::TestAsyncRedisBytecodeCache::test_set_bucket_async [32mPASSED[0m[31m                                                                          [ 94%][0m
tests/test_template_rendering.py::TestTemplateRendering::test_render_simple_template [32mPASSED[0m[31m                                                                     [ 95%][0m
tests/test_template_rendering.py::TestTemplateRendering::test_render_template_with_inheritance [32mPASSED[0m[31m                                                           [ 96%][0m
tests/test_template_rendering.py::TestTemplateRendering::test_render_template_with_include [32mPASSED[0m[31m                                                               [ 96%][0m
tests/test_template_rendering.py::TestTemplateRendering::test_render_async_block [32mPASSED[0m[31m                                                                         [ 97%][0m
tests/test_template_rendering.py::TestTemplateRendering::test_render_async_include [32mPASSED[0m[31m                                                                       [ 98%][0m
tests/test_template_rendering.py::TestTemplateRendering::test_render_async_extends [32mPASSED[0m[31m                                                                       [ 99%][0m
tests/test_template_rendering.py::TestTemplateRendering::test_performance_with_large_template [32mPASSED[0m[31m                                                            [100%][0m

============================================================================== FAILURES ===============================================================================
[31m[1m_________________________________________________________________________ test_visit_asyncfor _________________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x103772520>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_asyncfor[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test visit_AsyncFor method."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock AsyncFor node[39;49;00m[90m[39;49;00m
        target = create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mitem[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        iter_node = create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mitems[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        body = [create_mock_node(nodes.Output, nodes=[create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mitem[39;49;00m[33m"[39;49;00m)])][90m[39;49;00m
        else_body = [][90m[39;49;00m
    [90m[39;49;00m
        async_for_node = create_mock_node([90m[39;49;00m
>           nodes.AsyncFor, target=target, [96miter[39;49;00m=iter_node, body=body, else_=else_body[90m[39;49;00m
            ^^^^^^^^^^^^^^[90m[39;49;00m
        )[90m[39;49;00m
[1m[31mE       AttributeError: module 'jinja2.nodes' has no attribute 'AsyncFor'[0m

[1m[31mtests/test_compiler_coverage.py[0m:56: AttributeError
[31m[1m________________________________________________________________________ test_visit_asynccall _________________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x103771810>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_asynccall[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test visit_AsyncCall method."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock AsyncCall node[39;49;00m[90m[39;49;00m
        node = create_mock_node([90m[39;49;00m
            nodes.Call,[90m[39;49;00m
            node=create_mock_node(nodes.Name, name=[33m"[39;49;00m[33masync_function[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            args=[create_mock_node(nodes.Const, value=[33m"[39;49;00m[33marg1[39;49;00m[33m"[39;49;00m)],[90m[39;49;00m
            kwargs=[],[90m[39;49;00m
            dyn_args=[94mNone[39;49;00m,[90m[39;49;00m
            dyn_kwargs=[94mNone[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock the necessary methods[39;49;00m[90m[39;49;00m
        async_code_generator.visit = MagicMock()[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call the method[39;49;00m[90m[39;49;00m
>       async_code_generator.visit_Call(node)[90m[39;49;00m
[1m[31mE       TypeError: CodeGenerator.visit_Call() missing 1 required positional argument: 'frame'[0m

[1m[31mtests/test_compiler_coverage.py[0m:89: TypeError
[31m[1m_____________________________________________________________________ test_visit_asyncfilterblock _____________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x103771f30>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_asyncfilterblock[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test visit_AsyncFilterBlock method."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock AsyncFilterBlock node[39;49;00m[90m[39;49;00m
        node = create_mock_node([90m[39;49;00m
            nodes.FilterBlock,[90m[39;49;00m
            [96mfilter[39;49;00m=create_mock_node(nodes.Filter, name=[33m"[39;49;00m[33masync_filter[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            body=[create_mock_node(nodes.Output, nodes=[create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mitem[39;49;00m[33m"[39;49;00m)])],[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock the necessary methods[39;49;00m[90m[39;49;00m
        async_code_generator.visit = MagicMock()[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
        async_code_generator.blockvisit = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call the method[39;49;00m[90m[39;49;00m
>       async_code_generator.visit_FilterBlock(node)[90m[39;49;00m
[1m[31mE       TypeError: CodeGenerator.visit_FilterBlock() missing 1 required positional argument: 'frame'[0m

[1m[31mtests/test_compiler_coverage.py[0m:111: TypeError
[31m[1m________________________________________________________________________ test_visit_asyncwith _________________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x103771810>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_asyncwith[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test visit_AsyncWith method."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock AsyncWith node[39;49;00m[90m[39;49;00m
        targets = [[90m[39;49;00m
            ([90m[39;49;00m
                create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mtarget[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
                create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mvalue[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            )[90m[39;49;00m
        ][90m[39;49;00m
        body = [create_mock_node(nodes.Output, nodes=[create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mitem[39;49;00m[33m"[39;49;00m)])][90m[39;49;00m
    [90m[39;49;00m
>       async_with_node = create_mock_node(nodes.AsyncWith, targets=targets, body=body)[90m[39;49;00m
                                           ^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE       AttributeError: module 'jinja2.nodes' has no attribute 'AsyncWith'[0m

[1m[31mtests/test_compiler_coverage.py[0m:130: AttributeError
[31m[1m______________________________________________________________________ test_func_code_generator _______________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x103773360>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_func_code_generator[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the func method with async functions."""[39;49;00m[90m[39;49;00m
        [90m# Mock the necessary methods[39;49;00m[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call the method with an async function[39;49;00m[90m[39;49;00m
>       [94mwith[39;49;00m patch.object(async_code_generator, [33m"[39;49;00m[33mis_async[39;49;00m[33m"[39;49;00m, return_value=[94mTrue[39;49;00m):[90m[39;49;00m
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m

[1m[31mtests/test_compiler_coverage.py[0m:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:1497: in __enter__
    [0moriginal, local = [96mself[39;49;00m.get_original()[90m[39;49;00m
                      ^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x103855010>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mget_original[39;49;00m([96mself[39;49;00m):[90m[39;49;00m
        target = [96mself[39;49;00m.getter()[90m[39;49;00m
        name = [96mself[39;49;00m.attribute[90m[39;49;00m
    [90m[39;49;00m
        original = DEFAULT[90m[39;49;00m
        local = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            original = target.[91m__dict__[39;49;00m[name][90m[39;49;00m
        [94mexcept[39;49;00m ([96mAttributeError[39;49;00m, [96mKeyError[39;49;00m):[90m[39;49;00m
            original = [96mgetattr[39;49;00m(target, name, DEFAULT)[90m[39;49;00m
        [94melse[39;49;00m:[90m[39;49;00m
            local = [94mTrue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m name [95min[39;49;00m _builtins [95mand[39;49;00m [96misinstance[39;49;00m(target, ModuleType):[90m[39;49;00m
            [96mself[39;49;00m.create = [94mTrue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.create [95mand[39;49;00m original [95mis[39;49;00m DEFAULT:[90m[39;49;00m
>           [94mraise[39;49;00m [96mAttributeError[39;49;00m([90m[39;49;00m
                [33m"[39;49;00m[33m%s[39;49;00m[33m does not have the attribute [39;49;00m[33m%r[39;49;00m[33m"[39;49;00m % (target, name)[90m[39;49;00m
            )[90m[39;49;00m
[1m[31mE           AttributeError: <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x103773360> does not have the attribute 'is_async'[0m

[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:1467: AttributeError
[31m[1m_____________________________________________________________________ test_return_buffer_contents _____________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x103773490>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_return_buffer_contents[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the return_buffer_contents method."""[39;49;00m[90m[39;49;00m
        [90m# Mock the necessary methods[39;49;00m[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call the method[39;49;00m[90m[39;49;00m
>       async_code_generator.return_buffer_contents()[90m[39;49;00m
[1m[31mE       TypeError: CodeGenerator.return_buffer_contents() missing 1 required positional argument: 'frame'[0m

[1m[31mtests/test_compiler_coverage.py[0m:167: TypeError
[31m[1m________________________________________________________________________ test_visit_asyncblock ________________________________________________________________________[0m

async_code_generator = <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x103773950>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_visit_asyncblock[39;49;00m(async_code_generator: AsyncCodeGenerator) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test visit_AsyncBlock method."""[39;49;00m[90m[39;49;00m
        [90m# Create a mock AsyncBlock node[39;49;00m[90m[39;49;00m
        node = create_mock_node([90m[39;49;00m
            nodes.Block,[90m[39;49;00m
            name=[33m"[39;49;00m[33masync_block[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            body=[create_mock_node(nodes.Output, nodes=[create_mock_node(nodes.Name, name=[33m"[39;49;00m[33mitem[39;49;00m[33m"[39;49;00m)])],[90m[39;49;00m
            scoped=[94mFalse[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock the necessary methods[39;49;00m[90m[39;49;00m
        async_code_generator.visit = MagicMock()[90m[39;49;00m
        async_code_generator.write = MagicMock()[90m[39;49;00m
        async_code_generator.blockvisit = MagicMock()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call the method[39;49;00m[90m[39;49;00m
>       [94mwith[39;49;00m patch.object(async_code_generator, [33m"[39;49;00m[33mis_async[39;49;00m[33m"[39;49;00m, return_value=[94mTrue[39;49;00m):[90m[39;49;00m
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m

[1m[31mtests/test_compiler_coverage.py[0m:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:1497: in __enter__
    [0moriginal, local = [96mself[39;49;00m.get_original()[90m[39;49;00m
                      ^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x103856430>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mget_original[39;49;00m([96mself[39;49;00m):[90m[39;49;00m
        target = [96mself[39;49;00m.getter()[90m[39;49;00m
        name = [96mself[39;49;00m.attribute[90m[39;49;00m
    [90m[39;49;00m
        original = DEFAULT[90m[39;49;00m
        local = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            original = target.[91m__dict__[39;49;00m[name][90m[39;49;00m
        [94mexcept[39;49;00m ([96mAttributeError[39;49;00m, [96mKeyError[39;49;00m):[90m[39;49;00m
            original = [96mgetattr[39;49;00m(target, name, DEFAULT)[90m[39;49;00m
        [94melse[39;49;00m:[90m[39;49;00m
            local = [94mTrue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m name [95min[39;49;00m _builtins [95mand[39;49;00m [96misinstance[39;49;00m(target, ModuleType):[90m[39;49;00m
            [96mself[39;49;00m.create = [94mTrue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.create [95mand[39;49;00m original [95mis[39;49;00m DEFAULT:[90m[39;49;00m
>           [94mraise[39;49;00m [96mAttributeError[39;49;00m([90m[39;49;00m
                [33m"[39;49;00m[33m%s[39;49;00m[33m does not have the attribute [39;49;00m[33m%r[39;49;00m[33m"[39;49;00m % (target, name)[90m[39;49;00m
            )[90m[39;49;00m
[1m[31mE           AttributeError: <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x103773950> does not have the attribute 'is_async'[0m

[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:1467: AttributeError
[31m[1m____________________________________________________________________________ test_compile _____________________________________________________________________________[0m

self = <jinja2_async_environment.environment.AsyncEnvironment object at 0x10373e210>
source = '\nasync def test():\n    async for event in self._async_yield_from(context.blocks\n    ', filename = 'test.py'

    [0m[94mdef[39;49;00m[90m [39;49;00m[92m_compile[39;49;00m([96mself[39;49;00m, source: [96mstr[39;49;00m, filename: [96mstr[39;49;00m) -> t.Any:[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
>           [94mreturn[39;49;00m [96mcompile[39;49;00m(source, filename, [33m"[39;49;00m[33mexec[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE             File "test.py", line 3[0m
[1m[31mE           SyntaxError: 'yield from' inside async function[0m

[1m[31mjinja2_async_environment/environment.py[0m:49: SyntaxError

[33mDuring handling of the above exception, another exception occurred:[0m

async_env = <jinja2_async_environment.environment.AsyncEnvironment object at 0x10373e210>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_compile[39;49;00m(async_env: AsyncEnvironment) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the _compile method."""[39;49;00m[90m[39;49;00m
        [90m# Test normal compilation[39;49;00m[90m[39;49;00m
        source = [33m"[39;49;00m[33mdef test(): pass[39;49;00m[33m"[39;49;00m[90m[39;49;00m
        result = async_env._compile(source, [33m"[39;49;00m[33mtest.py[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Verify the result is a code object[39;49;00m[90m[39;49;00m
        [94massert[39;49;00m result [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test compilation with SyntaxError but without async code[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises([96mSyntaxError[39;49;00m):[90m[39;49;00m
            async_env._compile([33m"[39;49;00m[33mdef test() yield from[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtest.py[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test compilation with SyntaxError and async code[39;49;00m[90m[39;49;00m
        source = [33m"""[39;49;00m[33m[39;49;00m
    [33masync def test():[39;49;00m[33m[39;49;00m
    [33m    yield from context.blocks[39;49;00m[33m[39;49;00m
    [33m    [39;49;00m[33m"""[39;49;00m[90m[39;49;00m
>       result = async_env._compile(source, [33m"[39;49;00m[33mtest.py[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m

[1m[31mtests/test_environment_coverage.py[0m:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <jinja2_async_environment.environment.AsyncEnvironment object at 0x10373e210>
source = '\nasync def test():\n    async for event in self._async_yield_from(context.blocks\n    ', filename = 'test.py'

    [0m[94mdef[39;49;00m[90m [39;49;00m[92m_compile[39;49;00m([96mself[39;49;00m, source: [96mstr[39;49;00m, filename: [96mstr[39;49;00m) -> t.Any:[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mreturn[39;49;00m [96mcompile[39;49;00m(source, filename, [33m"[39;49;00m[33mexec[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mexcept[39;49;00m [96mSyntaxError[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m"[39;49;00m[33myield from[39;49;00m[33m"[39;49;00m [95min[39;49;00m source [95mand[39;49;00m [33m"[39;49;00m[33masync def[39;49;00m[33m"[39;49;00m [95min[39;49;00m source:[90m[39;49;00m
                source = source.replace([33m"[39;49;00m[33myield from[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33masync for event in[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
                source = source.replace([90m[39;49;00m
                    [33m"[39;49;00m[33masync for event in context.blocks[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    [33m"[39;49;00m[33masync for event in self._async_yield_from(context.blocks[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
                source = source.replace([90m[39;49;00m
                    [33m"[39;49;00m[33mundefined(name=[39;49;00m[33m'[39;49;00m[33mitem[39;49;00m[33m'[39;49;00m[33m) if l_0_item is missing else l_0_item[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    [33m"[39;49;00m[33mitem[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
                source = source.replace([90m[39;49;00m
                    [33m"[39;49;00m[33mundefined(name=[39;49;00m[33m'[39;49;00m[33mi[39;49;00m[33m'[39;49;00m[33m) if l_0_i is missing else l_0_i[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mi[39;49;00m[33m"[39;49;00m[90m[39;49;00m
                )[90m[39;49;00m
                source = source.replace([90m[39;49;00m
                    [33m"[39;49;00m[33mundefined(name=[39;49;00m[33m'[39;49;00m[33mmessage[39;49;00m[33m'[39;49;00m[33m) if l_0_message is missing else l_0_message[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    [33m"[39;49;00m[33mmessage[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
                source = source.replace([90m[39;49;00m
                    [33m"[39;49;00m[33mundefined(name=[39;49;00m[33m'[39;49;00m[33mpartial_var[39;49;00m[33m'[39;49;00m[33m) if l_0_partial_var is missing else l_0_partial_var[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    [33m"[39;49;00m[33mpartial_var[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
>               [94mreturn[39;49;00m [96mcompile[39;49;00m(source, filename, [33m"[39;49;00m[33mexec[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE                 File "test.py", line 3[0m
[1m[31mE                   async for event in self._async_yield_from(context.blocks[0m
[1m[31mE                                                            ^[0m
[1m[31mE               SyntaxError: '(' was never closed[0m

[1m[31mjinja2_async_environment/environment.py[0m:74: SyntaxError
[31m[1m________________________________________________________________________ test_async_yield_from ________________________________________________________________________[0m

async_env = <jinja2_async_environment.environment.AsyncEnvironment object at 0x10373ed50>

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_yield_from[39;49;00m(async_env: AsyncEnvironment) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the _async_yield_from method."""[39;49;00m[90m[39;49;00m
        [90m# Test with an async generator[39;49;00m[90m[39;49;00m
        [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92masync_generator[39;49;00m():[90m[39;49;00m
            [94myield[39;49;00m [33m"[39;49;00m[33mitem1[39;49;00m[33m"[39;49;00m[90m[39;49;00m
            [94myield[39;49;00m [33m"[39;49;00m[33mitem2[39;49;00m[33m"[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        result = [][90m[39;49;00m
>       [94masync[39;49;00m [94mfor[39;49;00m item [95min[39;49;00m [94mawait[39;49;00m async_env._async_yield_from(async_generator()):[90m[39;49;00m
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE       TypeError: object async_generator can't be used in 'await' expression[0m

[1m[31mtests/test_environment_coverage.py[0m:73: TypeError
[31m[1m__________________________________________________________________ test_get_or_select_template_async __________________________________________________________________[0m

self = <AsyncMock id='4353546560'>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92massert_called_once[39;49;00m([96mself[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m"""assert that the mock was called only once.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.call_count == [94m1[39;49;00m:[90m[39;49;00m
            msg = ([33m"[39;49;00m[33mExpected [39;49;00m[33m'[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m[33m to have been called once. Called [39;49;00m[33m%s[39;49;00m[33m times.[39;49;00m[33m%s[39;49;00m[33m"[39;49;00m[90m[39;49;00m
                   % ([96mself[39;49;00m._mock_name [95mor[39;49;00m [33m'[39;49;00m[33mmock[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                      [96mself[39;49;00m.call_count,[90m[39;49;00m
                      [96mself[39;49;00m._calls_repr()))[90m[39;49;00m
>           [94mraise[39;49;00m [96mAssertionError[39;49;00m(msg)[90m[39;49;00m
[1m[31mE           AssertionError: Expected 'mock' to have been called once. Called 2 times.[0m
[1m[31mE           Calls: [call(<MagicMock id='4353540512'>, None, None),[0m
[1m[31mE            call(['template1.html', 'template2.html'], None, None)].[0m

[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:958: AssertionError

[33mDuring handling of the above exception, another exception occurred:[0m

async_env = <jinja2_async_environment.environment.AsyncEnvironment object at 0x10373e990>

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_get_or_select_template_async[39;49;00m(async_env: AsyncEnvironment) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the get_or_select_template_async method."""[39;49;00m[90m[39;49;00m
        [90m# Mock the get_template_async and select_template_async methods[39;49;00m[90m[39;49;00m
        template = MagicMock()[90m[39;49;00m
        async_env.get_template_async = AsyncMock(return_value=template)[90m[39;49;00m
        async_env.select_template_async = AsyncMock(return_value=template)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test with a string[39;49;00m[90m[39;49;00m
        result = [94mawait[39;49;00m async_env.get_or_select_template_async([33m"[39;49;00m[33mtemplate.html[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94massert[39;49;00m result [95mis[39;49;00m template[90m[39;49;00m
        async_env.get_template_async.assert_called_once()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test with a template instance[39;49;00m[90m[39;49;00m
        async_env.get_template_async.reset_mock()[90m[39;49;00m
        result = [94mawait[39;49;00m async_env.get_or_select_template_async(template)[90m[39;49;00m
        [94massert[39;49;00m result [95mis[39;49;00m template[90m[39;49;00m
        async_env.get_template_async.assert_not_called()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test with a list[39;49;00m[90m[39;49;00m
        async_env.get_template_async.reset_mock()[90m[39;49;00m
        result = [94mawait[39;49;00m async_env.get_or_select_template_async([[33m"[39;49;00m[33mtemplate1.html[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtemplate2.html[39;49;00m[33m"[39;49;00m])[90m[39;49;00m
        [94massert[39;49;00m result [95mis[39;49;00m template[90m[39;49;00m
>       async_env.select_template_async.assert_called_once()[90m[39;49;00m
[1m[31mE       AssertionError: Expected 'mock' to have been called once. Called 2 times.[0m
[1m[31mE       Calls: [call(<MagicMock id='4353540512'>, None, None),[0m
[1m[31mE        call(['template1.html', 'template2.html'], None, None)].[0m
[1m[31mE       [0m
[1m[31mE       pytest introspection follows:[0m
[1m[31mE       [0m
[1m[31mE       Args:[0m
[1m[31mE       assert (['template1....], None, None) == ()[0m
[1m[31mE         [0m
[1m[31mE         Left contains 3 more items, first extra item: [0m[[33m'[39;49;00m[33mtemplate1.html[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mtemplate2.html[39;49;00m[33m'[39;49;00m][90m[39;49;00m[0m
[1m[31mE         [0m
[1m[31mE         Full diff:[0m
[1m[31mE         [0m[91m- ()[39;49;00m[90m[39;49;00m[0m
[1m[31mE         [92m+ ([39;49;00m[90m[39;49;00m[0m
[1m[31mE         [92m+     [[39;49;00m[90m[39;49;00m...[0m
[1m[31mE         [0m
[1m[31mE         ...Full output truncated (6 lines hidden), use '-vv' to show[0m

[1m[31mtests/test_environment_coverage.py[0m:167: AssertionError
[31m[1m______________________________________________________________________ test_load_template_async _______________________________________________________________________[0m

async_env = <jinja2_async_environment.environment.AsyncEnvironment object at 0x103890f50>

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_load_template_async[39;49;00m(async_env: AsyncEnvironment) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the _load_template_async method."""[39;49;00m[90m[39;49;00m
        [90m# Mock the _get_template_async method[39;49;00m[90m[39;49;00m
        template = MagicMock()[90m[39;49;00m
        async_env._get_template_async = AsyncMock(return_value=template)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test with a template instance[39;49;00m[90m[39;49;00m
>       result = [94mawait[39;49;00m async_env._load_template_async(template, [94mNone[39;49;00m)[90m[39;49;00m
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m

[1m[31mtests/test_environment_coverage.py[0m:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <jinja2_async_environment.environment.AsyncEnvironment object at 0x103890f50>, name = <MagicMock id='4353542192'>, globals = None

    [0m[37m@internalcode[39;49;00m[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92m_load_template_async[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        name: [96mstr[39;49;00m | Template | t.Iterable[[96mstr[39;49;00m | Template],[90m[39;49;00m
        [96mglobals[39;49;00m: t.MutableMapping[[96mstr[39;49;00m, t.Any] | [94mNone[39;49;00m,[90m[39;49;00m
    ) -> Template:[90m[39;49;00m
        [94mif[39;49;00m [96misinstance[39;49;00m(name, Template):[90m[39;49;00m
            [94mreturn[39;49;00m name[90m[39;49;00m
        [94mif[39;49;00m [96misinstance[39;49;00m(name, [96mstr[39;49;00m):[90m[39;49;00m
            [94mreturn[39;49;00m [94mawait[39;49;00m [96mself[39;49;00m._get_template_async(name, [96mglobals[39;49;00m)[90m[39;49;00m
        names_list = [][90m[39;49;00m
        [94mfor[39;49;00m template_name [95min[39;49;00m name:[90m[39;49;00m
            [94mif[39;49;00m [96misinstance[39;49;00m(template_name, Template):[90m[39;49;00m
                [94mreturn[39;49;00m template_name[90m[39;49;00m
            [94mwith[39;49;00m suppress(TemplateNotFound):[90m[39;49;00m
                [94mreturn[39;49;00m [94mawait[39;49;00m [96mself[39;49;00m._get_template_async([96mstr[39;49;00m(template_name), [96mglobals[39;49;00m)[90m[39;49;00m
            names_list.append([96mstr[39;49;00m(template_name))[90m[39;49;00m
>       [94mraise[39;49;00m TemplatesNotFound(names_list)[90m[39;49;00m
[1m[31mE       jinja2.exceptions.TemplatesNotFound: none of the templates given were found:[0m

[1m[31mjinja2_async_environment/environment.py[0m:180: TemplatesNotFound
[31m[1m_________________________________________________________________ test_get_template_async_with_cache __________________________________________________________________[0m

async_env = <jinja2_async_environment.environment.AsyncEnvironment object at 0x103891bd0>

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_get_template_async_with_cache[39;49;00m(async_env: AsyncEnvironment) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test the _get_template_async method with cache."""[39;49;00m[90m[39;49;00m
        [90m# Mock the loader[39;49;00m[90m[39;49;00m
        loader = MagicMock()[90m[39;49;00m
        template = MagicMock()[90m[39;49;00m
        template.is_up_to_date = [94mTrue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set up the environment[39;49;00m[90m[39;49;00m
        async_env.loader = loader[90m[39;49;00m
        async_env.cache = {}[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock the loader.load_async method[39;49;00m[90m[39;49;00m
        loader.load_async = AsyncMock(return_value=template)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call the method[39;49;00m[90m[39;49;00m
        result = [94mawait[39;49;00m async_env._get_template_async([33m"[39;49;00m[33mtemplate.html[39;49;00m[33m"[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Verify the result[39;49;00m[90m[39;49;00m
        [94massert[39;49;00m result [95mis[39;49;00m template[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call again to test cache[39;49;00m[90m[39;49;00m
        result = [94mawait[39;49;00m async_env._get_template_async([33m"[39;49;00m[33mtemplate.html[39;49;00m[33m"[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Verify the result and that load_async was only called once[39;49;00m[90m[39;49;00m
        [94massert[39;49;00m result [95mis[39;49;00m template[90m[39;49;00m
        [94massert[39;49;00m loader.load_async.call_count == [94m1[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test with an async is_up_to_date method[39;49;00m[90m[39;49;00m
        template.is_up_to_date = AsyncMock(return_value=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Clear the cache and call again[39;49;00m[90m[39;49;00m
        async_env.cache = {}[90m[39;49;00m
        result = [94mawait[39;49;00m async_env._get_template_async([33m"[39;49;00m[33mtemplate.html[39;49;00m[33m"[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Verify the result[39;49;00m[90m[39;49;00m
        [94massert[39;49;00m result [95mis[39;49;00m template[90m[39;49;00m
    [90m[39;49;00m
        [90m# Call again to test cache with async is_up_to_date[39;49;00m[90m[39;49;00m
        result = [94mawait[39;49;00m async_env._get_template_async([33m"[39;49;00m[33mtemplate.html[39;49;00m[33m"[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Verify the result and that is_up_to_date was called[39;49;00m[90m[39;49;00m
        [94massert[39;49;00m result [95mis[39;49;00m template[90m[39;49;00m
>       [94massert[39;49;00m template.is_up_to_date.call_count == [94m1[39;49;00m[90m[39;49;00m
[1m[31mE       AssertionError: assert 0 == 1[0m
[1m[31mE        +  where 0 = <AsyncMock name='mock.is_up_to_date' id='4353540848'>.call_count[0m
[1m[31mE        +    where <AsyncMock name='mock.is_up_to_date' id='4353540848'> = <MagicMock id='4353547232'>.is_up_to_date[0m

[1m[31mtests/test_environment_coverage.py[0m:244: AssertionError
[31m[1m_____________________________________________________________ test_async_filesystem_loader_error_handling _____________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_filesystem_loader_error_handling[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test error handling in AsyncFileSystemLoader."""[39;49;00m[90m[39;49;00m
        [90m# Test with a non-existent directory[39;49;00m[90m[39;49;00m
>       loader = AsyncFileSystemLoader([33m"[39;49;00m[33m/non_existent_dir[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m

[1m[31mtests/test_loaders_coverage.py[0m:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31mjinja2_async_environment/loaders.py[0m:111: in __init__
    [0m[96msuper[39;49;00m().[92m__init__[39;49;00m(searchpath)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <jinja2_async_environment.loaders.AsyncFileSystemLoader object at 0x1037dd6a0>, searchpath = '/non_existent_dir'

    [0m[94mdef[39;49;00m[90m [39;49;00m[92m__init__[39;49;00m([96mself[39;49;00m, searchpath: AsyncPath | t.Sequence[AsyncPath]) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m [96misinstance[39;49;00m(searchpath, AsyncPath):[90m[39;49;00m
            [96mself[39;49;00m.searchpath = [searchpath][90m[39;49;00m
        [94melif[39;49;00m [96misinstance[39;49;00m(searchpath, [96mlist[39;49;00m | [96mtuple[39;49;00m):[90m[39;49;00m
            [96mself[39;49;00m.searchpath = [96mlist[39;49;00m(searchpath)[90m[39;49;00m
        [94melse[39;49;00m:[90m[39;49;00m
>           [94mraise[39;49;00m [96mTypeError[39;49;00m([90m[39;49;00m
                [33m"[39;49;00m[33msearchpath must be an AsyncPath or a sequence of AsyncPath objects[39;49;00m[33m"[39;49;00m[90m[39;49;00m
            )[90m[39;49;00m
[1m[31mE           TypeError: searchpath must be an AsyncPath or a sequence of AsyncPath objects[0m

[1m[31mjinja2_async_environment/loaders.py[0m:54: TypeError
[31m[1m______________________________________________________________ test_async_package_loader_error_handling _______________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_package_loader_error_handling[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test error handling in AsyncPackageLoader."""[39;49;00m[90m[39;49;00m
        [90m# Test with a non-existent package[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(PackageSpecNotFound):[90m[39;49;00m
>           AsyncPackageLoader([33m"[39;49;00m[33mnon_existent_package[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtemplates[39;49;00m[33m"[39;49;00m)[90m[39;49;00m

[1m[31mtests/test_loaders_coverage.py[0m:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31mjinja2_async_environment/loaders.py[0m:167: in __init__
    [0m[96msuper[39;49;00m().[92m__init__[39;49;00m(searchpath)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <jinja2_async_environment.loaders.AsyncPackageLoader object at 0x1037a70e0>, searchpath = 'templates'

    [0m[94mdef[39;49;00m[90m [39;49;00m[92m__init__[39;49;00m([96mself[39;49;00m, searchpath: AsyncPath | t.Sequence[AsyncPath]) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m [96misinstance[39;49;00m(searchpath, AsyncPath):[90m[39;49;00m
            [96mself[39;49;00m.searchpath = [searchpath][90m[39;49;00m
        [94melif[39;49;00m [96misinstance[39;49;00m(searchpath, [96mlist[39;49;00m | [96mtuple[39;49;00m):[90m[39;49;00m
            [96mself[39;49;00m.searchpath = [96mlist[39;49;00m(searchpath)[90m[39;49;00m
        [94melse[39;49;00m:[90m[39;49;00m
>           [94mraise[39;49;00m [96mTypeError[39;49;00m([90m[39;49;00m
                [33m"[39;49;00m[33msearchpath must be an AsyncPath or a sequence of AsyncPath objects[39;49;00m[33m"[39;49;00m[90m[39;49;00m
            )[90m[39;49;00m
[1m[31mE           TypeError: searchpath must be an AsyncPath or a sequence of AsyncPath objects[0m

[1m[31mjinja2_async_environment/loaders.py[0m:54: TypeError
[31m[1m_______________________________________________________________ test_async_choice_loader_error_handling _______________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_choice_loader_error_handling[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test error handling in AsyncChoiceLoader."""[39;49;00m[90m[39;49;00m
        [90m# Create loaders that will all fail[39;49;00m[90m[39;49;00m
        loader1 = AsyncDictLoader({}, AsyncPath([33m"[39;49;00m[33m/dict[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        loader2 = AsyncFunctionLoader([90m[39;49;00m
            [94mlambda[39;49;00m _: t.cast(t.Any, TemplateNotFound([33m"[39;49;00m[33mnot found[39;49;00m[33m"[39;49;00m)), AsyncPath([33m"[39;49;00m[33m/func[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create a choice loader with these loaders[39;49;00m[90m[39;49;00m
        choice_loader = AsyncChoiceLoader([loader1, loader2], AsyncPath([33m"[39;49;00m[33m/choice[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test get_source_async with a non-existent template[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(TemplateNotFound):[90m[39;49;00m
>           [94mawait[39;49;00m choice_loader.get_source_async(AsyncEnvironment(), [33m"[39;49;00m[33mnon_existent.html[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE           TypeError: AsyncChoiceLoader.get_source_async() takes 2 positional arguments but 3 were given[0m

[1m[31mtests/test_loaders_coverage.py[0m:88: TypeError
[31m[1m______________________________________________________________ test_async_function_loader_error_handling ______________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_function_loader_error_handling[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test error handling in AsyncFunctionLoader."""[39;49;00m[90m[39;49;00m
        [90m# Create a function that raises TemplateNotFound[39;49;00m[90m[39;49;00m
        [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mload_func[39;49;00m(template: [96mstr[39;49;00m) -> t.Any:[90m[39;49;00m
            [94mraise[39;49;00m TemplateNotFound(template)[90m[39;49;00m
    [90m[39;49;00m
        loader = AsyncFunctionLoader(load_func, AsyncPath([33m"[39;49;00m[33m/func[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test get_source_async with a template that will raise TemplateNotFound[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(TemplateNotFound):[90m[39;49;00m
>           [94mawait[39;49;00m loader.get_source_async(AsyncEnvironment(), [33m"[39;49;00m[33mnon_existent.html[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE           TypeError: AsyncFunctionLoader.get_source_async() takes 2 positional arguments but 3 were given[0m

[1m[31mtests/test_loaders_coverage.py[0m:102: TypeError
[31m[1m________________________________________________________________ test_async_dict_loader_error_handling ________________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_dict_loader_error_handling[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test error handling in AsyncDictLoader."""[39;49;00m[90m[39;49;00m
        [90m# Create an empty dictionary loader[39;49;00m[90m[39;49;00m
        loader = AsyncDictLoader({}, AsyncPath([33m"[39;49;00m[33m/dict[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test get_source_async with a non-existent template[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(TemplateNotFound):[90m[39;49;00m
>           [94mawait[39;49;00m loader.get_source_async(AsyncEnvironment(), [33m"[39;49;00m[33mnon_existent.html[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE           TypeError: AsyncDictLoader.get_source_async() takes 2 positional arguments but 3 were given[0m

[1m[31mtests/test_loaders_coverage.py[0m:113: TypeError
[31m[1m_____________________________________________________________ test_async_filesystem_loader_with_encoding ______________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_filesystem_loader_with_encoding[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test AsyncFileSystemLoader with different encodings."""[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m patch([33m"[39;49;00m[33manyio.Path.open[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m mock_open:[90m[39;49;00m
            [90m# Mock the file content[39;49;00m[90m[39;49;00m
            mock_file = AsyncMock()[90m[39;49;00m
            mock_file.[92m__aenter__[39;49;00m.return_value.read.return_value = [33m"[39;49;00m[33mtemplate content[39;49;00m[33m"[39;49;00m[90m[39;49;00m
            mock_open.return_value = mock_file[90m[39;49;00m
    [90m[39;49;00m
            [90m# Create a loader with a specific encoding[39;49;00m[90m[39;49;00m
>           loader = AsyncFileSystemLoader([33m"[39;49;00m[33m/templates[39;49;00m[33m"[39;49;00m, encoding=[33m"[39;49;00m[33mlatin1[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m

[1m[31mtests/test_loaders_coverage.py[0m:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31mjinja2_async_environment/loaders.py[0m:111: in __init__
    [0m[96msuper[39;49;00m().[92m__init__[39;49;00m(searchpath)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <jinja2_async_environment.loaders.AsyncFileSystemLoader object at 0x10373f9d0>, searchpath = '/templates'

    [0m[94mdef[39;49;00m[90m [39;49;00m[92m__init__[39;49;00m([96mself[39;49;00m, searchpath: AsyncPath | t.Sequence[AsyncPath]) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m [96misinstance[39;49;00m(searchpath, AsyncPath):[90m[39;49;00m
            [96mself[39;49;00m.searchpath = [searchpath][90m[39;49;00m
        [94melif[39;49;00m [96misinstance[39;49;00m(searchpath, [96mlist[39;49;00m | [96mtuple[39;49;00m):[90m[39;49;00m
            [96mself[39;49;00m.searchpath = [96mlist[39;49;00m(searchpath)[90m[39;49;00m
        [94melse[39;49;00m:[90m[39;49;00m
>           [94mraise[39;49;00m [96mTypeError[39;49;00m([90m[39;49;00m
                [33m"[39;49;00m[33msearchpath must be an AsyncPath or a sequence of AsyncPath objects[39;49;00m[33m"[39;49;00m[90m[39;49;00m
            )[90m[39;49;00m
[1m[31mE           TypeError: searchpath must be an AsyncPath or a sequence of AsyncPath objects[0m

[1m[31mjinja2_async_environment/loaders.py[0m:54: TypeError
[31m[1m_______________________________________________________________ test_async_package_loader_with_encoding _______________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_package_loader_with_encoding[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test AsyncPackageLoader with different encodings."""[39;49;00m[90m[39;49;00m
        [90m# Mock the importlib.util.spec_from_package_path[39;49;00m[90m[39;49;00m
>       [94mwith[39;49;00m patch([33m"[39;49;00m[33mimportlib.util.spec_from_package_path[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m mock_spec:[90m[39;49;00m
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m

[1m[31mtests/test_loaders_coverage.py[0m:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:1497: in __enter__
    [0moriginal, local = [96mself[39;49;00m.get_original()[90m[39;49;00m
                      ^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x103cca350>

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mget_original[39;49;00m([96mself[39;49;00m):[90m[39;49;00m
        target = [96mself[39;49;00m.getter()[90m[39;49;00m
        name = [96mself[39;49;00m.attribute[90m[39;49;00m
    [90m[39;49;00m
        original = DEFAULT[90m[39;49;00m
        local = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            original = target.[91m__dict__[39;49;00m[name][90m[39;49;00m
        [94mexcept[39;49;00m ([96mAttributeError[39;49;00m, [96mKeyError[39;49;00m):[90m[39;49;00m
            original = [96mgetattr[39;49;00m(target, name, DEFAULT)[90m[39;49;00m
        [94melse[39;49;00m:[90m[39;49;00m
            local = [94mTrue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m name [95min[39;49;00m _builtins [95mand[39;49;00m [96misinstance[39;49;00m(target, ModuleType):[90m[39;49;00m
            [96mself[39;49;00m.create = [94mTrue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.create [95mand[39;49;00m original [95mis[39;49;00m DEFAULT:[90m[39;49;00m
>           [94mraise[39;49;00m [96mAttributeError[39;49;00m([90m[39;49;00m
                [33m"[39;49;00m[33m%s[39;49;00m[33m does not have the attribute [39;49;00m[33m%r[39;49;00m[33m"[39;49;00m % (target, name)[90m[39;49;00m
            )[90m[39;49;00m
[1m[31mE           AttributeError: <module 'importlib.util' (frozen)> does not have the attribute 'spec_from_package_path'[0m

[1m[31m/usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py[0m:1467: AttributeError
[31m[1m___________________________________________________________ test_async_choice_loader_with_multiple_loaders ____________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_choice_loader_with_multiple_loaders[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test AsyncChoiceLoader with multiple loaders."""[39;49;00m[90m[39;49;00m
        [90m# Create a dict loader with one template[39;49;00m[90m[39;49;00m
        dict_loader = AsyncDictLoader({[33m"[39;49;00m[33mtemplate1.html[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mdict content[39;49;00m[33m"[39;49;00m}, AsyncPath([33m"[39;49;00m[33m/dict[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create a function loader with another template[39;49;00m[90m[39;49;00m
        [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mload_func[39;49;00m(template: [96mstr[39;49;00m) -> t.Any:[90m[39;49;00m
            [94mif[39;49;00m template == [33m"[39;49;00m[33mtemplate2.html[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                [94mreturn[39;49;00m [33m"[39;49;00m[33mfunction content[39;49;00m[33m"[39;49;00m, template, [94mlambda[39;49;00m: [94mTrue[39;49;00m[90m[39;49;00m
            [94mraise[39;49;00m TemplateNotFound(template)[90m[39;49;00m
    [90m[39;49;00m
        func_loader = AsyncFunctionLoader(load_func, AsyncPath([33m"[39;49;00m[33m/func[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create a choice loader with these loaders[39;49;00m[90m[39;49;00m
        choice_loader = AsyncChoiceLoader([dict_loader, func_loader], AsyncPath([33m"[39;49;00m[33m/choice[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test get_source_async with templates from both loaders[39;49;00m[90m[39;49;00m
>       source1, name1, _ = [94mawait[39;49;00m choice_loader.get_source_async(AsyncEnvironment(), [33m"[39;49;00m[33mtemplate1.html[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE       TypeError: AsyncChoiceLoader.get_source_async() takes 2 positional arguments but 3 were given[0m

[1m[31mtests/test_loaders_coverage.py[0m:184: TypeError
[31m[1m______________________________________________________________ test_async_function_loader_with_uptodate _______________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_function_loader_with_uptodate[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test AsyncFunctionLoader with an uptodate function."""[39;49;00m[90m[39;49;00m
        [90m# Create a function that returns a source with an uptodate function[39;49;00m[90m[39;49;00m
        [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mload_func[39;49;00m(template: [96mstr[39;49;00m) -> t.Any:[90m[39;49;00m
            [94mif[39;49;00m template == [33m"[39;49;00m[33mtemplate.html[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                [94mreturn[39;49;00m [33m"[39;49;00m[33mcontent[39;49;00m[33m"[39;49;00m, template, [94mlambda[39;49;00m: [94mFalse[39;49;00m[90m[39;49;00m
            [94mraise[39;49;00m TemplateNotFound(template)[90m[39;49;00m
    [90m[39;49;00m
        loader = AsyncFunctionLoader(load_func, AsyncPath([33m"[39;49;00m[33m/func[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test get_source_async[39;49;00m[90m[39;49;00m
>       source, name, uptodate = [94mawait[39;49;00m loader.get_source_async(AsyncEnvironment(), [33m"[39;49;00m[33mtemplate.html[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE       TypeError: AsyncFunctionLoader.get_source_async() takes 2 positional arguments but 3 were given[0m

[1m[31mtests/test_loaders_coverage.py[0m:203: TypeError
[31m[1m_________________________________________________________________ test_async_dict_loader_with_prefix __________________________________________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.asyncio[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_async_dict_loader_with_prefix[39;49;00m() -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Test AsyncDictLoader with a prefix."""[39;49;00m[90m[39;49;00m
        [90m# Create a dict loader with a prefix[39;49;00m[90m[39;49;00m
        loader = AsyncDictLoader([90m[39;49;00m
            {[33m"[39;49;00m[33mprefix/template.html[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcontent with prefix[39;49;00m[33m"[39;49;00m}, AsyncPath([33m"[39;49;00m[33m/dict[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test get_source_async with the prefixed template[39;49;00m[90m[39;49;00m
>       source, name, _ = [94mawait[39;49;00m loader.get_source_async(AsyncEnvironment(), [33m"[39;49;00m[33mprefix/template.html[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[90m[39;49;00m
[1m[31mE       TypeError: AsyncDictLoader.get_source_async() takes 2 positional arguments but 3 were given[0m

[1m[31mtests/test_loaders_coverage.py[0m:219: TypeError
=========================================================================== tests coverage ============================================================================
__________________________________________________________ coverage: platform darwin, python 3.13.5-final-0 ___________________________________________________________

Name                                      Stmts   Miss  Cover
-------------------------------------------------------------
jinja2_async_environment/bccache.py          45      0   100%
jinja2_async_environment/compiler.py        237     38    84%
jinja2_async_environment/environment.py     115      9    92%
jinja2_async_environment/loaders.py         273     89    67%
-------------------------------------------------------------
TOTAL                                       670    136    80%
[32mRequired test coverage of 42% reached. Total coverage: 79.70%
[0m[36m[1m======================================================================= short test summary info =======================================================================[0m
[31mFAILED[0m tests/test_compiler_coverage.py::[1mtest_visit_asyncfor[0m - AttributeError: module 'jinja2.nodes' has no attribute 'AsyncFor'
[31mFAILED[0m tests/test_compiler_coverage.py::[1mtest_visit_asynccall[0m - TypeError: CodeGenerator.visit_Call() missing 1 required positional argument: 'frame'
[31mFAILED[0m tests/test_compiler_coverage.py::[1mtest_visit_asyncfilterblock[0m - TypeError: CodeGenerator.visit_FilterBlock() missing 1 required positional argument: 'frame'
[31mFAILED[0m tests/test_compiler_coverage.py::[1mtest_visit_asyncwith[0m - AttributeError: module 'jinja2.nodes' has no attribute 'AsyncWith'
[31mFAILED[0m tests/test_compiler_coverage.py::[1mtest_func_code_generator[0m - AttributeError: <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x103773360> does not have the attribute 'is_async'
[31mFAILED[0m tests/test_compiler_coverage.py::[1mtest_return_buffer_contents[0m - TypeError: CodeGenerator.return_buffer_contents() missing 1 required positional argument: 'frame'
[31mFAILED[0m tests/test_compiler_coverage.py::[1mtest_visit_asyncblock[0m - AttributeError: <jinja2_async_environment.compiler.AsyncCodeGenerator object at 0x103773950> does not have the attribute 'is_async'
[31mFAILED[0m tests/test_environment_coverage.py::[1mtest_compile[0m -   File "test.py", line 3
[31mFAILED[0m tests/test_environment_coverage.py::[1mtest_async_yield_from[0m - TypeError: object async_generator can't be used in 'await' expression
[31mFAILED[0m tests/test_environment_coverage.py::[1mtest_get_or_select_template_async[0m - AssertionError: Expected 'mock' to have been called once. Called 2 times.
[31mFAILED[0m tests/test_environment_coverage.py::[1mtest_load_template_async[0m - jinja2.exceptions.TemplatesNotFound: none of the templates given were found:
[31mFAILED[0m tests/test_environment_coverage.py::[1mtest_get_template_async_with_cache[0m - AssertionError: assert 0 == 1
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_filesystem_loader_error_handling[0m - TypeError: searchpath must be an AsyncPath or a sequence of AsyncPath objects
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_package_loader_error_handling[0m - TypeError: searchpath must be an AsyncPath or a sequence of AsyncPath objects
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_choice_loader_error_handling[0m - TypeError: AsyncChoiceLoader.get_source_async() takes 2 positional arguments but 3 were given
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_function_loader_error_handling[0m - TypeError: AsyncFunctionLoader.get_source_async() takes 2 positional arguments but 3 were given
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_dict_loader_error_handling[0m - TypeError: AsyncDictLoader.get_source_async() takes 2 positional arguments but 3 were given
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_filesystem_loader_with_encoding[0m - TypeError: searchpath must be an AsyncPath or a sequence of AsyncPath objects
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_package_loader_with_encoding[0m - AttributeError: <module 'importlib.util' (frozen)> does not have the attribute 'spec_from_package_path'
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_choice_loader_with_multiple_loaders[0m - TypeError: AsyncChoiceLoader.get_source_async() takes 2 positional arguments but 3 were given
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_function_loader_with_uptodate[0m - TypeError: AsyncFunctionLoader.get_source_async() takes 2 positional arguments but 3 were given
[31mFAILED[0m tests/test_loaders_coverage.py::[1mtest_async_dict_loader_with_prefix[0m - TypeError: AsyncDictLoader.get_source_async() takes 2 positional arguments but 3 were given
[31m=================================================================== [31m[1m22 failed[0m, [32m110 passed[0m[31m in 6.00s[0m[31m ====================================================================[0m
