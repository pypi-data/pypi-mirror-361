# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Aliases(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Aliases()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAliases(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Aliases
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Aliases
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.AliasGroup import AliasGroup
            obj = AliasGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Aliases
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Aliases
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def AliasesStart(builder): builder.StartObject(1)
def Start(builder):
    return AliasesStart(builder)
def AliasesAddGroups(builder, groups): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)
def AddGroups(builder, groups):
    return AliasesAddGroups(builder, groups)
def AliasesStartGroupsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartGroupsVector(builder, numElems):
    return AliasesStartGroupsVector(builder, numElems)
def AliasesEnd(builder): return builder.EndObject()
def End(builder):
    return AliasesEnd(builder)
import comm.datalayer.AliasGroup
try:
    from typing import List
except:
    pass

class AliasesT(object):

    # AliasesT
    def __init__(self):
        self.groups = None  # type: List[comm.datalayer.AliasGroup.AliasGroupT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aliases = Aliases()
        aliases.Init(buf, pos)
        return cls.InitFromObj(aliases)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, aliases):
        x = AliasesT()
        x._UnPack(aliases)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.groups == other.groups

    # AliasesT
    def _UnPack(self, aliases):
        if aliases is None:
            return
        if not aliases.GroupsIsNone():
            self.groups = []
            for i in range(aliases.GroupsLength()):
                if aliases.Groups(i) is None:
                    self.groups.append(None)
                else:
                    aliasGroup_ = comm.datalayer.AliasGroup.AliasGroupT.InitFromObj(aliases.Groups(i))
                    self.groups.append(aliasGroup_)

    # AliasesT
    def Pack(self, builder):
        if self.groups is not None:
            groupslist = []
            for i in range(len(self.groups)):
                groupslist.append(self.groups[i].Pack(builder))
            AliasesStartGroupsVector(builder, len(self.groups))
            for i in reversed(range(len(self.groups))):
                builder.PrependUOffsetTRelative(groupslist[i])
            groups = builder.EndVector()
        AliasesStart(builder)
        if self.groups is not None:
            AliasesAddGroups(builder, groups)
        aliases = AliasesEnd(builder)
        return aliases
