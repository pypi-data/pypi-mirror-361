# coding: utf-8

"""
    University Human Resources API

    This API exposes identity information from the University Human Resources system. The purpose of this API is to give access to basic identity information about staff members for use by downstream systems, therefore the data exposed is limited to basic information about who a staff member is and details of any affiliations they have.  This API uses the following identifiers to link people to person-records held within different systems:  * `person.v1.human-resources.university.identifiers.cam.ac.uk` - the university human resources (uhr) identifier of     this person - also known as the staff number of HRN. * `v1.person.identifiers.cam.ac.uk` - the common registration scheme identifier (CRSid) of     this person.  Additionally this API uses the following identifiers to link people to institutions or entities which a person may have an affiliation to:  * `institution.v1.human-resources.university.identifiers.cam.ac.uk` - the university human resources (uhr) institution     identifier. This encompasses departments within the University HR system     (currently CHRIS). * `institution.v1.student-records.university.identifiers.cam.ac.uk` - the student records institution identifier. This     encompasses colleges within the University Student Records system (currently CamSIS).  Affiliations can be used to indicate an institution that a person holds a position within, with the `status` indicating the job role that is held and the scheme of the affiliation being `institution.v1.human-resources.university.identifiers.cam.ac.uk`. Additionally an affiliation can indicate a staff member's line manager with the scheme being `person.v1.human-resources.university.identifiers.cam.ac.uk` and the status being `report`. A staff member can have multiple institution affiliations and multiple report affiliations.  This API is currently backed by data from CHRIS, exposing a view which is updated hourly.  

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from identitylib.hr_client.models.affiliation import Affiliation
from identitylib.hr_client.models.identifier import Identifier
from typing import Optional, Set
from typing_extensions import Self

class StaffMember(BaseModel):
    """
    A representation of a staff member - exposing the bare minimum information to identify a member of staff and link them to affiliated institutions and people within the University.
    """ # noqa: E501
    affiliations: List[Affiliation] = Field(description="The list of entities that this staff member is affiliated with. Currently this includes college and department affiliations (under the scheme `institution.v1.human-resources.university.identifiers.cam.ac.uk`) as well as the staff member's line manager (if known), under the scheme `person.v1.human-resources.university.identifiers.cam.ac.uk`.")
    date_of_birth: Optional[date] = Field(default=None, description="The date of birth of this member of staff", alias="dateOfBirth")
    forenames: StrictStr = Field(description="The forenames of this member of staff, split by a single space.")
    identifiers: List[Identifier] = Field(description="The identifiers attached to this staff record.")
    name_prefixes: StrictStr = Field(description="The name prefixes of this member of staff, split by a single space.", alias="namePrefixes")
    surname: StrictStr = Field(description="The surname of this member of staff.")
    __properties: ClassVar[List[str]] = ["affiliations", "dateOfBirth", "forenames", "identifiers", "namePrefixes", "surname"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StaffMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in affiliations (list)
        _items = []
        if self.affiliations:
            for _item in self.affiliations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['affiliations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in identifiers (list)
        _items = []
        if self.identifiers:
            for _item in self.identifiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['identifiers'] = _items
        # set to None if date_of_birth (nullable) is None
        # and model_fields_set contains the field
        if self.date_of_birth is None and "date_of_birth" in self.model_fields_set:
            _dict['dateOfBirth'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StaffMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affiliations": [Affiliation.from_dict(_item) for _item in obj["affiliations"]] if obj.get("affiliations") is not None else None,
            "dateOfBirth": obj.get("dateOfBirth"),
            "forenames": obj.get("forenames"),
            "identifiers": [Identifier.from_dict(_item) for _item in obj["identifiers"]] if obj.get("identifiers") is not None else None,
            "namePrefixes": obj.get("namePrefixes"),
            "surname": obj.get("surname")
        })
        return _obj


