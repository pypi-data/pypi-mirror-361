Metadata-Version: 2.1
Name: reghelp-client
Version: 1.1.5
Summary: –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å REGHelp Key API
Author-email: REGHelp Team <support@reghelp.net>
Maintainer-email: REGHelp Team <support@reghelp.net>
License: MIT License
        
        Copyright (c) 2025 REGHelp Team
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE. 
Project-URL: Homepage, https://github.com/REGHELPNET/reghelp_client
Project-URL: Bug Reports, https://github.com/REGHELPNET/reghelp_client/issues
Project-URL: Source, https://github.com/REGHELPNET/reghelp_client
Project-URL: Documentation, https://docs.reghelp.net/
Keywords: reghelp,api,client,async,push,email,telegram,integrity,recaptcha,turnstile,voip
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Communications :: Email
Classifier: Typing :: Typed
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: httpx>=0.27.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: typing-extensions>=4.5.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-httpx>=0.21.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: coverage>=7.0.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: mkdocs>=1.5.0; extra == "docs"
Requires-Dist: mkdocs-material>=9.0.0; extra == "docs"
Requires-Dist: mkdocstrings[python]>=0.20.0; extra == "docs"

# REGHelp Python Client / REGHelp Python Client (–†—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ)

![Python](https://img.shields.io/badge/python-3.8%2B-blue.svg)
![Version](https://img.shields.io/badge/version-1.0.0-green.svg)
![License](https://img.shields.io/badge/license-MIT-blue.svg)

## üá¨üáß English

Modern asynchronous Python library for interacting with the REGHelp Key API. It supports all services: Push tokens, Email, Integrity, Turnstile, VoIP Push and Recaptcha Mobile.

### üöÄ Features

* **Asynchronous first** ‚Äì full `async`/`await` support powered by `httpx`.
* **Type-safe** ‚Äì strict typing with Pydantic data models.
* **Retries with exponential back-off** built-in.
* **Smart rate-limit handling** (50 requests per second).
* **Async context-manager** for automatic resource management.
* **Webhook support** out of the box.
* **Comprehensive error handling** with dedicated exception classes.

### üì¶ Installation

```bash
pip install reghelp-client
```

For development:

```bash
pip install "reghelp-client[dev]"
```

### üîß Quick start

```python
import asyncio
from reghelp_client import RegHelpClient, AppDevice, EmailType

async def main():
    async with RegHelpClient("your_api_key") as client:
        # Check balance
        balance = await client.get_balance()
        print(f"Balance: {balance.balance} {balance.currency}")
        
        # Get Telegram iOS push token
        task = await client.get_push_token(
            app_name="tgiOS",
            app_device=AppDevice.IOS
        )
        print(f"Push token: {task.token}")
        
        # Wait for result
        result = await client.wait_for_result(task.id, "push")
        print(f"Push token: {result.token}")

if __name__ == "__main__":
    asyncio.run(main())
```

---

# RU –†—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å REGHelp Key API. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã: Push tokens, Email, Integrity, Turnstile, VoIP Push, Recaptcha Mobile.

## üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å**: –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ async/await
- **–¢–∏–ø–∏–∑–∞—Ü–∏—è**: –ü–æ–ª–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Å Pydantic –º–æ–¥–µ–ª—è–º–∏
- **Retry –ª–æ–≥–∏–∫–∞**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã —Å exponential backoff
- **Rate limiting**: –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ rate limits (50 rps)
- **Context manager**: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ async context manager
- **Webhook support**: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- **Comprehensive error handling**: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ API

## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞

```bash
pip install reghelp-client
```

–ò–ª–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:

```bash
pip install reghelp-client[dev]
```

## üîß –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

```python
import asyncio
from reghelp_client import RegHelpClient, AppDevice, EmailType

async def main():
    async with RegHelpClient("your_api_key") as client:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
        balance = await client.get_balance()
        print(f"–ë–∞–ª–∞–Ω—Å: {balance.balance} {balance.currency}")
        
        # –ü–æ–ª—É—á–∏—Ç—å push —Ç–æ–∫–µ–Ω –¥–ª—è Telegram iOS
        task = await client.get_push_token(
            app_name="tgiOS",
            app_device=AppDevice.IOS
        )
        print(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task.id}")
        
        # –ñ–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = await client.wait_for_result(task.id, "push")
        print(f"Push —Ç–æ–∫–µ–Ω: {result.token}")

if __name__ == "__main__":
    asyncio.run(main())
```

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API

### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞

```python
from reghelp_client import RegHelpClient

# –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
client = RegHelpClient("your_api_key")

# –° –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
client = RegHelpClient(
    api_key="your_api_key",
    base_url="https://api.reghelp.net",
    timeout=30.0,
    max_retries=3,
    retry_delay=1.0
)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∫ context manager (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
async with RegHelpClient("your_api_key") as client:
    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    pass
```

### üì± Push Tokens

#### –ü–æ–ª—É—á–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–∞

```python
from reghelp_client import AppDevice

# –î–ª—è Telegram iOS
task = await client.get_push_token(
    app_name="tgiOS",
    app_device=AppDevice.IOS,
    app_version="10.9.2",
    app_build="25345",
    ref="my_ref_tag"
)

# –î–ª—è Telegram Android
task = await client.get_push_token(
    app_name="tg",
    app_device=AppDevice.ANDROID
)

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
status = await client.get_push_status(task.id)
if status.status == "done":
    print(f"–¢–æ–∫–µ–Ω: {status.token}")
```

#### –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

| Platform | app_name | Bundle ID |
|----------|----------|-----------|
| Android | `tg` | `org.telegram.messenger` |
| Android | `tg_beta` | `org.telegram.messenger.beta` |
| Android | `tg_web` | `org.telegram.messenger.web` |
| Android | `tg_x` | `org.thunderdog.challegram` |
| iOS | `tgiOS` | `ph.telegra.Telegraph` |

#### –û—Ç–º–µ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞

```python
from reghelp_client import PushStatusType

# –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–º
await client.set_push_status(
    task_id="task_id",
    phone_number="+15551234567",
    status=PushStatusType.NOSMS
)
```

### üìß Email Service

```python
from reghelp_client import EmailType

# –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π email
email_task = await client.get_email(
    app_name="tg",
    app_device=AppDevice.IOS,
    phone="+15551234567",
    email_type=EmailType.ICLOUD
)

print(f"Email: {email_task.email}")

# –ñ–¥–∞—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
email_status = await client.wait_for_result(email_task.id, "email")
print(f"–ö–æ–¥: {email_status.code}")
```

### üîí Integrity Service

```python
import base64

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º nonce
nonce = base64.urlsafe_b64encode(b"your_nonce_data").decode()

# –ü–æ–ª—É—á–∏—Ç—å integrity —Ç–æ–∫–µ–Ω
integrity_task = await client.get_integrity_token(
    app_name="tg",
    app_device=AppDevice.ANDROID,
    nonce=nonce
)

# –ñ–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
result = await client.wait_for_result(integrity_task.id, "integrity")
print(f"Integrity —Ç–æ–∫–µ–Ω: {result.token}")
```

### ü§ñ Recaptcha Mobile

```python
from reghelp_client import ProxyConfig, ProxyType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
proxy = ProxyConfig(
    type=ProxyType.HTTP,
    address="proxy.example.com",
    port=8080,
    login="username",  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    password="password"  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
)

# –†–µ—à–∏—Ç—å recaptcha
recaptcha_task = await client.get_recaptcha_mobile_token(
    app_name="org.telegram.messenger",
    app_device=AppDevice.ANDROID,
    app_key="6Lc-recaptcha-site-key",
    app_action="login",
    proxy=proxy
)

# –ñ–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
result = await client.wait_for_result(recaptcha_task.id, "recaptcha")
print(f"Recaptcha —Ç–æ–∫–µ–Ω: {result.token}")
```

### üîê Turnstile

```python
# –†–µ—à–∏—Ç—å Cloudflare Turnstile
turnstile_task = await client.get_turnstile_token(
    url="https://example.com/page",
    site_key="0x4AAAA...",
    action="login",
    proxy="http://proxy.example.com:8080"  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
)

# –ñ–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
result = await client.wait_for_result(turnstile_task.id, "turnstile")
print(f"Turnstile —Ç–æ–∫–µ–Ω: {result.token}")
```

### üìû VoIP Push

```python
# –ü–æ–ª—É—á–∏—Ç—å VoIP push —Ç–æ–∫–µ–Ω
voip_task = await client.get_voip_token(
    app_name="tgiOS",
    ref="voip_ref"
)

# –ñ–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
result = await client.wait_for_result(voip_task.id, "voip")
print(f"VoIP —Ç–æ–∫–µ–Ω: {result.token}")
```

### üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

```python
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∂–¥–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
result = await client.wait_for_result(
    task_id="task_id",
    service="push",  # push, email, integrity, recaptcha, turnstile, voip
    timeout=180.0,   # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    poll_interval=2.0  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
)
```

### ü™ù Webhook –ø–æ–¥–¥–µ—Ä–∂–∫–∞

```python
# –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Å webhook
task = await client.get_push_token(
    app_name="tgiOS",
    app_device=AppDevice.IOS,
    webhook="https://yourapp.com/webhook"
)

# –ö–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL –ø—Ä–∏–¥–µ—Ç POST –∑–∞–ø—Ä–æ—Å
# —Å JSON –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç—É get_status
```

## üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

```python
from reghelp_client import (
    RegHelpError,
    RateLimitError,
    UnauthorizedError,
    TaskNotFoundError,
    NetworkError
)

try:
    task = await client.get_push_token("tgiOS", AppDevice.IOS)
except RateLimitError:
    print("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (50/—Å–µ–∫)")
except UnauthorizedError:
    print("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
except TaskNotFoundError as e:
    print(f"–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e.task_id}")
except NetworkError as e:
    print(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
except RegHelpError as e:
    print(f"API –æ—à–∏–±–∫–∞: {e}")
```

## ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

```python
import logging

# –í–∫–ª—é—á–∏—Ç—å debug –ª–æ–≥–∏
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("reghelp_client")
```

### –ö–∞—Å—Ç–æ–º–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç

```python
import httpx

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π HTTP –∫–ª–∏–µ–Ω—Ç
custom_client = httpx.AsyncClient(
    timeout=60.0,
    verify=False  # –æ—Ç–∫–ª—é—á–∏—Ç—å SSL –ø—Ä–æ–≤–µ—Ä–∫—É (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
)

client = RegHelpClient(
    api_key="your_api_key",
    http_client=custom_client
)
```

## üß™ –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤

### –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤

```python
import asyncio

async def get_multiple_tokens():
    async with RegHelpClient("your_api_key") as client:
        # –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = await asyncio.gather(*[
            client.get_push_token("tgiOS", AppDevice.IOS)
            for _ in range(5)
        ])
        
        # –ñ–¥–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = await asyncio.gather(*[
            client.wait_for_result(task.id, "push")
            for task in tasks
        ])
        
        for i, result in enumerate(results):
            print(f"–¢–æ–∫–µ–Ω {i+1}: {result.token}")
```

### –†–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º

```python
async def manage_balance():
    async with RegHelpClient("your_api_key") as client:
        balance = await client.get_balance()
        
        if balance.balance < 10:
            print("–ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç")
            return
            
        print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance.balance} {balance.currency}")
```

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

```python
async def long_running_task():
    async with RegHelpClient("your_api_key") as client:
        task = await client.get_push_token("tgiOS", AppDevice.IOS)
        
        # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        while True:
            status = await client.get_push_status(task.id)
            
            if status.status == "done":
                print(f"–ì–æ—Ç–æ–≤–æ! –¢–æ–∫–µ–Ω: {status.token}")
                break
            elif status.status == "error":
                print(f"–û—à–∏–±–∫–∞: {status.message}")
                break
                
            print(f"–°—Ç–∞—Ç—É—Å: {status.status}")
            await asyncio.sleep(5)  # –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
```

## üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è

- Python 3.8+
- httpx >= 0.27.0
- pydantic >= 2.0.0

## üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License. –°–º. [LICENSE](LICENSE) –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.

## ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞

- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://reghelp.net/api-docs
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞: support@reghelp.net
- Issues: https://github.com/REGHELPNET/reghelp_client/issues 
