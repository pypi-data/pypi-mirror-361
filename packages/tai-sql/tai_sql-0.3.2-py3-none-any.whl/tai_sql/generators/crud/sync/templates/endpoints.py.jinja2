# Este archivo ha sido generado automáticamente por tai-sql
# No modifiques este archivo directamente

{{ imports|join('\n') }}

# General Enum class

class EnumModel:

    def __init__(self, name: str, values: List[str]):
        self.name = name
        self.values = values
    
    def find_many(self) -> List[str]:
        """
        Devuelve una lista de los valores del Enum.
        
        Returns:
            List[str]: Lista de valores del Enum
        """
        return self.values

{% for model in models %}
@dataclass
class {{ model.name }}DTO:
    """Data Transfer Object para {{ model.name }}"""
    {% for column in model.columns %}
    {{ column.name }}: {{ column.type }}
    {% endfor %}
    
    @classmethod
    def from_model(cls, instance: {{ model.name }}) -> '{{ model.name }}DTO':
        return cls(
            {% for column in model.columns %}
            {{ column.name }}=instance.{{ column.name }},
            {% endfor %}
        )
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            {% for column in model.columns %}
            '{{ column.name }}': self.{{ column.name }},
            {% endfor %}
        }

{% if not model.is_view %}
class {{ model.name }}DataFrameValidator:
    """ Validador de DataFrame para el modelo {{ model.name }} """

    def validate_dataframe_schema(
        self, 
        df: "DataFrame", 
        ignore_extra_columns: bool, 
        fill_missing_nullable: bool
    ) -> None:
        """
        Valida que el esquema del DataFrame sea compatible con el modelo.
        
        Args:
            df: DataFrame a validar
            ignore_extra_columns: Si ignorar columnas extra
            fill_missing_nullable: Si llenar columnas nullable faltantes
            
        Raises:
            ValueError: Si el esquema no es compatible
        """
        # Definir columnas del modelo
        model_columns = {
            {% for column in model.columns %}
            '{{ column.name }}': {
                'type': '{{ column.type }}',
                'nullable': {{ 'True' if column.nullable else 'False' }},
                'primary_key': {{ 'True' if column.primary_key else 'False' }},
                'autoincrement': {{ 'True' if column.autoincrement else 'False' }}
            }{{ ',' if not loop.last }}
            {% endfor %}
        }
        
        df_columns = set(df.columns)
        required_columns = set(model_columns.keys())
        
        # Verificar columnas extra
        extra_columns = df_columns - required_columns
        if extra_columns and not ignore_extra_columns:
            raise ValueError(
                f"DataFrame contiene columnas no definidas en el modelo: {list(extra_columns)}\n"
                f"Usa ignore_extra_columns=True para ignorarlas o elimínalas del DataFrame"
            )
        
        # Verificar columnas faltantes
        missing_columns = required_columns - df_columns
        
        # Filtrar columnas que pueden faltar
        critical_missing = []
        for col in missing_columns:
            col_info = model_columns[col]
            # Las columnas críticas son las que no son nullable, no son auto-increment y no son PK auto
            if (not col_info['nullable'] and 
                not col_info['autoincrement'] and 
                not (col_info['primary_key'] and col_info['autoincrement'])):
                critical_missing.append(col)
        
        if critical_missing:
            raise ValueError(
                f"DataFrame falta columnas requeridas (NOT NULL): {critical_missing}\n"
                f"Estas columnas son obligatorias y deben estar presentes en el DataFrame"
            )
        
        # Advertir sobre columnas nullable faltantes
        nullable_missing = [col for col in missing_columns if col not in critical_missing]
        if nullable_missing and not fill_missing_nullable:
            import warnings
            warnings.warn(
                f"DataFrame falta columnas nullable: {nullable_missing}\n"
                f"Usa fill_missing_nullable=True para llenarlas automáticamente con None"
            )
    
    def validate_dataframe_types(self, df: "DataFrame") -> None:
        """
        Valida que los tipos de datos del DataFrame sean compatibles.
        
        Args:
            df: DataFrame a validar
            
        Raises:
            TypeError: Si los tipos no son compatibles
        """
        
        # Mapeo de tipos SQLAlchemy a tipos pandas compatibles
        type_compatibility = {
            {% for column in model.columns %}
            '{{ column.name }}': {
                'sqlalchemy_type': '{{ column.type }}',
                'compatible_pandas_types': [
                    {% if 'int' in column.type or 'BigInteger' in column.type %}
                    'int64', 'Int64', 'int32', 'Int32', 'int16', 'Int16', 'int8', 'Int8', 'object'
                    {% elif 'float' in column.type or 'Numeric' in column.type %}
                    'float64', 'float32', 'int64', 'Int64', 'object'
                    {% elif 'bool' in column.type %}
                    'bool', 'boolean', 'object'
                    {% elif 'datetime' in column.type %}
                    'datetime64[ns]', 'object'
                    {% elif 'date' in column.type %}
                    'datetime64[ns]', 'object'
                    {% elif 'str' in column.type or 'Text' in column.type %}
                    'object', 'string', 'category'
                    {% else %}
                    'object'
                    {% endif %}
                ]
            }{{ ',' if not loop.last }}
            {% endfor %}
        }
        
        type_errors = []
        
        for column in df.columns:
            if column in type_compatibility:
                df_dtype = str(df[column].dtype)
                compatible_types = type_compatibility[column]['compatible_pandas_types']
                sqlalchemy_type = type_compatibility[column]['sqlalchemy_type']
                
                if df_dtype not in compatible_types:
                    # Verificar si puede ser convertido
                    if self.can_convert_type(df[column], sqlalchemy_type):
                        continue
                    
                    type_errors.append(
                        f"Columna '{column}': tipo '{df_dtype}' no compatible con '{sqlalchemy_type}'. "
                        f"Tipos aceptados: {compatible_types}"
                    )
        
        if type_errors:
            raise TypeError(
                "Errores de tipo de datos encontrados:\n" + 
                "\n".join(f"  - {error}" for error in type_errors) +
                "\n\nConsidera convertir los tipos antes de la inserción."
            )
    
    def can_convert_type(self, series: "Series", target_sqlalchemy_type: str) -> bool:
        """
        Verifica si una serie puede ser convertida al tipo SQLAlchemy objetivo.
        
        Args:
            series: Serie de pandas a verificar
            target_sqlalchemy_type: Tipo SQLAlchemy objetivo
            
        Returns:
            bool: True si puede ser convertida
        """
        try:
            import pandas as pd
        except ImportError:
            raise ImportError(
                "pandas no está instalado. Para usar from_df(), instala pandas:\n"
                "pip install pandas\n"
                "o si usas poetry:\n"
                "poetry add pandas"
            )
        
        try:
            # Probar conversión en una muestra pequeña
            sample = series.dropna().head(10)
            if sample.empty:
                return True
            
            if 'int' in target_sqlalchemy_type:
                pd.to_numeric(sample, errors='raise')
            elif 'float' in target_sqlalchemy_type or 'Numeric' in target_sqlalchemy_type:
                pd.to_numeric(sample, errors='raise')
            elif 'bool' in target_sqlalchemy_type:
                # Verificar valores booleanos válidos
                valid_bool_values = {True, False, 1, 0, '1', '0', 'true', 'false', 'True', 'False'}
                if not all(val in valid_bool_values for val in sample.unique()):
                    return False
            elif 'datetime' in target_sqlalchemy_type or 'date' in target_sqlalchemy_type:
                pd.to_datetime(sample, errors='raise')
            
            return True
        except:
            return False
    
    def prepare_dataframe_for_insertion(
        self, 
        df: "DataFrame", 
        ignore_extra_columns: bool, 
        fill_missing_nullable: bool
    ) -> "DataFrame":
        """
        Prepara el DataFrame para inserción en la base de datos.
        
        Args:
            df: DataFrame original
            ignore_extra_columns: Si ignorar columnas extra
            fill_missing_nullable: Si llenar columnas faltantes nullable
            
        Returns:
            DataFrame preparado para inserción
        """
        try:
            import pandas as pd
            import numpy as np
        except ImportError:
            return df
        
        # Crear copia para no modificar el original
        cleaned_df = df.copy()
        
        # Definir columnas del modelo
        model_columns = {
            {% for column in model.columns %}
            '{{ column.name }}': {
                'nullable': {{ 'True' if column.nullable else 'False' }},
                'autoincrement': {{ 'True' if column.autoincrement else 'False' }}
            }{{ ',' if not loop.last }}
            {% endfor %}
        }
        
        # Eliminar columnas extra si se solicita
        if ignore_extra_columns:
            extra_columns = set(cleaned_df.columns) - set(model_columns.keys())
            if extra_columns:
                cleaned_df = cleaned_df.drop(columns=list(extra_columns))
        
        # Agregar columnas nullable faltantes si se solicita
        if fill_missing_nullable:
            for col_name, col_info in model_columns.items():
                if (col_name not in cleaned_df.columns and 
                    col_info['nullable'] and 
                    not col_info['autoincrement']):
                    cleaned_df[col_name] = None
        
        # Eliminar columnas autoincrement (la BD las manejará)
        autoincrement_columns = [
            col for col, info in model_columns.items() 
            if info['autoincrement'] and col in cleaned_df.columns
        ]
        if autoincrement_columns:
            cleaned_df = cleaned_df.drop(columns=autoincrement_columns)
        
        # Reordenar columnas según el modelo (las que existan)
        model_column_order = [col for col in model_columns.keys() if col in cleaned_df.columns]
        cleaned_df = cleaned_df[model_column_order]
        
        return cleaned_df
    
    def clean_records_data(self, records_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Limpia los datos de registros para inserción en BD.
        
        Args:
            records_data: Lista de diccionarios con datos de registros
            
        Returns:
            Lista de diccionarios limpiados
        """
        try:
            import pandas as pd
        except ImportError:
            return records_data
        
        cleaned_records = []
        
        for record in records_data:
            cleaned_record = {}
            for key, value in record.items():
                # Manejar valores NaN y NaT de pandas
                if pd.isna(value):
                    cleaned_record[key] = None
                # Manejar tipos numpy
                elif hasattr(value, 'item'):  # numpy scalars
                    cleaned_record[key] = value.item()
                else:
                    cleaned_record[key] = value
            
            cleaned_records.append(cleaned_record)
        
        return cleaned_records

{% endif %}

class {{ model.name }}CRUD:
    """
    Clase CRUD síncrona para el modelo {{ model.name }}.
    
    Proporciona operaciones completas de Create, Read, Update y Delete
    para el modelo {{ model.name }} con soporte para gestión automática
    y manual de sesiones SQLAlchemy.
    
    Características principales:
    - Soporte dual: sesiones automáticas o compartidas
    - Type hints completos para mejor experiencia de desarrollo
    - Manejo robusto de errores con rollback automático
    - Operaciones optimizadas con flush para obtener IDs
    - Filtros flexibles en todas las operaciones de búsqueda
    
    Métodos de lectura:
        find(**filters, session=None): Busca un único registro
        find_many(limit, offset, **filters, session=None): Busca múltiples registros
        find_by_id(id, session=None): Busca por clave primaria
        count(**filters, session=None): Cuenta registros
    
    {% if not model.is_view %}
    Métodos de escritura:
        create(**data, session=None): Crea un nuevo registro
        create_many(records, session=None): Crea múltiples registros
        update(filters, **data, session=None): Actualiza registros existentes
        delete(**filters, session=None): Elimina registros

    {% endif %}
    Parámetros de sesión:
        Todos los métodos aceptan un parámetro opcional 'session':
        - Si session=None: Se crea una sesión automática con commit
        - Si session=Session: Se usa la sesión proporcionada (para transacciones)
    
    Ejemplos de uso:
        ```python
        # Operaciones simples (sesión automática)
        crud = {{ model.name }}CRUD(session_manager)
        {% if model.columns %}
        {% set first_column = model.columns[0] %}
        {% if not first_column.args.get('autoincrement', False) %}
        record = crud.create({{ first_column.name }}="valor")
        {% endif %}
        {% endif %}
        found = crud.find_by_id(1)
        
        # Operaciones transaccionales (sesión compartida)
        with session_manager.transaction() as session:
            record1 = crud.create(data="valor1", session=session)
            record2 = crud.create(data="valor2", session=session)
            # Ambos se crean en la misma transacción
        ```
    """
    
    def __init__(self, session_manager: SyncSessionManager):
        """
        Inicializa el CRUD con un gestor de sesiones.
        
        Args:
            session_manager: Gestor de sesiones síncronas
        """
        self.session_manager = session_manager
        {% if not model.is_view %}
        self._df_validator = {{ model.name }}DataFrameValidator()
        {% endif %}
    
    def find(
        self,
        {% for column in model.columns %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% endfor %}
        session: Optional[Session] = None
    ) -> Optional[{{ model.name }}DTO]:
        """
        Busca un único registro por filtros.
        
        Args:
            {% for column in model.columns %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% endfor %}
            session: Sesión existente (opcional)
            
        Returns:
            Instancia del modelo o None si no se encuentra
        """
        query = select({{ model.name }})
        
        {% for column in model.columns %}
        if {{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% endfor %}

        if session is not None:
            result = session.execute(query).scalars().first()
            data = {{ model.name }}DTO.from_model(result) if result else None
        else:
            with self.session_manager.get_session() as session:
                result = session.execute(query).scalars().first()
                data = {{ model.name }}DTO.from_model(result) if result else None
        
        return data
    
    def find_many(
        self,
        limit: Optional[int] = None, 
        offset: Optional[int] = None,
        {% for column in model.columns %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% endfor %}
        session: Optional[Session] = None
    ) -> List[{{ model.name }}DTO]:
        """
        Busca múltiples registros por filtros.
        
        Args:
            limit: Límite de registros a retornar
            offset: Número de registros a saltar
            {% for column in model.columns %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% endfor %}
            session: Sesión existente (opcional)
            
        Returns:
            Lista de instancias del modelo
        """
        query = select({{ model.name }})
        
        {% for column in model.columns %}
        if {{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% endfor %}
        
        if offset is not None:
            query = query.offset(offset)
        if limit is not None:
            query = query.limit(limit)
        
        if session is not None:
            results = list(session.execute(query).scalars().all())
            data = [{{ model.name }}DTO.from_model(result) for result in results]

        else:
            with self.session_manager.get_session() as session:
                results = list(session.execute(query).scalars().all())
                data = [{{ model.name }}DTO.from_model(result) for result in results]

        return data

    def as_dataframe(
        self,
        limit: Optional[int] = None, 
        offset: Optional[int] = None,
        {% for column in model.columns %}
        {{ column.name }}: Optional[{{ column.type }}] = None{{ ',' if not loop.last }}
        {% endfor %}
    ) -> DataFrame:
        """
        Busca múltiples registros estableciendo filtros y devuelve el resultado como pandas DataFrame.
        
        Args:
            limit: Límite de registros a retornar
            offset: Número de registros a saltar
            {% for column in model.columns %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% endfor %}
            
        Returns:
            pandas.DataFrame con los registros encontrados
            
        Raises:
            ImportError: Si pandas no está instalado
            
        Example:
            ```python
            
            # Obtener todos los registros como DataFrame
            df = db_api.{{ model.name.lower() }}.as_dataframe()
            
            # Con filtros y límites
            df = db_api.{{ model.name.lower() }}.as_dataframe(
                limit=100,
                {% if model.columns %}
                {{ model.columns[0].name }}="valor_filtro"
                {% endif %}
            )
            
            # Análisis de datos
            print(df.describe())
            print(df.head())
            
            # Exportar a CSV
            df.to_csv('{{ model.name.lower() }}_data.csv', index=False)
            ```
        """
        try:
            import pandas as pd
        except ImportError:
            raise ImportError(
                "pandas no está instalado. Para usar find_as_dataframe(), instala pandas:\n"
                "pip install pandas\n"
                "o si usas poetry:\n"
                "poetry add pandas"
            )
        
        # Obtener los registros usando find_many
        {{ model.name.lower() }}s = self.find_many(
            limit=limit,
            offset=offset,
            {% for column in model.columns %}
            {{ column.name }}={{ column.name }}{{ ',' if not loop.last }}
            {% endfor %}
        )

        # Si no hay registros, devolver DataFrame vacío con las columnas del modelo
        if not {{ model.name.lower() }}s:
            return pd.DataFrame(columns=[
                {% for column in model.columns %}
                '{{ column.name }}'{{ ',' if not loop.last }}
                {% endfor %}
            ])

        data = [{{ model.name.lower() }}.to_dict() for {{ model.name.lower() }} in {{ model.name.lower() }}s]
        
        # Crear DataFrame
        df = pd.DataFrame(data)
        
        # Optimizar tipos de datos si es posible
        return self._optimize_dataframe_dtypes(df)

    def _optimize_dataframe_dtypes(self, df: DataFrame) -> DataFrame:
        """
        Optimiza los tipos de datos del DataFrame basándose en las columnas del modelo.
        
        Args:
            df: DataFrame a optimizar
            
        Returns:
            DataFrame con tipos de datos optimizados
        """
        try:
            import pandas as pd
        except ImportError:
            # Si pandas no está disponible, devolver el DataFrame tal como está
            return df
        
        if df.empty:
            return df
        
        # Mapeo de tipos SQLAlchemy a tipos pandas optimizados
        type_mapping = {
            {% for column in model.columns %}
            '{{ column.name }}': {% if 'int' in column.type or 'BigInteger' in column.type %}'int64'{% elif 'float' in column.type or 'Numeric' in column.type %}'float64'{% elif 'bool' in column.type %}'boolean'{% elif 'datetime' in column.type %}'datetime64[ns]'{% elif 'date' in column.type %}'datetime64[ns]'{% elif 'str' in column.type or 'Text' in column.type %}'string'{% else %}'object'{% endif %}{{ ',' if not loop.last }}
            {% endfor %}
        }
        
        # Aplicar conversiones de tipo de forma segura
        for column, target_type in type_mapping.items():
            if column in df.columns:
                try:
                    if target_type == 'int64':
                        # Manejar valores nulos en columnas enteras
                        df[column] = pd.to_numeric(df[column], errors='coerce').astype('Int64')
                    elif target_type == 'float64':
                        df[column] = pd.to_numeric(df[column], errors='coerce')
                    elif target_type == 'boolean':
                        df[column] = df[column].astype('boolean')
                    elif target_type == 'datetime64[ns]':
                        df[column] = pd.to_datetime(df[column], errors='coerce')
                    elif target_type == 'string':
                        df[column] = df[column].astype('string')
                    # 'object' se deja como está
                except Exception:
                    # Si falla la conversión, mantener el tipo original
                    continue
        
        return df

    {% if not model.is_view %}
    def from_dataframe(
        self,
        df: "DataFrame",
        mode: Literal['create', 'upsert'] = "upsert",
        validate_types: bool = False,
        ignore_extra_columns: bool = False,
        fill_missing_nullable: bool = True
    ) -> List[{{ model.name }}]:
        """
        Ingesta un DataFrame de pandas en la tabla correspondiente.
        
        Realiza validaciones de esquema y tipos de datos antes de la inserción,
        y permite diferentes modos de inserción (create o upsert).
        
        Args:
            df: DataFrame de pandas con los datos a insertar
            mode ('upsert'): Modo de inserción - 'create' o 'upsert'
            validate_types (False): Si True, valida tipos de datos del DataFrame
            ignore_extra_columns (False): Si True, ignora columnas extra del DataFrame
            fill_missing_nullable (True): Si True, llena con None las columnas nullable faltantes
            
        Returns:
            List[{{ model.name }}]: Lista de objetos creados/actualizados
            
        Raises:
            ImportError: Si pandas no está instalado
            ValueError: Si el DataFrame no cumple con el esquema requerido
            TypeError: Si los tipos de datos no son compatibles
            
        Example:
            ```python
            import pandas as pd
            
            crud = {{ model.name }}CRUD(session_manager)
            
            # Crear DataFrame
            df = pd.DataFrame({
                {% for column in model.columns %}
                '{{ column.name }}': [{% if 'int' in column.type %}1, 2, 3{% elif 'str' in column.type %}'valor1', 'valor2', 'valor3'{% elif 'bool' in column.type %}True, False, True{% else %}None, None, None{% endif %}]{{ ',' if not loop.last }}
                {% endfor %}
            })
            
            # Inserción simple
            records = crud.from_df(df)
            
            # Upsert con validaciones relajadas
            records = crud.from_df(
                df, 
                mode='upsert',
                ignore_extra_columns=True
            )
            ```
        """
        
        if df.empty:
            return []
        
        # Validar modo
        if mode not in ['create', 'upsert']:
            raise ValueError("mode debe ser 'create' o 'upsert'")
        
        # Realizar validaciones del esquema
        self._df_validator.validate_dataframe_schema(df, ignore_extra_columns, fill_missing_nullable)
        
        # Validar tipos de datos si se solicita
        if validate_types:
            self._df_validator.validate_dataframe_types(df)
        
        # Preparar DataFrame para inserción
        cleaned_df = self._df_validator.prepare_dataframe_for_insertion(df, ignore_extra_columns, fill_missing_nullable)
        
        # Convertir DataFrame a lista de diccionarios
        records_data = cleaned_df.to_dict('records')
        
        # Limpiar valores NaN/None problemáticos
        records_data = self._df_validator.clean_records_data(records_data)
        
        # Ejecutar inserción según el modo
        if mode == 'create':
            return self.create_many(records_data)
        else:  # upsert
            return self.upsert_many(records_data)

    def create(
        self, 
        {% for column in model.columns -%}
        {% if not column.args.get('autoincrement', False) and not column.nullable and column.default is none %}
        {{ column.name }}: {{ column.type }},{{ ' ' }}
        {% endif -%}
        {% endfor -%}
        {% for column in model.columns %}
        {% if column.nullable %}
        {{ column.name }}: {{ column.type }} = None,
        {% endif %}
        {% if column.default is not none %}
        {% if column.default == "datetime.now" %}
        {{ column.name }}: {{ column.type }} = datetime.now(),
        {% elif column.default in ["True", "False", "None"] %}
        {{ column.name }}: {{ column.type }} = {{ column.default }},
        {% elif column.default.isdigit() %}
        {{ column.name }}: {{ column.type }} = {{ column.default }},
        {% elif column.default.replace(" ", "").isalnum() %}
        {{ column.name }}: {{ column.type }} = "{{ column.default }}",
        {% else %}
        {{ column.name }}: {{ column.type }} = None,
        {% endif %}
        {% endif %}
        {% endfor %}
        session: Optional[Session] = None
    ) -> {{ model.name }}DTO:
        """
        Crea un nuevo registro.
        
        Args:
            {% for column in model.columns %}
            {% if not column.args.get('autoincrement', False) %}
            {{ column.name }}: {{ column.name|title }} del registro
            {% endif %}
            {% endfor %}
            session: Sesión existente (opcional)
            
        Returns:
            Instancia del modelo creado
        """
        data = {}
        {% for column in model.columns %}
        {% if not column.args.get('autoincrement', False) %}
        {% if not column.nullable and column.default is none %}
        data['{{ column.name }}'] = {{ column.name }}
        {% else %}
        if {{ column.name }} is not None:
            data['{{ column.name }}'] = {{ column.name }}
        {% endif %}
        {% endif %}
        {% endfor %}
        
        instance = {{ model.name }}(**data)

        if session is not None:
            session.add(instance)
            session.flush()  # Asegura que se genere el ID si es autoincrement
            data = {{ model.name }}DTO.from_model(instance)
        else:
            with self.session_manager.get_session() as session:
                session.add(instance)
                session.flush()
                data = {{ model.name }}DTO.from_model(instance)
        
        return data
    
    def create_many(self, records: List[Dict[str, Any]], session: Optional[Session] = None) -> List[{{ model.name }}DTO]:
        """
        Crea múltiples registros usando diccionarios para máxima flexibilidad.
        
        Args:
            records: Lista de diccionarios con los datos de los registros
            session: Sesión existente (opcional)
            
        Returns:
            Lista de instancias creadas
        
        Example:
        {
            {% for column in model.columns %}
            '{{ column.name }}': {{ column.type }}{{ ', ' if not loop.last }}
            {% endfor %}
        }
        """
        instances = []
        for record_data in records:
            instance = {{ model.name }}(**record_data)
            instances.append(instance)
        
        if session is not None:
            session.add_all(instances)
            session.flush()  # Asegura que se generen los IDs si son autoincrement
            data = [{{ model.name }}DTO.from_model(instance) for instance in instances]
        else:
            with self.session_manager.get_session() as session:
                session.add_all(instances)
                session.flush()  # Asegura que se generen los IDs si son autoincrement
                data = [{{ model.name }}DTO.from_model(instance) for instance in instances]

        return data
    
    def update(self, 
        filters: Dict[str, Any],
        {% for column in model.columns %}
        {% if not column.args.get('autoincrement', False) and not column.args.get('primary_key', False) %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% endif -%}
        {% endfor %}
        session: Optional[Session] = None
    ) -> int:
        """
        Actualiza registros que coincidan con los filtros.
        
        Args:
            filters: Filtros para identificar registros a actualizar
            {% for column in model.columns %}
            {% if not column.args.get('autoincrement', False) and not column.args.get('primary_key', False) %}
            {{ column.name }}: Nuevo valor para {{ column.name }}
            {% endif %}
            {% endfor %}
            session: Sesión existente (opcional)
            
        Returns:
            Número de registros actualizados
        """
        query = update({{ model.name }})
        
        for key, value in filters.items():
            if hasattr({{ model.name }}, key):
                query = query.where(getattr({{ model.name }}, key) == value)
        
        update_data = {}
        {% for column in model.columns %}
        {% if not column.args.get('autoincrement', False) and not column.args.get('primary_key', False) %}
        if {{ column.name }} is not None:
            update_data['{{ column.name }}'] = {{ column.name }}
        {% endif %}
        {% endfor %}
        
        if session is not None:
            if update_data:
                query = query.values(**update_data)
                result = session.execute(query)
                return result.rowcount
        else:
            if update_data:
                query = query.values(**update_data)
                with self.session_manager.get_session() as session:
                    result = session.execute(query)
                    return result.rowcount

        return 0
    
    def update_many(self, records: List[Dict[str, Any]], match_fields: List[str], session: Optional[Session] = None) -> int:
        """
        Actualiza múltiples registros basándose en campos de coincidencia.
        
        Args:
            records: Lista de diccionarios con los datos a actualizar
            match_fields: Campos a usar para encontrar los registros a actualizar
            session: Sesión existente (opcional)
            
        Returns:
            Número total de registros actualizados
        """
        total_updated = 0

        def execute_query(session: Session) -> int:
            
            for record_data in records:
                record_copy = record_data.copy()
                # Separar campos de búsqueda de campos de actualización
                filters = {field: record_copy.pop(field) for field in match_fields if field in record_copy}
                
                if filters and record_copy:  # Solo actualizar si hay filtros y datos
                    query = update({{ model.name }})
                    
                    for key, value in filters.items():
                        if hasattr({{ model.name }}, key):
                            query = query.where(getattr({{ model.name }}, key) == value)
                    
                    query = query.values(**record_copy)
                    result = session.execute(query)
                    total_updated += result.rowcount
                
        if session is not None:
            execute_query(session)

        else:
            with self.session_manager.get_session() as session:
                execute_query(session)
        
        return total_updated
    
    def upsert(
        self,
        record: Dict[str, Any],
        match_fields: List[str] = [
            {% for column in model.columns %}
            {% if column.args.get('primary_key', False) %}
            '{{ column.name }}'{{ ', ' if not loop.last }}
            {% endif %}
            {% endfor %}
        ],
        session: Optional[Session] = None
    ) -> {{ model.name }}DTO:
        """
        Inserta o actualiza un registro (upsert).
        
        Args:
            record: Datos del registro a insertar o actualizar
            match_fields: Campos a usar para verificar si el registro existe. 
                         Por defecto usa las claves primarias.
            session: Sesión existente (opcional)
            
        Returns:
            Instancia del modelo (creada o actualizada)
        """
        # Buscar registro existente usando los campos de coincidencia
        if not match_fields:
            raise ValueError("match_fields no puede estar vacío. Debe contener al menos un campo para identificar registros.")

        for field in match_fields:
            if field not in record:
                raise ValueError(f"El campo '{field}' debe estar presente en el registro para upsert.")

        filters = {field: record[field] for field in match_fields}

        def execute_query(session: Session) -> Optional[{{ model.name }}]:

            query = select({{ model.name }})
        
            for key, value in filters.items():
                if hasattr({{ model.name }}, key):
                    query = query.where(getattr({{ model.name }}, key) == value)

            existing = session.execute(query).scalars().first()
            
            if existing:
                # Actualizar registro existente
                update_data = {k: v for k, v in record.items() if k not in match_fields}
                if update_data:
                    query = update({{ model.name }})
                    
                    for key, value in filters.items():
                        if hasattr({{ model.name }}, key):
                            query = query.where(getattr({{ model.name }}, key) == value)
                    
                    query = query.values(**update_data)
                    session.execute(query)
                    # Refrescar la instancia
                    session.refresh(existing)
                return existing
            else:
                # Crear nuevo registro
                instance = {{ model.name }}(**record)
                session.add(instance)
                session.flush()
                return instance

        if session is not None:
            instance = execute_query(session)
            return {{ model.name }}DTO.from_model(instance)
            
        else:
            with self.session_manager.get_session() as session:
                instance = execute_query(session)
                return {{ model.name }}DTO.from_model(instance)
    
    def upsert_many(
        self,
        records: List[Dict[str, Any]],
        match_fields: List[str] = [
            {% for column in model.columns %}
            {% if column.args.get('primary_key', False) %}
            '{{ column.name }}'{{ ', ' if not loop.last }}
            {% endif %}
            {% endfor %}
        ],
        session: Optional[Session] = None
    ) -> List[{{ model.name }}DTO]:
        """
        Inserta o actualiza múltiples registros.
        
        Args:
            records: Lista de diccionarios con los datos
            match_fields: Campos a usar para verificar si los registros existen
            session: Sesión existente (opcional)
            
        Returns:
            Lista de instancias (creadas o actualizadas)
        """
        results = []

        if session is not None:
            for record in records:
                result = self.upsert(record, match_fields, session)
                results.append(result)
        else:
            with self.session_manager.get_session() as session:
                for record in records:
                    result = self.upsert(record, match_fields, session)
                    results.append(result)

        return results
    
    def delete(self, 
        {% for column in model.columns %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% endfor %}
        session: Optional[Session] = None
    ) -> int:
        """
        Elimina registros que coincidan con los filtros.
        
        Args:
            {% for column in model.columns %}
            {{ column.name }}: Filtrar por {{ column.name }} para eliminar
            {% endfor %}
            session: Sesión existente (opcional)
            
        Returns:
            Número de registros eliminados
        """
        query = delete({{ model.name }})
        
        {% for column in model.columns %}
        if {{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% endfor %}

        if session is not None:
            result = session.execute(query)
        else:
            with self.session_manager.get_session() as session:
                result = session.execute(query)

        return result.rowcount
    
    def delete_many(self, filters_list: List[Dict[str, Any]]) -> int:
        """
        Elimina múltiples registros basándose en una lista de filtros.
        
        Args:
            filters_list: Lista de diccionarios con filtros para cada eliminación
            
        Returns:
            Número total de registros eliminados
        """

        total_deleted = 0
        def execute_query(session: Session) -> int:
            for filters in filters_list:
                query = delete({{ model.name }})
                
                for key, value in filters.items():
                    if hasattr({{ model.name }}, key):
                        query = query.where(getattr({{ model.name }}, key) == value)
                
                result = session.execute(query)
                total_deleted += result.rowcount
        
        if session is not None:
            execute_query(session)
        else:
            with self.session_manager.get_session() as session:
                execute_query(session)
        
        return total_deleted
    
    # Métodos de conveniencia adicionales
    {% set autoincrement_columns = model.columns | selectattr('args.autoincrement', 'equalto', true) | list %}
    {% set has_autoincrement = autoincrement_columns | length > 0 %}
    {% if has_autoincrement %}
    {% set autoincrement_col = autoincrement_columns[0] %}
    {% endif %}

    {% if has_autoincrement %}
    def find_by_id(
        self,
        {{ autoincrement_col.name }}: {{ autoincrement_col.type }},
        session: Optional[Session] = None
    ) -> Optional[{{ model.name }}]:
        """
        Busca un registro por su ID (columna autoincrement).
        
        Args:
            {{ autoincrement_col.name }}: ID del registro a buscar
            session: Sesión existente (opcional)
            
        Returns:
            Instancia del modelo o None si no se encuentra
        """
        return self.find({{ autoincrement_col.name }}={{ autoincrement_col.name }}, session=session)

    def delete_by_id(
        self,
        {{ autoincrement_col.name }}: {{ autoincrement_col.type }},
        session: Optional[Session] = None
    ) -> bool:
        """
        Elimina un registro por su ID (columna autoincrement).
        
        Args:
            id: ID del registro a eliminar
            session: Sesión existente (opcional)
            
        Returns:
            True si se eliminó, False si no se encontró
        """
        deleted_count = self.delete({{ autoincrement_col.name }}={{ autoincrement_col.name }}, session=session)
        return deleted_count > 0
    {% endif %}
    
    def count(
        self,
        {% for column in model.columns %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% endfor %}
        session: Optional[Session] = None
    ) -> int:
        """
        Cuenta registros que coincidan con los filtros.
        
        Args:
            {% for column in model.columns %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% endfor %}
            session: Sesión existente (opcional)
            
        Returns:
            Número de registros que coinciden con los filtros
        """
        from sqlalchemy import func
        
        query = select(func.count({{ model.name }}))
        
        {% for column in model.columns %}
        if {{ column.name }} is not None:
            query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
        {% endfor %}

        if session is not None:
            result = session.execute(query).scalar()
        else:
            with self.session_manager.get_session(begin=True) as session:
                result = session.execute(query).scalar()

        return result or 0
    
    def exists(self,
        {% for column in model.columns %}
        {{ column.name }}: Optional[{{ column.type }}] = None,
        {% endfor %}
        session: Optional[Session] = None
    ) -> bool:
        """
        Verifica si existe al menos un registro que coincida con los filtros.
        
        Args:
            {% for column in model.columns %}
            {{ column.name }}: Filtrar por {{ column.name }}
            {% endfor %}
            session: Sesión existente (opcional)
            
        Returns:
            True si existe al menos un registro, False en caso contrario
        """
        return self.count({% for column in model.columns %}{{ column.name }}={{ column.name }}, {% endfor %}session=session) > 0
    {% endif %}
{% endfor %}