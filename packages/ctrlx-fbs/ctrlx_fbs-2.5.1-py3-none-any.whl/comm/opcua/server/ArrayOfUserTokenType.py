# automatically generated by the FlatBuffers compiler, do not modify

# namespace: server

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArrayOfUserTokenType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArrayOfUserTokenType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArrayOfUserTokenType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ArrayOfUserTokenType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The user token configuration of the OPC UA Server in an array
    # ArrayOfUserTokenType
    def UserTokenArray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.server.UserTokenType import UserTokenType
            obj = UserTokenType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ArrayOfUserTokenType
    def UserTokenArrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArrayOfUserTokenType
    def UserTokenArrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ArrayOfUserTokenTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return ArrayOfUserTokenTypeStart(builder)
def ArrayOfUserTokenTypeAddUserTokenArray(builder, userTokenArray): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(userTokenArray), 0)
def AddUserTokenArray(builder, userTokenArray):
    return ArrayOfUserTokenTypeAddUserTokenArray(builder, userTokenArray)
def ArrayOfUserTokenTypeStartUserTokenArrayVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartUserTokenArrayVector(builder, numElems):
    return ArrayOfUserTokenTypeStartUserTokenArrayVector(builder, numElems)
def ArrayOfUserTokenTypeEnd(builder): return builder.EndObject()
def End(builder):
    return ArrayOfUserTokenTypeEnd(builder)
import comm.opcua.server.UserTokenType
try:
    from typing import List
except:
    pass

class ArrayOfUserTokenTypeT(object):

    # ArrayOfUserTokenTypeT
    def __init__(self):
        self.userTokenArray = None  # type: List[comm.opcua.server.UserTokenType.UserTokenTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        arrayOfUserTokenType = ArrayOfUserTokenType()
        arrayOfUserTokenType.Init(buf, pos)
        return cls.InitFromObj(arrayOfUserTokenType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, arrayOfUserTokenType):
        x = ArrayOfUserTokenTypeT()
        x._UnPack(arrayOfUserTokenType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.userTokenArray == other.userTokenArray

    # ArrayOfUserTokenTypeT
    def _UnPack(self, arrayOfUserTokenType):
        if arrayOfUserTokenType is None:
            return
        if not arrayOfUserTokenType.UserTokenArrayIsNone():
            self.userTokenArray = []
            for i in range(arrayOfUserTokenType.UserTokenArrayLength()):
                if arrayOfUserTokenType.UserTokenArray(i) is None:
                    self.userTokenArray.append(None)
                else:
                    userTokenType_ = comm.opcua.server.UserTokenType.UserTokenTypeT.InitFromObj(arrayOfUserTokenType.UserTokenArray(i))
                    self.userTokenArray.append(userTokenType_)

    # ArrayOfUserTokenTypeT
    def Pack(self, builder):
        if self.userTokenArray is not None:
            userTokenArraylist = []
            for i in range(len(self.userTokenArray)):
                userTokenArraylist.append(self.userTokenArray[i].Pack(builder))
            ArrayOfUserTokenTypeStartUserTokenArrayVector(builder, len(self.userTokenArray))
            for i in reversed(range(len(self.userTokenArray))):
                builder.PrependUOffsetTRelative(userTokenArraylist[i])
            userTokenArray = builder.EndVector()
        ArrayOfUserTokenTypeStart(builder)
        if self.userTokenArray is not None:
            ArrayOfUserTokenTypeAddUserTokenArray(builder, userTokenArray)
        arrayOfUserTokenType = ArrayOfUserTokenTypeEnd(builder)
        return arrayOfUserTokenType
