# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Point(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Point()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPoint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Point
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Point
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Point
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.robotics.fbtypes.Position import Position
            obj = Position()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Point
    def ReferenceSystem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Point
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Point
    def UiData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PointStart(builder): builder.StartObject(5)
def Start(builder):
    return PointStart(builder)
def PointAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return PointAddName(builder, name)
def PointAddPosition(builder, position): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def AddPosition(builder, position):
    return PointAddPosition(builder, position)
def PointAddReferenceSystem(builder, referenceSystem): builder.PrependUint8Slot(2, referenceSystem, 0)
def AddReferenceSystem(builder, referenceSystem):
    return PointAddReferenceSystem(builder, referenceSystem)
def PointAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return PointAddDescription(builder, description)
def PointAddUiData(builder, uiData): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(uiData), 0)
def AddUiData(builder, uiData):
    return PointAddUiData(builder, uiData)
def PointEnd(builder): return builder.EndObject()
def End(builder):
    return PointEnd(builder)
import motion.robotics.fbtypes.Position
try:
    from typing import Optional
except:
    pass

class PointT(object):

    # PointT
    def __init__(self):
        self.name = None  # type: str
        self.position = None  # type: Optional[motion.robotics.fbtypes.Position.PositionT]
        self.referenceSystem = 0  # type: int
        self.description = None  # type: str
        self.uiData = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        point = Point()
        point.Init(buf, pos)
        return cls.InitFromObj(point)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, point):
        x = PointT()
        x._UnPack(point)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.position == other.position and \
            self.referenceSystem == other.referenceSystem and \
            self.description == other.description and \
            self.uiData == other.uiData

    # PointT
    def _UnPack(self, point):
        if point is None:
            return
        self.name = point.Name()
        if point.Position() is not None:
            self.position = motion.robotics.fbtypes.Position.PositionT.InitFromObj(point.Position())
        self.referenceSystem = point.ReferenceSystem()
        self.description = point.Description()
        self.uiData = point.UiData()

    # PointT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.position is not None:
            position = self.position.Pack(builder)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.uiData is not None:
            uiData = builder.CreateString(self.uiData)
        PointStart(builder)
        if self.name is not None:
            PointAddName(builder, name)
        if self.position is not None:
            PointAddPosition(builder, position)
        PointAddReferenceSystem(builder, self.referenceSystem)
        if self.description is not None:
            PointAddDescription(builder, description)
        if self.uiData is not None:
            PointAddUiData(builder, uiData)
        point = PointEnd(builder)
        return point
