# automatically generated by the FlatBuffers compiler, do not modify

# namespace: parameter

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReadOnlyDataDetails(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReadOnlyDataDetails()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReadOnlyDataDetails(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ReadOnlyDataDetails
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReadOnlyDataDetails
    def Attribute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReadOnlyDataDetails
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ReadOnlyDataDetails
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ReadOnlyDataDetails
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReadOnlyDataDetails
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ReadOnlyDataDetailsStart(builder): builder.StartObject(2)
def Start(builder):
    return ReadOnlyDataDetailsStart(builder)
def ReadOnlyDataDetailsAddAttribute(builder, attribute): builder.PrependUint32Slot(0, attribute, 0)
def AddAttribute(builder, attribute):
    return ReadOnlyDataDetailsAddAttribute(builder, attribute)
def ReadOnlyDataDetailsAddData(builder, data): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return ReadOnlyDataDetailsAddData(builder, data)
def ReadOnlyDataDetailsStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDataVector(builder, numElems):
    return ReadOnlyDataDetailsStartDataVector(builder, numElems)
def ReadOnlyDataDetailsEnd(builder): return builder.EndObject()
def End(builder):
    return ReadOnlyDataDetailsEnd(builder)
try:
    from typing import List
except:
    pass

class ReadOnlyDataDetailsT(object):

    # ReadOnlyDataDetailsT
    def __init__(self):
        self.attribute = 0  # type: int
        self.data = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        readOnlyDataDetails = ReadOnlyDataDetails()
        readOnlyDataDetails.Init(buf, pos)
        return cls.InitFromObj(readOnlyDataDetails)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, readOnlyDataDetails):
        x = ReadOnlyDataDetailsT()
        x._UnPack(readOnlyDataDetails)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.attribute == other.attribute and \
            self.data == other.data

    # ReadOnlyDataDetailsT
    def _UnPack(self, readOnlyDataDetails):
        if readOnlyDataDetails is None:
            return
        self.attribute = readOnlyDataDetails.Attribute()
        if not readOnlyDataDetails.DataIsNone():
            if np is None:
                self.data = []
                for i in range(readOnlyDataDetails.DataLength()):
                    self.data.append(readOnlyDataDetails.Data(i))
            else:
                self.data = readOnlyDataDetails.DataAsNumpy()

    # ReadOnlyDataDetailsT
    def Pack(self, builder):
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                ReadOnlyDataDetailsStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector()
        ReadOnlyDataDetailsStart(builder)
        ReadOnlyDataDetailsAddAttribute(builder, self.attribute)
        if self.data is not None:
            ReadOnlyDataDetailsAddData(builder, data)
        readOnlyDataDetails = ReadOnlyDataDetailsEnd(builder)
        return readOnlyDataDetails
