# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Response for a single capability
class Capability(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Capability()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCapability(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Capability
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # how many items are allowed by the system or the ressource? (when true/false then 1 represents true and 0 represents false)
    # Capability
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # in case of count==0: get here the main diagnosis code, why the capability is missing
    # Capability
    def MainDiag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # in case of count==0: get here the detail diagnosis code, why the capability is missing
    # Capability
    def DetailDiag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # in case of count==0: get here additional information text, why the capability is missing
    # Capability
    def AddInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # in case of count==0: get here the URI (for a parameter), why the capability is missing
    # Capability
    def Uri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # array of underlying errors (or empty)
    # Capability
    def MoreInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.Capability import Capability
            obj = Capability()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Capability
    def MoreInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Capability
    def MoreInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def CapabilityStart(builder): builder.StartObject(6)
def Start(builder):
    return CapabilityStart(builder)
def CapabilityAddCount(builder, count): builder.PrependUint32Slot(0, count, 0)
def AddCount(builder, count):
    return CapabilityAddCount(builder, count)
def CapabilityAddMainDiag(builder, mainDiag): builder.PrependUint32Slot(1, mainDiag, 0)
def AddMainDiag(builder, mainDiag):
    return CapabilityAddMainDiag(builder, mainDiag)
def CapabilityAddDetailDiag(builder, detailDiag): builder.PrependUint32Slot(2, detailDiag, 0)
def AddDetailDiag(builder, detailDiag):
    return CapabilityAddDetailDiag(builder, detailDiag)
def CapabilityAddAddInfo(builder, addInfo): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(addInfo), 0)
def AddAddInfo(builder, addInfo):
    return CapabilityAddAddInfo(builder, addInfo)
def CapabilityAddUri(builder, uri): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(uri), 0)
def AddUri(builder, uri):
    return CapabilityAddUri(builder, uri)
def CapabilityAddMoreInfo(builder, moreInfo): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(moreInfo), 0)
def AddMoreInfo(builder, moreInfo):
    return CapabilityAddMoreInfo(builder, moreInfo)
def CapabilityStartMoreInfoVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMoreInfoVector(builder, numElems):
    return CapabilityStartMoreInfoVector(builder, numElems)
def CapabilityEnd(builder): return builder.EndObject()
def End(builder):
    return CapabilityEnd(builder)
try:
    from typing import List
except:
    pass

class CapabilityT(object):

    # CapabilityT
    def __init__(self):
        self.count = 0  # type: int
        self.mainDiag = 0  # type: int
        self.detailDiag = 0  # type: int
        self.addInfo = None  # type: str
        self.uri = None  # type: str
        self.moreInfo = None  # type: List[motion.core.fbtypes.Capability.CapabilityT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        capability = Capability()
        capability.Init(buf, pos)
        return cls.InitFromObj(capability)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, capability):
        x = CapabilityT()
        x._UnPack(capability)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.count == other.count and \
            self.mainDiag == other.mainDiag and \
            self.detailDiag == other.detailDiag and \
            self.addInfo == other.addInfo and \
            self.uri == other.uri and \
            self.moreInfo == other.moreInfo

    # CapabilityT
    def _UnPack(self, capability):
        if capability is None:
            return
        self.count = capability.Count()
        self.mainDiag = capability.MainDiag()
        self.detailDiag = capability.DetailDiag()
        self.addInfo = capability.AddInfo()
        self.uri = capability.Uri()
        if not capability.MoreInfoIsNone():
            self.moreInfo = []
            for i in range(capability.MoreInfoLength()):
                if capability.MoreInfo(i) is None:
                    self.moreInfo.append(None)
                else:
                    capability_ = motion.core.fbtypes.Capability.CapabilityT.InitFromObj(capability.MoreInfo(i))
                    self.moreInfo.append(capability_)

    # CapabilityT
    def Pack(self, builder):
        if self.addInfo is not None:
            addInfo = builder.CreateString(self.addInfo)
        if self.uri is not None:
            uri = builder.CreateString(self.uri)
        if self.moreInfo is not None:
            moreInfolist = []
            for i in range(len(self.moreInfo)):
                moreInfolist.append(self.moreInfo[i].Pack(builder))
            CapabilityStartMoreInfoVector(builder, len(self.moreInfo))
            for i in reversed(range(len(self.moreInfo))):
                builder.PrependUOffsetTRelative(moreInfolist[i])
            moreInfo = builder.EndVector()
        CapabilityStart(builder)
        CapabilityAddCount(builder, self.count)
        CapabilityAddMainDiag(builder, self.mainDiag)
        CapabilityAddDetailDiag(builder, self.detailDiag)
        if self.addInfo is not None:
            CapabilityAddAddInfo(builder, addInfo)
        if self.uri is not None:
            CapabilityAddUri(builder, uri)
        if self.moreInfo is not None:
            CapabilityAddMoreInfo(builder, moreInfo)
        capability = CapabilityEnd(builder)
        return capability
