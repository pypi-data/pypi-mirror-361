[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyqt-preview"
version = "0.2.0"
description = "Live preview tool for PyQt GUI development"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "PyQt Preview Contributors"}
]
keywords = ["pyqt", "gui", "preview", "live-reload", "development"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "watchdog>=4.0.0",
    "typer>=0.12.0",
    "rich>=13.8.0",
    "tomli>=2.0.0; python_version<'3.11'",
]

[project.optional-dependencies]
# GUI Framework options (install one of these)
pyqt6 = [
    "PyQt6>=6.7.0",
]
pyqt5 = [
    "PyQt5>=5.15.11",
]
pyside6 = [
    "PySide6>=6.8.0",
]
pyside2 = [
    "PySide2>=5.15.2",
]

# Development dependencies
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "bandit[toml]>=1.7.10",
    "pre-commit>=4.0.0",
    "hatch>=1.9.0",
]

# Testing only
test = [
    "pytest>=8.3.0",
    "pytest-cov>=5.0.0",
]

# Building and publishing
build = [
    "hatch>=1.9.0",
    "twine>=5.0.0",
]

[project.urls]
Homepage = "https://github.com/Reynear/pyqt-preview"
Repository = "https://github.com/Reynear/pyqt-preview"
Documentation = "https://github.com/Reynear/pyqt-preview#readme"
"Bug Tracker" = "https://github.com/Reynear/pyqt-preview/issues"

[project.scripts]
pyqt-preview = "pyqt_preview.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/pyqt_preview"]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "tests/",
    "examples/",
    "README.md",
    "LICENSE",
]

[tool.ruff]
line-length = 132
target-version = "py39"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "A",   # flake8-builtins
    "C90", # mccabe
    "I",   # isort
    "PL",  # pylint
    "PIE", # flake8-pie
    "T20", # flake8-print
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "PERF", # Perflint
    "RUF", # Ruff-specific rules
]
ignore = [
    "S101",   # assert used
    "S603",   # subprocess call without shell=True
    "S607",   # subprocess with relative paths
    "PLR0913", # too many arguments
    "PLR2004", # magic value used in comparison
    "C901",   # too complex
    "PLR0915", # too many statements
    "T201",   # print found
    "ERA001", # commented out code
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "PLR2004", "ARG", "PTH"]
"examples/**/*" = ["T201", "S101"]

[tool.ruff.lint.isort]
known-first-party = ["pyqt_preview"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
strict = true
show_error_codes = true
enable_error_code = ["redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = ["watchdog.*", "PyQt5.*", "PyQt6.*", "PySide2.*", "PySide6.*"]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=pyqt_preview",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["pyqt_preview"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
