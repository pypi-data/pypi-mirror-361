# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# array of joints of a single kinematic chain
class PoseChain(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PoseChain()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPoseChain(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PoseChain
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PoseChain
    def JointPosesChain(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.PoseExtern import PoseExtern
            obj = PoseExtern()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PoseChain
    def JointPosesChainLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PoseChain
    def JointPosesChainIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def PoseChainStart(builder): builder.StartObject(1)
def Start(builder):
    return PoseChainStart(builder)
def PoseChainAddJointPosesChain(builder, jointPosesChain): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(jointPosesChain), 0)
def AddJointPosesChain(builder, jointPosesChain):
    return PoseChainAddJointPosesChain(builder, jointPosesChain)
def PoseChainStartJointPosesChainVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartJointPosesChainVector(builder, numElems):
    return PoseChainStartJointPosesChainVector(builder, numElems)
def PoseChainEnd(builder): return builder.EndObject()
def End(builder):
    return PoseChainEnd(builder)
import motion.core.fbtypes.PoseExtern
try:
    from typing import List
except:
    pass

class PoseChainT(object):

    # PoseChainT
    def __init__(self):
        self.jointPosesChain = None  # type: List[motion.core.fbtypes.PoseExtern.PoseExternT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        poseChain = PoseChain()
        poseChain.Init(buf, pos)
        return cls.InitFromObj(poseChain)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, poseChain):
        x = PoseChainT()
        x._UnPack(poseChain)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.jointPosesChain == other.jointPosesChain

    # PoseChainT
    def _UnPack(self, poseChain):
        if poseChain is None:
            return
        if not poseChain.JointPosesChainIsNone():
            self.jointPosesChain = []
            for i in range(poseChain.JointPosesChainLength()):
                if poseChain.JointPosesChain(i) is None:
                    self.jointPosesChain.append(None)
                else:
                    poseExtern_ = motion.core.fbtypes.PoseExtern.PoseExternT.InitFromObj(poseChain.JointPosesChain(i))
                    self.jointPosesChain.append(poseExtern_)

    # PoseChainT
    def Pack(self, builder):
        if self.jointPosesChain is not None:
            jointPosesChainlist = []
            for i in range(len(self.jointPosesChain)):
                jointPosesChainlist.append(self.jointPosesChain[i].Pack(builder))
            PoseChainStartJointPosesChainVector(builder, len(self.jointPosesChain))
            for i in reversed(range(len(self.jointPosesChain))):
                builder.PrependUOffsetTRelative(jointPosesChainlist[i])
            jointPosesChain = builder.EndVector()
        PoseChainStart(builder)
        if self.jointPosesChain is not None:
            PoseChainAddJointPosesChain(builder, jointPosesChain)
        poseChain = PoseChainEnd(builder)
        return poseChain
