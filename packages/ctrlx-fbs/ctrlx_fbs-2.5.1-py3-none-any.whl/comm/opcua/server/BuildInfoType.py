# automatically generated by the FlatBuffers compiler, do not modify

# namespace: server

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BuildInfoType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BuildInfoType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBuildInfoType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BuildInfoType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The build date of the OPC UA Server
    # BuildInfoType
    def BuildDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # The build number of the OPC UA Server
    # BuildInfoType
    def BuildNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The manufacturer name of the OPC UA Server
    # BuildInfoType
    def ManufacturerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The product name of the OPC UA Server
    # BuildInfoType
    def ProductName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The product uri of the OPC UA Server
    # BuildInfoType
    def ProductUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The software version of the OPC UA Server
    # BuildInfoType
    def SoftwareVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def BuildInfoTypeStart(builder): builder.StartObject(6)
def Start(builder):
    return BuildInfoTypeStart(builder)
def BuildInfoTypeAddBuildDate(builder, buildDate): builder.PrependUint64Slot(0, buildDate, 0)
def AddBuildDate(builder, buildDate):
    return BuildInfoTypeAddBuildDate(builder, buildDate)
def BuildInfoTypeAddBuildNumber(builder, buildNumber): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(buildNumber), 0)
def AddBuildNumber(builder, buildNumber):
    return BuildInfoTypeAddBuildNumber(builder, buildNumber)
def BuildInfoTypeAddManufacturerName(builder, manufacturerName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerName), 0)
def AddManufacturerName(builder, manufacturerName):
    return BuildInfoTypeAddManufacturerName(builder, manufacturerName)
def BuildInfoTypeAddProductName(builder, productName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(productName), 0)
def AddProductName(builder, productName):
    return BuildInfoTypeAddProductName(builder, productName)
def BuildInfoTypeAddProductUri(builder, productUri): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(productUri), 0)
def AddProductUri(builder, productUri):
    return BuildInfoTypeAddProductUri(builder, productUri)
def BuildInfoTypeAddSoftwareVersion(builder, softwareVersion): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(softwareVersion), 0)
def AddSoftwareVersion(builder, softwareVersion):
    return BuildInfoTypeAddSoftwareVersion(builder, softwareVersion)
def BuildInfoTypeEnd(builder): return builder.EndObject()
def End(builder):
    return BuildInfoTypeEnd(builder)

class BuildInfoTypeT(object):

    # BuildInfoTypeT
    def __init__(self):
        self.buildDate = 0  # type: int
        self.buildNumber = None  # type: str
        self.manufacturerName = None  # type: str
        self.productName = None  # type: str
        self.productUri = None  # type: str
        self.softwareVersion = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        buildInfoType = BuildInfoType()
        buildInfoType.Init(buf, pos)
        return cls.InitFromObj(buildInfoType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, buildInfoType):
        x = BuildInfoTypeT()
        x._UnPack(buildInfoType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.buildDate == other.buildDate and \
            self.buildNumber == other.buildNumber and \
            self.manufacturerName == other.manufacturerName and \
            self.productName == other.productName and \
            self.productUri == other.productUri and \
            self.softwareVersion == other.softwareVersion

    # BuildInfoTypeT
    def _UnPack(self, buildInfoType):
        if buildInfoType is None:
            return
        self.buildDate = buildInfoType.BuildDate()
        self.buildNumber = buildInfoType.BuildNumber()
        self.manufacturerName = buildInfoType.ManufacturerName()
        self.productName = buildInfoType.ProductName()
        self.productUri = buildInfoType.ProductUri()
        self.softwareVersion = buildInfoType.SoftwareVersion()

    # BuildInfoTypeT
    def Pack(self, builder):
        if self.buildNumber is not None:
            buildNumber = builder.CreateString(self.buildNumber)
        if self.manufacturerName is not None:
            manufacturerName = builder.CreateString(self.manufacturerName)
        if self.productName is not None:
            productName = builder.CreateString(self.productName)
        if self.productUri is not None:
            productUri = builder.CreateString(self.productUri)
        if self.softwareVersion is not None:
            softwareVersion = builder.CreateString(self.softwareVersion)
        BuildInfoTypeStart(builder)
        BuildInfoTypeAddBuildDate(builder, self.buildDate)
        if self.buildNumber is not None:
            BuildInfoTypeAddBuildNumber(builder, buildNumber)
        if self.manufacturerName is not None:
            BuildInfoTypeAddManufacturerName(builder, manufacturerName)
        if self.productName is not None:
            BuildInfoTypeAddProductName(builder, productName)
        if self.productUri is not None:
            BuildInfoTypeAddProductUri(builder, productUri)
        if self.softwareVersion is not None:
            BuildInfoTypeAddSoftwareVersion(builder, softwareVersion)
        buildInfoType = BuildInfoTypeEnd(builder)
        return buildInfoType
