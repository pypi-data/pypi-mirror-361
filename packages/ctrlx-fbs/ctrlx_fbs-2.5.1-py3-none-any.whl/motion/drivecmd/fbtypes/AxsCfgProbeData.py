# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of single probe data
class AxsCfgProbeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgProbeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgProbeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgProbeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # probe signal config
    # AxsCfgProbeData
    def Signal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.drivecmd.fbtypes.AxsCfgProbeSignalData import AxsCfgProbeSignalData
            obj = AxsCfgProbeSignalData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # edge config
    # AxsCfgProbeData
    def Edge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.drivecmd.fbtypes.AxsCfgProbeEdgeData import AxsCfgProbeEdgeData
            obj = AxsCfgProbeEdgeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # marker failure config
    # AxsCfgProbeData
    def MkrFail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.drivecmd.fbtypes.AxsCfgProbeMarkerFailureData import AxsCfgProbeMarkerFailureData
            obj = AxsCfgProbeMarkerFailureData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # expect window data
    # AxsCfgProbeData
    def ExpWin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.drivecmd.fbtypes.AxsCfgProbeExpectWindowData import AxsCfgProbeExpectWindowData
            obj = AxsCfgProbeExpectWindowData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dead time compensation data to drive
    # AxsCfgProbeData
    def DeadTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.drivecmd.fbtypes.AxsCfgProbeDeadTimeData import AxsCfgProbeDeadTimeData
            obj = AxsCfgProbeDeadTimeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # interpolation type, linear, polynomial
    # AxsCfgProbeData
    def InterpType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # dead time compensation data extend to control
    # AxsCfgProbeData
    def DeadTimeEx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.drivecmd.fbtypes.AxsCfgProbeDeadTimeExData import AxsCfgProbeDeadTimeExData
            obj = AxsCfgProbeDeadTimeExData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCfgProbeDataStart(builder): builder.StartObject(7)
def Start(builder):
    return AxsCfgProbeDataStart(builder)
def AxsCfgProbeDataAddSignal(builder, signal): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(signal), 0)
def AddSignal(builder, signal):
    return AxsCfgProbeDataAddSignal(builder, signal)
def AxsCfgProbeDataAddEdge(builder, edge): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(edge), 0)
def AddEdge(builder, edge):
    return AxsCfgProbeDataAddEdge(builder, edge)
def AxsCfgProbeDataAddMkrFail(builder, mkrFail): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mkrFail), 0)
def AddMkrFail(builder, mkrFail):
    return AxsCfgProbeDataAddMkrFail(builder, mkrFail)
def AxsCfgProbeDataAddExpWin(builder, expWin): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(expWin), 0)
def AddExpWin(builder, expWin):
    return AxsCfgProbeDataAddExpWin(builder, expWin)
def AxsCfgProbeDataAddDeadTime(builder, deadTime): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(deadTime), 0)
def AddDeadTime(builder, deadTime):
    return AxsCfgProbeDataAddDeadTime(builder, deadTime)
def AxsCfgProbeDataAddInterpType(builder, interpType): builder.PrependInt8Slot(5, interpType, 1)
def AddInterpType(builder, interpType):
    return AxsCfgProbeDataAddInterpType(builder, interpType)
def AxsCfgProbeDataAddDeadTimeEx(builder, deadTimeEx): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(deadTimeEx), 0)
def AddDeadTimeEx(builder, deadTimeEx):
    return AxsCfgProbeDataAddDeadTimeEx(builder, deadTimeEx)
def AxsCfgProbeDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgProbeDataEnd(builder)
import motion.drivecmd.fbtypes.AxsCfgProbeDeadTimeData
import motion.drivecmd.fbtypes.AxsCfgProbeDeadTimeExData
import motion.drivecmd.fbtypes.AxsCfgProbeEdgeData
import motion.drivecmd.fbtypes.AxsCfgProbeExpectWindowData
import motion.drivecmd.fbtypes.AxsCfgProbeMarkerFailureData
import motion.drivecmd.fbtypes.AxsCfgProbeSignalData
try:
    from typing import Optional
except:
    pass

class AxsCfgProbeDataT(object):

    # AxsCfgProbeDataT
    def __init__(self):
        self.signal = None  # type: Optional[motion.drivecmd.fbtypes.AxsCfgProbeSignalData.AxsCfgProbeSignalDataT]
        self.edge = None  # type: Optional[motion.drivecmd.fbtypes.AxsCfgProbeEdgeData.AxsCfgProbeEdgeDataT]
        self.mkrFail = None  # type: Optional[motion.drivecmd.fbtypes.AxsCfgProbeMarkerFailureData.AxsCfgProbeMarkerFailureDataT]
        self.expWin = None  # type: Optional[motion.drivecmd.fbtypes.AxsCfgProbeExpectWindowData.AxsCfgProbeExpectWindowDataT]
        self.deadTime = None  # type: Optional[motion.drivecmd.fbtypes.AxsCfgProbeDeadTimeData.AxsCfgProbeDeadTimeDataT]
        self.interpType = 1  # type: int
        self.deadTimeEx = None  # type: Optional[motion.drivecmd.fbtypes.AxsCfgProbeDeadTimeExData.AxsCfgProbeDeadTimeExDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgProbeData = AxsCfgProbeData()
        axsCfgProbeData.Init(buf, pos)
        return cls.InitFromObj(axsCfgProbeData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgProbeData):
        x = AxsCfgProbeDataT()
        x._UnPack(axsCfgProbeData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.signal == other.signal and \
            self.edge == other.edge and \
            self.mkrFail == other.mkrFail and \
            self.expWin == other.expWin and \
            self.deadTime == other.deadTime and \
            self.interpType == other.interpType and \
            self.deadTimeEx == other.deadTimeEx

    # AxsCfgProbeDataT
    def _UnPack(self, axsCfgProbeData):
        if axsCfgProbeData is None:
            return
        if axsCfgProbeData.Signal() is not None:
            self.signal = motion.drivecmd.fbtypes.AxsCfgProbeSignalData.AxsCfgProbeSignalDataT.InitFromObj(axsCfgProbeData.Signal())
        if axsCfgProbeData.Edge() is not None:
            self.edge = motion.drivecmd.fbtypes.AxsCfgProbeEdgeData.AxsCfgProbeEdgeDataT.InitFromObj(axsCfgProbeData.Edge())
        if axsCfgProbeData.MkrFail() is not None:
            self.mkrFail = motion.drivecmd.fbtypes.AxsCfgProbeMarkerFailureData.AxsCfgProbeMarkerFailureDataT.InitFromObj(axsCfgProbeData.MkrFail())
        if axsCfgProbeData.ExpWin() is not None:
            self.expWin = motion.drivecmd.fbtypes.AxsCfgProbeExpectWindowData.AxsCfgProbeExpectWindowDataT.InitFromObj(axsCfgProbeData.ExpWin())
        if axsCfgProbeData.DeadTime() is not None:
            self.deadTime = motion.drivecmd.fbtypes.AxsCfgProbeDeadTimeData.AxsCfgProbeDeadTimeDataT.InitFromObj(axsCfgProbeData.DeadTime())
        self.interpType = axsCfgProbeData.InterpType()
        if axsCfgProbeData.DeadTimeEx() is not None:
            self.deadTimeEx = motion.drivecmd.fbtypes.AxsCfgProbeDeadTimeExData.AxsCfgProbeDeadTimeExDataT.InitFromObj(axsCfgProbeData.DeadTimeEx())

    # AxsCfgProbeDataT
    def Pack(self, builder):
        if self.signal is not None:
            signal = self.signal.Pack(builder)
        if self.edge is not None:
            edge = self.edge.Pack(builder)
        if self.mkrFail is not None:
            mkrFail = self.mkrFail.Pack(builder)
        if self.expWin is not None:
            expWin = self.expWin.Pack(builder)
        if self.deadTime is not None:
            deadTime = self.deadTime.Pack(builder)
        if self.deadTimeEx is not None:
            deadTimeEx = self.deadTimeEx.Pack(builder)
        AxsCfgProbeDataStart(builder)
        if self.signal is not None:
            AxsCfgProbeDataAddSignal(builder, signal)
        if self.edge is not None:
            AxsCfgProbeDataAddEdge(builder, edge)
        if self.mkrFail is not None:
            AxsCfgProbeDataAddMkrFail(builder, mkrFail)
        if self.expWin is not None:
            AxsCfgProbeDataAddExpWin(builder, expWin)
        if self.deadTime is not None:
            AxsCfgProbeDataAddDeadTime(builder, deadTime)
        AxsCfgProbeDataAddInterpType(builder, self.interpType)
        if self.deadTimeEx is not None:
            AxsCfgProbeDataAddDeadTimeEx(builder, deadTimeEx)
        axsCfgProbeData = AxsCfgProbeDataEnd(builder)
        return axsCfgProbeData
