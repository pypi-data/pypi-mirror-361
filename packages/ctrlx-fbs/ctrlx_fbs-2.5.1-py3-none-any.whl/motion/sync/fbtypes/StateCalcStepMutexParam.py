# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StateCalcStepMutexParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StateCalcStepMutexParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStateCalcStepMutexParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StateCalcStepMutexParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StateCalcStepMutexParam
    def MutexParam(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.MutexGroupPart2 import MutexGroupPart2
            obj = MutexGroupPart2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StateCalcStepMutexParam
    def MutexParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StateCalcStepMutexParam
    def MutexParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def StateCalcStepMutexParamStart(builder): builder.StartObject(1)
def Start(builder):
    return StateCalcStepMutexParamStart(builder)
def StateCalcStepMutexParamAddMutexParam(builder, mutexParam): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mutexParam), 0)
def AddMutexParam(builder, mutexParam):
    return StateCalcStepMutexParamAddMutexParam(builder, mutexParam)
def StateCalcStepMutexParamStartMutexParamVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMutexParamVector(builder, numElems):
    return StateCalcStepMutexParamStartMutexParamVector(builder, numElems)
def StateCalcStepMutexParamEnd(builder): return builder.EndObject()
def End(builder):
    return StateCalcStepMutexParamEnd(builder)
import motion.sync.fbtypes.MutexGroupPart2
try:
    from typing import List
except:
    pass

class StateCalcStepMutexParamT(object):

    # StateCalcStepMutexParamT
    def __init__(self):
        self.mutexParam = None  # type: List[motion.sync.fbtypes.MutexGroupPart2.MutexGroupPart2T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateCalcStepMutexParam = StateCalcStepMutexParam()
        stateCalcStepMutexParam.Init(buf, pos)
        return cls.InitFromObj(stateCalcStepMutexParam)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateCalcStepMutexParam):
        x = StateCalcStepMutexParamT()
        x._UnPack(stateCalcStepMutexParam)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mutexParam == other.mutexParam

    # StateCalcStepMutexParamT
    def _UnPack(self, stateCalcStepMutexParam):
        if stateCalcStepMutexParam is None:
            return
        if not stateCalcStepMutexParam.MutexParamIsNone():
            self.mutexParam = []
            for i in range(stateCalcStepMutexParam.MutexParamLength()):
                if stateCalcStepMutexParam.MutexParam(i) is None:
                    self.mutexParam.append(None)
                else:
                    mutexGroupPart2_ = motion.sync.fbtypes.MutexGroupPart2.MutexGroupPart2T.InitFromObj(stateCalcStepMutexParam.MutexParam(i))
                    self.mutexParam.append(mutexGroupPart2_)

    # StateCalcStepMutexParamT
    def Pack(self, builder):
        if self.mutexParam is not None:
            mutexParamlist = []
            for i in range(len(self.mutexParam)):
                mutexParamlist.append(self.mutexParam[i].Pack(builder))
            StateCalcStepMutexParamStartMutexParamVector(builder, len(self.mutexParam))
            for i in reversed(range(len(self.mutexParam))):
                builder.PrependUOffsetTRelative(mutexParamlist[i])
            mutexParam = builder.EndVector()
        StateCalcStepMutexParamStart(builder)
        if self.mutexParam is not None:
            StateCalcStepMutexParamAddMutexParam(builder, mutexParam)
        stateCalcStepMutexParam = StateCalcStepMutexParamEnd(builder)
        return stateCalcStepMutexParam
