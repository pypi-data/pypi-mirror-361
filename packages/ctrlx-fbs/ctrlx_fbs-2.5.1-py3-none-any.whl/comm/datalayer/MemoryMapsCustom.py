# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MemoryMapsCustom(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MemoryMapsCustom()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMemoryMapsCustom(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MemoryMapsCustom
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MemoryMapsCustom
    def CustomMaps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.MemoryMapCustom import MemoryMapCustom
            obj = MemoryMapCustom()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MemoryMapsCustom
    def CustomMapsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MemoryMapsCustom
    def CustomMapsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def MemoryMapsCustomStart(builder): builder.StartObject(1)
def Start(builder):
    return MemoryMapsCustomStart(builder)
def MemoryMapsCustomAddCustomMaps(builder, customMaps): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(customMaps), 0)
def AddCustomMaps(builder, customMaps):
    return MemoryMapsCustomAddCustomMaps(builder, customMaps)
def MemoryMapsCustomStartCustomMapsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCustomMapsVector(builder, numElems):
    return MemoryMapsCustomStartCustomMapsVector(builder, numElems)
def MemoryMapsCustomEnd(builder): return builder.EndObject()
def End(builder):
    return MemoryMapsCustomEnd(builder)
import comm.datalayer.MemoryMapCustom
try:
    from typing import List
except:
    pass

class MemoryMapsCustomT(object):

    # MemoryMapsCustomT
    def __init__(self):
        self.customMaps = None  # type: List[comm.datalayer.MemoryMapCustom.MemoryMapCustomT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        memoryMapsCustom = MemoryMapsCustom()
        memoryMapsCustom.Init(buf, pos)
        return cls.InitFromObj(memoryMapsCustom)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, memoryMapsCustom):
        x = MemoryMapsCustomT()
        x._UnPack(memoryMapsCustom)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.customMaps == other.customMaps

    # MemoryMapsCustomT
    def _UnPack(self, memoryMapsCustom):
        if memoryMapsCustom is None:
            return
        if not memoryMapsCustom.CustomMapsIsNone():
            self.customMaps = []
            for i in range(memoryMapsCustom.CustomMapsLength()):
                if memoryMapsCustom.CustomMaps(i) is None:
                    self.customMaps.append(None)
                else:
                    memoryMapCustom_ = comm.datalayer.MemoryMapCustom.MemoryMapCustomT.InitFromObj(memoryMapsCustom.CustomMaps(i))
                    self.customMaps.append(memoryMapCustom_)

    # MemoryMapsCustomT
    def Pack(self, builder):
        if self.customMaps is not None:
            customMapslist = []
            for i in range(len(self.customMaps)):
                customMapslist.append(self.customMaps[i].Pack(builder))
            MemoryMapsCustomStartCustomMapsVector(builder, len(self.customMaps))
            for i in reversed(range(len(self.customMaps))):
                builder.PrependUOffsetTRelative(customMapslist[i])
            customMaps = builder.EndVector()
        MemoryMapsCustomStart(builder)
        if self.customMaps is not None:
            MemoryMapsCustomAddCustomMaps(builder, customMaps)
        memoryMapsCustom = MemoryMapsCustomEnd(builder)
        return memoryMapsCustom
