# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Configuration of the synchronized motion behavior of a single axis
class AxsCfgSyncMotion(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgSyncMotion()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgSyncMotion(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgSyncMotion
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Reference to configuration of the error reaction behavior of the axis
    # AxsCfgSyncMotion
    def ErrorReaction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsCfgErrReaction import AxsCfgErrReaction
            obj = AxsCfgErrReaction()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Reference to configuration of the dynamic synchronisation behavior of the axis
    # AxsCfgSyncMotion
    def DynSynchronisation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsCfgDynSynchronisation import AxsCfgDynSynchronisation
            obj = AxsCfgDynSynchronisation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration for calculation pipelines for a single axis
    # AxsCfgSyncMotion
    def CalculationPipelines(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.AxsCfgCalcPipeline import AxsCfgCalcPipeline
            obj = AxsCfgCalcPipeline()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AxsCfgSyncMotion
    def CalculationPipelinesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsCfgSyncMotion
    def CalculationPipelinesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def AxsCfgSyncMotionStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsCfgSyncMotionStart(builder)
def AxsCfgSyncMotionAddErrorReaction(builder, errorReaction): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(errorReaction), 0)
def AddErrorReaction(builder, errorReaction):
    return AxsCfgSyncMotionAddErrorReaction(builder, errorReaction)
def AxsCfgSyncMotionAddDynSynchronisation(builder, dynSynchronisation): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dynSynchronisation), 0)
def AddDynSynchronisation(builder, dynSynchronisation):
    return AxsCfgSyncMotionAddDynSynchronisation(builder, dynSynchronisation)
def AxsCfgSyncMotionAddCalculationPipelines(builder, calculationPipelines): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(calculationPipelines), 0)
def AddCalculationPipelines(builder, calculationPipelines):
    return AxsCfgSyncMotionAddCalculationPipelines(builder, calculationPipelines)
def AxsCfgSyncMotionStartCalculationPipelinesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCalculationPipelinesVector(builder, numElems):
    return AxsCfgSyncMotionStartCalculationPipelinesVector(builder, numElems)
def AxsCfgSyncMotionEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgSyncMotionEnd(builder)
import motion.sync.fbtypes.AxsCfgCalcPipeline
import motion.sync.fbtypes.AxsCfgDynSynchronisation
import motion.sync.fbtypes.AxsCfgErrReaction
try:
    from typing import List, Optional
except:
    pass

class AxsCfgSyncMotionT(object):

    # AxsCfgSyncMotionT
    def __init__(self):
        self.errorReaction = None  # type: Optional[motion.sync.fbtypes.AxsCfgErrReaction.AxsCfgErrReactionT]
        self.dynSynchronisation = None  # type: Optional[motion.sync.fbtypes.AxsCfgDynSynchronisation.AxsCfgDynSynchronisationT]
        self.calculationPipelines = None  # type: List[motion.sync.fbtypes.AxsCfgCalcPipeline.AxsCfgCalcPipelineT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgSyncMotion = AxsCfgSyncMotion()
        axsCfgSyncMotion.Init(buf, pos)
        return cls.InitFromObj(axsCfgSyncMotion)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgSyncMotion):
        x = AxsCfgSyncMotionT()
        x._UnPack(axsCfgSyncMotion)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.errorReaction == other.errorReaction and \
            self.dynSynchronisation == other.dynSynchronisation and \
            self.calculationPipelines == other.calculationPipelines

    # AxsCfgSyncMotionT
    def _UnPack(self, axsCfgSyncMotion):
        if axsCfgSyncMotion is None:
            return
        if axsCfgSyncMotion.ErrorReaction() is not None:
            self.errorReaction = motion.sync.fbtypes.AxsCfgErrReaction.AxsCfgErrReactionT.InitFromObj(axsCfgSyncMotion.ErrorReaction())
        if axsCfgSyncMotion.DynSynchronisation() is not None:
            self.dynSynchronisation = motion.sync.fbtypes.AxsCfgDynSynchronisation.AxsCfgDynSynchronisationT.InitFromObj(axsCfgSyncMotion.DynSynchronisation())
        if not axsCfgSyncMotion.CalculationPipelinesIsNone():
            self.calculationPipelines = []
            for i in range(axsCfgSyncMotion.CalculationPipelinesLength()):
                if axsCfgSyncMotion.CalculationPipelines(i) is None:
                    self.calculationPipelines.append(None)
                else:
                    axsCfgCalcPipeline_ = motion.sync.fbtypes.AxsCfgCalcPipeline.AxsCfgCalcPipelineT.InitFromObj(axsCfgSyncMotion.CalculationPipelines(i))
                    self.calculationPipelines.append(axsCfgCalcPipeline_)

    # AxsCfgSyncMotionT
    def Pack(self, builder):
        if self.errorReaction is not None:
            errorReaction = self.errorReaction.Pack(builder)
        if self.dynSynchronisation is not None:
            dynSynchronisation = self.dynSynchronisation.Pack(builder)
        if self.calculationPipelines is not None:
            calculationPipelineslist = []
            for i in range(len(self.calculationPipelines)):
                calculationPipelineslist.append(self.calculationPipelines[i].Pack(builder))
            AxsCfgSyncMotionStartCalculationPipelinesVector(builder, len(self.calculationPipelines))
            for i in reversed(range(len(self.calculationPipelines))):
                builder.PrependUOffsetTRelative(calculationPipelineslist[i])
            calculationPipelines = builder.EndVector()
        AxsCfgSyncMotionStart(builder)
        if self.errorReaction is not None:
            AxsCfgSyncMotionAddErrorReaction(builder, errorReaction)
        if self.dynSynchronisation is not None:
            AxsCfgSyncMotionAddDynSynchronisation(builder, dynSynchronisation)
        if self.calculationPipelines is not None:
            AxsCfgSyncMotionAddCalculationPipelines(builder, calculationPipelines)
        axsCfgSyncMotion = AxsCfgSyncMotionEnd(builder)
        return axsCfgSyncMotion
