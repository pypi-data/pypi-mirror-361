#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è REGHelp Python Client.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
- –ü–æ–ª—É—á–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–æ–≤
- –†–∞–±–æ—Ç–∞ —Å email —Å–µ—Ä–≤–∏—Å–æ–º
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
"""

import asyncio
import logging
import os
from typing import Optional

from reghelp_client import (
    RegHelpClient,
    AppDevice,
    EmailType,
    ProxyConfig,
    ProxyType,
    RegHelpError,
    RateLimitError,
    UnauthorizedError,
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def check_balance(client: RegHelpClient) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        balance = await client.get_balance()
        logger.info(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance.balance} {balance.currency}")
        
        if balance.balance < 10:
            logger.warning("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")


async def get_telegram_push_token(client: RegHelpClient) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å push —Ç–æ–∫–µ–Ω –¥–ª—è Telegram iOS."""
    try:
        logger.info("üì± –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è push —Ç–æ–∫–µ–Ω–∞ Telegram iOS...")
        
        # –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
        task = await client.get_push_token(
            app_name="tgiOS",
            app_device=AppDevice.IOS,
            ref="demo_example"
        )
        
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task.id} (—Ü–µ–Ω–∞: {task.price} —Ä—É–±.)")
        
        # –ñ–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º polling
        result = await client.wait_for_result(
            task_id=task.id,
            service="push",
            timeout=60.0,  # 1 –º–∏–Ω—É—Ç–∞
            poll_interval=3.0  # –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        )
        
        if result.token:
            logger.info(f"üéâ Push —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {result.token[:50]}...")
            return result.token
        else:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ push —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


async def get_temporary_email(client: RegHelpClient) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π email –∞–¥—Ä–µ—Å."""
    try:
        logger.info("üìß –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email –∞–¥—Ä–µ—Å–∞...")
        
        # –ü–æ–ª—É—á–∏—Ç—å email
        email_task = await client.get_email(
            app_name="tg",
            app_device=AppDevice.IOS,
            phone="+15551234567",  # –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
            email_type=EmailType.ICLOUD
        )
        
        logger.info(f"‚úÖ Email –ø–æ–ª—É—á–µ–Ω: {email_task.email}")
        
        # –ú–æ–∂–Ω–æ –∂–¥–∞—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (30 —Å–µ–∫)...")
        
        try:
            email_result = await client.wait_for_result(
                task_id=email_task.id,
                service="email",
                timeout=30.0
            )
            
            if email_result.code:
                logger.info(f"üì¨ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {email_result.code}")
                return email_result.code
                
        except asyncio.TimeoutError:
            logger.info("‚è∞ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
        
        return email_task.email
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ email: {e}")
        return None


async def demonstrate_turnstile(client: RegHelpClient) -> Optional[str]:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è Turnstile –∑–∞–¥–∞—á–∏."""
    try:
        logger.info("üîê –†–µ—à–µ–Ω–∏–µ Cloudflare Turnstile...")
        
        task = await client.get_turnstile_token(
            url="https://demo.example.com",
            site_key="0x4AAAA-demo-site-key",
            action="demo",
        )
        
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ Turnstile —Å–æ–∑–¥–∞–Ω–∞: {task.id}")
        
        # –ñ–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = await client.wait_for_result(
            task_id=task.id,
            service="turnstile",
            timeout=120.0
        )
        
        if result.token:
            logger.info(f"üéâ Turnstile —Ç–æ–∫–µ–Ω: {result.token[:50]}...")
            return result.token
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Turnstile: {e}")
        return None


async def demonstrate_error_handling(client: RegHelpClient) -> None:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
    logger.info("üö® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
        await client.get_push_status("invalid_task_id")
        
    except UnauthorizedError:
        logger.error("üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
    except RateLimitError:
        logger.error("üö¶ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (50/—Å–µ–∫)")
    except RegHelpError as e:
        logger.error(f"üî¥ API –æ—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


async def parallel_tasks_example(client: RegHelpClient) -> None:
    """–ü—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á."""
    logger.info("üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
    
    try:
        # –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = await asyncio.gather(*[
            client.get_push_token("tgiOS", AppDevice.IOS, ref=f"parallel_{i}")
            for i in range(3)
        ], return_exceptions=True)
        
        # –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–¥–∞—á–∏
        successful_tasks = [task for task in tasks if not isinstance(task, Exception)]
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(successful_tasks)} –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
        
        # –ú–æ–∂–Ω–æ –∂–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if successful_tasks:
            results = await asyncio.gather(*[
                client.get_push_status(task.id) 
                for task in successful_tasks
                if hasattr(task, 'id')
            ], return_exceptions=True)
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Å—Ç–∞—Ç—É—Å–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
    # –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv("REGHELP_API_KEY")
    if not api_key:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π REGHELP_API_KEY")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: export REGHELP_API_KEY=your_api_key")
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ REGHelp Python Client")
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ context manager –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    async with RegHelpClient(
        api_key=api_key,
        timeout=30.0,
        max_retries=3
    ) as client:
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        if await client.health_check():
            logger.info("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        await check_balance(client)
        
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç
        balance = await client.get_balance()
        if balance.balance > 1:
            await get_telegram_push_token(client)
            await get_temporary_email(client)
            await demonstrate_turnstile(client)
            await parallel_tasks_example(client)
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        await demonstrate_error_handling(client)
    
    logger.info("üèÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    asyncio.run(main()) 