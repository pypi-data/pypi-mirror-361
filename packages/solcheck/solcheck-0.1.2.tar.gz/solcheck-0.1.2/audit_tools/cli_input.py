import argparse
import os
import audit_tools.parse_ast as ast_parser
import audit_tools.invariants_check as invariants
import audit_tools.parse_slither as slither_analysis
from audit_tools.auto_fix_semantics import apply_fixes_to_contract
from audit_tools.auto_fix import generate_fixed_contract
from pathlib import Path


def run_static_analysis(sol_path: str):
    print(f"🔍 Analyzing: {sol_path}")

    # Extract AST
    ast = ast_parser.extract_ast(sol_path)
    funcs = ast_parser.extract_functions(ast)
    vars_ = ast_parser.extract_state_variables(ast)

    print("\n📦 Functions:")
    for f in funcs:
        print(f" - {f['name']} ({f['visibility']}, {f['stateMutability']})")

    print("\n🗃️  State Variables:")
    for v in vars_:
        print(f" - {v['type']} {v['name']} ({v['visibility']})")

    print("\n✅ Invariant Checks:")
    inv_results = {
        "State Transition Safety": invariants.model_state_transitions(),
        "Balance Safety": invariants.model_balance_invariants()
    }

    print("\n🔎 Running Slither Analysis...")
    slither_issues = slither_analysis.run_slither_analysis(sol_path)
    for issue in slither_issues:
        print(f" - {issue['title']} (line {issue['line']}) - {issue['suggestion']}")

    return funcs, vars_, inv_results, slither_issues

def write_markdown_report(sol_file: str, functions: list, variables: list, invariant_results: dict, slither_issues: list, report_path: str = None):
    contract_name = Path(sol_file).stem
    if not report_path:
        output_dir = Path.cwd() / "reports"
        output_dir.mkdir(parents=True, exist_ok=True)
        report_path = output_dir / f"{contract_name}_report.md"
    else:
        report_path = Path(report_path) / f"{Path(sol_file).stem}_report.md"
        report_path.parent.mkdir(parents=True, exist_ok=True)

    with open(report_path, "w") as f:
        f.write(f"# 🔍 Audit Report for `{contract_name}.sol`\n\n")
        f.write("## 📦 Detected Functions\n")
        for fn in functions:
            f.write(f"- `{fn['name']}` — `{fn['visibility']}` — `{fn['stateMutability']}`\n")

        f.write("\n## 🗃️ State Variables\n")
        for var in variables:
            f.write(f"- `{var['type']} {var['name']}` — `{var['visibility']}`\n")

        f.write("\n## 🔐 Invariant Checks\n")
        for title, passed in invariant_results.items():
            icon = "✅" if passed else "❌"
            f.write(f"- **{title}**: {icon}\n")

        f.write("\n## 🛡️ Slither Analysis\n")
        if not slither_issues:
            f.write("- ✅ No major issues detected by Slither\n")
        for issue in slither_issues:
            f.write(f"- **{issue['title']}** (line {issue['line']})\n")
            f.write(f"  - 🔎 Suggestion: {issue['suggestion']}\n")
            f.write(f"  - 🧭 Suggested Fix: Change `{issue['what']}` ➝ `{issue['fix']}`\n")

        f.write("\n## 🔒 Immutable Candidates\n")
        immutables = [i for i in slither_issues if i["title"] == "immutable-states"]
        if not immutables:
            f.write("- ✅ No variables can be made immutable\n")
        for imm in immutables:
            f.write(f"- `{imm['what']}` (line {imm['line']}) — should be immutable\n")

        f.write("\n---\n✔️ Generated by HelioSS auditing engine.\n")

    print(f"\n📄 Markdown report written to: `{report_path}`")

def main():
    parser = argparse.ArgumentParser(description="Smart Contract Auditing CLI")
    parser.add_argument("sol_file", help="Path to the Solidity file")
    parser.add_argument("report_path", help="Path to the markdown audit report")
    parser.add_argument("--output", "-o", help="Output path for the fixed contract (default: *_fixed.sol)")
    parser.add_argument("--fix", choices=["y", "n"], default="n" , help="Apply fixes to the contract based on the report (default: n)")

    args = parser.parse_args()
    functions, variables, invariant_results, slither_issues = run_static_analysis(args.sol_file)
    write_markdown_report(args.sol_file, functions, variables, invariant_results, slither_issues)
    
    if args.fix.lower() == "y":
        generate_fixed_contract(args.sol_file, args.report_path, args.output)
    else:
        print("No fixes applied. Use --fix y to apply fixes based on the report.")

if __name__ == "__main__":
    main()
