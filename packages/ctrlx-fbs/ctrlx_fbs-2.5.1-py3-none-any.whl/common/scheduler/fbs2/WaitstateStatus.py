# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs2

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Status of active waitstate before transitioning to the next operating state 'state'.
class WaitstateStatus(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WaitstateStatus()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWaitstateStatus(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WaitstateStatus
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Properties of active waitstate.
    # WaitstateStatus
    def Waitstate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.fbs2.WaitstateComponent import WaitstateComponent
            obj = WaitstateComponent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Remaining time in milliseconds within the waitstate pause before switching to the next operating state 'state'.
    # WaitstateStatus
    def Remaining(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def WaitstateStatusStart(builder): builder.StartObject(2)
def Start(builder):
    return WaitstateStatusStart(builder)
def WaitstateStatusAddWaitstate(builder, waitstate): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(waitstate), 0)
def AddWaitstate(builder, waitstate):
    return WaitstateStatusAddWaitstate(builder, waitstate)
def WaitstateStatusAddRemaining(builder, remaining): builder.PrependUint64Slot(1, remaining, 0)
def AddRemaining(builder, remaining):
    return WaitstateStatusAddRemaining(builder, remaining)
def WaitstateStatusEnd(builder): return builder.EndObject()
def End(builder):
    return WaitstateStatusEnd(builder)
import common.scheduler.fbs2.WaitstateComponent
try:
    from typing import Optional
except:
    pass

class WaitstateStatusT(object):

    # WaitstateStatusT
    def __init__(self):
        self.waitstate = None  # type: Optional[common.scheduler.fbs2.WaitstateComponent.WaitstateComponentT]
        self.remaining = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        waitstateStatus = WaitstateStatus()
        waitstateStatus.Init(buf, pos)
        return cls.InitFromObj(waitstateStatus)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, waitstateStatus):
        x = WaitstateStatusT()
        x._UnPack(waitstateStatus)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.waitstate == other.waitstate and \
            self.remaining == other.remaining

    # WaitstateStatusT
    def _UnPack(self, waitstateStatus):
        if waitstateStatus is None:
            return
        if waitstateStatus.Waitstate() is not None:
            self.waitstate = common.scheduler.fbs2.WaitstateComponent.WaitstateComponentT.InitFromObj(waitstateStatus.Waitstate())
        self.remaining = waitstateStatus.Remaining()

    # WaitstateStatusT
    def Pack(self, builder):
        if self.waitstate is not None:
            waitstate = self.waitstate.Pack(builder)
        WaitstateStatusStart(builder)
        if self.waitstate is not None:
            WaitstateStatusAddWaitstate(builder, waitstate)
        WaitstateStatusAddRemaining(builder, self.remaining)
        waitstateStatus = WaitstateStatusEnd(builder)
        return waitstateStatus
