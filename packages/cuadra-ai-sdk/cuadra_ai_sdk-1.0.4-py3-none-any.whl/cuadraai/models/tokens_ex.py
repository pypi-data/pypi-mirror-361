# -*- coding: utf-8 -*-

"""
cuadraai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from cuadraai.api_helper import APIHelper


class TokensEx(object):

    """Implementation of the 'TokensEx' model.

    Tokens used

    Attributes:
        input_tokens (int): Number of tokens of the request input
        output_tokens (int): Number of tokens of the response output
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "input_tokens": 'inputTokens',
        "output_tokens": 'outputTokens'
    }

    _optionals = [
        'input_tokens',
        'output_tokens',
    ]

    def __init__(self,
                 input_tokens=APIHelper.SKIP,
                 output_tokens=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the TokensEx class"""

        # Initialize members of the class
        if input_tokens is not APIHelper.SKIP:
            self.input_tokens = input_tokens 
        if output_tokens is not APIHelper.SKIP:
            self.output_tokens = output_tokens 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        input_tokens = dictionary.get("inputTokens") if dictionary.get("inputTokens") else APIHelper.SKIP
        output_tokens = dictionary.get("outputTokens") if dictionary.get("outputTokens") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(input_tokens,
                   output_tokens,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'input_tokens={(self.input_tokens if hasattr(self, "input_tokens") else None)!r}, '
                f'output_tokens={(self.output_tokens if hasattr(self, "output_tokens") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'input_tokens={(self.input_tokens if hasattr(self, "input_tokens") else None)!s}, '
                f'output_tokens={(self.output_tokens if hasattr(self, "output_tokens") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
