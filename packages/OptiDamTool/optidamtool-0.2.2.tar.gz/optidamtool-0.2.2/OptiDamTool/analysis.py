import GeoAnalyze
import geopandas
import pandas
import json
import tempfile
import os
from .watemsedem import WatemSedem


class Analysis:

    '''
    Provides methods for analyzing simulation outputs and generating insights.
    '''

    def sediment_delivery_to_stream_txt(
        self,
        input_file: str,
        stream_col: str,
        segsed_file: str,
        cumsed_file: str,
        output_file: str
    ) -> pandas.DataFrame:

        '''
        Integrates sediment delivery data into stream segments using WaTEM/SEDEM outputs, with the extension
        `Output per river segment = 1 <https://watem-sedem.github.io/watem-sedem/model_extensions.html#output-per-river-segment>`_ enabled.

        Parameters
        ----------
        input_file : str
            Path to the input TXT file ``stream_information.txt``, produced by
            :meth:`OptiDamTool.WatemSedem.dem_to_stream`.

        stream_col : str
            Name of the column in the ``stream_information.txt`` file containing
            a unique identifier for each stream segment.

        segsed_file : str
            Path to the input TXT file ``Total sediment segments.txt``,
            generated by a WaTEM/SEDEM simulation. This file contains sediment
            inflow (in kilograms) to each stream segment from its own subbasin area.

        cumsed_file : str
            Path to the input TXT file ``Cumulative sediment segments.txt``,
            generated by a WaTEM/SEDEM simulation. This file contains sediment
            inflow (in kilograms) to each stream segment from all upstream segments.

        output_file : str
            Path to the output TXT file to save the output DataFrame after integrating sediment delivery
            into stream segments.

        Returns
        -------
        DataFrame
            A DataFrame containing stream information with two additional columns. The ``sed_kg`` column
            represents the sediment delivery (in kilograms) to individual stream segments. The ``cumsed_kg`` column
            represents the cumulative sediment delivery (in kilograms), including contributions from all upstream segments.
        '''

        # stream information DataFrame
        stream_df = pandas.read_csv(
            filepath_or_buffer=input_file,
            sep='\t'
        )

        # integrating sediment delivery to stream segments
        sediment_df = pandas.read_csv(
            filepath_or_buffer=segsed_file,
            skiprows=1,
            sep='\t'
        )
        sediment_dict = dict(zip(*sediment_df.values.T))
        stream_df['sed_kg'] = stream_df[stream_col].apply(lambda x: sediment_dict.get(x))

        # integrating cumulative sediment delivery to stream segments
        cumsed_df = pandas.read_csv(
            filepath_or_buffer=cumsed_file,
            skiprows=1,
            sep='\t'
        )
        cumsed_dict = dict(zip(*cumsed_df.values.T))
        stream_df['cumsed_kg'] = stream_df[stream_col].apply(lambda x: cumsed_dict.get(x))

        # saving output Stream DataFrame
        stream_df.to_csv(
            path_or_buf=output_file,
            sep='\t',
            index=False
        )

        return stream_df

    def sediment_delivery_to_stream_shapefile(
        self,
        stream_file: str,
        sediment_file: str,
        output_file: str
    ) -> geopandas.GeoDataFrame:

        '''
        Generates a stream shapefile containing detailed information for each segment, including sediment inflow values.
        The output GeoDataFrame includes all columns from the DataFrame produced by
        :meth:`OptiDamTool.Analysis.sediment_delivery_to_stream_txt`, along with two additional columns
        ``sed_ton`` and ``cumsed_ton``, which represent sediment inflow to stream segments converted from kilograms to tons.

        Parameters
        ----------
        stream_file : str
            Path to the input stream shapefile ``stream_lines.shp``, produced by
            :meth:`OptiDamTool.WatemSedem.dem_to_stream`.

        sediment_file : str
            Path to the input TXT file generated by :meth:`OptiDamTool.Analysis.sediment_delivery_to_stream_txt`.

        output_file : str
            Path to save the output shapefile.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing detailed information on stream segments.
        '''

        # stream GeoDataFrame
        stream_gdf = geopandas.read_file(
            filename=stream_file
        )

        # sediment information DataFrame
        sediment_df = pandas.read_csv(
            filepath_or_buffer=sediment_file,
            sep='\t'
        )

        # merging stream GeoDataFrame with information DataFrame
        common_cols = [col for col in sediment_df.columns if col in stream_gdf.columns]
        stream_gdf = stream_gdf.merge(
            right=sediment_df,
            on=common_cols
        )
        stream_gdf['sed_ton'] = stream_gdf['sed_kg'] / 1000
        stream_gdf['cumsed_ton'] = stream_gdf['cumsed_kg'] / 1000

        # saving stream GeoDataFrame
        WatemSedem()._write_stream_shapefile(
            stream_gdf=stream_gdf,
            stream_file=output_file
        )

        return stream_gdf

    def sediment_summary_dynamics_region(
        self,
        input_file: str,
        json_file: str,
        output_file: str
    ) -> pandas.DataFrame:

        '''
        Summarizes total sediment values for the model region using outputs from a WaTEM/SEDEM simulation
        with the extension `Only Routing = 0 <https://watem-sedem.github.io/watem-sedem/choices.html#onlyrouting>`_
        disabled. The computed totals are used to derive insights on sediment dynamics across the region.

        Parameters
        ----------
        input_file : str
            Path to the input TXT file ``Total sediment.txt``, generated by a WaTEM/SEDEM simulation.

        json_file : str
            Path to the input JSON file ``summary.json``, produced by
            :meth:`OptiDamTool.WatemSedem.dem_to_stream`. This file provides the total model region area in square meters.

        output_file : str
            Path to save the output DataFrame containing sediment dynamics summary.

        Returns
        -------
        pandas.DataFrame
            A DataFrame containing total sediment metrics for the model region.
        '''

        # extract values from TXT file
        with open(input_file, 'r') as input_txt:
            txt_lines = [line.strip().split(':') for line in input_txt][:4]
            value_lines = [
                [j, float(k.split('(')[0].strip())] for j, k in txt_lines
            ]

        # area from summary file
        with open(json_file, 'r') as input_json:
            area_m2 = json.load(input_json)['Watershed area (m^2)']

        # sediment summary DataFrame
        df = pandas.DataFrame(
            data=value_lines,
            columns=['Features', 'Sediment(kg)']
        )
        df['area_m2'] = area_m2
        df['kg/m2'] = df['Sediment(kg)'] / area_m2
        df['Sediment(ton)'] = df['Sediment(kg)'] / 1000
        df['ton/ha'] = df['kg/m2'] * 10

        # save the DataFrame
        df.to_csv(
            path_or_buf=output_file,
            index=False,
            sep='\t'
        )

        return df

    def raster_features_retrieve(
        self,
        input_file: str,
        crs_code: int,
        output_file: str,
        target_driver: str = 'GTiff',
        scale: float = 1,
        offset: float = 0
    ) -> str:

        '''
        Assigns a default ``GTiff`` driver and a Coordinate Reference System (CRS) to the input raster
        generated from a WaTEM/SEDEM simulation using the default
        `Idrisi raster format <https://watem-sedem.github.io/watem-sedem/choices.html#saga-grids>`_,
        which does not include CRS information. The function also applies a linear transformation to
        raster values :math:`x` using the formula :math:`y = ax + b`, where :math:`a` and :math:`b`
        are the ``scale`` and ``offset`` input variables, respectively.

        Parameters
        ----------
        input_file : str
            Path to the input raster file.

        crs_code : int
            EPSG code of the projected CRS to assign (e.g., 32638).

        output_file : str
            Path to save the output raster file.

        target_driver : str, optional
            GDAL-compatible name of the target driver. Default is 'GTiff'.

        scale : float, optional
            Scaling factor to apply to the raster values. Default is 1.

        offset : float, optional
            Offset value to add to the scaled raster values. Default is 0.

        Returns
        -------
        str
            A message confirming that all geoprocessing steps are complete.
        '''

        # class object
        raster = GeoAnalyze.Raster()

        # temporary directory
        with tempfile.TemporaryDirectory() as tmp_dir:
            # raster driver conversion
            raster.driver_convert(
                input_file=input_file,
                target_driver=target_driver,
                output_file=os.path.join(tmp_dir, 't1.tif')
            )
            # assiging Coordinate Reference system
            raster.crs_assign(
                input_file=os.path.join(tmp_dir, 't1.tif'),
                crs_code=crs_code,
                output_file=os.path.join(tmp_dir, 't2.tif')
            )
            # linear scaling of raster
            raster.value_scale_and_offset(
                input_file=os.path.join(tmp_dir, 't2.tif'),
                output_file=output_file,
                scale=scale,
                offset=offset
            )

        output = 'All geoprocessing steps are complete'

        return output
