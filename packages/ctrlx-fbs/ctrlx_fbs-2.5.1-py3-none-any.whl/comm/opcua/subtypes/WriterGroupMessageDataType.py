# automatically generated by the FlatBuffers compiler, do not modify

# namespace: subtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WriterGroupMessageDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WriterGroupMessageDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWriterGroupMessageDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WriterGroupMessageDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WriterGroupMessageDataType
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # WriterGroupMessageDataType
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def WriterGroupMessageDataTypeStart(builder): builder.StartObject(2)
def Start(builder):
    return WriterGroupMessageDataTypeStart(builder)
def WriterGroupMessageDataTypeAddValueType(builder, valueType): builder.PrependUint8Slot(0, valueType, 0)
def AddValueType(builder, valueType):
    return WriterGroupMessageDataTypeAddValueType(builder, valueType)
def WriterGroupMessageDataTypeAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return WriterGroupMessageDataTypeAddValue(builder, value)
def WriterGroupMessageDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return WriterGroupMessageDataTypeEnd(builder)
import comm.opcua.structure.JsonWriterGroupMessageDataType
import comm.opcua.structure.UadpWriterGroupMessageDataType
import comm.opcua.subtypesunion.WriterGroupMessageDataType
try:
    from typing import Union
except:
    pass

class WriterGroupMessageDataTypeT(object):

    # WriterGroupMessageDataTypeT
    def __init__(self):
        self.valueType = 0  # type: int
        self.value = None  # type: Union[None, comm.opcua.structure.UadpWriterGroupMessageDataType.UadpWriterGroupMessageDataTypeT, comm.opcua.structure.JsonWriterGroupMessageDataType.JsonWriterGroupMessageDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        writerGroupMessageDataType = WriterGroupMessageDataType()
        writerGroupMessageDataType.Init(buf, pos)
        return cls.InitFromObj(writerGroupMessageDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, writerGroupMessageDataType):
        x = WriterGroupMessageDataTypeT()
        x._UnPack(writerGroupMessageDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.valueType == other.valueType and \
            self.value == other.value

    # WriterGroupMessageDataTypeT
    def _UnPack(self, writerGroupMessageDataType):
        if writerGroupMessageDataType is None:
            return
        self.valueType = writerGroupMessageDataType.ValueType()
        self.value = comm.opcua.subtypesunion.WriterGroupMessageDataType.WriterGroupMessageDataTypeCreator(self.valueType, writerGroupMessageDataType.Value())

    # WriterGroupMessageDataTypeT
    def Pack(self, builder):
        if self.value is not None:
            value = self.value.Pack(builder)
        WriterGroupMessageDataTypeStart(builder)
        WriterGroupMessageDataTypeAddValueType(builder, self.valueType)
        if self.value is not None:
            WriterGroupMessageDataTypeAddValue(builder, value)
        writerGroupMessageDataType = WriterGroupMessageDataTypeEnd(builder)
        return writerGroupMessageDataType
