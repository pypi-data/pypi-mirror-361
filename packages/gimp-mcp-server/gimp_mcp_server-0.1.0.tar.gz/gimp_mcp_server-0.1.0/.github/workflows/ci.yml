name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.9'
  MINIMUM_PYTHON_VERSION: '3.9'
  MAXIMUM_PYTHON_VERSION: '3.12'

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run Black (Code Formatting)
        run: black --check --diff src/ tests/
        
      - name: Run isort (Import Sorting)
        run: isort --check-only --diff src/ tests/
        
      - name: Run flake8 (Linting)
        run: flake8 src/ tests/
        
      - name: Run mypy (Type Checking)
        run: mypy src/

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          pip install -e ".[dev]"
          
      - name: Run Safety (Dependency Vulnerability Check)
        run: safety check
        
      - name: Run Bandit (Security Linting)
        run: bandit -r src/

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.10'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-gi python3-gi-cairo gir1.2-gtk-4.0
          # Note: GIMP 3.0 installation would go here when available
          
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install pygobject3 gtk4
          # Note: GIMP 3.0 installation would go here when available
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run unit tests
        run: pytest tests/unit/ -v --cov=gimp_mcp --cov-report=xml
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Integration Tests (with mocked GIMP)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run integration tests
        run: pytest tests/integration/ -v
        
      - name: Run MCP protocol validation
        run: python tests/validation/mcp_protocol_validator.py

  # Build and Test Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: python -m build
        
      - name: Check package
        run: twine check dist/*
        
      - name: Test package installation
        run: |
          pip install dist/*.whl
          gimp-mcp-server --version
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  # Documentation Build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install sphinx sphinx-rtd-theme myst-parser
          
      - name: Build documentation
        run: |
          cd docs
          make html
          
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docs
          path: docs/_build/html/

  # Deploy to PyPI (only on release)
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [lint, security, test, integration, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: python -m build
        
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Deploy documentation (only on main branch)
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [docs]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download documentation artifacts
        uses: actions/download-artifact@v3
        with:
          name: docs
          path: docs/_build/html/
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html/