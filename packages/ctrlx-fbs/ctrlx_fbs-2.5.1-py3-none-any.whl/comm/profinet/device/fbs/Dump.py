# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Dump(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Dump()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDump(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Dump
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Dump
    def Request(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.profinet.device.fbs.DumpRequest import DumpRequest
            obj = DumpRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DumpStart(builder): builder.StartObject(1)
def Start(builder):
    return DumpStart(builder)
def DumpAddRequest(builder, request): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(request), 0)
def AddRequest(builder, request):
    return DumpAddRequest(builder, request)
def DumpEnd(builder): return builder.EndObject()
def End(builder):
    return DumpEnd(builder)
import comm.profinet.device.fbs.DumpRequest
try:
    from typing import Optional
except:
    pass

class DumpT(object):

    # DumpT
    def __init__(self):
        self.request = None  # type: Optional[comm.profinet.device.fbs.DumpRequest.DumpRequestT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dump = Dump()
        dump.Init(buf, pos)
        return cls.InitFromObj(dump)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dump):
        x = DumpT()
        x._UnPack(dump)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.request == other.request

    # DumpT
    def _UnPack(self, dump):
        if dump is None:
            return
        if dump.Request() is not None:
            self.request = comm.profinet.device.fbs.DumpRequest.DumpRequestT.InitFromObj(dump.Request())

    # DumpT
    def Pack(self, builder):
        if self.request is not None:
            request = self.request.Pack(builder)
        DumpStart(builder)
        if self.request is not None:
            DumpAddRequest(builder, request)
        dump = DumpEnd(builder)
        return dump
