# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis position commands
class AxsCmdHomingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdHomingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdHomingData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdHomingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # buffered type for generic command
    # AxsCmdHomingData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # commanded target position (or increment for relative position command)
    # AxsCmdHomingData
    def NewRefPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def AxsCmdHomingDataStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCmdHomingDataStart(builder)
def AxsCmdHomingDataAddBuffered(builder, buffered): builder.PrependBoolSlot(0, buffered, 0)
def AddBuffered(builder, buffered):
    return AxsCmdHomingDataAddBuffered(builder, buffered)
def AxsCmdHomingDataAddNewRefPos(builder, newRefPos): builder.PrependFloat64Slot(1, newRefPos, 0.0)
def AddNewRefPos(builder, newRefPos):
    return AxsCmdHomingDataAddNewRefPos(builder, newRefPos)
def AxsCmdHomingDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdHomingDataEnd(builder)

class AxsCmdHomingDataT(object):

    # AxsCmdHomingDataT
    def __init__(self):
        self.buffered = False  # type: bool
        self.newRefPos = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdHomingData = AxsCmdHomingData()
        axsCmdHomingData.Init(buf, pos)
        return cls.InitFromObj(axsCmdHomingData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdHomingData):
        x = AxsCmdHomingDataT()
        x._UnPack(axsCmdHomingData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.buffered == other.buffered and \
            self.newRefPos == other.newRefPos

    # AxsCmdHomingDataT
    def _UnPack(self, axsCmdHomingData):
        if axsCmdHomingData is None:
            return
        self.buffered = axsCmdHomingData.Buffered()
        self.newRefPos = axsCmdHomingData.NewRefPos()

    # AxsCmdHomingDataT
    def Pack(self, builder):
        AxsCmdHomingDataStart(builder)
        AxsCmdHomingDataAddBuffered(builder, self.buffered)
        AxsCmdHomingDataAddNewRefPos(builder, self.newRefPos)
        axsCmdHomingData = AxsCmdHomingDataEnd(builder)
        return axsCmdHomingData
