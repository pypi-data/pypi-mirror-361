# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FileType

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReadInput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReadInput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReadInput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ReadInput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReadInput
    def FileHandle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReadInput
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ReadInputStart(builder): builder.StartObject(2)
def Start(builder):
    return ReadInputStart(builder)
def ReadInputAddFileHandle(builder, fileHandle): builder.PrependUint32Slot(0, fileHandle, 0)
def AddFileHandle(builder, fileHandle):
    return ReadInputAddFileHandle(builder, fileHandle)
def ReadInputAddLength(builder, length): builder.PrependInt32Slot(1, length, 0)
def AddLength(builder, length):
    return ReadInputAddLength(builder, length)
def ReadInputEnd(builder): return builder.EndObject()
def End(builder):
    return ReadInputEnd(builder)

class ReadInputT(object):

    # ReadInputT
    def __init__(self):
        self.fileHandle = 0  # type: int
        self.length = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        readInput = ReadInput()
        readInput.Init(buf, pos)
        return cls.InitFromObj(readInput)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, readInput):
        x = ReadInputT()
        x._UnPack(readInput)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.fileHandle == other.fileHandle and \
            self.length == other.length

    # ReadInputT
    def _UnPack(self, readInput):
        if readInput is None:
            return
        self.fileHandle = readInput.FileHandle()
        self.length = readInput.Length()

    # ReadInputT
    def Pack(self, builder):
        ReadInputStart(builder)
        ReadInputAddFileHandle(builder, self.fileHandle)
        ReadInputAddLength(builder, self.length)
        readInput = ReadInputEnd(builder)
        return readInput
