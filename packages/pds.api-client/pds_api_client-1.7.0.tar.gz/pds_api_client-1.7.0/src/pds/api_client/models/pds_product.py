# coding: utf-8

"""
    PDS Registry Search API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product). 

    The version of the OpenAPI document: 1.6.0
    Contact: pds-operator@jpl.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pds.api_client.models.metadata import Metadata
from pds.api_client.models.reference import Reference
from typing import Optional, Set
from typing_extensions import Self

class PdsProduct(BaseModel):
    """
    default PDS product description format for the API.
    """ # noqa: E501
    description: Optional[StrictStr] = None
    id: StrictStr = Field(description="identifier lidvid of the collection")
    investigations: Optional[List[Reference]] = Field(default=None, description="list of missions or observing campaigns which produced the data")
    metadata: Metadata
    observing_system_components: Optional[List[Reference]] = Field(default=None, description="list of instruments or platforms generating the data")
    properties: Optional[Dict[str, List[StrictStr]]] = Field(default=None, description="propertie's values extracted from pds4 model, as a dictionnary, syntax for property name is {namespace}:{property}[{namespace}:{property}]*")
    start_date_time: Optional[StrictStr] = Field(default=None, description="start date time of the observations in ISO8601")
    stop_date_time: Optional[StrictStr] = Field(default=None, description="stop date time of the observations in ISO8601")
    targets: Optional[List[Reference]] = Field(default=None, description="list of targets or feature of interest the observation.")
    title: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["description", "id", "investigations", "metadata", "observing_system_components", "properties", "start_date_time", "stop_date_time", "targets", "title", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PdsProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in investigations (list)
        _items = []
        if self.investigations:
            for _item_investigations in self.investigations:
                if _item_investigations:
                    _items.append(_item_investigations.to_dict())
            _dict['investigations'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in observing_system_components (list)
        _items = []
        if self.observing_system_components:
            for _item_observing_system_components in self.observing_system_components:
                if _item_observing_system_components:
                    _items.append(_item_observing_system_components.to_dict())
            _dict['observing_system_components'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item_targets in self.targets:
                if _item_targets:
                    _items.append(_item_targets.to_dict())
            _dict['targets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PdsProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "id": obj.get("id"),
            "investigations": [Reference.from_dict(_item) for _item in obj["investigations"]] if obj.get("investigations") is not None else None,
            "metadata": Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "observing_system_components": [Reference.from_dict(_item) for _item in obj["observing_system_components"]] if obj.get("observing_system_components") is not None else None,
            "properties": obj.get("properties"),
            "start_date_time": obj.get("start_date_time"),
            "stop_date_time": obj.get("stop_date_time"),
            "targets": [Reference.from_dict(_item) for _item in obj["targets"]] if obj.get("targets") is not None else None,
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj


