# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RecSlice(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RecSlice()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRecSlice(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RecSlice
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RecSlice
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.osci.fbtypes.RecValue import RecValue
            obj = RecValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecSlice
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecSlice
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def RecSliceStart(builder): builder.StartObject(1)
def Start(builder):
    return RecSliceStart(builder)
def RecSliceAddValues(builder, values): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)
def AddValues(builder, values):
    return RecSliceAddValues(builder, values)
def RecSliceStartValuesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartValuesVector(builder, numElems):
    return RecSliceStartValuesVector(builder, numElems)
def RecSliceEnd(builder): return builder.EndObject()
def End(builder):
    return RecSliceEnd(builder)
import comm.osci.fbtypes.RecValue
try:
    from typing import List
except:
    pass

class RecSliceT(object):

    # RecSliceT
    def __init__(self):
        self.values = None  # type: List[comm.osci.fbtypes.RecValue.RecValueT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        recSlice = RecSlice()
        recSlice.Init(buf, pos)
        return cls.InitFromObj(recSlice)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, recSlice):
        x = RecSliceT()
        x._UnPack(recSlice)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.values == other.values

    # RecSliceT
    def _UnPack(self, recSlice):
        if recSlice is None:
            return
        if not recSlice.ValuesIsNone():
            self.values = []
            for i in range(recSlice.ValuesLength()):
                if recSlice.Values(i) is None:
                    self.values.append(None)
                else:
                    recValue_ = comm.osci.fbtypes.RecValue.RecValueT.InitFromObj(recSlice.Values(i))
                    self.values.append(recValue_)

    # RecSliceT
    def Pack(self, builder):
        if self.values is not None:
            valueslist = []
            for i in range(len(self.values)):
                valueslist.append(self.values[i].Pack(builder))
            RecSliceStartValuesVector(builder, len(self.values))
            for i in reversed(range(len(self.values))):
                builder.PrependUOffsetTRelative(valueslist[i])
            values = builder.EndVector()
        RecSliceStart(builder)
        if self.values is not None:
            RecSliceAddValues(builder, values)
        recSlice = RecSliceEnd(builder)
        return recSlice
