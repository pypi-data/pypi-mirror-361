# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Time info
class TimeInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TimeInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTimeInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TimeInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Time as coordinated universal time (UTC) since start of Unix epoche (1970-01-01)
    # TimeInfo
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    #Local offset (time zone offset and daylight saving time) between UTC and local time
    # TimeInfo
    def LocalOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    #Indicates if localOffset includes daylight saving time
    # -1: information not available
    # 0: not included
    # 1: included
    # TimeInfo
    def DaylightSavingTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # TimeInfo
    def TimeZoneInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.TimeZoneInfo import TimeZoneInfo
            obj = TimeZoneInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TimeInfoStart(builder): builder.StartObject(4)
def Start(builder):
    return TimeInfoStart(builder)
def TimeInfoAddTime(builder, time): builder.PrependUint64Slot(0, time, 0)
def AddTime(builder, time):
    return TimeInfoAddTime(builder, time)
def TimeInfoAddLocalOffset(builder, localOffset): builder.PrependInt64Slot(1, localOffset, 0)
def AddLocalOffset(builder, localOffset):
    return TimeInfoAddLocalOffset(builder, localOffset)
def TimeInfoAddDaylightSavingTime(builder, daylightSavingTime): builder.PrependInt32Slot(2, daylightSavingTime, -1)
def AddDaylightSavingTime(builder, daylightSavingTime):
    return TimeInfoAddDaylightSavingTime(builder, daylightSavingTime)
def TimeInfoAddTimeZoneInfo(builder, timeZoneInfo): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(timeZoneInfo), 0)
def AddTimeZoneInfo(builder, timeZoneInfo):
    return TimeInfoAddTimeZoneInfo(builder, timeZoneInfo)
def TimeInfoEnd(builder): return builder.EndObject()
def End(builder):
    return TimeInfoEnd(builder)
import comm.ethercat.master.fbs.TimeZoneInfo
try:
    from typing import Optional
except:
    pass

class TimeInfoT(object):

    # TimeInfoT
    def __init__(self):
        self.time = 0  # type: int
        self.localOffset = 0  # type: int
        self.daylightSavingTime = -1  # type: int
        self.timeZoneInfo = None  # type: Optional[comm.ethercat.master.fbs.TimeZoneInfo.TimeZoneInfoT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        timeInfo = TimeInfo()
        timeInfo.Init(buf, pos)
        return cls.InitFromObj(timeInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, timeInfo):
        x = TimeInfoT()
        x._UnPack(timeInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.time == other.time and \
            self.localOffset == other.localOffset and \
            self.daylightSavingTime == other.daylightSavingTime and \
            self.timeZoneInfo == other.timeZoneInfo

    # TimeInfoT
    def _UnPack(self, timeInfo):
        if timeInfo is None:
            return
        self.time = timeInfo.Time()
        self.localOffset = timeInfo.LocalOffset()
        self.daylightSavingTime = timeInfo.DaylightSavingTime()
        if timeInfo.TimeZoneInfo() is not None:
            self.timeZoneInfo = comm.ethercat.master.fbs.TimeZoneInfo.TimeZoneInfoT.InitFromObj(timeInfo.TimeZoneInfo())

    # TimeInfoT
    def Pack(self, builder):
        if self.timeZoneInfo is not None:
            timeZoneInfo = self.timeZoneInfo.Pack(builder)
        TimeInfoStart(builder)
        TimeInfoAddTime(builder, self.time)
        TimeInfoAddLocalOffset(builder, self.localOffset)
        TimeInfoAddDaylightSavingTime(builder, self.daylightSavingTime)
        if self.timeZoneInfo is not None:
            TimeInfoAddTimeZoneInfo(builder, timeZoneInfo)
        timeInfo = TimeInfoEnd(builder)
        return timeInfo
