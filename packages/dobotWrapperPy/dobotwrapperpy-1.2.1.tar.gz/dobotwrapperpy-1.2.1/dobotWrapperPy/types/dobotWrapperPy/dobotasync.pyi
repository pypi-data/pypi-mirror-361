import enum
from .dobotConnection import DobotConnection as DobotConnection
from .dobotapi import DobotApi as DobotApi
from .enums.CPMode import CPMode as CPMode
from .enums.EMotorIndex import EMotorIndex as EMotorIndex
from .enums.IOFunction import IOFunction as IOFunction
from .enums.alarm import Alarm as Alarm
from .enums.jogCmd import JogCmd as JogCmd
from .enums.jogMode import JogMode as JogMode
from .enums.level import Level as Level
from .enums.ptpMode import PTPMode as PTPMode
from .enums.realTimeTrack import RealTimeTrack as RealTimeTrack
from .enums.tagVersionColorSensorAndIR import TagVersionColorSensorAndIR as TagVersionColorSensorAndIR
from .enums.tagVersionRail import tagVersionRail as tagVersionRail
from .message import Message as Message
from .paramsStructures import tagARCCmd as tagARCCmd, tagCPCmd as tagCPCmd, tagCPParams as tagCPParams, tagDevice as tagDevice, tagEMOTOR as tagEMOTOR, tagHomeCmd as tagHomeCmd, tagIODI as tagIODI, tagIODO as tagIODO, tagIOMultiplexing as tagIOMultiplexing, tagIOPWM as tagIOPWM, tagJOGCmd as tagJOGCmd, tagPTPCmd as tagPTPCmd, tagPTPCommonParams as tagPTPCommonParams, tagPTPCoordinateParams as tagPTPCoordinateParams, tagPTPWithLCmd as tagPTPWithLCmd, tagPose as tagPose, tagWAITCmd as tagWAITCmd, tagWithL as tagWithL

class EndEffectorType(enum.Enum):
    CUP = 0
    GRIPPER = 1
    LASER = 2

class DobotAsync:
    dobotApiInterface: DobotApi
    def __init__(self, port: str, verbose: bool = False) -> None: ...
    async def connect(self) -> None: ...
    def force_stop(self) -> None: ...
    def __del__(self) -> None: ...
    async def move_xyz_linear(self, x: float, y: float, z: float, r: float) -> None: ...
    async def move_xyz_joint(self, x: float, y: float, z: float, r: float) -> None: ...
    async def move_relative_xyz_linear(self, delta_x: float, delta_y: float, delta_z: float, delta_r: float) -> None: ...
    async def move_relative_xyz_joint(self, delta_x: float, delta_y: float, delta_z: float, delta_r: float) -> None: ...
    async def jump_relative_xyz(self, delta_x: float, delta_y: float, delta_z: float, delta_r: float) -> None: ...
    async def jump(self, x: float, y: float, z: float, r: float) -> None: ...
    async def move_xyz_rail_linear(self, x: float, y: float, z: float, r: float, rail: float) -> None: ...
    async def move_xyz_rail_joint(self, x: float, y: float, z: float, r: float, rail: float) -> None: ...
    async def move_relative_xyz_rail_linear(self, delta_x: float, delta_y: float, delta_z: float, delta_r: float, delta_rail: float) -> None: ...
    async def move_relative_xyz_rail_joint(self, delta_x: float, delta_y: float, delta_z: float, delta_r: float, delta_rail: float) -> None: ...
    async def jump_relative_xyz_rail(self, delta_x: float, delta_y: float, delta_z: float, delta_r: float, delta_rail: float) -> None: ...
    async def jump_rail(self, x: float, y: float, z: float, r: float, rail: float) -> None: ...
    async def clear_alarms(self) -> None: ...
    async def get_alarms(self) -> set[Alarm]: ...
    async def suck(self, enable: bool) -> None: ...
    async def grip(self, enable: bool, grip: bool) -> None: ...
    async def laser(self, enable: bool) -> None: ...
    async def speed(self, velocity: float = 100.0, acceleration: float = 100.0) -> None: ...
    async def wait(self, ms: int) -> None: ...
    async def pose(self) -> tuple[float, float, float, float, float, float, float, float]: ...
    async def pose_rail(self) -> float: ...
    async def home(self) -> None: ...
    async def get_ir_value(self, port: int) -> bool: ...
    async def set_ir_params(self, port: int, version: TagVersionColorSensorAndIR) -> None: ...
    async def get_device_serial_number(self) -> str: ...
    async def get_device_id(self) -> tuple[int, int, int]: ...
    async def get_device_name(self) -> str: ...
    async def get_device_rail_capability(self) -> bool: ...
    async def get_device_time(self) -> int: ...
    async def get_device_version(self) -> tuple[int, int, int]: ...
    async def set_device_serial_number(self, serial_number: str) -> None: ...
    async def set_device_name(self, name: str) -> None: ...
    async def set_device_rail_capability(self, enable: bool, version: tagVersionRail) -> None: ...
    async def set_lost_step_error(self, error: float) -> None: ...
    async def set_lost_step_command(self, threshold: float) -> None: ...
    async def set_continous_trajectory_parameters(self, acceleration: float, realTime: RealTimeTrack) -> None: ...
    async def move_with_continous_trajectory_relative(self, delta_x: float, delta_y: float, delta_z: float) -> None: ...
    async def move_with_continous_trajectory_absolute(self, x: float, y: float, z: float) -> None: ...
    async def move_with_continous_trajectory_laser_relative(self, delta_x: float, delta_y: float, delta_z: float, power: float) -> None: ...
    async def set_angle_static_error(self, rear_arm_angle: float, front_arm_angle: float) -> None: ...
    async def get_angle_static_error(self) -> tuple[float, float]: ...
    async def set_pin_purpose(self, address: int, purpose: IOFunction) -> None: ...
    async def get_pin_purpose(self, address: int) -> IOFunction: ...
    async def set_pin_output(self, address: int, level: Level) -> None: ...
    async def get_pin_output(self, address: int) -> Level: ...
    async def get_pin_input(self, address: int) -> Level: ...
    async def get_adc(self, address: int) -> int: ...
    async def set_pwm(self, address: int, frequency: float, cycle: float) -> None: ...
    async def get_pwm(self, address: int) -> tuple[float, float]: ...
    async def set_motor(self, address: EMotorIndex, enable: bool, speed: int) -> None: ...
    async def set_color_sensor(self, enable: bool, port: int, version: TagVersionColorSensorAndIR) -> None: ...
    async def get_color_sensor(self, port: int) -> tuple[int, int, int]: ...
    async def move_joystick_idle(self) -> None: ...
    async def move_joystick_positive_x(self) -> None: ...
    async def move_joystick_negative_x(self) -> None: ...
    async def move_joystick_positive_y(self) -> None: ...
    async def move_joystick_negative_y(self) -> None: ...
    async def move_joystick_positive_z(self) -> None: ...
    async def move_joystick_negative_z(self) -> None: ...
    async def move_joystick_positive_r(self) -> None: ...
    async def move_joystick_negative_r(self) -> None: ...
    async def move_in_circle(self, relative_x: float, relative_y: float, relative_z: float, relative_r: float, end_x: float, end_y: float, end_z: float, end_r: float) -> None: ...
