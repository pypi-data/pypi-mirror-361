# coding: utf-8

"""
    CityPay Payment API

     Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 

    Contact: support@citypay.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from citypay.models.paylink_custom_param import PaylinkCustomParam
from citypay.models.paylink_field_guard_model import PaylinkFieldGuardModel
from citypay.models.paylink_part_payments import PaylinkPartPayments
from citypay.models.paylink_ui import PaylinkUI
from typing import Optional, Set
from typing_extensions import Self

class PaylinkConfig(BaseModel):
    """
    PaylinkConfig
    """ # noqa: E501
    acs_mode: Optional[StrictStr] = Field(default=None, description="Specifies the approach to be adopted by the Paylink form when displaying a 3-D Secure challenge window. The values may be   - `iframe` shows the 3-D Secure ACS in an iframe dialog, neatly embedding it in Paylink. This provides a more seamless flow for the cardholder who is able to validate and authenticate their card using a dialog provided by their card issuer.  - `inline` an inline mode transfers the full browser window to the authentication server, allowing the payment cardholder to see their payment card issuer's URL and the certificate status in the browser.  If you request an iframe mode and the browser width is deemed as being small (< 768px) then an inline mode will be enforced. This is to ensure that mobile users have an appropriate user experience.  The default type if not supplied is **iframe**. ")
    custom_params: Optional[List[PaylinkCustomParam]] = None
    descriptor: Optional[StrictStr] = Field(default=None, description="Directly specify the merchant descriptor used for the transaction to be displayed on the payment page.")
    expire_in: Optional[StrictStr] = Field(default=None, description="Specifies a period of time in seconds after which the token cannot be used. A value of 0 defines that the token will never expire. The API will convert an expiry time based on a string value.  For instance: -  s - Time in seconds, for example 90s. -  m - Time in minutes, for example 20m. -  h - Time in hours, for example 4h. -  w - Time in weeks, for example 4w. -  M - Time in months, for example 6M. -  y - Time in years, for example 1y. -  Defaults to 30 minutes. ")
    field_guard: Optional[List[PaylinkFieldGuardModel]] = None
    lock_params: Optional[List[StrictStr]] = None
    merch_logo: Optional[StrictStr] = Field(default=None, description="A URL of a logo to include in the form. The URL should be delivered using HTTPS.")
    merch_terms: Optional[StrictStr] = Field(default=None, description="A URL of the merchant terms and conditions for payment. If a value is supplied, a checkbox will be required to be completed to confirm that the cardholder agrees to these conditions before payment. A modal dialogue is displayed with the content of the conditions displayed.")
    meta_data: Optional[Dict[str, StrictStr]] = None
    options: Optional[List[StrictStr]] = None
    part_payments: Optional[PaylinkPartPayments] = None
    pass_through_data: Optional[Dict[str, StrictStr]] = None
    pass_through_headers: Optional[Dict[str, StrictStr]] = None
    postback: Optional[StrictStr] = Field(default=None, description="Specifies a URL to use for a call back when the payment is completed. see Postback Handling }.")
    postback_password: Optional[StrictStr] = Field(default=None, description="A password to be added to the postback for HTTP Basic Authentication.")
    postback_policy: Optional[StrictStr] = Field(default=None, description="The policy setting for the postback see Postback Handling.")
    postback_username: Optional[StrictStr] = Field(default=None, description="A username to be added to the postback for HTTP Basic Authentication.")
    redirect_delay: Optional[StrictInt] = Field(default=None, description="A value which can delay the redirection in seconds. A value of 0 will redirect immediately.")
    redirect_failure: Optional[StrictStr] = Field(default=None, description="A URL which the browser is redirected to on non-completion of a transaction.")
    redirect_success: Optional[StrictStr] = Field(default=None, description="A URL which the browser is redirected to on authorisation of a transaction.")
    renderer: Optional[StrictStr] = Field(default=None, description="The Paylink renderer engine to use.")
    return_params: Optional[StrictBool] = Field(default=None, description="If a value of true is specified, any redirection will include the transaction result in parameters. It is recommended to use the postback integration rather than redirection parameters.")
    ui: Optional[PaylinkUI] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["acs_mode", "custom_params", "descriptor", "expire_in", "field_guard", "lock_params", "merch_logo", "merch_terms", "meta_data", "options", "part_payments", "pass_through_data", "pass_through_headers", "postback", "postback_password", "postback_policy", "postback_username", "redirect_delay", "redirect_failure", "redirect_success", "renderer", "return_params", "ui"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaylinkConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_params (list)
        _items = []
        if self.custom_params:
            for _item_custom_params in self.custom_params:
                if _item_custom_params:
                    _items.append(_item_custom_params.to_dict())
            _dict['custom_params'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in field_guard (list)
        _items = []
        if self.field_guard:
            for _item_field_guard in self.field_guard:
                if _item_field_guard:
                    _items.append(_item_field_guard.to_dict())
            _dict['field_guard'] = _items
        # override the default output from pydantic by calling `to_dict()` of part_payments
        if self.part_payments:
            _dict['part_payments'] = self.part_payments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ui
        if self.ui:
            _dict['ui'] = self.ui.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaylinkConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acs_mode": obj.get("acs_mode"),
            "custom_params": [PaylinkCustomParam.from_dict(_item) for _item in obj["custom_params"]] if obj.get("custom_params") is not None else None,
            "descriptor": obj.get("descriptor"),
            "expire_in": obj.get("expire_in"),
            "field_guard": [PaylinkFieldGuardModel.from_dict(_item) for _item in obj["field_guard"]] if obj.get("field_guard") is not None else None,
            "lock_params": obj.get("lock_params"),
            "merch_logo": obj.get("merch_logo"),
            "merch_terms": obj.get("merch_terms"),
            "meta_data": obj.get("meta_data"),
            "options": obj.get("options"),
            "part_payments": PaylinkPartPayments.from_dict(obj["part_payments"]) if obj.get("part_payments") is not None else None,
            "pass_through_data": obj.get("pass_through_data"),
            "pass_through_headers": obj.get("pass_through_headers"),
            "postback": obj.get("postback"),
            "postback_password": obj.get("postback_password"),
            "postback_policy": obj.get("postback_policy"),
            "postback_username": obj.get("postback_username"),
            "redirect_delay": obj.get("redirect_delay"),
            "redirect_failure": obj.get("redirect_failure"),
            "redirect_success": obj.get("redirect_success"),
            "renderer": obj.get("renderer"),
            "return_params": obj.get("return_params"),
            "ui": PaylinkUI.from_dict(obj["ui"]) if obj.get("ui") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


