# automatically generated by the FlatBuffers compiler, do not modify

# namespace: builtin

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Guid(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Guid()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGuid(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Guid
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Guid
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def GuidStart(builder): builder.StartObject(1)
def Start(builder):
    return GuidStart(builder)
def GuidAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return GuidAddValue(builder, value)
def GuidEnd(builder): return builder.EndObject()
def End(builder):
    return GuidEnd(builder)

class GuidT(object):

    # GuidT
    def __init__(self):
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        guid = Guid()
        guid.Init(buf, pos)
        return cls.InitFromObj(guid)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, guid):
        x = GuidT()
        x._UnPack(guid)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value

    # GuidT
    def _UnPack(self, guid):
        if guid is None:
            return
        self.value = guid.Value()

    # GuidT
    def Pack(self, builder):
        if self.value is not None:
            value = builder.CreateString(self.value)
        GuidStart(builder)
        if self.value is not None:
            GuidAddValue(builder, value)
        guid = GuidEnd(builder)
        return guid
