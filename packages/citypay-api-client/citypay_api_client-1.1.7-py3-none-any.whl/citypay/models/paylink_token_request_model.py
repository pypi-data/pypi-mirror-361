# coding: utf-8

"""
    CityPay Payment API

     Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 

    Contact: support@citypay.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from citypay.models.paylink_card_holder import PaylinkCardHolder
from citypay.models.paylink_cart import PaylinkCart
from citypay.models.paylink_config import PaylinkConfig
from typing import Optional, Set
from typing_extensions import Self

class PaylinkTokenRequestModel(BaseModel):
    """
    PaylinkTokenRequestModel
    """ # noqa: E501
    accountno: Optional[StrictStr] = Field(default=None, description="To be able to use credential on file (COF) services. A cardholder account may be created once the payment has been authorised, this is then stored \"on file\" for subsequent charging for example re-authorisation, unscheduled payment, delayed charges, incremental authorisation, recurring payments, resubmission or no-show style agreements.  Specifies an alpha-numeric account number that the Paylink service uses when creating a Cardholder Account. The value should be no longer than 20 characters in length. ")
    amount: StrictInt = Field(description="Specifies the intended value of the transaction in the lowest denomination with no spacing characters or decimal point. This is the net total to be processed. An example of Â£74.95 would be presented as 7495.")
    cardholder: Optional[PaylinkCardHolder] = None
    cart: Optional[PaylinkCart] = None
    client_version: Optional[StrictStr] = Field(default=None, description="The clientVersion field is used to specify the version of your application that has invoked the Paylink payment process. This feature is typically used for tracing issues relating to application deployments, or any Paylink integration module or plugin.")
    config: Optional[PaylinkConfig] = None
    currency: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="A currency for the token. This value should be only used on multi-currency accounts and be an appropriate currency which the account is configured for.")
    email: Optional[Annotated[str, Field(strict=True, max_length=254)]] = Field(default=None, description="The email field is used for the Merchant to be notified on completion of the transaction . The value may be supplied to override the default stored value. Emails sent to this address by the Paylink service should not be forwarded on to the cardholder as it may contain certain information that is used by the Paylink service to validate and authenticate Paylink Token Requests: for example, the Merchant ID and the licence key. ")
    identifier: Annotated[str, Field(min_length=4, strict=True, max_length=50)] = Field(description="Identifies a particular transaction linked to a Merchant account. It enables accurate duplicate checking within a pre-configured time period, as well as transaction reporting and tracing. The identifier should be unique to prevent payment card processing attempts from being rejected due to duplication. ")
    merchantid: StrictInt = Field(description="The merchant id you wish to process this transaction with.")
    payment_intent_id: Optional[StrictStr] = Field(default=None, description="A payment intent id already previously registered for this token.")
    recurring: Optional[StrictBool] = Field(default=None, description="True if the intent of this cardholder initiated transaction is to establish a recurring payment model, processable as merchant initiated transactions.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="an id associated with a subscription to link the token request against.")
    tx_type: Optional[StrictStr] = Field(default=None, description="A value to override the transaction type if requested by your account manager.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountno", "amount", "cardholder", "cart", "client_version", "config", "currency", "email", "identifier", "merchantid", "payment_intent_id", "recurring", "subscription_id", "tx_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaylinkTokenRequestModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cardholder
        if self.cardholder:
            _dict['cardholder'] = self.cardholder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cart
        if self.cart:
            _dict['cart'] = self.cart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaylinkTokenRequestModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountno": obj.get("accountno"),
            "amount": obj.get("amount"),
            "cardholder": PaylinkCardHolder.from_dict(obj["cardholder"]) if obj.get("cardholder") is not None else None,
            "cart": PaylinkCart.from_dict(obj["cart"]) if obj.get("cart") is not None else None,
            "client_version": obj.get("client_version"),
            "config": PaylinkConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "currency": obj.get("currency"),
            "email": obj.get("email"),
            "identifier": obj.get("identifier"),
            "merchantid": obj.get("merchantid"),
            "payment_intent_id": obj.get("payment_intent_id"),
            "recurring": obj.get("recurring"),
            "subscription_id": obj.get("subscription_id"),
            "tx_type": obj.get("tx_type")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


