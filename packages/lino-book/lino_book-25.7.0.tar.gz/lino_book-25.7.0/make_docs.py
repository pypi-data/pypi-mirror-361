# Copyright 2023-2024 Rumma & Ko Ltd
# License: GNU Affero General Public License v3 (see file COPYING for details)

import sys
from importlib import import_module
from importlib.metadata import metadata
from pathlib import Path
from jinja2 import Environment, DictLoader
import rstgen
from synodal import KNOWN_REPOS
from lino.utils.code import analyze_rst
from atelier.projects import get_project_from_module

KNOWN_APPS = [r for r in KNOWN_REPOS if r.settings_module and r.package_name]


# templates_loader = DictLoader({"apps_section.tpl.rst": """
#
# .. _{{repo.nickname}}:
#
# {{rstgen.header(2, site.verbose_name)}}
#
# {{package.SETUP_INFO['description']}}
#
# {{package.SETUP_INFO['long_description']}}
#
# Source code: {{package.SETUP_INFO['url']}}
#
# {% if public_url %}
# Documentation: {{public_url}}
# {% endif  %}
#
# """})

# TODO: import importlib.metadata and use this information instead of SETUP_INFO

templates_loader = DictLoader({"apps_section.tpl.rst": """

.. _{{repo.nickname}}:

{{rstgen.header(2, site.verbose_name)}}

{% if public_url %}
Documentation: {{public_url}}
{% endif  %}

"""})

JINJA_ENV = Environment(loader=templates_loader)


class apps_file:
    output_file = Path("docs/apps.rst")

    @classmethod
    def get_content(self):
        txt = ".. Generated by `make_docs.py`.\n.. _getlino.apps:\n\n"
        txt += rstgen.header(1, "List of known Lino applications")
        txt += "\nThe following applications are supported by :cmd:`getlino startsite`.\n\n"

        # First loop to generate an overview table
        rows = []
        headings = ["Name", "Description", "Nickname", "Last release"]
        for r in KNOWN_APPS:
            md = metadata(r.package_name)
            m = import_module(r.settings_module)
            s = m.Site
            cells = [
                f":ref:`{s.verbose_name}<{r.nickname}>`".format(**locals()),
                md['summary'], r.nickname, md['version']
            ]
            rows.append(cells)
        txt += rstgen.table(headings, rows)

        # Second loop with a section for each application
        tpl = JINJA_ENV.get_template("apps_section.tpl.rst")
        for r in KNOWN_APPS:
            # print(r.settings_module)
            md = metadata(r.package_name)
            m = import_module(r.settings_module)
            s = m.Site()
            prj = get_project_from_module(r.package_name.replace("-", "_"))
            public_url = prj.get_public_docs_url()
            context = dict(repo=r,
                           package=prj.main_package,
                           m=m,
                           md=md,
                           site=s,
                           rstgen=rstgen,
                           public_url=public_url)
            txt += tpl.render(**context)
        return txt


class stats_file:
    output_file = Path("docs/stats.rst")

    @classmethod
    def get_content(cls):

        txt = rstgen.header(1, "Statistics")
        txt += """
This page shows some statistics about all packages maintained by the
`Synodalsoft project <https://www.synodalsoft.net/>`__. It currently shows only
Python :term:`source code` files and ignores :file:`.rst` and :file:`.js` files.

"""
        packages = [
            a.package_name.replace("-", "_") for a in KNOWN_REPOS if a.package_name
        ]
        txt += analyze_rst(*packages)

        txt += "\n\n"
        txt += """
This document was generated by :file:`make_docs.py`, which uses
:func:`lino.utils.code.analyze_rst`.
        """
        return txt


for cls in (stats_file, apps_file):
    try:
        txt = cls.get_content()
    except ImportError as e:
        print("Not generating {} because {}".format(cls.output_file, e))
        sys.exit()
    print("Generating {}...".format(cls.output_file))
    cls.output_file.write_text(txt)
