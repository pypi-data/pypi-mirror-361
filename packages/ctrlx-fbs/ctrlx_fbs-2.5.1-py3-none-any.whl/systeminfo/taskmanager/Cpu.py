# automatically generated by the FlatBuffers compiler, do not modify

# namespace: taskmanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cpu(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cpu()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCpu(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cpu
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cpu
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cpu
    def Usage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cpu
    def Utilization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def CpuStart(builder): builder.StartObject(3)
def Start(builder):
    return CpuStart(builder)
def CpuAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return CpuAddName(builder, name)
def CpuAddUsage(builder, usage): builder.PrependFloat64Slot(1, usage, 0.0)
def AddUsage(builder, usage):
    return CpuAddUsage(builder, usage)
def CpuAddUtilization(builder, utilization): builder.PrependFloat64Slot(2, utilization, 0.0)
def AddUtilization(builder, utilization):
    return CpuAddUtilization(builder, utilization)
def CpuEnd(builder): return builder.EndObject()
def End(builder):
    return CpuEnd(builder)

class CpuT(object):

    # CpuT
    def __init__(self):
        self.name = None  # type: str
        self.usage = 0.0  # type: float
        self.utilization = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cpu = Cpu()
        cpu.Init(buf, pos)
        return cls.InitFromObj(cpu)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cpu):
        x = CpuT()
        x._UnPack(cpu)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.usage == other.usage and \
            self.utilization == other.utilization

    # CpuT
    def _UnPack(self, cpu):
        if cpu is None:
            return
        self.name = cpu.Name()
        self.usage = cpu.Usage()
        self.utilization = cpu.Utilization()

    # CpuT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        CpuStart(builder)
        if self.name is not None:
            CpuAddName(builder, name)
        CpuAddUsage(builder, self.usage)
        CpuAddUtilization(builder, self.utilization)
        cpu = CpuEnd(builder)
        return cpu
