# automatically generated by the FlatBuffers compiler, do not modify

# namespace: server

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SecConfigType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SecConfigType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSecConfigType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SecConfigType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Identifier of the policy to use
    # UA_SECURITY_POLICY_NONE = 0,
    # UA_SECURITY_POLICY_BASIC128RSA15 = 1,
    # UA_SECURITY_POLICY_BASIC256 = 2,
    # UA_SECURITY_POLICY_BASIC256SHA256 = 3,
    # UA_SECURITY_POLICY_AES128_SHA256_RSAOAEP = 4,
    # UA_SECURITY_POLICY_AES256_SHA256_RSAPSS = 5,
    # UA_SECURITY_POLICY_ID_MAX = 6
    # SecConfigType
    def PolicyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # True if message security mode none is allowed
    # SecConfigType
    def ModeNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # True if message security mode sign is allowed
    # SecConfigType
    def ModeSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # True if message security mode sign and encrypt is allowed
    # SecConfigType
    def ModeSignAndEncrypt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SecConfigTypeStart(builder): builder.StartObject(4)
def Start(builder):
    return SecConfigTypeStart(builder)
def SecConfigTypeAddPolicyId(builder, policyId): builder.PrependUint32Slot(0, policyId, 0)
def AddPolicyId(builder, policyId):
    return SecConfigTypeAddPolicyId(builder, policyId)
def SecConfigTypeAddModeNone(builder, modeNone): builder.PrependBoolSlot(1, modeNone, 0)
def AddModeNone(builder, modeNone):
    return SecConfigTypeAddModeNone(builder, modeNone)
def SecConfigTypeAddModeSign(builder, modeSign): builder.PrependBoolSlot(2, modeSign, 0)
def AddModeSign(builder, modeSign):
    return SecConfigTypeAddModeSign(builder, modeSign)
def SecConfigTypeAddModeSignAndEncrypt(builder, modeSignAndEncrypt): builder.PrependBoolSlot(3, modeSignAndEncrypt, 0)
def AddModeSignAndEncrypt(builder, modeSignAndEncrypt):
    return SecConfigTypeAddModeSignAndEncrypt(builder, modeSignAndEncrypt)
def SecConfigTypeEnd(builder): return builder.EndObject()
def End(builder):
    return SecConfigTypeEnd(builder)

class SecConfigTypeT(object):

    # SecConfigTypeT
    def __init__(self):
        self.policyId = 0  # type: int
        self.modeNone = False  # type: bool
        self.modeSign = False  # type: bool
        self.modeSignAndEncrypt = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        secConfigType = SecConfigType()
        secConfigType.Init(buf, pos)
        return cls.InitFromObj(secConfigType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, secConfigType):
        x = SecConfigTypeT()
        x._UnPack(secConfigType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.policyId == other.policyId and \
            self.modeNone == other.modeNone and \
            self.modeSign == other.modeSign and \
            self.modeSignAndEncrypt == other.modeSignAndEncrypt

    # SecConfigTypeT
    def _UnPack(self, secConfigType):
        if secConfigType is None:
            return
        self.policyId = secConfigType.PolicyId()
        self.modeNone = secConfigType.ModeNone()
        self.modeSign = secConfigType.ModeSign()
        self.modeSignAndEncrypt = secConfigType.ModeSignAndEncrypt()

    # SecConfigTypeT
    def Pack(self, builder):
        SecConfigTypeStart(builder)
        SecConfigTypeAddPolicyId(builder, self.policyId)
        SecConfigTypeAddModeNone(builder, self.modeNone)
        SecConfigTypeAddModeSign(builder, self.modeSign)
        SecConfigTypeAddModeSignAndEncrypt(builder, self.modeSignAndEncrypt)
        secConfigType = SecConfigTypeEnd(builder)
        return secConfigType
