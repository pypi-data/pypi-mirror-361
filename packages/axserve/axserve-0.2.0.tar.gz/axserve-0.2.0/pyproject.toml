[build-system]
requires = [
  "hatchling",
  "grpcio-tools",
]
build-backend = "hatchling.build"

[project]
name = "axserve"
dynamic = ["version"]
description = "AxServe python client that provides interfaces of COM or OCX components through a gRPC server."
readme = "README.md"
requires-python = ">=3.10"
license = "Apache-2.0"
keywords = ["activex", "com", "ocx", "windows", "grpc", "qt6", "cpp", "python"]
authors = [
  { name = "Yunseong Hwang", email = "kika1492@gmail.com" },
]
maintainers = [
  { name = "Yunseong Hwang", email = "kika1492@gmail.com" },
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: Microsoft :: Windows :: Windows 11",
  "Programming Language :: C++",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Environment :: Console",
  "Environment :: X11 Applications :: Qt",
]
dependencies = [
  "click>=8.2.1",
  "grpcio>=1.73.1",
  "protobuf>=6.31.1",
  "wrapt>=1.17.2",
  "pywin32>=310; platform_system == 'Windows'",
]

[project.urls]
Documentation = "https://github.com/elbakramer/axserve#readme"
Issues = "https://github.com/elbakramer/axserve/issues"
Source = "https://github.com/elbakramer/axserve"

[project.scripts]
axserve = "axserve.cli:main"

[tool.hatch.version]
path = "src/python/axserve/__about__.py"

[tool.hatch.build]
exclude = ["third_party"]
skip-excluded-dirs = true

[tool.hatch.build.targets.wheel]
packages = ["src/python/axserve"]
artifacts = ["*.exe"]

[tool.hatch.build.targets.wheel.hooks.custom]
path = "hatch_build.py"

[[tool.hatch.build.targets.wheel.hooks.custom.generates]]
sources = ["src/proto/active.proto"]
include-dirs = ["src/proto"]
out-dir = "src/python/axserve/proto"

[[tool.hatch.build.targets.wheel.hooks.custom.builds]]
build-dir = "build/amd64"
generator = "Ninja Multi-Config"
config = "Release"
system-processor = "AMD64"
toolchain = "cmake/msvc/toolchain-msvc.cmake"
runtime-output-dir = "src/python/axserve/server/exe"
output-files = ["src/python/axserve/server/exe/axserve-console-amd64.exe"]
marker = "platform_system == 'Windows' and platform_machine == 'AMD64'"

[[tool.hatch.build.targets.wheel.hooks.custom.builds]]
build-dir = "build/x86"
generator = "Ninja Multi-Config"
config = "Release"
system-processor = "x86"
toolchain = "cmake/msvc/toolchain-msvc.cmake"
runtime-output-dir = "src/python/axserve/server/exe"
output-files = ["src/python/axserve/server/exe/axserve-console-x86.exe"]
marker = "platform_system == 'Windows' and (platform_machine == 'AMD64' or platform_machine == 'x86')"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-asyncio",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/python/axserve tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.codespell]
skip = "third_party"
ignore-words-list = [
  "doubleclick"
]

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["axserve"]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2
required-imports = ["from __future__ import annotations"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.mypy]
files = [
  "src/python/axserve",
  "tests",
]
exclude = [
    "_pb2\\.py$",
    "_pb2\\.pyi$",
    "_pb2_grpc\\.py$",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.pyright]
exclude = ["build", "dist", "third_party"]

[tool.coverage.run]
source_pkgs = ["axserve", "tests"]
branch = true
parallel = true
omit = [
  "src/python/axserve/__about__.py",
]

[tool.coverage.paths]
axserve = ["src/python/axserve"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
