# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Misc_ForceOverride100(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Misc_ForceOverride100()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMisc_ForceOverride100(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Misc_ForceOverride100
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Misc_ForceOverride100
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Misc_ForceOverride100
    def Force100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Misc_ForceOverride100Start(builder): builder.StartObject(2)
def Start(builder):
    return Misc_ForceOverride100Start(builder)
def Misc_ForceOverride100AddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Misc_ForceOverride100AddBase(builder, base)
def Misc_ForceOverride100AddForce100(builder, force100): builder.PrependBoolSlot(1, force100, 0)
def AddForce100(builder, force100):
    return Misc_ForceOverride100AddForce100(builder, force100)
def Misc_ForceOverride100End(builder): return builder.EndObject()
def End(builder):
    return Misc_ForceOverride100End(builder)
import script.manager.fbtypes.Cmd_Base
try:
    from typing import Optional
except:
    pass

class Misc_ForceOverride100T(object):

    # Misc_ForceOverride100T
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.force100 = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        miscForceOverride100 = Misc_ForceOverride100()
        miscForceOverride100.Init(buf, pos)
        return cls.InitFromObj(miscForceOverride100)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, miscForceOverride100):
        x = Misc_ForceOverride100T()
        x._UnPack(miscForceOverride100)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.force100 == other.force100

    # Misc_ForceOverride100T
    def _UnPack(self, miscForceOverride100):
        if miscForceOverride100 is None:
            return
        if miscForceOverride100.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(miscForceOverride100.Base())
        self.force100 = miscForceOverride100.Force100()

    # Misc_ForceOverride100T
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        Misc_ForceOverride100Start(builder)
        if self.base is not None:
            Misc_ForceOverride100AddBase(builder, base)
        Misc_ForceOverride100AddForce100(builder, self.force100)
        miscForceOverride100 = Misc_ForceOverride100End(builder)
        return miscForceOverride100
