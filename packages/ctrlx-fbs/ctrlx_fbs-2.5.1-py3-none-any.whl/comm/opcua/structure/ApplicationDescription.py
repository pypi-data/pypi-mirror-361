# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ApplicationDescription(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ApplicationDescription()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsApplicationDescription(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ApplicationDescription
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ApplicationDescription
    def ApplicationUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ApplicationDescription
    def ProductUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ApplicationDescription
    def ApplicationName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.LocalizedText import LocalizedText
            obj = LocalizedText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ApplicationDescription
    def ApplicationType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ApplicationDescription
    def GatewayServerUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ApplicationDescription
    def DiscoveryProfileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ApplicationDescription
    def DiscoveryUrls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ApplicationDescription
    def DiscoveryUrlsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ApplicationDescription
    def DiscoveryUrlsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def ApplicationDescriptionStart(builder): builder.StartObject(7)
def Start(builder):
    return ApplicationDescriptionStart(builder)
def ApplicationDescriptionAddApplicationUri(builder, applicationUri): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(applicationUri), 0)
def AddApplicationUri(builder, applicationUri):
    return ApplicationDescriptionAddApplicationUri(builder, applicationUri)
def ApplicationDescriptionAddProductUri(builder, productUri): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(productUri), 0)
def AddProductUri(builder, productUri):
    return ApplicationDescriptionAddProductUri(builder, productUri)
def ApplicationDescriptionAddApplicationName(builder, applicationName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(applicationName), 0)
def AddApplicationName(builder, applicationName):
    return ApplicationDescriptionAddApplicationName(builder, applicationName)
def ApplicationDescriptionAddApplicationType(builder, applicationType): builder.PrependInt32Slot(3, applicationType, 0)
def AddApplicationType(builder, applicationType):
    return ApplicationDescriptionAddApplicationType(builder, applicationType)
def ApplicationDescriptionAddGatewayServerUri(builder, gatewayServerUri): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(gatewayServerUri), 0)
def AddGatewayServerUri(builder, gatewayServerUri):
    return ApplicationDescriptionAddGatewayServerUri(builder, gatewayServerUri)
def ApplicationDescriptionAddDiscoveryProfileUri(builder, discoveryProfileUri): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(discoveryProfileUri), 0)
def AddDiscoveryProfileUri(builder, discoveryProfileUri):
    return ApplicationDescriptionAddDiscoveryProfileUri(builder, discoveryProfileUri)
def ApplicationDescriptionAddDiscoveryUrls(builder, discoveryUrls): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(discoveryUrls), 0)
def AddDiscoveryUrls(builder, discoveryUrls):
    return ApplicationDescriptionAddDiscoveryUrls(builder, discoveryUrls)
def ApplicationDescriptionStartDiscoveryUrlsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDiscoveryUrlsVector(builder, numElems):
    return ApplicationDescriptionStartDiscoveryUrlsVector(builder, numElems)
def ApplicationDescriptionEnd(builder): return builder.EndObject()
def End(builder):
    return ApplicationDescriptionEnd(builder)
import comm.opcua.builtin.LocalizedText
try:
    from typing import List, Optional
except:
    pass

class ApplicationDescriptionT(object):

    # ApplicationDescriptionT
    def __init__(self):
        self.applicationUri = None  # type: str
        self.productUri = None  # type: str
        self.applicationName = None  # type: Optional[comm.opcua.builtin.LocalizedText.LocalizedTextT]
        self.applicationType = 0  # type: int
        self.gatewayServerUri = None  # type: str
        self.discoveryProfileUri = None  # type: str
        self.discoveryUrls = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        applicationDescription = ApplicationDescription()
        applicationDescription.Init(buf, pos)
        return cls.InitFromObj(applicationDescription)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, applicationDescription):
        x = ApplicationDescriptionT()
        x._UnPack(applicationDescription)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.applicationUri == other.applicationUri and \
            self.productUri == other.productUri and \
            self.applicationName == other.applicationName and \
            self.applicationType == other.applicationType and \
            self.gatewayServerUri == other.gatewayServerUri and \
            self.discoveryProfileUri == other.discoveryProfileUri and \
            self.discoveryUrls == other.discoveryUrls

    # ApplicationDescriptionT
    def _UnPack(self, applicationDescription):
        if applicationDescription is None:
            return
        self.applicationUri = applicationDescription.ApplicationUri()
        self.productUri = applicationDescription.ProductUri()
        if applicationDescription.ApplicationName() is not None:
            self.applicationName = comm.opcua.builtin.LocalizedText.LocalizedTextT.InitFromObj(applicationDescription.ApplicationName())
        self.applicationType = applicationDescription.ApplicationType()
        self.gatewayServerUri = applicationDescription.GatewayServerUri()
        self.discoveryProfileUri = applicationDescription.DiscoveryProfileUri()
        if not applicationDescription.DiscoveryUrlsIsNone():
            self.discoveryUrls = []
            for i in range(applicationDescription.DiscoveryUrlsLength()):
                self.discoveryUrls.append(applicationDescription.DiscoveryUrls(i))

    # ApplicationDescriptionT
    def Pack(self, builder):
        if self.applicationUri is not None:
            applicationUri = builder.CreateString(self.applicationUri)
        if self.productUri is not None:
            productUri = builder.CreateString(self.productUri)
        if self.applicationName is not None:
            applicationName = self.applicationName.Pack(builder)
        if self.gatewayServerUri is not None:
            gatewayServerUri = builder.CreateString(self.gatewayServerUri)
        if self.discoveryProfileUri is not None:
            discoveryProfileUri = builder.CreateString(self.discoveryProfileUri)
        if self.discoveryUrls is not None:
            discoveryUrlslist = []
            for i in range(len(self.discoveryUrls)):
                discoveryUrlslist.append(builder.CreateString(self.discoveryUrls[i]))
            ApplicationDescriptionStartDiscoveryUrlsVector(builder, len(self.discoveryUrls))
            for i in reversed(range(len(self.discoveryUrls))):
                builder.PrependUOffsetTRelative(discoveryUrlslist[i])
            discoveryUrls = builder.EndVector()
        ApplicationDescriptionStart(builder)
        if self.applicationUri is not None:
            ApplicationDescriptionAddApplicationUri(builder, applicationUri)
        if self.productUri is not None:
            ApplicationDescriptionAddProductUri(builder, productUri)
        if self.applicationName is not None:
            ApplicationDescriptionAddApplicationName(builder, applicationName)
        ApplicationDescriptionAddApplicationType(builder, self.applicationType)
        if self.gatewayServerUri is not None:
            ApplicationDescriptionAddGatewayServerUri(builder, gatewayServerUri)
        if self.discoveryProfileUri is not None:
            ApplicationDescriptionAddDiscoveryProfileUri(builder, discoveryProfileUri)
        if self.discoveryUrls is not None:
            ApplicationDescriptionAddDiscoveryUrls(builder, discoveryUrls)
        applicationDescription = ApplicationDescriptionEnd(builder)
        return applicationDescription
