# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# all configured calculation pipelines of a single axis
class AxsStateCalcPipelines(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsStateCalcPipelines()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsStateCalcPipelines(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsStateCalcPipelines
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all configured calculation pipelines of a single axis
    # AxsStateCalcPipelines
    def Pipeline(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.AxsStateCalcSinglePipeline import AxsStateCalcSinglePipeline
            obj = AxsStateCalcSinglePipeline()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AxsStateCalcPipelines
    def PipelineLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsStateCalcPipelines
    def PipelineIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def AxsStateCalcPipelinesStart(builder): builder.StartObject(1)
def Start(builder):
    return AxsStateCalcPipelinesStart(builder)
def AxsStateCalcPipelinesAddPipeline(builder, pipeline): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pipeline), 0)
def AddPipeline(builder, pipeline):
    return AxsStateCalcPipelinesAddPipeline(builder, pipeline)
def AxsStateCalcPipelinesStartPipelineVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPipelineVector(builder, numElems):
    return AxsStateCalcPipelinesStartPipelineVector(builder, numElems)
def AxsStateCalcPipelinesEnd(builder): return builder.EndObject()
def End(builder):
    return AxsStateCalcPipelinesEnd(builder)
import motion.sync.fbtypes.AxsStateCalcSinglePipeline
try:
    from typing import List
except:
    pass

class AxsStateCalcPipelinesT(object):

    # AxsStateCalcPipelinesT
    def __init__(self):
        self.pipeline = None  # type: List[motion.sync.fbtypes.AxsStateCalcSinglePipeline.AxsStateCalcSinglePipelineT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsStateCalcPipelines = AxsStateCalcPipelines()
        axsStateCalcPipelines.Init(buf, pos)
        return cls.InitFromObj(axsStateCalcPipelines)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsStateCalcPipelines):
        x = AxsStateCalcPipelinesT()
        x._UnPack(axsStateCalcPipelines)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.pipeline == other.pipeline

    # AxsStateCalcPipelinesT
    def _UnPack(self, axsStateCalcPipelines):
        if axsStateCalcPipelines is None:
            return
        if not axsStateCalcPipelines.PipelineIsNone():
            self.pipeline = []
            for i in range(axsStateCalcPipelines.PipelineLength()):
                if axsStateCalcPipelines.Pipeline(i) is None:
                    self.pipeline.append(None)
                else:
                    axsStateCalcSinglePipeline_ = motion.sync.fbtypes.AxsStateCalcSinglePipeline.AxsStateCalcSinglePipelineT.InitFromObj(axsStateCalcPipelines.Pipeline(i))
                    self.pipeline.append(axsStateCalcSinglePipeline_)

    # AxsStateCalcPipelinesT
    def Pack(self, builder):
        if self.pipeline is not None:
            pipelinelist = []
            for i in range(len(self.pipeline)):
                pipelinelist.append(self.pipeline[i].Pack(builder))
            AxsStateCalcPipelinesStartPipelineVector(builder, len(self.pipeline))
            for i in reversed(range(len(self.pipeline))):
                builder.PrependUOffsetTRelative(pipelinelist[i])
            pipeline = builder.EndVector()
        AxsStateCalcPipelinesStart(builder)
        if self.pipeline is not None:
            AxsStateCalcPipelinesAddPipeline(builder, pipeline)
        axsStateCalcPipelines = AxsStateCalcPipelinesEnd(builder)
        return axsStateCalcPipelines
