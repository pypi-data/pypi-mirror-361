# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# GearInVel calculation pipeline parameters for the axis GearInVel command
class AxsCmdGearInVelParams(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdGearInVelParams()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdGearInVelParams(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdGearInVelParams
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # slave velocity offset
    # AxsCmdGearInVelParams
    def SlaveVelOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ratio numerator value
    # AxsCmdGearInVelParams
    def RatioNumerator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # ratio denominator value
    # AxsCmdGearInVelParams
    def RatioDenominator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # fine adjust parameter
    # AxsCmdGearInVelParams
    def FineAdjust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def AxsCmdGearInVelParamsStart(builder): builder.StartObject(4)
def Start(builder):
    return AxsCmdGearInVelParamsStart(builder)
def AxsCmdGearInVelParamsAddSlaveVelOffset(builder, slaveVelOffset): builder.PrependFloat64Slot(0, slaveVelOffset, 0.0)
def AddSlaveVelOffset(builder, slaveVelOffset):
    return AxsCmdGearInVelParamsAddSlaveVelOffset(builder, slaveVelOffset)
def AxsCmdGearInVelParamsAddRatioNumerator(builder, ratioNumerator): builder.PrependInt32Slot(1, ratioNumerator, 1)
def AddRatioNumerator(builder, ratioNumerator):
    return AxsCmdGearInVelParamsAddRatioNumerator(builder, ratioNumerator)
def AxsCmdGearInVelParamsAddRatioDenominator(builder, ratioDenominator): builder.PrependInt32Slot(2, ratioDenominator, 1)
def AddRatioDenominator(builder, ratioDenominator):
    return AxsCmdGearInVelParamsAddRatioDenominator(builder, ratioDenominator)
def AxsCmdGearInVelParamsAddFineAdjust(builder, fineAdjust): builder.PrependFloat64Slot(3, fineAdjust, 0.0)
def AddFineAdjust(builder, fineAdjust):
    return AxsCmdGearInVelParamsAddFineAdjust(builder, fineAdjust)
def AxsCmdGearInVelParamsEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdGearInVelParamsEnd(builder)

class AxsCmdGearInVelParamsT(object):

    # AxsCmdGearInVelParamsT
    def __init__(self):
        self.slaveVelOffset = 0.0  # type: float
        self.ratioNumerator = 1  # type: int
        self.ratioDenominator = 1  # type: int
        self.fineAdjust = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdGearInVelParams = AxsCmdGearInVelParams()
        axsCmdGearInVelParams.Init(buf, pos)
        return cls.InitFromObj(axsCmdGearInVelParams)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdGearInVelParams):
        x = AxsCmdGearInVelParamsT()
        x._UnPack(axsCmdGearInVelParams)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.slaveVelOffset == other.slaveVelOffset and \
            self.ratioNumerator == other.ratioNumerator and \
            self.ratioDenominator == other.ratioDenominator and \
            self.fineAdjust == other.fineAdjust

    # AxsCmdGearInVelParamsT
    def _UnPack(self, axsCmdGearInVelParams):
        if axsCmdGearInVelParams is None:
            return
        self.slaveVelOffset = axsCmdGearInVelParams.SlaveVelOffset()
        self.ratioNumerator = axsCmdGearInVelParams.RatioNumerator()
        self.ratioDenominator = axsCmdGearInVelParams.RatioDenominator()
        self.fineAdjust = axsCmdGearInVelParams.FineAdjust()

    # AxsCmdGearInVelParamsT
    def Pack(self, builder):
        AxsCmdGearInVelParamsStart(builder)
        AxsCmdGearInVelParamsAddSlaveVelOffset(builder, self.slaveVelOffset)
        AxsCmdGearInVelParamsAddRatioNumerator(builder, self.ratioNumerator)
        AxsCmdGearInVelParamsAddRatioDenominator(builder, self.ratioDenominator)
        AxsCmdGearInVelParamsAddFineAdjust(builder, self.fineAdjust)
        axsCmdGearInVelParams = AxsCmdGearInVelParamsEnd(builder)
        return axsCmdGearInVelParams
