# automatically generated by the FlatBuffers compiler, do not modify

# namespace: daq

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# DAQ container containing equidistant and non-equidistant daq data
class DaqContainer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DaqContainer()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDaqContainer(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DaqContainer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the DAQ container
    # DaqContainer
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # array of tags for meta data
    # DaqContainer
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.daq.Tag import Tag
            obj = Tag()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DaqContainer
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DaqContainer
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # array of equidistant data
    # DaqContainer
    def Equidistant(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.daq.Equidistant import Equidistant
            obj = Equidistant()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DaqContainer
    def EquidistantLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DaqContainer
    def EquidistantIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # array of non-equidistant data
    # DaqContainer
    def NonEquidistant(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.daq.NonEquidistant import NonEquidistant
            obj = NonEquidistant()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DaqContainer
    def NonEquidistantLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DaqContainer
    def NonEquidistantIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def DaqContainerStart(builder): builder.StartObject(4)
def Start(builder):
    return DaqContainerStart(builder)
def DaqContainerAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return DaqContainerAddName(builder, name)
def DaqContainerAddTags(builder, tags): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)
def AddTags(builder, tags):
    return DaqContainerAddTags(builder, tags)
def DaqContainerStartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTagsVector(builder, numElems):
    return DaqContainerStartTagsVector(builder, numElems)
def DaqContainerAddEquidistant(builder, equidistant): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(equidistant), 0)
def AddEquidistant(builder, equidistant):
    return DaqContainerAddEquidistant(builder, equidistant)
def DaqContainerStartEquidistantVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEquidistantVector(builder, numElems):
    return DaqContainerStartEquidistantVector(builder, numElems)
def DaqContainerAddNonEquidistant(builder, nonEquidistant): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nonEquidistant), 0)
def AddNonEquidistant(builder, nonEquidistant):
    return DaqContainerAddNonEquidistant(builder, nonEquidistant)
def DaqContainerStartNonEquidistantVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartNonEquidistantVector(builder, numElems):
    return DaqContainerStartNonEquidistantVector(builder, numElems)
def DaqContainerEnd(builder): return builder.EndObject()
def End(builder):
    return DaqContainerEnd(builder)
import comm.datalayer.daq.Equidistant
import comm.datalayer.daq.NonEquidistant
import comm.datalayer.daq.Tag
try:
    from typing import List
except:
    pass

class DaqContainerT(object):

    # DaqContainerT
    def __init__(self):
        self.name = None  # type: str
        self.tags = None  # type: List[comm.datalayer.daq.Tag.TagT]
        self.equidistant = None  # type: List[comm.datalayer.daq.Equidistant.EquidistantT]
        self.nonEquidistant = None  # type: List[comm.datalayer.daq.NonEquidistant.NonEquidistantT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        daqContainer = DaqContainer()
        daqContainer.Init(buf, pos)
        return cls.InitFromObj(daqContainer)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, daqContainer):
        x = DaqContainerT()
        x._UnPack(daqContainer)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.tags == other.tags and \
            self.equidistant == other.equidistant and \
            self.nonEquidistant == other.nonEquidistant

    # DaqContainerT
    def _UnPack(self, daqContainer):
        if daqContainer is None:
            return
        self.name = daqContainer.Name()
        if not daqContainer.TagsIsNone():
            self.tags = []
            for i in range(daqContainer.TagsLength()):
                if daqContainer.Tags(i) is None:
                    self.tags.append(None)
                else:
                    tag_ = comm.datalayer.daq.Tag.TagT.InitFromObj(daqContainer.Tags(i))
                    self.tags.append(tag_)
        if not daqContainer.EquidistantIsNone():
            self.equidistant = []
            for i in range(daqContainer.EquidistantLength()):
                if daqContainer.Equidistant(i) is None:
                    self.equidistant.append(None)
                else:
                    equidistant_ = comm.datalayer.daq.Equidistant.EquidistantT.InitFromObj(daqContainer.Equidistant(i))
                    self.equidistant.append(equidistant_)
        if not daqContainer.NonEquidistantIsNone():
            self.nonEquidistant = []
            for i in range(daqContainer.NonEquidistantLength()):
                if daqContainer.NonEquidistant(i) is None:
                    self.nonEquidistant.append(None)
                else:
                    nonEquidistant_ = comm.datalayer.daq.NonEquidistant.NonEquidistantT.InitFromObj(daqContainer.NonEquidistant(i))
                    self.nonEquidistant.append(nonEquidistant_)

    # DaqContainerT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(self.tags[i].Pack(builder))
            DaqContainerStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.equidistant is not None:
            equidistantlist = []
            for i in range(len(self.equidistant)):
                equidistantlist.append(self.equidistant[i].Pack(builder))
            DaqContainerStartEquidistantVector(builder, len(self.equidistant))
            for i in reversed(range(len(self.equidistant))):
                builder.PrependUOffsetTRelative(equidistantlist[i])
            equidistant = builder.EndVector()
        if self.nonEquidistant is not None:
            nonEquidistantlist = []
            for i in range(len(self.nonEquidistant)):
                nonEquidistantlist.append(self.nonEquidistant[i].Pack(builder))
            DaqContainerStartNonEquidistantVector(builder, len(self.nonEquidistant))
            for i in reversed(range(len(self.nonEquidistant))):
                builder.PrependUOffsetTRelative(nonEquidistantlist[i])
            nonEquidistant = builder.EndVector()
        DaqContainerStart(builder)
        if self.name is not None:
            DaqContainerAddName(builder, name)
        if self.tags is not None:
            DaqContainerAddTags(builder, tags)
        if self.equidistant is not None:
            DaqContainerAddEquidistant(builder, equidistant)
        if self.nonEquidistant is not None:
            DaqContainerAddNonEquidistant(builder, nonEquidistant)
        daqContainer = DaqContainerEnd(builder)
        return daqContainer
