# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_command_option_string_choice_response import ApplicationCommandOptionStringChoiceResponse
from typing import Optional, Set
from typing_extensions import Self

class ApplicationCommandStringOptionResponse(BaseModel):
    """
    ApplicationCommandStringOptionResponse
    """ # noqa: E501
    type: StrictInt
    name: StrictStr
    name_localized: Optional[StrictStr] = None
    name_localizations: Optional[Dict[str, StrictStr]] = None
    description: StrictStr
    description_localized: Optional[StrictStr] = None
    description_localizations: Optional[Dict[str, StrictStr]] = None
    required: Optional[StrictBool] = None
    autocomplete: Optional[StrictBool] = None
    choices: Optional[List[ApplicationCommandOptionStringChoiceResponse]] = None
    min_length: Optional[StrictInt] = None
    max_length: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["type", "name", "name_localized", "name_localizations", "description", "description_localized", "description_localizations", "required", "autocomplete", "choices", "min_length", "max_length"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationCommandStringOptionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in choices (list)
        _items = []
        if self.choices:
            for _item_choices in self.choices:
                if _item_choices:
                    _items.append(_item_choices.to_dict())
            _dict['choices'] = _items
        # set to None if name_localized (nullable) is None
        # and model_fields_set contains the field
        if self.name_localized is None and "name_localized" in self.model_fields_set:
            _dict['name_localized'] = None

        # set to None if description_localized (nullable) is None
        # and model_fields_set contains the field
        if self.description_localized is None and "description_localized" in self.model_fields_set:
            _dict['description_localized'] = None

        # set to None if required (nullable) is None
        # and model_fields_set contains the field
        if self.required is None and "required" in self.model_fields_set:
            _dict['required'] = None

        # set to None if autocomplete (nullable) is None
        # and model_fields_set contains the field
        if self.autocomplete is None and "autocomplete" in self.model_fields_set:
            _dict['autocomplete'] = None

        # set to None if choices (nullable) is None
        # and model_fields_set contains the field
        if self.choices is None and "choices" in self.model_fields_set:
            _dict['choices'] = None

        # set to None if min_length (nullable) is None
        # and model_fields_set contains the field
        if self.min_length is None and "min_length" in self.model_fields_set:
            _dict['min_length'] = None

        # set to None if max_length (nullable) is None
        # and model_fields_set contains the field
        if self.max_length is None and "max_length" in self.model_fields_set:
            _dict['max_length'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationCommandStringOptionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "name": obj.get("name"),
            "name_localized": obj.get("name_localized"),
            "name_localizations": obj.get("name_localizations"),
            "description": obj.get("description"),
            "description_localized": obj.get("description_localized"),
            "description_localizations": obj.get("description_localizations"),
            "required": obj.get("required"),
            "autocomplete": obj.get("autocomplete"),
            "choices": [ApplicationCommandOptionStringChoiceResponse.from_dict(_item) for _item in obj["choices"]] if obj.get("choices") is not None else None,
            "min_length": obj.get("min_length"),
            "max_length": obj.get("max_length")
        })
        return _obj


