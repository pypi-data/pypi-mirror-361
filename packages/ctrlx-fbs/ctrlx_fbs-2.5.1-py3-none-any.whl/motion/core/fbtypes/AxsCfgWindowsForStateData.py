# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# all configured cyclic status data windows for an axis
class AxsCfgWindowsForStateData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgWindowsForStateData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgWindowsForStateData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgWindowsForStateData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # window for standstill
    # AxsCfgWindowsForStateData
    def Standstill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # window for inVel
    # AxsCfgWindowsForStateData
    def InVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # window for inPos
    # AxsCfgWindowsForStateData
    def InPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # window for inTrq
    # AxsCfgWindowsForStateData
    def InTrq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of standstill
    # AxsCfgWindowsForStateData
    def StandstillUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of inVel
    # AxsCfgWindowsForStateData
    def InVelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of inPos
    # AxsCfgWindowsForStateData
    def InPosUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of inTrq
    # AxsCfgWindowsForStateData
    def InTrqUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgWindowsForStateDataStart(builder): builder.StartObject(8)
def Start(builder):
    return AxsCfgWindowsForStateDataStart(builder)
def AxsCfgWindowsForStateDataAddStandstill(builder, standstill): builder.PrependFloat64Slot(0, standstill, 0.0)
def AddStandstill(builder, standstill):
    return AxsCfgWindowsForStateDataAddStandstill(builder, standstill)
def AxsCfgWindowsForStateDataAddInVel(builder, inVel): builder.PrependFloat64Slot(1, inVel, 0.0)
def AddInVel(builder, inVel):
    return AxsCfgWindowsForStateDataAddInVel(builder, inVel)
def AxsCfgWindowsForStateDataAddInPos(builder, inPos): builder.PrependFloat64Slot(2, inPos, 0.0)
def AddInPos(builder, inPos):
    return AxsCfgWindowsForStateDataAddInPos(builder, inPos)
def AxsCfgWindowsForStateDataAddInTrq(builder, inTrq): builder.PrependFloat64Slot(3, inTrq, 0.0)
def AddInTrq(builder, inTrq):
    return AxsCfgWindowsForStateDataAddInTrq(builder, inTrq)
def AxsCfgWindowsForStateDataAddStandstillUnit(builder, standstillUnit): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(standstillUnit), 0)
def AddStandstillUnit(builder, standstillUnit):
    return AxsCfgWindowsForStateDataAddStandstillUnit(builder, standstillUnit)
def AxsCfgWindowsForStateDataAddInVelUnit(builder, inVelUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(inVelUnit), 0)
def AddInVelUnit(builder, inVelUnit):
    return AxsCfgWindowsForStateDataAddInVelUnit(builder, inVelUnit)
def AxsCfgWindowsForStateDataAddInPosUnit(builder, inPosUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(inPosUnit), 0)
def AddInPosUnit(builder, inPosUnit):
    return AxsCfgWindowsForStateDataAddInPosUnit(builder, inPosUnit)
def AxsCfgWindowsForStateDataAddInTrqUnit(builder, inTrqUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(inTrqUnit), 0)
def AddInTrqUnit(builder, inTrqUnit):
    return AxsCfgWindowsForStateDataAddInTrqUnit(builder, inTrqUnit)
def AxsCfgWindowsForStateDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgWindowsForStateDataEnd(builder)

class AxsCfgWindowsForStateDataT(object):

    # AxsCfgWindowsForStateDataT
    def __init__(self):
        self.standstill = 0.0  # type: float
        self.inVel = 0.0  # type: float
        self.inPos = 0.0  # type: float
        self.inTrq = 0.0  # type: float
        self.standstillUnit = None  # type: str
        self.inVelUnit = None  # type: str
        self.inPosUnit = None  # type: str
        self.inTrqUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgWindowsForStateData = AxsCfgWindowsForStateData()
        axsCfgWindowsForStateData.Init(buf, pos)
        return cls.InitFromObj(axsCfgWindowsForStateData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgWindowsForStateData):
        x = AxsCfgWindowsForStateDataT()
        x._UnPack(axsCfgWindowsForStateData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.standstill == other.standstill and \
            self.inVel == other.inVel and \
            self.inPos == other.inPos and \
            self.inTrq == other.inTrq and \
            self.standstillUnit == other.standstillUnit and \
            self.inVelUnit == other.inVelUnit and \
            self.inPosUnit == other.inPosUnit and \
            self.inTrqUnit == other.inTrqUnit

    # AxsCfgWindowsForStateDataT
    def _UnPack(self, axsCfgWindowsForStateData):
        if axsCfgWindowsForStateData is None:
            return
        self.standstill = axsCfgWindowsForStateData.Standstill()
        self.inVel = axsCfgWindowsForStateData.InVel()
        self.inPos = axsCfgWindowsForStateData.InPos()
        self.inTrq = axsCfgWindowsForStateData.InTrq()
        self.standstillUnit = axsCfgWindowsForStateData.StandstillUnit()
        self.inVelUnit = axsCfgWindowsForStateData.InVelUnit()
        self.inPosUnit = axsCfgWindowsForStateData.InPosUnit()
        self.inTrqUnit = axsCfgWindowsForStateData.InTrqUnit()

    # AxsCfgWindowsForStateDataT
    def Pack(self, builder):
        if self.standstillUnit is not None:
            standstillUnit = builder.CreateString(self.standstillUnit)
        if self.inVelUnit is not None:
            inVelUnit = builder.CreateString(self.inVelUnit)
        if self.inPosUnit is not None:
            inPosUnit = builder.CreateString(self.inPosUnit)
        if self.inTrqUnit is not None:
            inTrqUnit = builder.CreateString(self.inTrqUnit)
        AxsCfgWindowsForStateDataStart(builder)
        AxsCfgWindowsForStateDataAddStandstill(builder, self.standstill)
        AxsCfgWindowsForStateDataAddInVel(builder, self.inVel)
        AxsCfgWindowsForStateDataAddInPos(builder, self.inPos)
        AxsCfgWindowsForStateDataAddInTrq(builder, self.inTrq)
        if self.standstillUnit is not None:
            AxsCfgWindowsForStateDataAddStandstillUnit(builder, standstillUnit)
        if self.inVelUnit is not None:
            AxsCfgWindowsForStateDataAddInVelUnit(builder, inVelUnit)
        if self.inPosUnit is not None:
            AxsCfgWindowsForStateDataAddInPosUnit(builder, inPosUnit)
        if self.inTrqUnit is not None:
            AxsCfgWindowsForStateDataAddInTrqUnit(builder, inTrqUnit)
        axsCfgWindowsForStateData = AxsCfgWindowsForStateDataEnd(builder)
        return axsCfgWindowsForStateData
