#!/usr/bin/env python3
"""
Test script to verify the chain logging fixes work correctly.
"""

import subprocess
import tempfile
import time
from pathlib import Path


def test_fixed_chain_logging():
    """Test that the fixes for chain logging work correctly."""

    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        logs_dir = temp_path / "logs"
        scripts_dir = temp_path / "scripts"
        logs_dir.mkdir()
        scripts_dir.mkdir()

        # Create test scripts
        script1 = scripts_dir / "test1.sh"
        script1.write_text("""#!/bin/bash
echo "Test script 1 starting"
echo "Test script 1 line 1"
echo "Test script 1 line 2"
echo "Test script 1 finished"
""")
        script1.chmod(0o755)

        script2 = scripts_dir / "test2.sh"
        script2.write_text("""#!/bin/bash
echo "Test script 2 starting"
echo "Test script 2 line 1"
echo "Test script 2 line 2"
echo "Test script 2 finished"
""")
        script2.chmod(0o755)

        # Test the fixed command structure
        session_name = "fixed_chain_test"
        log_file = logs_dir / f"{session_name}.log"

        # Simulate what the fixed app would generate
        chain_cmd = f"echo '---- Running test1.sh ----' && bash {script1} && echo '---- Running test2.sh ----' && bash {script2}"

        # Use the fixed logging structure with parentheses and printf
        full_cmd = (
            f"""printf "\\n=== SCRIPT STARTING at %s ===\\n" "$(date)" > '{log_file}' """
            f"""&& ({chain_cmd}) >> '{log_file}' 2>&1 """
            f"""&& printf "\\n=== SCRIPT FINISHED at %s ===\\n" "$(date)" >> '{log_file}' """
            f"""&& touch '{logs_dir}/{session_name}.finished'"""
        )

        print(f"Testing fixed command: {full_cmd}")

        # Execute the command
        result = subprocess.run(full_cmd, shell=True, capture_output=True, text=True)
        print(f"Return code: {result.returncode}")
        print(f"Stdout: {result.stdout}")
        print(f"Stderr: {result.stderr}")

        # Check results
        assert log_file.exists(), "Log file should exist"
        finished_file = logs_dir / f"{session_name}.finished"
        assert finished_file.exists(), "Finished marker should exist"

        content = log_file.read_text()
        print(f"Fixed chain log content:\n{content}")

        # Verify all script outputs are captured
        assert "=== SCRIPT STARTING at" in content
        assert "=== SCRIPT FINISHED at" in content
        assert "---- Running test1.sh ----" in content
        assert "Test script 1 starting" in content
        assert "Test script 1 line 1" in content
        assert "Test script 1 line 2" in content
        assert "Test script 1 finished" in content
        assert "---- Running test2.sh ----" in content
        assert "Test script 2 starting" in content
        assert "Test script 2 line 1" in content
        assert "Test script 2 line 2" in content
        assert "Test script 2 finished" in content

        print("‚úÖ All tests passed! Chain logging is now working correctly.")

        return True


def test_tmux_integration():
    """Test with actual tmux if available."""
    try:
        subprocess.run(["tmux", "-V"], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ö†Ô∏è  tmux not available, skipping integration test")
        return True

    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        logs_dir = temp_path / "logs"
        scripts_dir = temp_path / "scripts"
        logs_dir.mkdir()
        scripts_dir.mkdir()

        # Create test script
        script1 = scripts_dir / "tmux_test.sh"
        script1.write_text("""#!/bin/bash
echo "Tmux test script starting"
sleep 1
echo "Tmux test script output"
echo "Tmux test script finished"
""")
        script1.chmod(0o755)

        session_name = "tmux_chain_test"
        log_file = logs_dir / f"{session_name}.log"

        # Use the fixed tmux command structure
        chain_cmd = f"bash {script1}"
        tmux_cmd = (
            f"""printf "\\n=== SCRIPT STARTING at %s ===\\n" "$(date)" > '{log_file}' """
            f"""&& ({chain_cmd}) >> '{log_file}' 2>&1 """
            f"""&& printf "\\n=== SCRIPT FINISHED at %s ===\\n" "$(date)" >> '{log_file}' """
            f"""&& touch '{logs_dir}/{session_name}.finished'"""
        )

        # Start tmux session
        result = subprocess.run(["tmux", "new-session", "-d", "-s", session_name, tmux_cmd], capture_output=True, text=True)

        print(f"Tmux session start result: {result.returncode}")
        if result.stderr:
            print(f"Tmux stderr: {result.stderr}")

        # Wait for completion
        time.sleep(3)

        # Check results
        if log_file.exists():
            content = log_file.read_text()
            print(f"Tmux integration test log:\n{content}")

            # Verify tmux logging works
            assert "Tmux test script starting" in content
            assert "Tmux test script output" in content
            assert "Tmux test script finished" in content
            print("‚úÖ Tmux integration test passed!")
        else:
            print("‚ùå Tmux integration test failed - no log file created")

        # Clean up
        try:
            subprocess.run(["tmux", "kill-session", "-t", session_name], capture_output=True, check=False)
        except Exception:
            pass

        return log_file.exists()


if __name__ == "__main__":
    print("Testing fixed chain logging implementation...")

    success1 = test_fixed_chain_logging()
    success2 = test_tmux_integration()

    if success1 and success2:
        print("\nüéâ All chain logging fixes verified successfully!")
        print("\nFixes implemented:")
        print("1. ‚úÖ Grouped chained commands in parentheses for proper output redirection")
        print("2. ‚úÖ Replaced 'echo -e' with 'printf' for better shell compatibility")
        print("3. ‚úÖ Fixed date formatting and variable expansion")
        print("4. ‚úÖ Ensured all scripts in a chain log to the same file")
    else:
        print("\n‚ùå Some tests failed")
        exit(1)
