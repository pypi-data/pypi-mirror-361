# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# single result of the validation of a calculation pipeline
class SinglePipelineValidation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SinglePipelineValidation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSinglePipelineValidation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SinglePipelineValidation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # main diagnosis code
    # SinglePipelineValidation
    def MainDiag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # detail diagnosis code
    # SinglePipelineValidation
    def DetailDiag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # URI of the faulty instance
    # SinglePipelineValidation
    def Uri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # additional infomation
    # SinglePipelineValidation
    def AddInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SinglePipelineValidationStart(builder): builder.StartObject(4)
def Start(builder):
    return SinglePipelineValidationStart(builder)
def SinglePipelineValidationAddMainDiag(builder, mainDiag): builder.PrependUint32Slot(0, mainDiag, 0)
def AddMainDiag(builder, mainDiag):
    return SinglePipelineValidationAddMainDiag(builder, mainDiag)
def SinglePipelineValidationAddDetailDiag(builder, detailDiag): builder.PrependUint32Slot(1, detailDiag, 0)
def AddDetailDiag(builder, detailDiag):
    return SinglePipelineValidationAddDetailDiag(builder, detailDiag)
def SinglePipelineValidationAddUri(builder, uri): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(uri), 0)
def AddUri(builder, uri):
    return SinglePipelineValidationAddUri(builder, uri)
def SinglePipelineValidationAddAddInfo(builder, addInfo): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(addInfo), 0)
def AddAddInfo(builder, addInfo):
    return SinglePipelineValidationAddAddInfo(builder, addInfo)
def SinglePipelineValidationEnd(builder): return builder.EndObject()
def End(builder):
    return SinglePipelineValidationEnd(builder)

class SinglePipelineValidationT(object):

    # SinglePipelineValidationT
    def __init__(self):
        self.mainDiag = 0  # type: int
        self.detailDiag = 0  # type: int
        self.uri = None  # type: str
        self.addInfo = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        singlePipelineValidation = SinglePipelineValidation()
        singlePipelineValidation.Init(buf, pos)
        return cls.InitFromObj(singlePipelineValidation)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, singlePipelineValidation):
        x = SinglePipelineValidationT()
        x._UnPack(singlePipelineValidation)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mainDiag == other.mainDiag and \
            self.detailDiag == other.detailDiag and \
            self.uri == other.uri and \
            self.addInfo == other.addInfo

    # SinglePipelineValidationT
    def _UnPack(self, singlePipelineValidation):
        if singlePipelineValidation is None:
            return
        self.mainDiag = singlePipelineValidation.MainDiag()
        self.detailDiag = singlePipelineValidation.DetailDiag()
        self.uri = singlePipelineValidation.Uri()
        self.addInfo = singlePipelineValidation.AddInfo()

    # SinglePipelineValidationT
    def Pack(self, builder):
        if self.uri is not None:
            uri = builder.CreateString(self.uri)
        if self.addInfo is not None:
            addInfo = builder.CreateString(self.addInfo)
        SinglePipelineValidationStart(builder)
        SinglePipelineValidationAddMainDiag(builder, self.mainDiag)
        SinglePipelineValidationAddDetailDiag(builder, self.detailDiag)
        if self.uri is not None:
            SinglePipelineValidationAddUri(builder, uri)
        if self.addInfo is not None:
            SinglePipelineValidationAddAddInfo(builder, addInfo)
        singlePipelineValidation = SinglePipelineValidationEnd(builder)
        return singlePipelineValidation
