# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# a single parameter of a calculation step, when writing it, only name value and unit should be set.
class AxsCfgCalcStepParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgCalcStepParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgCalcStepParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgCalcStepParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the parameter
    # AxsCfgCalcStepParam
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # value of the parameter
    # AxsCfgCalcStepParam
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the parameter
    # AxsCfgCalcStepParam
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # what the parameter of the calculation step does, only for reading
    # AxsCfgCalcStepParam
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # is this parameter mandatory, only for reading
    # AxsCfgCalcStepParam
    def Mandatory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # type of the parameter, only for reading
    # AxsCfgCalcStepParam
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AxsCfgCalcStepParamStart(builder): builder.StartObject(6)
def Start(builder):
    return AxsCfgCalcStepParamStart(builder)
def AxsCfgCalcStepParamAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return AxsCfgCalcStepParamAddName(builder, name)
def AxsCfgCalcStepParamAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return AxsCfgCalcStepParamAddValue(builder, value)
def AxsCfgCalcStepParamAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def AddUnit(builder, unit):
    return AxsCfgCalcStepParamAddUnit(builder, unit)
def AxsCfgCalcStepParamAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return AxsCfgCalcStepParamAddDescription(builder, description)
def AxsCfgCalcStepParamAddMandatory(builder, mandatory): builder.PrependBoolSlot(4, mandatory, 0)
def AddMandatory(builder, mandatory):
    return AxsCfgCalcStepParamAddMandatory(builder, mandatory)
def AxsCfgCalcStepParamAddType(builder, type): builder.PrependInt8Slot(5, type, 0)
def AddType(builder, type):
    return AxsCfgCalcStepParamAddType(builder, type)
def AxsCfgCalcStepParamEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgCalcStepParamEnd(builder)

class AxsCfgCalcStepParamT(object):

    # AxsCfgCalcStepParamT
    def __init__(self):
        self.name = None  # type: str
        self.value = None  # type: str
        self.unit = None  # type: str
        self.description = None  # type: str
        self.mandatory = False  # type: bool
        self.type = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgCalcStepParam = AxsCfgCalcStepParam()
        axsCfgCalcStepParam.Init(buf, pos)
        return cls.InitFromObj(axsCfgCalcStepParam)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgCalcStepParam):
        x = AxsCfgCalcStepParamT()
        x._UnPack(axsCfgCalcStepParam)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.value == other.value and \
            self.unit == other.unit and \
            self.description == other.description and \
            self.mandatory == other.mandatory and \
            self.type == other.type

    # AxsCfgCalcStepParamT
    def _UnPack(self, axsCfgCalcStepParam):
        if axsCfgCalcStepParam is None:
            return
        self.name = axsCfgCalcStepParam.Name()
        self.value = axsCfgCalcStepParam.Value()
        self.unit = axsCfgCalcStepParam.Unit()
        self.description = axsCfgCalcStepParam.Description()
        self.mandatory = axsCfgCalcStepParam.Mandatory()
        self.type = axsCfgCalcStepParam.Type()

    # AxsCfgCalcStepParamT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.value is not None:
            value = builder.CreateString(self.value)
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        if self.description is not None:
            description = builder.CreateString(self.description)
        AxsCfgCalcStepParamStart(builder)
        if self.name is not None:
            AxsCfgCalcStepParamAddName(builder, name)
        if self.value is not None:
            AxsCfgCalcStepParamAddValue(builder, value)
        if self.unit is not None:
            AxsCfgCalcStepParamAddUnit(builder, unit)
        if self.description is not None:
            AxsCfgCalcStepParamAddDescription(builder, description)
        AxsCfgCalcStepParamAddMandatory(builder, self.mandatory)
        AxsCfgCalcStepParamAddType(builder, self.type)
        axsCfgCalcStepParam = AxsCfgCalcStepParamEnd(builder)
        return axsCfgCalcStepParam
