# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# information on a single data item
class DataItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DataItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # URI of the data item
    # DataItem
    def Uri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # value of the data item at the time of the request (when of type double)
    # DataItem
    def DoubleVal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # value of the data item at the time of the request (when of type uint64)
    # DataItem
    def Uint64Val(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # unit of the value (or empty for unit-less values)
    # DataItem
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # type of the data item
    # DataItem
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # result of the read-value-call (value is only set on STS_OK)
    # DataItem
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DataItemStart(builder): builder.StartObject(6)
def Start(builder):
    return DataItemStart(builder)
def DataItemAddUri(builder, uri): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(uri), 0)
def AddUri(builder, uri):
    return DataItemAddUri(builder, uri)
def DataItemAddDoubleVal(builder, doubleVal): builder.PrependFloat64Slot(1, doubleVal, 0.0)
def AddDoubleVal(builder, doubleVal):
    return DataItemAddDoubleVal(builder, doubleVal)
def DataItemAddUint64Val(builder, uint64Val): builder.PrependUint64Slot(2, uint64Val, 0)
def AddUint64Val(builder, uint64Val):
    return DataItemAddUint64Val(builder, uint64Val)
def DataItemAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def AddUnit(builder, unit):
    return DataItemAddUnit(builder, unit)
def DataItemAddType(builder, type): builder.PrependInt8Slot(4, type, 0)
def AddType(builder, type):
    return DataItemAddType(builder, type)
def DataItemAddStatus(builder, status): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)
def AddStatus(builder, status):
    return DataItemAddStatus(builder, status)
def DataItemEnd(builder): return builder.EndObject()
def End(builder):
    return DataItemEnd(builder)

class DataItemT(object):

    # DataItemT
    def __init__(self):
        self.uri = None  # type: str
        self.doubleVal = 0.0  # type: float
        self.uint64Val = 0  # type: int
        self.unit = None  # type: str
        self.type = 0  # type: int
        self.status = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataItem = DataItem()
        dataItem.Init(buf, pos)
        return cls.InitFromObj(dataItem)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataItem):
        x = DataItemT()
        x._UnPack(dataItem)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.uri == other.uri and \
            self.doubleVal == other.doubleVal and \
            self.uint64Val == other.uint64Val and \
            self.unit == other.unit and \
            self.type == other.type and \
            self.status == other.status

    # DataItemT
    def _UnPack(self, dataItem):
        if dataItem is None:
            return
        self.uri = dataItem.Uri()
        self.doubleVal = dataItem.DoubleVal()
        self.uint64Val = dataItem.Uint64Val()
        self.unit = dataItem.Unit()
        self.type = dataItem.Type()
        self.status = dataItem.Status()

    # DataItemT
    def Pack(self, builder):
        if self.uri is not None:
            uri = builder.CreateString(self.uri)
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        if self.status is not None:
            status = builder.CreateString(self.status)
        DataItemStart(builder)
        if self.uri is not None:
            DataItemAddUri(builder, uri)
        DataItemAddDoubleVal(builder, self.doubleVal)
        DataItemAddUint64Val(builder, self.uint64Val)
        if self.unit is not None:
            DataItemAddUnit(builder, unit)
        DataItemAddType(builder, self.type)
        if self.status is not None:
            DataItemAddStatus(builder, status)
        dataItem = DataItemEnd(builder)
        return dataItem
