# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.1.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class CalculatedField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'CalculatedFieldId',
        'created_time': 'int',
        'tenant_id': 'TenantId',
        'entity_id': 'EntityId',
        'type': 'str',
        'name': 'str',
        'debug_mode': 'bool',
        'debug_settings': 'DebugSettings',
        'configuration_version': 'int',
        'configuration': 'object',
        'version': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_time': 'createdTime',
        'tenant_id': 'tenantId',
        'entity_id': 'entityId',
        'type': 'type',
        'name': 'name',
        'debug_mode': 'debugMode',
        'debug_settings': 'debugSettings',
        'configuration_version': 'configurationVersion',
        'configuration': 'configuration',
        'version': 'version'
    }

    def __init__(self, id=None, created_time=None, tenant_id=None, entity_id=None, type=None, name=None, debug_mode=None, debug_settings=None, configuration_version=None, configuration=None, version=None):  # noqa: E501
        """CalculatedField - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_time = None
        self._tenant_id = None
        self._entity_id = None
        self._type = None
        self._name = None
        self._debug_mode = None
        self._debug_settings = None
        self._configuration_version = None
        self._configuration = None
        self._version = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_time is not None:
            self.created_time = created_time
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if entity_id is not None:
            self.entity_id = entity_id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if debug_mode is not None:
            self.debug_mode = debug_mode
        if debug_settings is not None:
            self.debug_settings = debug_settings
        if configuration_version is not None:
            self.configuration_version = configuration_version
        if configuration is not None:
            self.configuration = configuration
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this CalculatedField.  # noqa: E501

        JSON object with the Calculated Field Id. Referencing non-existing Calculated Field Id will cause error.  # noqa: E501

        :return: The id of this CalculatedField.  # noqa: E501
        :rtype: CalculatedFieldId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalculatedField.

        JSON object with the Calculated Field Id. Referencing non-existing Calculated Field Id will cause error.  # noqa: E501

        :param id: The id of this CalculatedField.  # noqa: E501
        :type: CalculatedFieldId
        """

        self._id = id

    @property
    def created_time(self):
        """Gets the created_time of this CalculatedField.  # noqa: E501

        Timestamp of the calculated field creation, in milliseconds  # noqa: E501

        :return: The created_time of this CalculatedField.  # noqa: E501
        :rtype: object
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CalculatedField.

        Timestamp of the calculated field creation, in milliseconds  # noqa: E501

        :param created_time: The created_time of this CalculatedField.  # noqa: E501
        :type: object
        """

        self._created_time = created_time

    @property
    def tenant_id(self):
        """Gets the tenant_id of this CalculatedField.  # noqa: E501


        :return: The tenant_id of this CalculatedField.  # noqa: E501
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this CalculatedField.


        :param tenant_id: The tenant_id of this CalculatedField.  # noqa: E501
        :type: TenantId
        """

        self._tenant_id = tenant_id

    @property
    def entity_id(self):
        """Gets the entity_id of this CalculatedField.  # noqa: E501


        :return: The entity_id of this CalculatedField.  # noqa: E501
        :rtype: EntityId
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this CalculatedField.


        :param entity_id: The entity_id of this CalculatedField.  # noqa: E501
        :type: EntityId
        """

        self._entity_id = entity_id

    @property
    def type(self):
        """Gets the type of this CalculatedField.  # noqa: E501


        :return: The type of this CalculatedField.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CalculatedField.


        :param type: The type of this CalculatedField.  # noqa: E501
        :type: object
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this CalculatedField.  # noqa: E501

        User defined name of the calculated field.  # noqa: E501

        :return: The name of this CalculatedField.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalculatedField.

        User defined name of the calculated field.  # noqa: E501

        :param name: The name of this CalculatedField.  # noqa: E501
        :type: object
        """

        self._name = name

    @property
    def debug_mode(self):
        """Gets the debug_mode of this CalculatedField.  # noqa: E501


        :return: The debug_mode of this CalculatedField.  # noqa: E501
        :rtype: object
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this CalculatedField.


        :param debug_mode: The debug_mode of this CalculatedField.  # noqa: E501
        :type: object
        """

        self._debug_mode = debug_mode

    @property
    def debug_settings(self):
        """Gets the debug_settings of this CalculatedField.  # noqa: E501

        Debug settings object.  # noqa: E501

        :return: The debug_settings of this CalculatedField.  # noqa: E501
        :rtype: DebugSettings
        """
        return self._debug_settings

    @debug_settings.setter
    def debug_settings(self, debug_settings):
        """Sets the debug_settings of this CalculatedField.

        Debug settings object.  # noqa: E501

        :param debug_settings: The debug_settings of this CalculatedField.  # noqa: E501
        :type: DebugSettings
        """

        self._debug_settings = debug_settings

    @property
    def configuration_version(self):
        """Gets the configuration_version of this CalculatedField.  # noqa: E501

        Version of calculated field configuration.  # noqa: E501

        :return: The configuration_version of this CalculatedField.  # noqa: E501
        :rtype: object
        """
        return self._configuration_version

    @configuration_version.setter
    def configuration_version(self, configuration_version):
        """Sets the configuration_version of this CalculatedField.

        Version of calculated field configuration.  # noqa: E501

        :param configuration_version: The configuration_version of this CalculatedField.  # noqa: E501
        :type: object
        """

        self._configuration_version = configuration_version

    @property
    def configuration(self):
        """Gets the configuration of this CalculatedField.  # noqa: E501


        :return: The configuration of this CalculatedField.  # noqa: E501
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CalculatedField.


        :param configuration: The configuration of this CalculatedField.  # noqa: E501
        :type: object
        """

        self._configuration = configuration

    @property
    def version(self):
        """Gets the version of this CalculatedField.  # noqa: E501


        :return: The version of this CalculatedField.  # noqa: E501
        :rtype: object
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CalculatedField.


        :param version: The version of this CalculatedField.  # noqa: E501
        :type: object
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalculatedField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculatedField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
