.. doctest docs/plugins/invoicing.rst
.. _xl.specs.invoicing:

======================================
``invoicing`` : Generating invoices
======================================

.. currentmodule:: lino_xl.lib.invoicing

The :mod:`lino_xl.lib.invoicing` plugin adds functionality for **invoicing**,
i.e. automatically generating invoices.

This document assumes that you have read :ref:`ug.plugins.invoicing`,
:doc:`trading` and :doc:`/specs/accounting`.

This document describes the general aspects of invoicing and how applications
can handle this topic.  More specific documentation is in
:doc:`/specs/voga/invoicing`,
:doc:`/apps/noi/invoicing` and
:doc:`/specs/tera/invoicing`.



.. contents::
   :depth: 1
   :local:

.. include:: /../docs/shared/include/tested.rst

>>> from lino_book.projects.voga2.startup import *
>>> ses = rt.login("robin")
>>> translation.activate('en')


API
===

This plugin requires the :mod:`lino_xl.lib.trading` plugin.

>>> dd.plugins.invoicing.needs_plugins
['lino_xl.lib.trading']

This plugin adds one main menu command per invoicing task, for example

- :menuselection:`Sales --> Make Sales invoices (SLS)`
- :menuselection:`Sales --> Make Service reports (SRV)`


Invoice generators
==================

In order to be able to automatically generate invoices (or similar trade
documents), an application must have at least one model that acts as an
:term:`invoice generator`.

.. glossary::

  invoice generator

    A database object that can potentially generate invoice items.

As an :term:`application developer` you define an :term:`invoice generator` by
having a database model inherit from :class:`InvoiceGenerator`.  The following
models inherit from :class:`InvoiceGenerator`, and we recommend to look at their
source code:

- :class:`lino_xl.lib.trading.InvoiceItem`
- :class:`lino_xl.lib.orders.Order`
- :class:`lino_xl.lib.working.Session`
- :class:`lino_voga.lib.courses.Enrolment`
- :class:`lino_voga.lib.rooms.Bookings`


Reference
=========


.. class:: InvoicingTargetVoucher

    Mixin for Django models that can be used as
    :setting:`invoicing.voucher_model`.

    .. attribute:: invoicing_min_date

      The start date of the period covered by this invoice.

    .. attribute:: invoicing_max_date

      The end date of the period covered by this invoice.


.. class:: InvoicingTargetItem

  .. attribute:: invoiceable

    A :term:`generic foreign key` pointing to the generator that caused this
    item to be generated.


.. class:: InvoiceGenerator

    Mixin for Django models that represent an :term:`invoice generator`.

    The :term:`application developer` must implement a method
    :meth:`get_invoiceable_events`.

    Methods and class attributes:

    .. attribute:: default_invoiceable_qty

        The default value to return by :meth:`get_invoiceable_qty`.

    .. method:: get_wanted_invoice_items(self, info, invoice, ar)

        Yield one or several invoice items generated by this object.

        These must be instances of :class:`lino_xl.lib.trading.InvoiceItem`.

    .. method:: get_invoiceable_events(self, start_date, max_date)

        Return a Django query that represents the :term:`invoicing events
        <invoicing event>`.

        The query must be sorted in the order they are to be considered for
        invoicing.

    .. method:: get_invoiceable_event_formatter(self)

        Return a callable that formats an :term:`invoicing event` as an HTML
        etree element.

    .. method:: get_generators_for_plan(cls, plan, partner=None)

        Return a queryset of the database objects (of this model) that
        potentially will generate an invoice item.

        This is a pre-selection, not every object must actually produce an
        invoice item.

        If a `partner` is given, use it as an additional filter condition. Be
        aware that the :attr:`partner` here is the :term:`invoice recipient`,
        not the :term:`invoiceable partner`.  So when filtering on the partner,
        this must add a "reverse mirroring" of the way we get the :term:`invoice
        recipient` from the :term:`invoiceable partner`. For example::

          if partner:
              q1 = models.Q(
                  pupil__salesrule__invoice_recipient__isnull=True, pupil=pupil)
              q2 = models.Q(pupil__salesrule__invoice_recipient=partner)
              qs = qs.filter(models.Q(q1 | q2))


    .. method:: get_invoiceable_partner(self, plan)

      Return the :term:`invoiceable partner`.

      To be implemented by subclasses.

    .. method:: get_invoiceable_product(self, plan)

      Return the :term:`product` to put into
      the generated :term:`invoice item`.

      To be implemented by subclasses.

      >>> obj = rt.models.courses.Enrolment.objects.all()[0]
      >>> print(obj.get_invoiceable_product())
      Journeys

    .. method:: get_invoiceable_qty(self)

      Return the quantity to use for the generated :term:`invoice item`.

      May be overridden by subclasses.
      The default implementation simply returns :attr:`default_invoiceable_qty`.

      >>> obj = rt.models.courses.Enrolment.objects.all()[0]
      >>> print(obj.get_invoiceable_qty())
      1

    .. method:: get_invoiceable_title(self, invoice=None)

      Return the title to put into the generated :term:`invoice item`.

      May be overridden by subclasses.

    .. attribute:: invoicings

        A `GenericRelation
        <https://docs.djangoproject.com/en/5.0/ref/contrib/contenttypes/#reverse-generic-relations>`_
        to all :term:`invoice items <invoice item>` pointing to this
        :term:`invoiceable`.

        This is preferred over :meth:`get_invoicings`.

    .. method:: get_invoicings(**kwargs)

        Get a queryset with the invoicings that point to this
        :term:`invoiceable`.

        This is deprecated. Preferred way is to use
        :attr:`invoicings`.

    .. method:: get_last_invoicing()

        Return the last invoicing that was created by this generator.
        According to the invoice's :attr:`voucher_date
        <lino_xl.lib.accounting.Voucher.voucher_date>`.

    .. method:: allow_group_invoices()

        Whether this is a grouping generator, i.e. the invoicings of which can
        be grouped together with those of other invoice generators into a same
        invoice.



.. class:: InvoicingInfo

    A volatile object in memory that holds information about a given
    :term:`invoicing event`.

    .. attribute:: generator

        The invoice generator this is about.

    .. attribute:: max_date

        The latest date of events considered when computing this.

    .. attribute:: invoicings

        Existing invoice items generated by this generator for earlier
        periods.

    .. attribute:: invoiced_qty

        Sum of quantities invoiced earlier.

    .. attribute:: invoiced_events

        Number of events invoiced earlier.

    .. attribute:: used_events

        A list of the "events" used for computing this.

    .. attribute:: invoiceable_product

        Which fee to apply. If this is `None`, no invoicing should get
        generated.


Plugin settings
===============

.. data:: short_invoiceable_label

  Short column heading for the
  :attr:`lino_xl.lib.trading.InvoiceItem.invoiceable` field.

.. setting:: invoicing.order_model

    The database model that represents an "invoicing order", a business document
    used by both partners as reference for invoicing.

    In Presto this is :class:`orders.Order <lino_xl.lib.orders.Order>`, in Noi
    this is :class:`subscriptions.Subscription
    <lino_xl.lib.subscriptions.Subscription>`.

.. setting:: invoicing.voucher_type
.. setting:: invoicing.voucher_model

.. setting:: invoicing.item_model

    The database model of the items of generated invoices.  Default value is
    :class:`trading.InvoiceItem <lino_xl.lib.trading.InvoiceItem>`.


.. setting:: invoicing.invoiceable_label

    The :attr:`verbose_name` forthe
    :attr:`InvoicingTargetItem.invoiceable` field.


Invoicing rules
===============

TODO: rename "flatrate" (the verbose name for :class:`Tariff`) to "invoicing
rule" or "invoicing asset".


Every product can have a **flatrate**.

.. class:: Tariff

    The Django model used to represent a *flatrate*.

    .. attribute:: number_of_events

        Number of :term:`invoicing events <invoicing event>` paid per invoicing.

        For example in :ref:`voga` when a customer buys one ticket of ten, they
        can attend to 10 sessions.

        Each time the customer buys a new flatrate, their asset increases by
        this number. The asset is what the customer did already pay for. When
        the asset is negative, Lino invoices the quantity needed to increase the
        asset to :attr:`min_asset`.

    .. attribute:: min_asset

        The minimum number of :term:`invoicing events <invoicing event>` a
        customer should pay in advance.

        Minimum quantity of :term:`invoicing events <invoicing event>` required
        to trigger an invoicing.

    .. attribute:: max_asset

        Maximum quantity of :term:`invoicing events <invoicing event>` to allow
        per invoicing.

        Never invoice more than this number of events (per invoicing period)



The invoicing plan
==================

.. class:: Plan

    The Django model used to represent an :term:`invoicing plan`.

    Inherits from :class:`lino.modlib.users.UserPlan`.

    .. rubric:: Database fields:

    .. attribute:: user

         The user who owns this :term:`invoicing plan`.

    .. attribute:: today

         The date to be used for the invoices to generate.

    .. attribute:: invoicing_task

        The :term:`invoicing task` for which this plan is to generate invoices.

        A pointer to :class:`Task`.

    .. attribute:: min_date

        Don't invoice events before this date.  May be empty.

    .. attribute:: max_date

        Don't invoice events after this date.  If this is empty, Lino will
        use the day before :attr:`today`.

    .. attribute:: partner

        Generate only for this partner.

    .. attribute:: order

        Generate only for this :term:`invoicing order`.


    .. rubric:: Row actions:

    .. attribute:: update_plan

        Update this plan (fill the list of suggestions).

    .. attribute:: execute_plan

        Execute this plan (create an invoice for each selected suggestion).

    .. method:: start_plan(user, **options)

        Start an invoicing plan for the given `user` on the database
        object defined by `k` and `v`. Where `k` is the name of the
        field used to select the plan (e.g. `'partner'` or
        `'journal'`) and `v` is the value for that field.

        This will either create a new plan, or check whether the
        currently existing plan for this user was for the same
        database object. If it was for another object, then clear all
        items.

    .. method:: fill_plan(ar)

        Add items to this plan, one for each invoice to generate.

        This also groups the invoiceables by their invoiceable
        partner.

        Note a case we had (20171007) : One enrolment for Alfons whose
        invoice_recipient points to Erna, a second enrolment for Erna
        directly. The first enrolment returned Erna as Partner, the
        second returned Erna as Pupil, so they were not grouped.

.. class:: Item

    The Django model used to represent a *item* of an *invoicing plan*.

    The items of an invoicing plan are called **suggestions**.

    .. attribute:: plan
    .. attribute:: partner
    .. attribute:: generator

      The invoice generator that suggests this.

      This is empty for items that were suggested by a grouping generator
      (:meth:`InvoiceGenerator.allow_group_invoices` returns True)
      (even when only one generator made this suggestion).

    .. attribute:: preview

        A textual preview of the invoiceable items to be included in
        the invoice.


    .. attribute:: amount
    .. attribute:: invoice

        The invoice that has been generated. This field is empty for
        new items. When an item has been executed, this field points
        to the generated invoice.

    .. attribute:: workflow_buttons

    The following fields are maybe not important:

    .. attribute:: first_date
    .. attribute:: last_date
    .. attribute:: number_of_invoiceables

    .. method:: create_invoice(ar):

        Create the invoice corresponding to this item of the plan.


.. class:: Plans
.. class:: MyPlans
.. class:: AllPlans
.. class:: Items
.. class:: ItemsByPlan
.. class:: InvoicingsByInvoiceable

.. class:: StartInvoicing

    Start an *invoicing plan* for the authenticated user.

    Base for :class:`StartInvoicingForPartner`.

    Inherits from :class:`lino.modlib.users.StartPlan` and just
    overrides the label.

.. class:: StartInvoicingByArea

    Start an invoicing plan for this area.

    This is installed onto the VouchersByJournal table of the
    VoucherType for the configured :attr:`voucher_model
    <lino_xl.lib.invoicing.Plugin.voucher_model>` as
    `start_invoicing`.


.. class:: StartInvoicingForPartner

    Start an :term:`invoicing plan` for this partner.

    This is installed onto the :class:`contacts.Partner
    <lino_xl.lib.contacts.Partner>` model as `start_invoicing`.

.. class:: StartInvoicingForOrder

    Start an :term:`invoicing plan` for this :term:`invoicing order`.

.. class:: ExecutePlan

   Execute this :term:`invoicing plan`.

   Create an invoice for each selected :term:`invoicing suggestion`.

.. class:: ExecuteItem

    Create an invoice for this :term:`invoicing suggestion`.

.. class:: ToggleSelection

    Invert selection status for all :term:`invoicing suggestions <invoicing
    suggestion>`.


Invoicing tasks
===============

:term:`Invoicing tasks <invoicing task>` are used in :ref:`presto` to
differentiate between activities for which invoicing is often run manually based
on occasional work and those that are invoiced monthly automatically based on
regular work. In :ref:`tera` they might get used to separate the therapy centres
in different towns. In :ref:`noi` this is used to differentiate between
(monthly) service reports and (yearly) membership fees.

The application is responsible for selecting only invoiceables that belong to
the area of the current plan. For example :ref:`presto` does this by defining a
field :attr:`lino_presto.lib.cal.Room.invoicing_area`.

>>> rt.show(invoicing.Task) #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
===== =========================== ========== =========== =======================...===
 No.   Name                        Disabled   When        Status
----- --------------------------- ---------- ----------- -----------------------...---
 1     Make Sales invoices (SLS)   No         Every day   Scheduled to run at ...
===== =========================== ========== =========== =======================...===
<BLANKLINE>


.. class:: Task

    The Django model used to represent an :term:`invoicing task`.

    .. attribute:: procedure

      For invoicing tasks, this is always ``run_invoicing_tasks``.

      The :term:`background procedure` to use for this task.
      See :attr:`lino.modlib.linod.Runnable.procedure`.

    .. attribute:: target_journal

        The journal into which invoices are to be generated. Mandatory and
        unique.

.. class:: FollowUpRule

  The Django model used to represent an individual "follow-up rule" of an
  :term:`invoicing task`.

  .. attribute:: invoice_generator

    The :term:`invoice generator` to ask for items to invoice.

  .. attribute:: source_journal

    A :term:`journal` to ask for items to invoice.


Manually editing automatically generated invoices
=================================================

Resetting title and description of a generated invoice item
===========================================================

When the user sets `title` of an automatically generated invoice
item to an empty string, then Lino restores the default value for
both title and description


Invoice recipient
=================

An invoice can point to up to three partners:

- :term:`invoiceable partner`
- :term:`invoice recipient`
- delivery address : where to deliver the service or good

The :term:`invoice recipient` is the only partner to enter into the accounting.
On the other hand,
the :term:`invoiceable partner`
is the first and most important partner for
the users of the system.

That's why the :attr:`partner` attribute (field or
property) of an invoice points to the customer (or provider, if it's a purchase
document).  And the invoice recipient will differ from the customer only when
the :attr:`partner` has a :attr:`salesrule__invoice_recipient` field.  And
"delivery address" is just another custom field for those who want, it is not
needed by the :mod:`invoicing` plugin.


..
  >>> dbhash.check_virgin()
