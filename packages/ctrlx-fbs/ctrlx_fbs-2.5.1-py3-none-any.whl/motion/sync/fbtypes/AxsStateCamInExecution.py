# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# state information of the execution
class AxsStateCamInExecution(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsStateCamInExecution()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsStateCamInExecution(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsStateCamInExecution
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # currently active point table 
    # AxsStateCamInExecution
    def ActivePointTable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # the CamIn is waiting for the specified switching position
    # AxsStateCamInExecution
    def WaitForSwitchPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # the CamIn is waiting for the specified switch position for the gain factor
    # AxsStateCamInExecution
    def WaitForSwitchGain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # the one-time execution of the profile was completed (only for execution mode "SINGLE")
    # AxsStateCamInExecution
    def SingleExecutionDone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AxsStateCamInExecutionStart(builder): builder.StartObject(4)
def Start(builder):
    return AxsStateCamInExecutionStart(builder)
def AxsStateCamInExecutionAddActivePointTable(builder, activePointTable): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(activePointTable), 0)
def AddActivePointTable(builder, activePointTable):
    return AxsStateCamInExecutionAddActivePointTable(builder, activePointTable)
def AxsStateCamInExecutionAddWaitForSwitchPos(builder, waitForSwitchPos): builder.PrependBoolSlot(1, waitForSwitchPos, 0)
def AddWaitForSwitchPos(builder, waitForSwitchPos):
    return AxsStateCamInExecutionAddWaitForSwitchPos(builder, waitForSwitchPos)
def AxsStateCamInExecutionAddWaitForSwitchGain(builder, waitForSwitchGain): builder.PrependBoolSlot(2, waitForSwitchGain, 0)
def AddWaitForSwitchGain(builder, waitForSwitchGain):
    return AxsStateCamInExecutionAddWaitForSwitchGain(builder, waitForSwitchGain)
def AxsStateCamInExecutionAddSingleExecutionDone(builder, singleExecutionDone): builder.PrependBoolSlot(3, singleExecutionDone, 0)
def AddSingleExecutionDone(builder, singleExecutionDone):
    return AxsStateCamInExecutionAddSingleExecutionDone(builder, singleExecutionDone)
def AxsStateCamInExecutionEnd(builder): return builder.EndObject()
def End(builder):
    return AxsStateCamInExecutionEnd(builder)

class AxsStateCamInExecutionT(object):

    # AxsStateCamInExecutionT
    def __init__(self):
        self.activePointTable = None  # type: str
        self.waitForSwitchPos = False  # type: bool
        self.waitForSwitchGain = False  # type: bool
        self.singleExecutionDone = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsStateCamInExecution = AxsStateCamInExecution()
        axsStateCamInExecution.Init(buf, pos)
        return cls.InitFromObj(axsStateCamInExecution)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsStateCamInExecution):
        x = AxsStateCamInExecutionT()
        x._UnPack(axsStateCamInExecution)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.activePointTable == other.activePointTable and \
            self.waitForSwitchPos == other.waitForSwitchPos and \
            self.waitForSwitchGain == other.waitForSwitchGain and \
            self.singleExecutionDone == other.singleExecutionDone

    # AxsStateCamInExecutionT
    def _UnPack(self, axsStateCamInExecution):
        if axsStateCamInExecution is None:
            return
        self.activePointTable = axsStateCamInExecution.ActivePointTable()
        self.waitForSwitchPos = axsStateCamInExecution.WaitForSwitchPos()
        self.waitForSwitchGain = axsStateCamInExecution.WaitForSwitchGain()
        self.singleExecutionDone = axsStateCamInExecution.SingleExecutionDone()

    # AxsStateCamInExecutionT
    def Pack(self, builder):
        if self.activePointTable is not None:
            activePointTable = builder.CreateString(self.activePointTable)
        AxsStateCamInExecutionStart(builder)
        if self.activePointTable is not None:
            AxsStateCamInExecutionAddActivePointTable(builder, activePointTable)
        AxsStateCamInExecutionAddWaitForSwitchPos(builder, self.waitForSwitchPos)
        AxsStateCamInExecutionAddWaitForSwitchGain(builder, self.waitForSwitchGain)
        AxsStateCamInExecutionAddSingleExecutionDone(builder, self.singleExecutionDone)
        axsStateCamInExecution = AxsStateCamInExecutionEnd(builder)
        return axsStateCamInExecution
