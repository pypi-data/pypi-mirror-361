# -*- coding: utf-8 -*-

"""
cuadraai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from cuadraai.api_helper import APIHelper


class InlineDataEx(object):

    """Implementation of the 'InlineDataEx' model.

    Input Reference is the name of the file, if you're request is from a type
    other than text, and it's required for most types. It has to contain the
    same name as the file attached in the request.

    Attributes:
        mime_type (str): The model property of type str.
        data (str): The model property of type str.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mime_type": 'mimeType',
        "data": 'data'
    }

    _optionals = [
        'mime_type',
        'data',
    ]

    def __init__(self,
                 mime_type=APIHelper.SKIP,
                 data=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the InlineDataEx class"""

        # Initialize members of the class
        if mime_type is not APIHelper.SKIP:
            self.mime_type = mime_type 
        if data is not APIHelper.SKIP:
            self.data = data 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mime_type = dictionary.get("mimeType") if dictionary.get("mimeType") else APIHelper.SKIP
        data = dictionary.get("data") if dictionary.get("data") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(mime_type,
                   data,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mime_type={(self.mime_type if hasattr(self, "mime_type") else None)!r}, '
                f'data={(self.data if hasattr(self, "data") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mime_type={(self.mime_type if hasattr(self, "mime_type") else None)!s}, '
                f'data={(self.data if hasattr(self, "data") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
