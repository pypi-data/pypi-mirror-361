# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Filter related data
class AxsStateFilterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsStateFilterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsStateFilterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsStateFilterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # data of all filters
    # AxsStateFilterData
    def FilterData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.AxsStateSingleFilterData import AxsStateSingleFilterData
            obj = AxsStateSingleFilterData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AxsStateFilterData
    def FilterDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsStateFilterData
    def FilterDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def AxsStateFilterDataStart(builder): builder.StartObject(1)
def Start(builder):
    return AxsStateFilterDataStart(builder)
def AxsStateFilterDataAddFilterData(builder, filterData): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(filterData), 0)
def AddFilterData(builder, filterData):
    return AxsStateFilterDataAddFilterData(builder, filterData)
def AxsStateFilterDataStartFilterDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartFilterDataVector(builder, numElems):
    return AxsStateFilterDataStartFilterDataVector(builder, numElems)
def AxsStateFilterDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsStateFilterDataEnd(builder)
import motion.core.fbtypes.AxsStateSingleFilterData
try:
    from typing import List
except:
    pass

class AxsStateFilterDataT(object):

    # AxsStateFilterDataT
    def __init__(self):
        self.filterData = None  # type: List[motion.core.fbtypes.AxsStateSingleFilterData.AxsStateSingleFilterDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsStateFilterData = AxsStateFilterData()
        axsStateFilterData.Init(buf, pos)
        return cls.InitFromObj(axsStateFilterData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsStateFilterData):
        x = AxsStateFilterDataT()
        x._UnPack(axsStateFilterData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.filterData == other.filterData

    # AxsStateFilterDataT
    def _UnPack(self, axsStateFilterData):
        if axsStateFilterData is None:
            return
        if not axsStateFilterData.FilterDataIsNone():
            self.filterData = []
            for i in range(axsStateFilterData.FilterDataLength()):
                if axsStateFilterData.FilterData(i) is None:
                    self.filterData.append(None)
                else:
                    axsStateSingleFilterData_ = motion.core.fbtypes.AxsStateSingleFilterData.AxsStateSingleFilterDataT.InitFromObj(axsStateFilterData.FilterData(i))
                    self.filterData.append(axsStateSingleFilterData_)

    # AxsStateFilterDataT
    def Pack(self, builder):
        if self.filterData is not None:
            filterDatalist = []
            for i in range(len(self.filterData)):
                filterDatalist.append(self.filterData[i].Pack(builder))
            AxsStateFilterDataStartFilterDataVector(builder, len(self.filterData))
            for i in reversed(range(len(self.filterData))):
                builder.PrependUOffsetTRelative(filterDatalist[i])
            filterData = builder.EndVector()
        AxsStateFilterDataStart(builder)
        if self.filterData is not None:
            AxsStateFilterDataAddFilterData(builder, filterData)
        axsStateFilterData = AxsStateFilterDataEnd(builder)
        return axsStateFilterData
