# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.role_select_default_value import RoleSelectDefaultValue
from typing import Optional, Set
from typing_extensions import Self

class RoleSelectComponentForMessageRequest(BaseModel):
    """
    RoleSelectComponentForMessageRequest
    """ # noqa: E501
    type: StrictInt
    custom_id: Annotated[str, Field(strict=True, max_length=100)]
    placeholder: Optional[Annotated[str, Field(strict=True, max_length=150)]] = None
    min_values: Optional[Annotated[int, Field(le=25, strict=True, ge=0)]] = None
    max_values: Optional[Annotated[int, Field(le=25, strict=True, ge=1)]] = None
    disabled: Optional[StrictBool] = None
    default_values: Optional[Annotated[List[RoleSelectDefaultValue], Field(max_length=25)]] = None
    __properties: ClassVar[List[str]] = ["type", "custom_id", "placeholder", "min_values", "max_values", "disabled", "default_values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleSelectComponentForMessageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in default_values (list)
        _items = []
        if self.default_values:
            for _item_default_values in self.default_values:
                if _item_default_values:
                    _items.append(_item_default_values.to_dict())
            _dict['default_values'] = _items
        # set to None if placeholder (nullable) is None
        # and model_fields_set contains the field
        if self.placeholder is None and "placeholder" in self.model_fields_set:
            _dict['placeholder'] = None

        # set to None if min_values (nullable) is None
        # and model_fields_set contains the field
        if self.min_values is None and "min_values" in self.model_fields_set:
            _dict['min_values'] = None

        # set to None if max_values (nullable) is None
        # and model_fields_set contains the field
        if self.max_values is None and "max_values" in self.model_fields_set:
            _dict['max_values'] = None

        # set to None if disabled (nullable) is None
        # and model_fields_set contains the field
        if self.disabled is None and "disabled" in self.model_fields_set:
            _dict['disabled'] = None

        # set to None if default_values (nullable) is None
        # and model_fields_set contains the field
        if self.default_values is None and "default_values" in self.model_fields_set:
            _dict['default_values'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleSelectComponentForMessageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "custom_id": obj.get("custom_id"),
            "placeholder": obj.get("placeholder"),
            "min_values": obj.get("min_values"),
            "max_values": obj.get("max_values"),
            "disabled": obj.get("disabled"),
            "default_values": [RoleSelectDefaultValue.from_dict(_item) for _item in obj["default_values"]] if obj.get("default_values") is not None else None
        })
        return _obj


