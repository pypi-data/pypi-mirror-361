# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SystemInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SystemInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSystemInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SystemInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SystemInfo
    def Hostname(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SystemInfo
    def MacAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SystemInfo
    def MacAddresses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SystemInfo
    def MacAddressesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SystemInfo
    def MacAddressesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # SystemInfo
    def OsVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SystemInfo
    def Virtualized(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SystemInfo
    def OperatingSystem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SystemInfo
    def Architecture(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SystemInfo
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SystemInfo
    def Timezone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SystemInfo
    def Uptime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SystemInfo
    def InstallationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SystemInfoStart(builder): builder.StartObject(11)
def Start(builder):
    return SystemInfoStart(builder)
def SystemInfoAddHostname(builder, hostname): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(hostname), 0)
def AddHostname(builder, hostname):
    return SystemInfoAddHostname(builder, hostname)
def SystemInfoAddMacAddress(builder, macAddress): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(macAddress), 0)
def AddMacAddress(builder, macAddress):
    return SystemInfoAddMacAddress(builder, macAddress)
def SystemInfoAddMacAddresses(builder, macAddresses): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(macAddresses), 0)
def AddMacAddresses(builder, macAddresses):
    return SystemInfoAddMacAddresses(builder, macAddresses)
def SystemInfoStartMacAddressesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMacAddressesVector(builder, numElems):
    return SystemInfoStartMacAddressesVector(builder, numElems)
def SystemInfoAddOsVersion(builder, osVersion): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(osVersion), 0)
def AddOsVersion(builder, osVersion):
    return SystemInfoAddOsVersion(builder, osVersion)
def SystemInfoAddVirtualized(builder, virtualized): builder.PrependBoolSlot(4, virtualized, 0)
def AddVirtualized(builder, virtualized):
    return SystemInfoAddVirtualized(builder, virtualized)
def SystemInfoAddOperatingSystem(builder, operatingSystem): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(operatingSystem), 0)
def AddOperatingSystem(builder, operatingSystem):
    return SystemInfoAddOperatingSystem(builder, operatingSystem)
def SystemInfoAddArchitecture(builder, architecture): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(architecture), 0)
def AddArchitecture(builder, architecture):
    return SystemInfoAddArchitecture(builder, architecture)
def SystemInfoAddTime(builder, time): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)
def AddTime(builder, time):
    return SystemInfoAddTime(builder, time)
def SystemInfoAddTimezone(builder, timezone): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(timezone), 0)
def AddTimezone(builder, timezone):
    return SystemInfoAddTimezone(builder, timezone)
def SystemInfoAddUptime(builder, uptime): builder.PrependInt64Slot(9, uptime, 0)
def AddUptime(builder, uptime):
    return SystemInfoAddUptime(builder, uptime)
def SystemInfoAddInstallationId(builder, installationId): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(installationId), 0)
def AddInstallationId(builder, installationId):
    return SystemInfoAddInstallationId(builder, installationId)
def SystemInfoEnd(builder): return builder.EndObject()
def End(builder):
    return SystemInfoEnd(builder)
try:
    from typing import List
except:
    pass

class SystemInfoT(object):

    # SystemInfoT
    def __init__(self):
        self.hostname = None  # type: str
        self.macAddress = None  # type: str
        self.macAddresses = None  # type: List[str]
        self.osVersion = None  # type: str
        self.virtualized = False  # type: bool
        self.operatingSystem = None  # type: str
        self.architecture = None  # type: str
        self.time = None  # type: str
        self.timezone = None  # type: str
        self.uptime = 0  # type: int
        self.installationId = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        systemInfo = SystemInfo()
        systemInfo.Init(buf, pos)
        return cls.InitFromObj(systemInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, systemInfo):
        x = SystemInfoT()
        x._UnPack(systemInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.hostname == other.hostname and \
            self.macAddress == other.macAddress and \
            self.macAddresses == other.macAddresses and \
            self.osVersion == other.osVersion and \
            self.virtualized == other.virtualized and \
            self.operatingSystem == other.operatingSystem and \
            self.architecture == other.architecture and \
            self.time == other.time and \
            self.timezone == other.timezone and \
            self.uptime == other.uptime and \
            self.installationId == other.installationId

    # SystemInfoT
    def _UnPack(self, systemInfo):
        if systemInfo is None:
            return
        self.hostname = systemInfo.Hostname()
        self.macAddress = systemInfo.MacAddress()
        if not systemInfo.MacAddressesIsNone():
            self.macAddresses = []
            for i in range(systemInfo.MacAddressesLength()):
                self.macAddresses.append(systemInfo.MacAddresses(i))
        self.osVersion = systemInfo.OsVersion()
        self.virtualized = systemInfo.Virtualized()
        self.operatingSystem = systemInfo.OperatingSystem()
        self.architecture = systemInfo.Architecture()
        self.time = systemInfo.Time()
        self.timezone = systemInfo.Timezone()
        self.uptime = systemInfo.Uptime()
        self.installationId = systemInfo.InstallationId()

    # SystemInfoT
    def Pack(self, builder):
        if self.hostname is not None:
            hostname = builder.CreateString(self.hostname)
        if self.macAddress is not None:
            macAddress = builder.CreateString(self.macAddress)
        if self.macAddresses is not None:
            macAddresseslist = []
            for i in range(len(self.macAddresses)):
                macAddresseslist.append(builder.CreateString(self.macAddresses[i]))
            SystemInfoStartMacAddressesVector(builder, len(self.macAddresses))
            for i in reversed(range(len(self.macAddresses))):
                builder.PrependUOffsetTRelative(macAddresseslist[i])
            macAddresses = builder.EndVector()
        if self.osVersion is not None:
            osVersion = builder.CreateString(self.osVersion)
        if self.operatingSystem is not None:
            operatingSystem = builder.CreateString(self.operatingSystem)
        if self.architecture is not None:
            architecture = builder.CreateString(self.architecture)
        if self.time is not None:
            time = builder.CreateString(self.time)
        if self.timezone is not None:
            timezone = builder.CreateString(self.timezone)
        if self.installationId is not None:
            installationId = builder.CreateString(self.installationId)
        SystemInfoStart(builder)
        if self.hostname is not None:
            SystemInfoAddHostname(builder, hostname)
        if self.macAddress is not None:
            SystemInfoAddMacAddress(builder, macAddress)
        if self.macAddresses is not None:
            SystemInfoAddMacAddresses(builder, macAddresses)
        if self.osVersion is not None:
            SystemInfoAddOsVersion(builder, osVersion)
        SystemInfoAddVirtualized(builder, self.virtualized)
        if self.operatingSystem is not None:
            SystemInfoAddOperatingSystem(builder, operatingSystem)
        if self.architecture is not None:
            SystemInfoAddArchitecture(builder, architecture)
        if self.time is not None:
            SystemInfoAddTime(builder, time)
        if self.timezone is not None:
            SystemInfoAddTimezone(builder, timezone)
        SystemInfoAddUptime(builder, self.uptime)
        if self.installationId is not None:
            SystemInfoAddInstallationId(builder, installationId)
        systemInfo = SystemInfoEnd(builder)
        return systemInfo
