# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs2

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Status of the duration measurements of a task
class durationStatusOfTask(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = durationStatusOfTask()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdurationStatusOfTask(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # durationStatusOfTask
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the task
    # durationStatusOfTask
    def TaskName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Status of any duration measurement or recording of the task including their callables
    # durationStatusOfTask
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # Status of the duration measurements of the task
    # durationStatusOfTask
    def StatusTask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # Status of the recording of duration measurements of the task in their histogram
    # durationStatusOfTask
    def StatusHistogram(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # Status of the duration measurements of the callables of the tasks
    # durationStatusOfTask
    def StatusCallable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

def durationStatusOfTaskStart(builder): builder.StartObject(5)
def Start(builder):
    return durationStatusOfTaskStart(builder)
def durationStatusOfTaskAddTaskName(builder, taskName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(taskName), 0)
def AddTaskName(builder, taskName):
    return durationStatusOfTaskAddTaskName(builder, taskName)
def durationStatusOfTaskAddStatus(builder, status): builder.PrependInt8Slot(1, status, 1)
def AddStatus(builder, status):
    return durationStatusOfTaskAddStatus(builder, status)
def durationStatusOfTaskAddStatusTask(builder, statusTask): builder.PrependInt8Slot(2, statusTask, 1)
def AddStatusTask(builder, statusTask):
    return durationStatusOfTaskAddStatusTask(builder, statusTask)
def durationStatusOfTaskAddStatusHistogram(builder, statusHistogram): builder.PrependInt8Slot(3, statusHistogram, 1)
def AddStatusHistogram(builder, statusHistogram):
    return durationStatusOfTaskAddStatusHistogram(builder, statusHistogram)
def durationStatusOfTaskAddStatusCallable(builder, statusCallable): builder.PrependInt8Slot(4, statusCallable, 1)
def AddStatusCallable(builder, statusCallable):
    return durationStatusOfTaskAddStatusCallable(builder, statusCallable)
def durationStatusOfTaskEnd(builder): return builder.EndObject()
def End(builder):
    return durationStatusOfTaskEnd(builder)

class durationStatusOfTaskT(object):

    # durationStatusOfTaskT
    def __init__(self):
        self.taskName = None  # type: str
        self.status = 1  # type: int
        self.statusTask = 1  # type: int
        self.statusHistogram = 1  # type: int
        self.statusCallable = 1  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        durationStatusOfTask = durationStatusOfTask()
        durationStatusOfTask.Init(buf, pos)
        return cls.InitFromObj(durationStatusOfTask)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, durationStatusOfTask):
        x = durationStatusOfTaskT()
        x._UnPack(durationStatusOfTask)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.taskName == other.taskName and \
            self.status == other.status and \
            self.statusTask == other.statusTask and \
            self.statusHistogram == other.statusHistogram and \
            self.statusCallable == other.statusCallable

    # durationStatusOfTaskT
    def _UnPack(self, durationStatusOfTask):
        if durationStatusOfTask is None:
            return
        self.taskName = durationStatusOfTask.TaskName()
        self.status = durationStatusOfTask.Status()
        self.statusTask = durationStatusOfTask.StatusTask()
        self.statusHistogram = durationStatusOfTask.StatusHistogram()
        self.statusCallable = durationStatusOfTask.StatusCallable()

    # durationStatusOfTaskT
    def Pack(self, builder):
        if self.taskName is not None:
            taskName = builder.CreateString(self.taskName)
        durationStatusOfTaskStart(builder)
        if self.taskName is not None:
            durationStatusOfTaskAddTaskName(builder, taskName)
        durationStatusOfTaskAddStatus(builder, self.status)
        durationStatusOfTaskAddStatusTask(builder, self.statusTask)
        durationStatusOfTaskAddStatusHistogram(builder, self.statusHistogram)
        durationStatusOfTaskAddStatusCallable(builder, self.statusCallable)
        durationStatusOfTask = durationStatusOfTaskEnd(builder)
        return durationStatusOfTask
