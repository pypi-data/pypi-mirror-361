"""
Aliases for TODO
"""

from __future__ import annotations

from pycodetags_issue_tracker.schema.issue_tracker_classes import TODO


def REQUIREMENT(
    assignee: str | None = None,
    originator: str | None = None,
    comment: str | None = None,
    origination_date: str | None = None,
    due: str | None = None,
    release_due: str | None = None,
    release: str | None = None,
    iteration: str | None = None,
    change_type: str = "Added",
    closed_date: str | None = None,
    closed_comment: str | None = None,
    tracker: str | None = None,
    file_path: str | None = None,
    original_text: str | None = None,
    original_schema: str | None = None,
    custom_fields: dict[str, str] | None = None,
    priority: str | None = None,
    status: str | None = None,
    category: str | None = None,
) -> TODO:
    """Factory function to create a REQUIREMENT item."""
    return TODO(
        code_tag="REQUIREMENT",
        assignee=assignee,
        originator=originator,
        comment=comment,
        origination_date=origination_date,
        due=due,
        release_due=release_due,
        release=release,
        iteration=iteration,
        change_type=change_type,
        closed_date=closed_date,
        closed_comment=closed_comment,
        tracker=tracker,
        file_path=file_path,
        original_text=original_text,
        original_schema=original_schema,
        custom_fields=custom_fields,
        priority=priority,
        status=status,
        category=category,
    )


def STORY(
    assignee: str | None = None,
    originator: str | None = None,
    comment: str | None = None,
    origination_date: str | None = None,
    due: str | None = None,
    release_due: str | None = None,
    release: str | None = None,
    iteration: str | None = None,
    change_type: str = "Added",
    closed_date: str | None = None,
    closed_comment: str | None = None,
    tracker: str | None = None,
    file_path: str | None = None,
    original_text: str | None = None,
    original_schema: str | None = None,
    custom_fields: dict[str, str] | None = None,
    priority: str | None = None,
    status: str | None = None,
    category: str | None = None,
) -> TODO:
    """Variation on TODO"""
    return TODO(
        code_tag="STORY",
        assignee=assignee,
        originator=originator,
        comment=comment,
        origination_date=origination_date,
        due=due,
        release_due=release_due,
        release=release,
        iteration=iteration,
        change_type=change_type,
        closed_date=closed_date,
        closed_comment=closed_comment,
        tracker=tracker,
        file_path=file_path,
        original_text=original_text,
        original_schema=original_schema,
        custom_fields=custom_fields,
        priority=priority,
        status=status,
        category=category,
    )


def IDEA(
    assignee: str | None = None,
    originator: str | None = None,
    comment: str | None = None,
    origination_date: str | None = None,
    due: str | None = None,
    release_due: str | None = None,
    release: str | None = None,
    iteration: str | None = None,
    change_type: str = "Added",
    closed_date: str | None = None,
    closed_comment: str | None = None,
    tracker: str | None = None,
    file_path: str | None = None,
    original_text: str | None = None,
    original_schema: str | None = None,
    custom_fields: dict[str, str] | None = None,
    priority: str | None = None,
    status: str | None = None,
    category: str | None = None,
) -> TODO:
    """Variation on TODO"""
    return TODO(
        code_tag="IDEA",
        assignee=assignee,
        originator=originator,
        comment=comment,
        origination_date=origination_date,
        due=due,
        release_due=release_due,
        release=release,
        iteration=iteration,
        change_type=change_type,
        closed_date=closed_date,
        closed_comment=closed_comment,
        tracker=tracker,
        file_path=file_path,
        original_text=original_text,
        original_schema=original_schema,
        custom_fields=custom_fields,
        priority=priority,
        status=status,
        category=category,
    )


def FIXME(
    assignee: str | None = None,
    originator: str | None = None,
    comment: str | None = None,
    origination_date: str | None = None,
    due: str | None = None,
    release_due: str | None = None,
    release: str | None = None,
    iteration: str | None = None,
    change_type: str = "Added",
    closed_date: str | None = None,
    closed_comment: str | None = None,
    tracker: str | None = None,
    file_path: str | None = None,
    original_text: str | None = None,
    original_schema: str | None = None,
    custom_fields: dict[str, str] | None = None,
    priority: str | None = None,
    status: str | None = None,
    category: str | None = None,
) -> TODO:
    """This is broken, please fix"""
    return TODO(
        code_tag="FIXME",
        assignee=assignee,
        originator=originator,
        comment=comment,
        origination_date=origination_date,
        due=due,
        release_due=release_due,
        release=release,
        iteration=iteration,
        change_type=change_type,
        closed_date=closed_date,
        closed_comment=closed_comment,
        tracker=tracker,
        file_path=file_path,
        original_text=original_text,
        original_schema=original_schema,
        custom_fields=custom_fields,
        priority=priority,
        status=status,
        category=category,
    )


def BUG(
    assignee: str | None = None,
    originator: str | None = None,
    comment: str | None = None,
    origination_date: str | None = None,
    due: str | None = None,
    release_due: str | None = None,
    release: str | None = None,
    iteration: str | None = None,
    change_type: str = "Added",
    closed_date: str | None = None,
    closed_comment: str | None = None,
    tracker: str | None = None,
    file_path: str | None = None,
    original_text: str | None = None,
    original_schema: str | None = None,
    custom_fields: dict[str, str] | None = None,
    priority: str | None = None,
    status: str | None = None,
    category: str | None = None,
) -> TODO:
    """This is broken, please fix"""
    return TODO(
        code_tag="BUG",
        assignee=assignee,
        originator=originator,
        comment=comment,
        origination_date=origination_date,
        due=due,
        release_due=release_due,
        release=release,
        iteration=iteration,
        change_type=change_type,
        closed_date=closed_date,
        closed_comment=closed_comment,
        tracker=tracker,
        file_path=file_path,
        original_text=original_text,
        original_schema=original_schema,
        custom_fields=custom_fields,
        priority=priority,
        status=status,
        category=category,
    )


def HACK(
    assignee: str | None = None,
    originator: str | None = None,
    comment: str | None = None,
    origination_date: str | None = None,
    due: str | None = None,
    release_due: str | None = None,
    release: str | None = None,
    iteration: str | None = None,
    change_type: str = "Added",
    closed_date: str | None = None,
    closed_comment: str | None = None,
    tracker: str | None = None,
    file_path: str | None = None,
    original_text: str | None = None,
    original_schema: str | None = None,
    custom_fields: dict[str, str] | None = None,
    priority: str | None = None,
    status: str | None = None,
    category: str | None = None,
) -> TODO:
    """Make code quality better"""
    return TODO(
        code_tag="HACK",
        assignee=assignee,
        originator=originator,
        comment=comment,
        origination_date=origination_date,
        due=due,
        release_due=release_due,
        release=release,
        iteration=iteration,
        change_type=change_type,
        closed_date=closed_date,
        closed_comment=closed_comment,
        tracker=tracker,
        file_path=file_path,
        original_text=original_text,
        original_schema=original_schema,
        custom_fields=custom_fields,
        priority=priority,
        status=status,
        category=category,
    )


def CLEVER(
    assignee: str | None = None,
    originator: str | None = None,
    comment: str | None = None,
    origination_date: str | None = None,
    due: str | None = None,
    release_due: str | None = None,
    release: str | None = None,
    iteration: str | None = None,
    change_type: str = "Added",
    closed_date: str | None = None,
    closed_comment: str | None = None,
    tracker: str | None = None,
    file_path: str | None = None,
    original_text: str | None = None,
    original_schema: str | None = None,
    custom_fields: dict[str, str] | None = None,
    priority: str | None = None,
    status: str | None = None,
    category: str | None = None,
) -> TODO:
    """Make code quality better"""
    return TODO(
        code_tag="CLEVER",
        assignee=assignee,
        originator=originator,
        comment=comment,
        origination_date=origination_date,
        due=due,
        release_due=release_due,
        release=release,
        iteration=iteration,
        change_type=change_type,
        closed_date=closed_date,
        closed_comment=closed_comment,
        tracker=tracker,
        file_path=file_path,
        original_text=original_text,
        original_schema=original_schema,
        custom_fields=custom_fields,
        priority=priority,
        status=status,
        category=category,
    )


def MAGIC(
    assignee: str | None = None,
    originator: str | None = None,
    comment: str | None = None,
    origination_date: str | None = None,
    due: str | None = None,
    release_due: str | None = None,
    release: str | None = None,
    iteration: str | None = None,
    change_type: str = "Added",
    closed_date: str | None = None,
    closed_comment: str | None = None,
    tracker: str | None = None,
    file_path: str | None = None,
    original_text: str | None = None,
    original_schema: str | None = None,
    custom_fields: dict[str, str] | None = None,
    priority: str | None = None,
    status: str | None = None,
    category: str | None = None,
) -> TODO:
    """Make code quality better"""
    return TODO(
        code_tag="MAGIC",
        assignee=assignee,
        originator=originator,
        comment=comment,
        origination_date=origination_date,
        due=due,
        release_due=release_due,
        release=release,
        iteration=iteration,
        change_type=change_type,
        closed_date=closed_date,
        closed_comment=closed_comment,
        tracker=tracker,
        file_path=file_path,
        original_text=original_text,
        original_schema=original_schema,
        custom_fields=custom_fields,
        priority=priority,
        status=status,
        category=category,
    )


def ALERT(
    assignee: str | None = None,
    originator: str | None = None,
    comment: str | None = None,
    origination_date: str | None = None,
    due: str | None = None,
    release_due: str | None = None,
    release: str | None = None,
    iteration: str | None = None,
    change_type: str = "Added",
    closed_date: str | None = None,
    closed_comment: str | None = None,
    tracker: str | None = None,
    file_path: str | None = None,
    original_text: str | None = None,
    original_schema: str | None = None,
    custom_fields: dict[str, str] | None = None,
    priority: str | None = None,
    status: str | None = None,
    category: str | None = None,
) -> TODO:
    """An urgent TODO"""
    return TODO(
        code_tag="ALERT",
        assignee=assignee,
        originator=originator,
        comment=comment,
        origination_date=origination_date,
        due=due,
        release_due=release_due,
        release=release,
        iteration=iteration,
        change_type=change_type,
        closed_date=closed_date,
        closed_comment=closed_comment,
        tracker=tracker,
        file_path=file_path,
        original_text=original_text,
        original_schema=original_schema,
        custom_fields=custom_fields,
        priority=priority,
        status=status,
        category=category,
    )


def PORT(
    assignee: str | None = None,
    originator: str | None = None,
    comment: str | None = None,
    origination_date: str | None = None,
    due: str | None = None,
    release_due: str | None = None,
    release: str | None = None,
    iteration: str | None = None,
    change_type: str = "Added",
    closed_date: str | None = None,
    closed_comment: str | None = None,
    tracker: str | None = None,
    file_path: str | None = None,
    original_text: str | None = None,
    original_schema: str | None = None,
    custom_fields: dict[str, str] | None = None,
    priority: str | None = None,
    status: str | None = None,
    category: str | None = None,
) -> TODO:
    """Make this work in more environments"""
    return TODO(
        code_tag="PORT",
        assignee=assignee,
        originator=originator,
        comment=comment,
        origination_date=origination_date,
        due=due,
        release_due=release_due,
        release=release,
        iteration=iteration,
        change_type=change_type,
        closed_date=closed_date,
        closed_comment=closed_comment,
        tracker=tracker,
        file_path=file_path,
        original_text=original_text,
        original_schema=original_schema,
        custom_fields=custom_fields,
        priority=priority,
        status=status,
        category=category,
    )


def DOCUMENT(
    assignee: str | None = None,
    originator: str | None = None,
    comment: str | None = None,
    origination_date: str | None = None,
    due: str | None = None,
    release_due: str | None = None,
    release: str | None = None,
    iteration: str | None = None,
    change_type: str = "Added",
    closed_date: str | None = None,
    closed_comment: str | None = None,
    tracker: str | None = None,
    file_path: str | None = None,
    original_text: str | None = None,
    original_schema: str | None = None,
    custom_fields: dict[str, str] | None = None,
    priority: str | None = None,
    status: str | None = None,
    category: str | None = None,
) -> TODO:
    """Add documentation. The code tag itself is not documentation."""
    return TODO(
        code_tag="DOCUMENT",
        assignee=assignee,
        originator=originator,
        comment=comment,
        origination_date=origination_date,
        due=due,
        release_due=release_due,
        release=release,
        iteration=iteration,
        change_type=change_type,
        closed_date=closed_date,
        closed_comment=closed_comment,
        tracker=tracker,
        file_path=file_path,
        original_text=original_text,
        original_schema=original_schema,
        custom_fields=custom_fields,
        priority=priority,
        status=status,
        category=category,
    )
