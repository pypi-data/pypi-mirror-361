[project]
name = "medmodels"
version = "0.3.2"
description = "Limebit Medmodels Package"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Developers',
    'Intended Audience :: Healthcare Industry',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: BSD License',
    'Operating System :: MacOS :: MacOS X',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: POSIX',
    'Operating System :: Unix',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Rust',
    'Topic :: Scientific/Engineering',
    'Topic :: Software Development',
    'Typing :: Typed',
]
dependencies = [
    "numpy>=2.0.0",
    "pandas>=2.2.2",
    "polars[pandas]>=1.6.0",
    "scikit-learn>=1.5.0",
    "scipy>=1.6.1",
]

[dependency-groups]
tests = ["pytest>=8.2.2", "coverage[toml]>=7.6.1"]
docs = [
    "sphinx>=7",
    "sphinx-design==0.6.0",
    "sphinx-copybutton",
    "sphinxext-opengraph~=0.9.0",
    "sphinx-pyscript==0.1.0",
    "sphinx-tippy>=0.4.3",
    "sphinx-togglebutton==0.3.2",
    "linkify-it-py>=2.0.0",
    "autodocsumm==0.2.12",
    "pydata-sphinx-theme==0.15.4",
    "sphinx-autosummary-accessors==2023.4.0",
    "sphinx-autodoc-typehints==2.2.3",
    "sphinx-copybutton==0.5.2",
    "sphinx-design==0.6.0",
    "sphinx-favicon==1.0.1",
    "sphinx-reredirects==0.1.4",
    "sphinx-toolbox==3.6.0",
    "myst-parser==3.0.1",
    "livereload==2.7.0",
]
dev = [
    { include-group = "docs" },
    { include-group = "tests" },
    "maturin>=1.6.0",
    "ruff>=0.4.9",
    "py-spy",
    "pyright>=1.1.402",
    "pandas-stubs>=2.2.2.240603",
    "scipy-stubs>=1.15.1.0",
]

[build-system]
requires = ["maturin>=1.6.0", "setuptools"]
build-backend = "maturin"

[tool.maturin]
features = ["pyo3/extension-module"]
exclude = ["tests", "examples"]
manifest-path = "rustmodels/Cargo.toml"
module-name = "medmodels._medmodels"

[tool.ruff]
exclude = [
    "__pycache__",
    ".git",
    ".github",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
]
line-length = 88

[tool.ruff.lint]
select = [
    "E",    # PEP 8 codestyle errors
    "F",    # pyflakes
    "I",    # isort
    "N",    # PEP 8 naming
    "DOC",  # Pydoc Linting (preview); complementary to "D"
    "D",    # Pydoc Style; PEP 257
    "FA",   # future annotations linting; PEP 563
    "W",    # pycodestyle warnings; PEP 8
    "SIM",  # flake8 simplify; simplify code
    "ANN",  # flake8 function annotations; PEP 3107
    "B",    # bugbear extension for flake8; opinionated, not based on any PEP
    "C4",   # list/set/dict comprehensions
    "T10",  # Check for debugging leftovers: pdb;idbp imports and set traces
    "EM",   # error messages
    "LOG",  # logging module usage linting
    "G",    # logging format strings
    "T20",  # print statements
    "PYI",  # lint stub files .pyi
    "PT",   # pytest linting
    "RET",  # return values
    "TCH",  # type checking
    "PTH",  # pathlib usage
    "PERF", # performance linting
    "FURB", # modern python code patterns
    "RUF",  # ruff specific rules
    "FBT",  # no bool as function param
    "TD",   # todo linting
    "C90",  # mccabe complexity
]
preview = true
ignore = [
    "E501", # Line length managed by formatter
    # indentation linters conflicting with formatter:
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    # quotation linters conflicting with formatter:
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    # comma linters conflicting with formatter:
    "COM812",
    "COM819",
    # string concatenation linters conflicting with formatter:
    "ISC001",
    "ISC002",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "DOC", "C901"]
"*/__init__.py" = ["D", "DOC"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 88

[tool.pyright]
typeCheckingMode = "strict"
reportPrivateUsage = false
reportIncompatibleMethodOverride = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportUnknownMemberType = false
reportMissingModuleSource = false
reportMissingTypeStubs = false
enableTypeIgnoreComments = false

[tool.pytest]
testpaths = "tests"

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "if 0:",
    'msg = "Should never be reached"',
    "raise NotImplementedError",
    "@(abc\\.)?abstractmethod",
]

[tool.uv]
cache-keys = [
    { file = "pyproject.toml" },
    { file = "rust/Cargo.toml" },
    { file = "crates/**/*.rs" },
    { file = "rustmodels/**/*.rs" },
]
