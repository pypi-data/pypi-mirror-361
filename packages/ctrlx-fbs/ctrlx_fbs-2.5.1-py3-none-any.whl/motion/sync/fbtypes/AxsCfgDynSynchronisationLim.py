# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Configuration of the dynamic synchronisation limits of a single axis
class AxsCfgDynSynchronisationLim(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgDynSynchronisationLim()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgDynSynchronisationLim(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgDynSynchronisationLim
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Acceleration limit
    # AxsCfgDynSynchronisationLim
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Deceleration limit
    # AxsCfgDynSynchronisationLim
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Jerk limit, when accelerating
    # AxsCfgDynSynchronisationLim
    def JrkAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Jerk limit, when decelerating
    # AxsCfgDynSynchronisationLim
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Velocity limit, when moving the slave axis in negative direction
    # AxsCfgDynSynchronisationLim
    def VelNeg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Velocity limit, when moving the slave axis in positive direction
    # AxsCfgDynSynchronisationLim
    def VelPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of acc
    # AxsCfgDynSynchronisationLim
    def AccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of dec
    # AxsCfgDynSynchronisationLim
    def DecUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of jrkAcc
    # AxsCfgDynSynchronisationLim
    def JrkAccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of jrkDec
    # AxsCfgDynSynchronisationLim
    def JrkDecUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of velNeg
    # AxsCfgDynSynchronisationLim
    def VelNegUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of velPos
    # AxsCfgDynSynchronisationLim
    def VelPosUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgDynSynchronisationLimStart(builder): builder.StartObject(12)
def Start(builder):
    return AxsCfgDynSynchronisationLimStart(builder)
def AxsCfgDynSynchronisationLimAddAcc(builder, acc): builder.PrependFloat64Slot(0, acc, 0.0)
def AddAcc(builder, acc):
    return AxsCfgDynSynchronisationLimAddAcc(builder, acc)
def AxsCfgDynSynchronisationLimAddDec(builder, dec): builder.PrependFloat64Slot(1, dec, 0.0)
def AddDec(builder, dec):
    return AxsCfgDynSynchronisationLimAddDec(builder, dec)
def AxsCfgDynSynchronisationLimAddJrkAcc(builder, jrkAcc): builder.PrependFloat64Slot(2, jrkAcc, 0.0)
def AddJrkAcc(builder, jrkAcc):
    return AxsCfgDynSynchronisationLimAddJrkAcc(builder, jrkAcc)
def AxsCfgDynSynchronisationLimAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(3, jrkDec, 0.0)
def AddJrkDec(builder, jrkDec):
    return AxsCfgDynSynchronisationLimAddJrkDec(builder, jrkDec)
def AxsCfgDynSynchronisationLimAddVelNeg(builder, velNeg): builder.PrependFloat64Slot(4, velNeg, 0.0)
def AddVelNeg(builder, velNeg):
    return AxsCfgDynSynchronisationLimAddVelNeg(builder, velNeg)
def AxsCfgDynSynchronisationLimAddVelPos(builder, velPos): builder.PrependFloat64Slot(5, velPos, 0.0)
def AddVelPos(builder, velPos):
    return AxsCfgDynSynchronisationLimAddVelPos(builder, velPos)
def AxsCfgDynSynchronisationLimAddAccUnit(builder, accUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(accUnit), 0)
def AddAccUnit(builder, accUnit):
    return AxsCfgDynSynchronisationLimAddAccUnit(builder, accUnit)
def AxsCfgDynSynchronisationLimAddDecUnit(builder, decUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(decUnit), 0)
def AddDecUnit(builder, decUnit):
    return AxsCfgDynSynchronisationLimAddDecUnit(builder, decUnit)
def AxsCfgDynSynchronisationLimAddJrkAccUnit(builder, jrkAccUnit): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(jrkAccUnit), 0)
def AddJrkAccUnit(builder, jrkAccUnit):
    return AxsCfgDynSynchronisationLimAddJrkAccUnit(builder, jrkAccUnit)
def AxsCfgDynSynchronisationLimAddJrkDecUnit(builder, jrkDecUnit): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(jrkDecUnit), 0)
def AddJrkDecUnit(builder, jrkDecUnit):
    return AxsCfgDynSynchronisationLimAddJrkDecUnit(builder, jrkDecUnit)
def AxsCfgDynSynchronisationLimAddVelNegUnit(builder, velNegUnit): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(velNegUnit), 0)
def AddVelNegUnit(builder, velNegUnit):
    return AxsCfgDynSynchronisationLimAddVelNegUnit(builder, velNegUnit)
def AxsCfgDynSynchronisationLimAddVelPosUnit(builder, velPosUnit): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(velPosUnit), 0)
def AddVelPosUnit(builder, velPosUnit):
    return AxsCfgDynSynchronisationLimAddVelPosUnit(builder, velPosUnit)
def AxsCfgDynSynchronisationLimEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgDynSynchronisationLimEnd(builder)

class AxsCfgDynSynchronisationLimT(object):

    # AxsCfgDynSynchronisationLimT
    def __init__(self):
        self.acc = 0.0  # type: float
        self.dec = 0.0  # type: float
        self.jrkAcc = 0.0  # type: float
        self.jrkDec = 0.0  # type: float
        self.velNeg = 0.0  # type: float
        self.velPos = 0.0  # type: float
        self.accUnit = None  # type: str
        self.decUnit = None  # type: str
        self.jrkAccUnit = None  # type: str
        self.jrkDecUnit = None  # type: str
        self.velNegUnit = None  # type: str
        self.velPosUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgDynSynchronisationLim = AxsCfgDynSynchronisationLim()
        axsCfgDynSynchronisationLim.Init(buf, pos)
        return cls.InitFromObj(axsCfgDynSynchronisationLim)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgDynSynchronisationLim):
        x = AxsCfgDynSynchronisationLimT()
        x._UnPack(axsCfgDynSynchronisationLim)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.acc == other.acc and \
            self.dec == other.dec and \
            self.jrkAcc == other.jrkAcc and \
            self.jrkDec == other.jrkDec and \
            self.velNeg == other.velNeg and \
            self.velPos == other.velPos and \
            self.accUnit == other.accUnit and \
            self.decUnit == other.decUnit and \
            self.jrkAccUnit == other.jrkAccUnit and \
            self.jrkDecUnit == other.jrkDecUnit and \
            self.velNegUnit == other.velNegUnit and \
            self.velPosUnit == other.velPosUnit

    # AxsCfgDynSynchronisationLimT
    def _UnPack(self, axsCfgDynSynchronisationLim):
        if axsCfgDynSynchronisationLim is None:
            return
        self.acc = axsCfgDynSynchronisationLim.Acc()
        self.dec = axsCfgDynSynchronisationLim.Dec()
        self.jrkAcc = axsCfgDynSynchronisationLim.JrkAcc()
        self.jrkDec = axsCfgDynSynchronisationLim.JrkDec()
        self.velNeg = axsCfgDynSynchronisationLim.VelNeg()
        self.velPos = axsCfgDynSynchronisationLim.VelPos()
        self.accUnit = axsCfgDynSynchronisationLim.AccUnit()
        self.decUnit = axsCfgDynSynchronisationLim.DecUnit()
        self.jrkAccUnit = axsCfgDynSynchronisationLim.JrkAccUnit()
        self.jrkDecUnit = axsCfgDynSynchronisationLim.JrkDecUnit()
        self.velNegUnit = axsCfgDynSynchronisationLim.VelNegUnit()
        self.velPosUnit = axsCfgDynSynchronisationLim.VelPosUnit()

    # AxsCfgDynSynchronisationLimT
    def Pack(self, builder):
        if self.accUnit is not None:
            accUnit = builder.CreateString(self.accUnit)
        if self.decUnit is not None:
            decUnit = builder.CreateString(self.decUnit)
        if self.jrkAccUnit is not None:
            jrkAccUnit = builder.CreateString(self.jrkAccUnit)
        if self.jrkDecUnit is not None:
            jrkDecUnit = builder.CreateString(self.jrkDecUnit)
        if self.velNegUnit is not None:
            velNegUnit = builder.CreateString(self.velNegUnit)
        if self.velPosUnit is not None:
            velPosUnit = builder.CreateString(self.velPosUnit)
        AxsCfgDynSynchronisationLimStart(builder)
        AxsCfgDynSynchronisationLimAddAcc(builder, self.acc)
        AxsCfgDynSynchronisationLimAddDec(builder, self.dec)
        AxsCfgDynSynchronisationLimAddJrkAcc(builder, self.jrkAcc)
        AxsCfgDynSynchronisationLimAddJrkDec(builder, self.jrkDec)
        AxsCfgDynSynchronisationLimAddVelNeg(builder, self.velNeg)
        AxsCfgDynSynchronisationLimAddVelPos(builder, self.velPos)
        if self.accUnit is not None:
            AxsCfgDynSynchronisationLimAddAccUnit(builder, accUnit)
        if self.decUnit is not None:
            AxsCfgDynSynchronisationLimAddDecUnit(builder, decUnit)
        if self.jrkAccUnit is not None:
            AxsCfgDynSynchronisationLimAddJrkAccUnit(builder, jrkAccUnit)
        if self.jrkDecUnit is not None:
            AxsCfgDynSynchronisationLimAddJrkDecUnit(builder, jrkDecUnit)
        if self.velNegUnit is not None:
            AxsCfgDynSynchronisationLimAddVelNegUnit(builder, velNegUnit)
        if self.velPosUnit is not None:
            AxsCfgDynSynchronisationLimAddVelPosUnit(builder, velPosUnit)
        axsCfgDynSynchronisationLim = AxsCfgDynSynchronisationLimEnd(builder)
        return axsCfgDynSynchronisationLim
