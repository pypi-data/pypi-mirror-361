# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FileType

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WriteInput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WriteInput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWriteInput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WriteInput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WriteInput
    def FileHandle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # WriteInput
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.ByteString import ByteString
            obj = ByteString()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def WriteInputStart(builder): builder.StartObject(2)
def Start(builder):
    return WriteInputStart(builder)
def WriteInputAddFileHandle(builder, fileHandle): builder.PrependUint32Slot(0, fileHandle, 0)
def AddFileHandle(builder, fileHandle):
    return WriteInputAddFileHandle(builder, fileHandle)
def WriteInputAddData(builder, data): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return WriteInputAddData(builder, data)
def WriteInputEnd(builder): return builder.EndObject()
def End(builder):
    return WriteInputEnd(builder)
import comm.opcua.builtin.ByteString
try:
    from typing import Optional
except:
    pass

class WriteInputT(object):

    # WriteInputT
    def __init__(self):
        self.fileHandle = 0  # type: int
        self.data = None  # type: Optional[comm.opcua.builtin.ByteString.ByteStringT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        writeInput = WriteInput()
        writeInput.Init(buf, pos)
        return cls.InitFromObj(writeInput)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, writeInput):
        x = WriteInputT()
        x._UnPack(writeInput)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.fileHandle == other.fileHandle and \
            self.data == other.data

    # WriteInputT
    def _UnPack(self, writeInput):
        if writeInput is None:
            return
        self.fileHandle = writeInput.FileHandle()
        if writeInput.Data() is not None:
            self.data = comm.opcua.builtin.ByteString.ByteStringT.InitFromObj(writeInput.Data())

    # WriteInputT
    def Pack(self, builder):
        if self.data is not None:
            data = self.data.Pack(builder)
        WriteInputStart(builder)
        WriteInputAddFileHandle(builder, self.fileHandle)
        if self.data is not None:
            WriteInputAddData(builder, data)
        writeInput = WriteInputEnd(builder)
        return writeInput
