# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Configuration of motion kernel monitoring and reaction of drive function 'safe limited speed'
class KinCfgDriveSLS(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgDriveSLS()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgDriveSLS(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgDriveSLS
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # velocity limit for the kinematic in the motion kernel, when drive function 'safe limited speed' of an axis is active
    # KinCfgDriveSLS
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of vel
    # KinCfgDriveSLS
    def VelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinCfgDriveSLSStart(builder): builder.StartObject(2)
def Start(builder):
    return KinCfgDriveSLSStart(builder)
def KinCfgDriveSLSAddVel(builder, vel): builder.PrependFloat64Slot(0, vel, 0.0)
def AddVel(builder, vel):
    return KinCfgDriveSLSAddVel(builder, vel)
def KinCfgDriveSLSAddVelUnit(builder, velUnit): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(velUnit), 0)
def AddVelUnit(builder, velUnit):
    return KinCfgDriveSLSAddVelUnit(builder, velUnit)
def KinCfgDriveSLSEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgDriveSLSEnd(builder)

class KinCfgDriveSLST(object):

    # KinCfgDriveSLST
    def __init__(self):
        self.vel = 0.0  # type: float
        self.velUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgDriveSls = KinCfgDriveSLS()
        kinCfgDriveSls.Init(buf, pos)
        return cls.InitFromObj(kinCfgDriveSls)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgDriveSls):
        x = KinCfgDriveSLST()
        x._UnPack(kinCfgDriveSls)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.vel == other.vel and \
            self.velUnit == other.velUnit

    # KinCfgDriveSLST
    def _UnPack(self, kinCfgDriveSls):
        if kinCfgDriveSls is None:
            return
        self.vel = kinCfgDriveSls.Vel()
        self.velUnit = kinCfgDriveSls.VelUnit()

    # KinCfgDriveSLST
    def Pack(self, builder):
        if self.velUnit is not None:
            velUnit = builder.CreateString(self.velUnit)
        KinCfgDriveSLSStart(builder)
        KinCfgDriveSLSAddVel(builder, self.vel)
        if self.velUnit is not None:
            KinCfgDriveSLSAddVelUnit(builder, velUnit)
        kinCfgDriveSls = KinCfgDriveSLSEnd(builder)
        return kinCfgDriveSls
