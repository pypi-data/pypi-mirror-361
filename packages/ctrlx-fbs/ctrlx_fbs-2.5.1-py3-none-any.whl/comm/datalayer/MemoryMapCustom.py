# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MemoryMapCustom(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MemoryMapCustom()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMemoryMapCustom(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MemoryMapCustom
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the custom memory map
    # MemoryMapCustom
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of custom variables
    # MemoryMapCustom
    def Variables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.VariableCustom import VariableCustom
            obj = VariableCustom()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MemoryMapCustom
    def VariablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MemoryMapCustom
    def VariablesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def MemoryMapCustomStart(builder): builder.StartObject(2)
def Start(builder):
    return MemoryMapCustomStart(builder)
def MemoryMapCustomAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return MemoryMapCustomAddName(builder, name)
def MemoryMapCustomAddVariables(builder, variables): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(variables), 0)
def AddVariables(builder, variables):
    return MemoryMapCustomAddVariables(builder, variables)
def MemoryMapCustomStartVariablesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartVariablesVector(builder, numElems):
    return MemoryMapCustomStartVariablesVector(builder, numElems)
def MemoryMapCustomEnd(builder): return builder.EndObject()
def End(builder):
    return MemoryMapCustomEnd(builder)
import comm.datalayer.VariableCustom
try:
    from typing import List
except:
    pass

class MemoryMapCustomT(object):

    # MemoryMapCustomT
    def __init__(self):
        self.name = None  # type: str
        self.variables = None  # type: List[comm.datalayer.VariableCustom.VariableCustomT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        memoryMapCustom = MemoryMapCustom()
        memoryMapCustom.Init(buf, pos)
        return cls.InitFromObj(memoryMapCustom)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, memoryMapCustom):
        x = MemoryMapCustomT()
        x._UnPack(memoryMapCustom)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.variables == other.variables

    # MemoryMapCustomT
    def _UnPack(self, memoryMapCustom):
        if memoryMapCustom is None:
            return
        self.name = memoryMapCustom.Name()
        if not memoryMapCustom.VariablesIsNone():
            self.variables = []
            for i in range(memoryMapCustom.VariablesLength()):
                if memoryMapCustom.Variables(i) is None:
                    self.variables.append(None)
                else:
                    variableCustom_ = comm.datalayer.VariableCustom.VariableCustomT.InitFromObj(memoryMapCustom.Variables(i))
                    self.variables.append(variableCustom_)

    # MemoryMapCustomT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.variables is not None:
            variableslist = []
            for i in range(len(self.variables)):
                variableslist.append(self.variables[i].Pack(builder))
            MemoryMapCustomStartVariablesVector(builder, len(self.variables))
            for i in reversed(range(len(self.variables))):
                builder.PrependUOffsetTRelative(variableslist[i])
            variables = builder.EndVector()
        MemoryMapCustomStart(builder)
        if self.name is not None:
            MemoryMapCustomAddName(builder, name)
        if self.variables is not None:
            MemoryMapCustomAddVariables(builder, variables)
        memoryMapCustom = MemoryMapCustomEnd(builder)
        return memoryMapCustom
