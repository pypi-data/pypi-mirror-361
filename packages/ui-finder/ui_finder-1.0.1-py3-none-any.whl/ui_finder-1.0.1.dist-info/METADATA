Metadata-Version: 2.1
Name: ui_finder
Version: 1.0.1
Summary: A Local HTTP File Server with ngrok & QR support
Home-page: https://github.com/kdiitg/ui_finder
Author: Kuldeep Singh
License: MIT
Project-URL: Documentation, https://github.com/kdiitg/{module_name}
Project-URL: Source, https://github.com/kdiitg/{module_name}
Project-URL: Bug Tracker, https://github.com/kdiitg/{module_name}/issues
Keywords: http server local file-sharing ngrok QR tkinter gui
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Internet :: File Transfer Protocol (FTP)
Classifier: Topic :: Utilities
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: Pillow ~=11.2.1
Requires-Dist: qrcode ~=8.2
Requires-Dist: requests ~=2.32.4

# ðŸ“± Android UI Inspector

**Android UI Inspector** is a Python-based visual tool that helps you inspect and analyze the UI hierarchy of Android apps directly from a real Android phone.

It allows you to:

- Load a screenshot and corresponding `uiautomator dump` XML from your device
- Visually click on any UI element to inspect its attributes
- Highlight the clicked element on the UI
- Copy key attributes like `class`, `resource-id`, `text`, and `bounds`

> Ideal for testers, automation engineers, and Android developers working with real devices.

---

## ðŸš€ Features

âœ… Uses real Android phone (no emulator needed)  
âœ… Visualizes UI using actual screenshots  
âœ… Click to highlight any UI element  
âœ… Attribute panel with dropdown filter  
âœ… One-click copy to clipboard  
âœ… Works offline (pure Python, no server)  
âœ… Cross-platform (Windows, Linux, macOS)

---

## ðŸ“² Requirements

- **A real Android phone** with:
  - USB debugging enabled
  - `adb` installed and accessible in terminal
- Python 3.7+
- Screenshot (`Image.jpg`) and UI XML (`uiautomator dump`) from the phone

---

## ðŸ“¸ How to Prepare Your Device

1. **Enable Developer Mode** on your phone  
2. **Enable USB Debugging**
3. Connect phone via USB and run:

```bash
adb devices         # To verify connection
adb shell uiautomator dump
adb pull /sdcard/window_dump.xml
adb exec-out screencap -p > Image.jpg









