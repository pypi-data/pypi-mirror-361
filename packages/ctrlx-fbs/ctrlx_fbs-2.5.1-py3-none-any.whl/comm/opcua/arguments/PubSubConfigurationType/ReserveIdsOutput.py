# automatically generated by the FlatBuffers compiler, do not modify

# namespace: PubSubConfigurationType

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReserveIdsOutput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReserveIdsOutput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReserveIdsOutput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ReserveIdsOutput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReserveIdsOutput
    def DefaultPublisherId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.Variant import Variant
            obj = Variant()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ReserveIdsOutput
    def WriterGroupIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # ReserveIdsOutput
    def WriterGroupIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # ReserveIdsOutput
    def WriterGroupIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReserveIdsOutput
    def WriterGroupIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ReserveIdsOutput
    def DataSetWriterIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # ReserveIdsOutput
    def DataSetWriterIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # ReserveIdsOutput
    def DataSetWriterIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReserveIdsOutput
    def DataSetWriterIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def ReserveIdsOutputStart(builder): builder.StartObject(3)
def Start(builder):
    return ReserveIdsOutputStart(builder)
def ReserveIdsOutputAddDefaultPublisherId(builder, defaultPublisherId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(defaultPublisherId), 0)
def AddDefaultPublisherId(builder, defaultPublisherId):
    return ReserveIdsOutputAddDefaultPublisherId(builder, defaultPublisherId)
def ReserveIdsOutputAddWriterGroupIds(builder, writerGroupIds): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(writerGroupIds), 0)
def AddWriterGroupIds(builder, writerGroupIds):
    return ReserveIdsOutputAddWriterGroupIds(builder, writerGroupIds)
def ReserveIdsOutputStartWriterGroupIdsVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def StartWriterGroupIdsVector(builder, numElems):
    return ReserveIdsOutputStartWriterGroupIdsVector(builder, numElems)
def ReserveIdsOutputAddDataSetWriterIds(builder, dataSetWriterIds): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetWriterIds), 0)
def AddDataSetWriterIds(builder, dataSetWriterIds):
    return ReserveIdsOutputAddDataSetWriterIds(builder, dataSetWriterIds)
def ReserveIdsOutputStartDataSetWriterIdsVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def StartDataSetWriterIdsVector(builder, numElems):
    return ReserveIdsOutputStartDataSetWriterIdsVector(builder, numElems)
def ReserveIdsOutputEnd(builder): return builder.EndObject()
def End(builder):
    return ReserveIdsOutputEnd(builder)
import comm.opcua.builtin.Variant
try:
    from typing import List, Optional
except:
    pass

class ReserveIdsOutputT(object):

    # ReserveIdsOutputT
    def __init__(self):
        self.defaultPublisherId = None  # type: Optional[comm.opcua.builtin.Variant.VariantT]
        self.writerGroupIds = None  # type: List[int]
        self.dataSetWriterIds = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        reserveIdsOutput = ReserveIdsOutput()
        reserveIdsOutput.Init(buf, pos)
        return cls.InitFromObj(reserveIdsOutput)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, reserveIdsOutput):
        x = ReserveIdsOutputT()
        x._UnPack(reserveIdsOutput)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.defaultPublisherId == other.defaultPublisherId and \
            self.writerGroupIds == other.writerGroupIds and \
            self.dataSetWriterIds == other.dataSetWriterIds

    # ReserveIdsOutputT
    def _UnPack(self, reserveIdsOutput):
        if reserveIdsOutput is None:
            return
        if reserveIdsOutput.DefaultPublisherId() is not None:
            self.defaultPublisherId = comm.opcua.builtin.Variant.VariantT.InitFromObj(reserveIdsOutput.DefaultPublisherId())
        if not reserveIdsOutput.WriterGroupIdsIsNone():
            if np is None:
                self.writerGroupIds = []
                for i in range(reserveIdsOutput.WriterGroupIdsLength()):
                    self.writerGroupIds.append(reserveIdsOutput.WriterGroupIds(i))
            else:
                self.writerGroupIds = reserveIdsOutput.WriterGroupIdsAsNumpy()
        if not reserveIdsOutput.DataSetWriterIdsIsNone():
            if np is None:
                self.dataSetWriterIds = []
                for i in range(reserveIdsOutput.DataSetWriterIdsLength()):
                    self.dataSetWriterIds.append(reserveIdsOutput.DataSetWriterIds(i))
            else:
                self.dataSetWriterIds = reserveIdsOutput.DataSetWriterIdsAsNumpy()

    # ReserveIdsOutputT
    def Pack(self, builder):
        if self.defaultPublisherId is not None:
            defaultPublisherId = self.defaultPublisherId.Pack(builder)
        if self.writerGroupIds is not None:
            if np is not None and type(self.writerGroupIds) is np.ndarray:
                writerGroupIds = builder.CreateNumpyVector(self.writerGroupIds)
            else:
                ReserveIdsOutputStartWriterGroupIdsVector(builder, len(self.writerGroupIds))
                for i in reversed(range(len(self.writerGroupIds))):
                    builder.PrependUint16(self.writerGroupIds[i])
                writerGroupIds = builder.EndVector()
        if self.dataSetWriterIds is not None:
            if np is not None and type(self.dataSetWriterIds) is np.ndarray:
                dataSetWriterIds = builder.CreateNumpyVector(self.dataSetWriterIds)
            else:
                ReserveIdsOutputStartDataSetWriterIdsVector(builder, len(self.dataSetWriterIds))
                for i in reversed(range(len(self.dataSetWriterIds))):
                    builder.PrependUint16(self.dataSetWriterIds[i])
                dataSetWriterIds = builder.EndVector()
        ReserveIdsOutputStart(builder)
        if self.defaultPublisherId is not None:
            ReserveIdsOutputAddDefaultPublisherId(builder, defaultPublisherId)
        if self.writerGroupIds is not None:
            ReserveIdsOutputAddWriterGroupIds(builder, writerGroupIds)
        if self.dataSetWriterIds is not None:
            ReserveIdsOutputAddDataSetWriterIds(builder, dataSetWriterIds)
        reserveIdsOutput = ReserveIdsOutputEnd(builder)
        return reserveIdsOutput
