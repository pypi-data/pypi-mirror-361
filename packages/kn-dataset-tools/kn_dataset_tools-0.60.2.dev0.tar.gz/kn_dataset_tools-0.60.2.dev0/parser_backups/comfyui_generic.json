{
  "parser_name": "ComfyUI (Generic Workflow Traversal)",
  "priority": 160,
  "target_file_types": [
    "PNG"
  ],
  "detection_rules": [
    {
      "comment": "Rule 1: Must have workflow PNG chunk with valid JSON (fallback ComfyUI format)",
      "source_type": "pil_info_key",
      "source_key": "workflow",
      "operator": "is_valid_json"
    },
    {
      "comment": "Rule 2: Must contain ComfyUI sampler signatures in the JSON",
      "source_type": "pil_info_key",
      "source_key": "workflow",
      "operator": "contains",
      "value": "KSampler"
    }
  ],
  "parsing_instructions": {
    "input_data": {
      "source_options": [
        {
          "source_type": "pil_info_key",
          "source_key": "workflow"
        },
        {
          "source_type": "pil_info_key",
          "source_key": "prompt"
        }
      ],
      "transformations": [
        {
          "type": "json_decode_string_itself"
        }
      ]
    },
    "fields": [
      {
        "target_key": "prompt",
        "method": "comfy_find_text_from_main_sampler_input",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "positive_input_name": "positive",
        "text_input_name_in_encoder": "text",
        "text_encoder_node_types": [
          "CLIPTextEncode",
          "BNK_CLIPTextEncodeAdvanced"
        ]
      },
      {
        "target_key": "negative_prompt",
        "method": "comfy_find_text_from_main_sampler_input",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "negative_input_name": "negative",
        "text_input_name_in_encoder": "text",
        "text_encoder_node_types": [
          "CLIPTextEncode",
          "BNK_CLIPTextEncodeAdvanced"
        ]
      },
      {
        "target_key": "parameters.seed",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "seed",
        "value_type": "integer"
      },
      {
        "target_key": "parameters.steps",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "steps",
        "value_type": "integer"
      },
      {
        "target_key": "parameters.cfg_scale",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "cfg",
        "value_type": "float"
      },
      {
        "target_key": "parameters.sampler_name",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "sampler_name",
        "value_type": "string"
      },
      {
        "target_key": "parameters.scheduler",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "scheduler",
        "value_type": "string",
        "optional": true
      },
      {
        "target_key": "parameters.denoise",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "denoise",
        "value_type": "float",
        "optional": true
      },
      {
        "target_key": "parameters.model",
        "method": "comfy_find_ancestor_node_input_value",
        "start_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "start_node_input_name": "model",
        "target_ancestor_types": [
          "CheckpointLoaderSimple",
          "ECHOCheckpointLoaderSimple",
          "UNETLoader"
        ],
        "target_input_key_in_ancestor": "ckpt_name",
        "fallback_widget_key_in_ancestor": "ckpt_name",
        "value_type": "string"
      },
      {
        "target_key": "parameters.vae_model",
        "method": "comfy_find_ancestor_node_input_value",
        "start_node_types": [
          "CheckpointLoaderSimple",
          "ECHOCheckpointLoaderSimple"
        ],
        "start_node_output_slot_name": "VAE",
        "target_ancestor_types": [
          "VAELoader"
        ],
        "target_input_key_in_ancestor": "vae_name",
        "fallback_widget_key_in_ancestor": "vae_name",
        "value_type": "string",
        "optional": true
      },
      {
        "target_key": "parameters.width",
        "method": "comfy_find_node_input_or_widget_value",
        "node_criteria": [
          {
            "class_type": "EmptyLatentImage"
          },
          {
            "class_type": "EmptyLatentImageFromPresetsSDXL"
          }
        ],
        "input_key": "width",
        "widget_key_for_preset": "preset",
        "preset_regex_width": "(\\d+)\\s*x",
        "value_type": "integer",
        "optional": true
      },
      {
        "target_key": "parameters.height",
        "method": "comfy_find_node_input_or_widget_value",
        "node_criteria": [
          {
            "class_type": "EmptyLatentImage"
          },
          {
            "class_type": "EmptyLatentImageFromPresetsSDXL"
          }
        ],
        "input_key": "height",
        "widget_key_for_preset": "preset",
        "preset_regex_height": "x\\s*(\\d+)",
        "value_type": "integer",
        "optional": true
      },
      {
        "target_key": "parameters.loras",
        "method": "comfy_extract_all_loras",
        "lora_node_types": [
          "LoraLoader",
          "LoraTagLoader"
        ],
        "name_input_key": "lora_name",
        "strength_model_key": "strength_model",
        "strength_clip_key": "strength_clip",
        "text_key_for_tag_loader": "text"
      },
      {
        "target_key": "parameters.clip_skip",
        "method": "comfy_find_node_input_or_widget_value",
        "node_criteria": [
          {
            "class_type": "CLIPSetLastLayer"
          }
        ],
        "input_key": "stop_at_clip_layer",
        "value_type": "integer",
        "optional": true
      }
    ],
    "output_template": {
      "parser_name_from_engine": "ComfyUI (Generic Workflow Traversal)",
      "tool": "ComfyUI",
      "prompt": "$prompt",
      "negative_prompt": "$negative_prompt",
      "parameters": {
        "steps": "$parameters.steps",
        "sampler_name": "$parameters.sampler_name",
        "scheduler": "$parameters.scheduler",
        "cfg_scale": "$parameters.cfg_scale",
        "seed": "$parameters.seed",
        "denoise": "$parameters.denoise",
        "width": "$CONTEXT.width",
        "height": "$CONTEXT.height",
        "model": "$parameters.model",
        "vae_model": "$parameters.vae_model",
        "loras": "$parameters.loras",
        "clip_skip": "$parameters.clip_skip"
      },
      "workflow": "$INPUT_JSON_OBJECT_AS_STRING"
    }
  }
}
