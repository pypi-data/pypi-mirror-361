from uuid import UUID

from lein_vector.schemas.chunk import Chunk


class MemoryManagerABC:
    async def upsert_chunk(self, user_id: int, bot: str, chunk: Chunk) -> None: ...
    async def upsert_chunks(
        self, user_id: int, bot: str, chunks: list[Chunk]
    ) -> None: ...
    async def retrieve_by_embedding(
        self, user_id: int, bot: str, embedding: list[float], topk: int = 3
    ) -> list[Chunk]: ...
    async def retrieve_by_embedding_batch(
        self, user_id: int, bot: str, embeddings: list[list[float]], topk: int = 3
    ) -> list[list[Chunk]]:
        raise NotImplementedError("Not implemented in this backend")

    async def retrieve_by_type(
        self, user_id: int, bot: str, chunk_type: str, topk: int = 3
    ) -> list[Chunk]: ...
    async def retrieve_by_text(
        self, user_id: int, bot: str, query: str, topk: int = 3
    ) -> list[Chunk]: ...
    async def merge_old_chunks(
        self, user_id: int, bot: str, chunk_type: str
    ) -> None: ...
    async def archive_user(self, user_id: int, bot: str) -> None: ...
    async def restore_user(self, user_id: int, bot: str) -> None: ...
    async def increment_hit(self, user_id: int, bot: str, chunk_id: UUID) -> None: ...
    async def pop_first_n(
        self, user_id: int, bot: str, chunk_type: str, n: int
    ) -> list[Chunk]: ...
    async def delete_oldest_nonpersistent(
        self, user_id: int, bot: str, keep: int
    ) -> None: ...
    async def delete_chunk(self, user_id: int, bot: str, chunk_id: UUID) -> None: ...
    async def delete_chunks(
        self, user_id: int, bot: str, chunk_ids: list[UUID]
    ) -> None: ...
    async def delete_all(self, user_id: int, bot: str) -> None: ...
