# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis position commands
class AxsCmdFixedstopData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdFixedstopData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdFixedstopData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdFixedstopData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # buffered type for generic command
    # AxsCmdFixedstopData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # commanded target position (or increment for relative position command)
    # AxsCmdFixedstopData
    def AxsPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # commanded force / torque limitation
    # AxsCmdFixedstopData
    def MaxTrq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # dynamic limits for the motion of this command
    # AxsCmdFixedstopData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCmdFixedstopDataStart(builder): builder.StartObject(4)
def Start(builder):
    return AxsCmdFixedstopDataStart(builder)
def AxsCmdFixedstopDataAddBuffered(builder, buffered): builder.PrependBoolSlot(0, buffered, 0)
def AddBuffered(builder, buffered):
    return AxsCmdFixedstopDataAddBuffered(builder, buffered)
def AxsCmdFixedstopDataAddAxsPos(builder, axsPos): builder.PrependFloat64Slot(1, axsPos, 0.0)
def AddAxsPos(builder, axsPos):
    return AxsCmdFixedstopDataAddAxsPos(builder, axsPos)
def AxsCmdFixedstopDataAddMaxTrq(builder, maxTrq): builder.PrependFloat64Slot(2, maxTrq, 0.0)
def AddMaxTrq(builder, maxTrq):
    return AxsCmdFixedstopDataAddMaxTrq(builder, maxTrq)
def AxsCmdFixedstopDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return AxsCmdFixedstopDataAddLim(builder, lim)
def AxsCmdFixedstopDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdFixedstopDataEnd(builder)
import motion.core.fbtypes.DynamicLimits
try:
    from typing import Optional
except:
    pass

class AxsCmdFixedstopDataT(object):

    # AxsCmdFixedstopDataT
    def __init__(self):
        self.buffered = False  # type: bool
        self.axsPos = 0.0  # type: float
        self.maxTrq = 0.0  # type: float
        self.lim = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdFixedstopData = AxsCmdFixedstopData()
        axsCmdFixedstopData.Init(buf, pos)
        return cls.InitFromObj(axsCmdFixedstopData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdFixedstopData):
        x = AxsCmdFixedstopDataT()
        x._UnPack(axsCmdFixedstopData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.buffered == other.buffered and \
            self.axsPos == other.axsPos and \
            self.maxTrq == other.maxTrq and \
            self.lim == other.lim

    # AxsCmdFixedstopDataT
    def _UnPack(self, axsCmdFixedstopData):
        if axsCmdFixedstopData is None:
            return
        self.buffered = axsCmdFixedstopData.Buffered()
        self.axsPos = axsCmdFixedstopData.AxsPos()
        self.maxTrq = axsCmdFixedstopData.MaxTrq()
        if axsCmdFixedstopData.Lim() is not None:
            self.lim = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(axsCmdFixedstopData.Lim())

    # AxsCmdFixedstopDataT
    def Pack(self, builder):
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        AxsCmdFixedstopDataStart(builder)
        AxsCmdFixedstopDataAddBuffered(builder, self.buffered)
        AxsCmdFixedstopDataAddAxsPos(builder, self.axsPos)
        AxsCmdFixedstopDataAddMaxTrq(builder, self.maxTrq)
        if self.lim is not None:
            AxsCmdFixedstopDataAddLim(builder, lim)
        axsCmdFixedstopData = AxsCmdFixedstopDataEnd(builder)
        return axsCmdFixedstopData
