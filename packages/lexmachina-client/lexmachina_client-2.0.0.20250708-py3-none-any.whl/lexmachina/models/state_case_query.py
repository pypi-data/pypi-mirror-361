# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20250708
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from lexmachina.models.attorney_filter import AttorneyFilter
from lexmachina.models.case_dates_filter import CaseDatesFilter
from lexmachina.models.case_status import CaseStatus
from lexmachina.models.case_tags_filter import CaseTagsFilter
from lexmachina.models.case_types_filter import CaseTypesFilter
from lexmachina.models.event_filter import EventFilter
from lexmachina.models.individual_rulings_filter import IndividualRulingsFilter
from lexmachina.models.individual_state_damages_filter import IndividualStateDamagesFilter
from lexmachina.models.judge_filter import JudgeFilter
from lexmachina.models.law_firm_filter import LawFirmFilter
from lexmachina.models.ordering import Ordering
from lexmachina.models.party_filter import PartyFilter
from lexmachina.models.resolutions_filter import ResolutionsFilter
from lexmachina.models.state_court_filter import StateCourtFilter
from typing import Optional, Set
from typing_extensions import Self

class StateCaseQuery(BaseModel):
    """
    StateCaseQuery
    """ # noqa: E501
    courts: StateCourtFilter
    case_status: Optional[CaseStatus] = Field(default=None, alias="caseStatus")
    case_types: Optional[CaseTypesFilter] = Field(default=None, alias="caseTypes")
    case_tags: Optional[CaseTagsFilter] = Field(default=None, alias="caseTags")
    dates: Optional[CaseDatesFilter] = None
    judges: Optional[JudgeFilter] = None
    events: Optional[EventFilter] = None
    law_firms: Optional[LawFirmFilter] = Field(default=None, alias="lawFirms")
    attorneys: Optional[AttorneyFilter] = None
    parties: Optional[PartyFilter] = None
    resolutions: Optional[ResolutionsFilter] = None
    damages: Optional[List[IndividualStateDamagesFilter]] = None
    rulings: Optional[List[IndividualRulingsFilter]] = None
    ordering: Optional[Ordering] = None
    page: Optional[StrictInt] = 1
    page_size: Optional[StrictInt] = Field(default=5, alias="pageSize")
    __properties: ClassVar[List[str]] = ["courts", "caseStatus", "caseTypes", "caseTags", "dates", "judges", "events", "lawFirms", "attorneys", "parties", "resolutions", "damages", "rulings", "ordering", "page", "pageSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StateCaseQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of courts
        if self.courts:
            _dict['courts'] = self.courts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of case_types
        if self.case_types:
            _dict['caseTypes'] = self.case_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of case_tags
        if self.case_tags:
            _dict['caseTags'] = self.case_tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dates
        if self.dates:
            _dict['dates'] = self.dates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of judges
        if self.judges:
            _dict['judges'] = self.judges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of events
        if self.events:
            _dict['events'] = self.events.to_dict()
        # override the default output from pydantic by calling `to_dict()` of law_firms
        if self.law_firms:
            _dict['lawFirms'] = self.law_firms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attorneys
        if self.attorneys:
            _dict['attorneys'] = self.attorneys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parties
        if self.parties:
            _dict['parties'] = self.parties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resolutions
        if self.resolutions:
            _dict['resolutions'] = self.resolutions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in damages (list)
        _items = []
        if self.damages:
            for _item_damages in self.damages:
                if _item_damages:
                    _items.append(_item_damages.to_dict())
            _dict['damages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rulings (list)
        _items = []
        if self.rulings:
            for _item_rulings in self.rulings:
                if _item_rulings:
                    _items.append(_item_rulings.to_dict())
            _dict['rulings'] = _items
        # set to None if case_status (nullable) is None
        # and model_fields_set contains the field
        if self.case_status is None and "case_status" in self.model_fields_set:
            _dict['caseStatus'] = None

        # set to None if case_types (nullable) is None
        # and model_fields_set contains the field
        if self.case_types is None and "case_types" in self.model_fields_set:
            _dict['caseTypes'] = None

        # set to None if case_tags (nullable) is None
        # and model_fields_set contains the field
        if self.case_tags is None and "case_tags" in self.model_fields_set:
            _dict['caseTags'] = None

        # set to None if dates (nullable) is None
        # and model_fields_set contains the field
        if self.dates is None and "dates" in self.model_fields_set:
            _dict['dates'] = None

        # set to None if judges (nullable) is None
        # and model_fields_set contains the field
        if self.judges is None and "judges" in self.model_fields_set:
            _dict['judges'] = None

        # set to None if events (nullable) is None
        # and model_fields_set contains the field
        if self.events is None and "events" in self.model_fields_set:
            _dict['events'] = None

        # set to None if law_firms (nullable) is None
        # and model_fields_set contains the field
        if self.law_firms is None and "law_firms" in self.model_fields_set:
            _dict['lawFirms'] = None

        # set to None if attorneys (nullable) is None
        # and model_fields_set contains the field
        if self.attorneys is None and "attorneys" in self.model_fields_set:
            _dict['attorneys'] = None

        # set to None if parties (nullable) is None
        # and model_fields_set contains the field
        if self.parties is None and "parties" in self.model_fields_set:
            _dict['parties'] = None

        # set to None if resolutions (nullable) is None
        # and model_fields_set contains the field
        if self.resolutions is None and "resolutions" in self.model_fields_set:
            _dict['resolutions'] = None

        # set to None if damages (nullable) is None
        # and model_fields_set contains the field
        if self.damages is None and "damages" in self.model_fields_set:
            _dict['damages'] = None

        # set to None if rulings (nullable) is None
        # and model_fields_set contains the field
        if self.rulings is None and "rulings" in self.model_fields_set:
            _dict['rulings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StateCaseQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "courts": StateCourtFilter.from_dict(obj["courts"]) if obj.get("courts") is not None else None,
            "caseStatus": obj.get("caseStatus"),
            "caseTypes": CaseTypesFilter.from_dict(obj["caseTypes"]) if obj.get("caseTypes") is not None else None,
            "caseTags": CaseTagsFilter.from_dict(obj["caseTags"]) if obj.get("caseTags") is not None else None,
            "dates": CaseDatesFilter.from_dict(obj["dates"]) if obj.get("dates") is not None else None,
            "judges": JudgeFilter.from_dict(obj["judges"]) if obj.get("judges") is not None else None,
            "events": EventFilter.from_dict(obj["events"]) if obj.get("events") is not None else None,
            "lawFirms": LawFirmFilter.from_dict(obj["lawFirms"]) if obj.get("lawFirms") is not None else None,
            "attorneys": AttorneyFilter.from_dict(obj["attorneys"]) if obj.get("attorneys") is not None else None,
            "parties": PartyFilter.from_dict(obj["parties"]) if obj.get("parties") is not None else None,
            "resolutions": ResolutionsFilter.from_dict(obj["resolutions"]) if obj.get("resolutions") is not None else None,
            "damages": [IndividualStateDamagesFilter.from_dict(_item) for _item in obj["damages"]] if obj.get("damages") is not None else None,
            "rulings": [IndividualRulingsFilter.from_dict(_item) for _item in obj["rulings"]] if obj.get("rulings") is not None else None,
            "ordering": obj.get("ordering"),
            "page": obj.get("page") if obj.get("page") is not None else 1,
            "pageSize": obj.get("pageSize") if obj.get("pageSize") is not None else 5
        })
        return _obj


