# coding: utf-8

"""
    Lex Machina API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 20250708
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from lexmachina.models.appeals_case_dates import AppealsCaseDates
from lexmachina.models.attorney import Attorney
from lexmachina.models.case_resolution import CaseResolution
from lexmachina.models.case_status import CaseStatus
from lexmachina.models.federal_judge import FederalJudge
from lexmachina.models.law_firm import LawFirm
from lexmachina.models.originating_district_court_case import OriginatingDistrictCourtCase
from lexmachina.models.party import Party
from lexmachina.models.supreme_court_or_rehearing_decision import SupremeCourtOrRehearingDecision
from typing import Optional, Set
from typing_extensions import Self

class AppealsCaseData(BaseModel):
    """
    A single case from a federal district appeals court case and relevant metadata.
    """ # noqa: E501
    appeals_case_id: StrictInt = Field(alias="appealsCaseId")
    title: StrictStr
    court: StrictStr
    civil_action_number: StrictStr = Field(alias="civilActionNumber")
    status: CaseStatus
    case_tags: List[StrictStr] = Field(alias="caseTags")
    dates: AppealsCaseDates
    judges: List[FederalJudge]
    law_firms: List[LawFirm] = Field(alias="lawFirms")
    attorneys: List[Attorney]
    parties: List[Party]
    originating_venues: List[StrictStr] = Field(alias="originatingVenues")
    originating_cases: List[OriginatingDistrictCourtCase] = Field(alias="originatingCases")
    appealability_rulings: List[StrictStr] = Field(alias="appealabilityRulings")
    case_resolution: Optional[CaseResolution] = Field(default=None, alias="caseResolution")
    supreme_court_and_rehearing_decisions: List[SupremeCourtOrRehearingDecision] = Field(alias="supremeCourtAndRehearingDecisions")
    __properties: ClassVar[List[str]] = ["appealsCaseId", "title", "court", "civilActionNumber", "status", "caseTags", "dates", "judges", "lawFirms", "attorneys", "parties", "originatingVenues", "originatingCases", "appealabilityRulings", "caseResolution", "supremeCourtAndRehearingDecisions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppealsCaseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dates
        if self.dates:
            _dict['dates'] = self.dates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in judges (list)
        _items = []
        if self.judges:
            for _item_judges in self.judges:
                if _item_judges:
                    _items.append(_item_judges.to_dict())
            _dict['judges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in law_firms (list)
        _items = []
        if self.law_firms:
            for _item_law_firms in self.law_firms:
                if _item_law_firms:
                    _items.append(_item_law_firms.to_dict())
            _dict['lawFirms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attorneys (list)
        _items = []
        if self.attorneys:
            for _item_attorneys in self.attorneys:
                if _item_attorneys:
                    _items.append(_item_attorneys.to_dict())
            _dict['attorneys'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parties (list)
        _items = []
        if self.parties:
            for _item_parties in self.parties:
                if _item_parties:
                    _items.append(_item_parties.to_dict())
            _dict['parties'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in originating_cases (list)
        _items = []
        if self.originating_cases:
            for _item_originating_cases in self.originating_cases:
                if _item_originating_cases:
                    _items.append(_item_originating_cases.to_dict())
            _dict['originatingCases'] = _items
        # override the default output from pydantic by calling `to_dict()` of case_resolution
        if self.case_resolution:
            _dict['caseResolution'] = self.case_resolution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in supreme_court_and_rehearing_decisions (list)
        _items = []
        if self.supreme_court_and_rehearing_decisions:
            for _item_supreme_court_and_rehearing_decisions in self.supreme_court_and_rehearing_decisions:
                if _item_supreme_court_and_rehearing_decisions:
                    _items.append(_item_supreme_court_and_rehearing_decisions.to_dict())
            _dict['supremeCourtAndRehearingDecisions'] = _items
        # set to None if case_resolution (nullable) is None
        # and model_fields_set contains the field
        if self.case_resolution is None and "case_resolution" in self.model_fields_set:
            _dict['caseResolution'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppealsCaseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appealsCaseId": obj.get("appealsCaseId"),
            "title": obj.get("title"),
            "court": obj.get("court"),
            "civilActionNumber": obj.get("civilActionNumber"),
            "status": obj.get("status"),
            "caseTags": obj.get("caseTags"),
            "dates": AppealsCaseDates.from_dict(obj["dates"]) if obj.get("dates") is not None else None,
            "judges": [FederalJudge.from_dict(_item) for _item in obj["judges"]] if obj.get("judges") is not None else None,
            "lawFirms": [LawFirm.from_dict(_item) for _item in obj["lawFirms"]] if obj.get("lawFirms") is not None else None,
            "attorneys": [Attorney.from_dict(_item) for _item in obj["attorneys"]] if obj.get("attorneys") is not None else None,
            "parties": [Party.from_dict(_item) for _item in obj["parties"]] if obj.get("parties") is not None else None,
            "originatingVenues": obj.get("originatingVenues"),
            "originatingCases": [OriginatingDistrictCourtCase.from_dict(_item) for _item in obj["originatingCases"]] if obj.get("originatingCases") is not None else None,
            "appealabilityRulings": obj.get("appealabilityRulings"),
            "caseResolution": CaseResolution.from_dict(obj["caseResolution"]) if obj.get("caseResolution") is not None else None,
            "supremeCourtAndRehearingDecisions": [SupremeCourtOrRehearingDecision.from_dict(_item) for _item in obj["supremeCourtAndRehearingDecisions"]] if obj.get("supremeCourtAndRehearingDecisions") is not None else None
        })
        return _obj


