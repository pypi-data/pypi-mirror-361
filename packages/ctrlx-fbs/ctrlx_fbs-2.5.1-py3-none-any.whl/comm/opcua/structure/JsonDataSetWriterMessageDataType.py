# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class JsonDataSetWriterMessageDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JsonDataSetWriterMessageDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsJsonDataSetWriterMessageDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # JsonDataSetWriterMessageDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # JsonDataSetWriterMessageDataType
    def DataSetMessageContentMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def JsonDataSetWriterMessageDataTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return JsonDataSetWriterMessageDataTypeStart(builder)
def JsonDataSetWriterMessageDataTypeAddDataSetMessageContentMask(builder, dataSetMessageContentMask): builder.PrependUint32Slot(0, dataSetMessageContentMask, 0)
def AddDataSetMessageContentMask(builder, dataSetMessageContentMask):
    return JsonDataSetWriterMessageDataTypeAddDataSetMessageContentMask(builder, dataSetMessageContentMask)
def JsonDataSetWriterMessageDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return JsonDataSetWriterMessageDataTypeEnd(builder)

class JsonDataSetWriterMessageDataTypeT(object):

    # JsonDataSetWriterMessageDataTypeT
    def __init__(self):
        self.dataSetMessageContentMask = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        jsonDataSetWriterMessageDataType = JsonDataSetWriterMessageDataType()
        jsonDataSetWriterMessageDataType.Init(buf, pos)
        return cls.InitFromObj(jsonDataSetWriterMessageDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, jsonDataSetWriterMessageDataType):
        x = JsonDataSetWriterMessageDataTypeT()
        x._UnPack(jsonDataSetWriterMessageDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dataSetMessageContentMask == other.dataSetMessageContentMask

    # JsonDataSetWriterMessageDataTypeT
    def _UnPack(self, jsonDataSetWriterMessageDataType):
        if jsonDataSetWriterMessageDataType is None:
            return
        self.dataSetMessageContentMask = jsonDataSetWriterMessageDataType.DataSetMessageContentMask()

    # JsonDataSetWriterMessageDataTypeT
    def Pack(self, builder):
        JsonDataSetWriterMessageDataTypeStart(builder)
        JsonDataSetWriterMessageDataTypeAddDataSetMessageContentMask(builder, self.dataSetMessageContentMask)
        jsonDataSetWriterMessageDataType = JsonDataSetWriterMessageDataTypeEnd(builder)
        return jsonDataSetWriterMessageDataType
