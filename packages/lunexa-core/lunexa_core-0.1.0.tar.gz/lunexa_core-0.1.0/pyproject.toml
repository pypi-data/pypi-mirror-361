[tool.poetry]
name        = "lunexa-core"
version     = "0.1.0"
description = "Umbrella CLI & shared utils for all Lunexa projects"
authors     = ["Simbarashe Timire <stimire92@gmail.com>"]
license     = "MIT"
readme      = "README.md"

packages = [
  { include = "lunexa",      from = "src" },
  { include = "lunexa_api",  from = "plugins/api/src" }
]

[tool.poetry.dependencies]
python = ">=3.9,<3.13"

typer  = {extras = ["all"], version = "^0.12.3"}
rich   = "^13.7"

# FastAPI scaffold dependencies
fastapi             = "^0.116.1"
uvicorn             = {extras = ["standard"], version = "^0.35.0"}
pydantic-settings   = "^2.1"

[tool.poetry.group.dev.dependencies]
bump-my-version = "^1.2"
pre-commit      = "^4.2"
pytest          = "^8.2"
pytest-cov      = "^5.0"
pytest-asyncio  = "^0.24"
pytest-mock     = "^3.12"
pytest-xdist    = "^3.6"
coverage        = "^7.5"
build           = "^1.2"
twine           = "^6.1"
# Add these missing dev dependencies
black           = "^24.4.2"
ruff            = "^0.4.4"
mypy            = "^1.10.0"
bandit          = "^1.7.8"

[tool.poetry.scripts]
lunexa = "lunexa.cli:main"
bump   = "bump_my_version.bump:main"

# Add this section for entry points
[tool.poetry.plugins."lunexa.plugins"]
api = "lunexa_api:cli"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

# Test configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src", "plugins"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
