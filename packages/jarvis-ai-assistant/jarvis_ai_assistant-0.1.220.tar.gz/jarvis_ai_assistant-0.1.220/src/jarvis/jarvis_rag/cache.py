import hashlib
from typing import List, Optional, Any

from diskcache import Cache


class EmbeddingCache:
    """
    A disk-based cache for storing and retrieving text embeddings.

    This class uses diskcache to create a persistent, local cache. It generates
    a key for each text content based on its SHA256 hash, making lookups
    deterministic and efficient.
    """

    def __init__(self, cache_dir: str, salt: str = ""):
        """
        Initializes the EmbeddingCache.

        Args:
            cache_dir (str): The directory where the cache will be stored.
            salt (str): A salt to be added to the hash. This is crucial for
                        ensuring that embeddings generated by different models
                        do not collide. For example, use the model name as a salt.
        """
        self.cache = Cache(cache_dir)
        self.salt = salt

    def _get_key(self, text: str) -> str:
        """Generates a unique cache key for a given text and salt."""
        hash_object = hashlib.sha256((self.salt + text).encode("utf-8"))
        return hash_object.hexdigest()

    def get(self, text: str) -> Optional[Any]:
        """
        Retrieves an embedding from the cache.

        Args:
            text (str): The text to look up.

        Returns:
            The cached embedding, or None if it's not in the cache.
        """
        key = self._get_key(text)
        return self.cache.get(key)

    def set(self, text: str, embedding: Any) -> None:
        """
        Stores an embedding in the cache.

        Args:
            text (str): The text corresponding to the embedding.
            embedding (Any): The embedding vector to store.
        """
        key = self._get_key(text)
        self.cache.set(key, embedding)

    def get_batch(self, texts: List[str]) -> List[Optional[Any]]:
        """
        Retrieves a batch of embeddings from the cache.

        Args:
            texts (List[str]): A list of texts to look up.

        Returns:
            A list containing cached embeddings or None for cache misses.
        """
        return [self.get(text) for text in texts]

    def set_batch(self, texts: List[str], embeddings: List[Any]) -> None:
        """
        Stores a batch of embeddings in the cache.

        Args:
            texts (List[str]): The list of texts.
            embeddings (List[Any]): The list of corresponding embeddings.
        """
        if len(texts) != len(embeddings):
            raise ValueError("Length of texts and embeddings must be the same.")

        with self.cache.transact():
            for text, embedding in zip(texts, embeddings):
                self.set(text, embedding)

    def close(self):
        """Closes the cache connection."""
        self.cache.close()
