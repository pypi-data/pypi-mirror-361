# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TriggerCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TriggerCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTriggerCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TriggerCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TriggerCfg
    def TriggerType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # TriggerCfg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TriggerCfg
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TriggerCfg
    def PreTrigger(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def TriggerCfgStart(builder): builder.StartObject(4)
def Start(builder):
    return TriggerCfgStart(builder)
def TriggerCfgAddTriggerType(builder, triggerType): builder.PrependInt8Slot(0, triggerType, 0)
def AddTriggerType(builder, triggerType):
    return TriggerCfgAddTriggerType(builder, triggerType)
def TriggerCfgAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return TriggerCfgAddName(builder, name)
def TriggerCfgAddLevel(builder, level): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(level), 0)
def AddLevel(builder, level):
    return TriggerCfgAddLevel(builder, level)
def TriggerCfgAddPreTrigger(builder, preTrigger): builder.PrependFloat64Slot(3, preTrigger, 0.0)
def AddPreTrigger(builder, preTrigger):
    return TriggerCfgAddPreTrigger(builder, preTrigger)
def TriggerCfgEnd(builder): return builder.EndObject()
def End(builder):
    return TriggerCfgEnd(builder)

class TriggerCfgT(object):

    # TriggerCfgT
    def __init__(self):
        self.triggerType = 0  # type: int
        self.name = None  # type: str
        self.level = None  # type: str
        self.preTrigger = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        triggerCfg = TriggerCfg()
        triggerCfg.Init(buf, pos)
        return cls.InitFromObj(triggerCfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, triggerCfg):
        x = TriggerCfgT()
        x._UnPack(triggerCfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.triggerType == other.triggerType and \
            self.name == other.name and \
            self.level == other.level and \
            self.preTrigger == other.preTrigger

    # TriggerCfgT
    def _UnPack(self, triggerCfg):
        if triggerCfg is None:
            return
        self.triggerType = triggerCfg.TriggerType()
        self.name = triggerCfg.Name()
        self.level = triggerCfg.Level()
        self.preTrigger = triggerCfg.PreTrigger()

    # TriggerCfgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.level is not None:
            level = builder.CreateString(self.level)
        TriggerCfgStart(builder)
        TriggerCfgAddTriggerType(builder, self.triggerType)
        if self.name is not None:
            TriggerCfgAddName(builder, name)
        if self.level is not None:
            TriggerCfgAddLevel(builder, level)
        TriggerCfgAddPreTrigger(builder, self.preTrigger)
        triggerCfg = TriggerCfgEnd(builder)
        return triggerCfg
