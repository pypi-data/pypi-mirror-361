from config import Config
from typing import List
from langchain_core.embeddings import Embeddings
from pydantic import BaseModel
import requests

class Embedder(BaseModel, Embeddings):
    """
    A class to generate text embeddings using {{ embedding.model }}.
    """

    @classmethod
    def embed_query(cls, text: str) -> List[float]:
        """
        Generates an embedding for a single query text.
        """
        data = {"input": [text]}
        {{ embedding_component.get_code_logic() | indent(8) }}
        return result[0]

    @classmethod
    def embed_documents(cls, texts: List[str]) -> List[List[float]]:
        """
        Generates embeddings for multiple documents.
        """
        data = {"input": texts}
        {{ embedding_component.get_code_logic() | indent(8) }}
        return result

    def get_vector_dimension(self) -> int:
        """
        Returns the vector dimension of the embedding model.
        """
        return {{ embedding_component.get_vector_dimension() }}
