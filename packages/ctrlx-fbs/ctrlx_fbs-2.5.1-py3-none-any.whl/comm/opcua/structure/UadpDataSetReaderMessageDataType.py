# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UadpDataSetReaderMessageDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UadpDataSetReaderMessageDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUadpDataSetReaderMessageDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UadpDataSetReaderMessageDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UadpDataSetReaderMessageDataType
    def GroupVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UadpDataSetReaderMessageDataType
    def NetworkMessageNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # UadpDataSetReaderMessageDataType
    def DataSetOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # UadpDataSetReaderMessageDataType
    def DataSetClassId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.Guid import Guid
            obj = Guid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UadpDataSetReaderMessageDataType
    def NetworkMessageContentMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UadpDataSetReaderMessageDataType
    def DataSetMessageContentMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UadpDataSetReaderMessageDataType
    def PublishingInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # UadpDataSetReaderMessageDataType
    def ReceiveOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # UadpDataSetReaderMessageDataType
    def ProcessingOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def UadpDataSetReaderMessageDataTypeStart(builder): builder.StartObject(9)
def Start(builder):
    return UadpDataSetReaderMessageDataTypeStart(builder)
def UadpDataSetReaderMessageDataTypeAddGroupVersion(builder, groupVersion): builder.PrependUint32Slot(0, groupVersion, 0)
def AddGroupVersion(builder, groupVersion):
    return UadpDataSetReaderMessageDataTypeAddGroupVersion(builder, groupVersion)
def UadpDataSetReaderMessageDataTypeAddNetworkMessageNumber(builder, networkMessageNumber): builder.PrependUint16Slot(1, networkMessageNumber, 0)
def AddNetworkMessageNumber(builder, networkMessageNumber):
    return UadpDataSetReaderMessageDataTypeAddNetworkMessageNumber(builder, networkMessageNumber)
def UadpDataSetReaderMessageDataTypeAddDataSetOffset(builder, dataSetOffset): builder.PrependUint16Slot(2, dataSetOffset, 0)
def AddDataSetOffset(builder, dataSetOffset):
    return UadpDataSetReaderMessageDataTypeAddDataSetOffset(builder, dataSetOffset)
def UadpDataSetReaderMessageDataTypeAddDataSetClassId(builder, dataSetClassId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetClassId), 0)
def AddDataSetClassId(builder, dataSetClassId):
    return UadpDataSetReaderMessageDataTypeAddDataSetClassId(builder, dataSetClassId)
def UadpDataSetReaderMessageDataTypeAddNetworkMessageContentMask(builder, networkMessageContentMask): builder.PrependUint32Slot(4, networkMessageContentMask, 0)
def AddNetworkMessageContentMask(builder, networkMessageContentMask):
    return UadpDataSetReaderMessageDataTypeAddNetworkMessageContentMask(builder, networkMessageContentMask)
def UadpDataSetReaderMessageDataTypeAddDataSetMessageContentMask(builder, dataSetMessageContentMask): builder.PrependUint32Slot(5, dataSetMessageContentMask, 0)
def AddDataSetMessageContentMask(builder, dataSetMessageContentMask):
    return UadpDataSetReaderMessageDataTypeAddDataSetMessageContentMask(builder, dataSetMessageContentMask)
def UadpDataSetReaderMessageDataTypeAddPublishingInterval(builder, publishingInterval): builder.PrependFloat64Slot(6, publishingInterval, 0.0)
def AddPublishingInterval(builder, publishingInterval):
    return UadpDataSetReaderMessageDataTypeAddPublishingInterval(builder, publishingInterval)
def UadpDataSetReaderMessageDataTypeAddReceiveOffset(builder, receiveOffset): builder.PrependFloat64Slot(7, receiveOffset, 0.0)
def AddReceiveOffset(builder, receiveOffset):
    return UadpDataSetReaderMessageDataTypeAddReceiveOffset(builder, receiveOffset)
def UadpDataSetReaderMessageDataTypeAddProcessingOffset(builder, processingOffset): builder.PrependFloat64Slot(8, processingOffset, 0.0)
def AddProcessingOffset(builder, processingOffset):
    return UadpDataSetReaderMessageDataTypeAddProcessingOffset(builder, processingOffset)
def UadpDataSetReaderMessageDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return UadpDataSetReaderMessageDataTypeEnd(builder)
import comm.opcua.builtin.Guid
try:
    from typing import Optional
except:
    pass

class UadpDataSetReaderMessageDataTypeT(object):

    # UadpDataSetReaderMessageDataTypeT
    def __init__(self):
        self.groupVersion = 0  # type: int
        self.networkMessageNumber = 0  # type: int
        self.dataSetOffset = 0  # type: int
        self.dataSetClassId = None  # type: Optional[comm.opcua.builtin.Guid.GuidT]
        self.networkMessageContentMask = 0  # type: int
        self.dataSetMessageContentMask = 0  # type: int
        self.publishingInterval = 0.0  # type: float
        self.receiveOffset = 0.0  # type: float
        self.processingOffset = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        uadpDataSetReaderMessageDataType = UadpDataSetReaderMessageDataType()
        uadpDataSetReaderMessageDataType.Init(buf, pos)
        return cls.InitFromObj(uadpDataSetReaderMessageDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, uadpDataSetReaderMessageDataType):
        x = UadpDataSetReaderMessageDataTypeT()
        x._UnPack(uadpDataSetReaderMessageDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.groupVersion == other.groupVersion and \
            self.networkMessageNumber == other.networkMessageNumber and \
            self.dataSetOffset == other.dataSetOffset and \
            self.dataSetClassId == other.dataSetClassId and \
            self.networkMessageContentMask == other.networkMessageContentMask and \
            self.dataSetMessageContentMask == other.dataSetMessageContentMask and \
            self.publishingInterval == other.publishingInterval and \
            self.receiveOffset == other.receiveOffset and \
            self.processingOffset == other.processingOffset

    # UadpDataSetReaderMessageDataTypeT
    def _UnPack(self, uadpDataSetReaderMessageDataType):
        if uadpDataSetReaderMessageDataType is None:
            return
        self.groupVersion = uadpDataSetReaderMessageDataType.GroupVersion()
        self.networkMessageNumber = uadpDataSetReaderMessageDataType.NetworkMessageNumber()
        self.dataSetOffset = uadpDataSetReaderMessageDataType.DataSetOffset()
        if uadpDataSetReaderMessageDataType.DataSetClassId() is not None:
            self.dataSetClassId = comm.opcua.builtin.Guid.GuidT.InitFromObj(uadpDataSetReaderMessageDataType.DataSetClassId())
        self.networkMessageContentMask = uadpDataSetReaderMessageDataType.NetworkMessageContentMask()
        self.dataSetMessageContentMask = uadpDataSetReaderMessageDataType.DataSetMessageContentMask()
        self.publishingInterval = uadpDataSetReaderMessageDataType.PublishingInterval()
        self.receiveOffset = uadpDataSetReaderMessageDataType.ReceiveOffset()
        self.processingOffset = uadpDataSetReaderMessageDataType.ProcessingOffset()

    # UadpDataSetReaderMessageDataTypeT
    def Pack(self, builder):
        if self.dataSetClassId is not None:
            dataSetClassId = self.dataSetClassId.Pack(builder)
        UadpDataSetReaderMessageDataTypeStart(builder)
        UadpDataSetReaderMessageDataTypeAddGroupVersion(builder, self.groupVersion)
        UadpDataSetReaderMessageDataTypeAddNetworkMessageNumber(builder, self.networkMessageNumber)
        UadpDataSetReaderMessageDataTypeAddDataSetOffset(builder, self.dataSetOffset)
        if self.dataSetClassId is not None:
            UadpDataSetReaderMessageDataTypeAddDataSetClassId(builder, dataSetClassId)
        UadpDataSetReaderMessageDataTypeAddNetworkMessageContentMask(builder, self.networkMessageContentMask)
        UadpDataSetReaderMessageDataTypeAddDataSetMessageContentMask(builder, self.dataSetMessageContentMask)
        UadpDataSetReaderMessageDataTypeAddPublishingInterval(builder, self.publishingInterval)
        UadpDataSetReaderMessageDataTypeAddReceiveOffset(builder, self.receiveOffset)
        UadpDataSetReaderMessageDataTypeAddProcessingOffset(builder, self.processingOffset)
        uadpDataSetReaderMessageDataType = UadpDataSetReaderMessageDataTypeEnd(builder)
        return uadpDataSetReaderMessageDataType
