# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_KinPathSmooth(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_KinPathSmooth()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_KinPathSmooth(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_KinPathSmooth
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # command base input
    # Cmd_KinPathSmooth
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # is this the start of the path smooth 
    # Cmd_KinPathSmooth
    def IsStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # maximum permissible tolerance eps
    # Cmd_KinPathSmooth
    def Eps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # number of following commands, that should be completely prepared
    # Cmd_KinPathSmooth
    def PrepCmds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # rounding type
    # Cmd_KinPathSmooth
    def RoundingType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Cmd_KinPathSmoothStart(builder): builder.StartObject(5)
def Start(builder):
    return Cmd_KinPathSmoothStart(builder)
def Cmd_KinPathSmoothAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Cmd_KinPathSmoothAddBase(builder, base)
def Cmd_KinPathSmoothAddIsStart(builder, isStart): builder.PrependBoolSlot(1, isStart, 1)
def AddIsStart(builder, isStart):
    return Cmd_KinPathSmoothAddIsStart(builder, isStart)
def Cmd_KinPathSmoothAddEps(builder, eps): builder.PrependFloat64Slot(2, eps, 0.0)
def AddEps(builder, eps):
    return Cmd_KinPathSmoothAddEps(builder, eps)
def Cmd_KinPathSmoothAddPrepCmds(builder, prepCmds): builder.PrependUint32Slot(3, prepCmds, 0)
def AddPrepCmds(builder, prepCmds):
    return Cmd_KinPathSmoothAddPrepCmds(builder, prepCmds)
def Cmd_KinPathSmoothAddRoundingType(builder, roundingType): builder.PrependInt8Slot(4, roundingType, 0)
def AddRoundingType(builder, roundingType):
    return Cmd_KinPathSmoothAddRoundingType(builder, roundingType)
def Cmd_KinPathSmoothEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_KinPathSmoothEnd(builder)
import script.manager.fbtypes.Cmd_Base
try:
    from typing import Optional
except:
    pass

class Cmd_KinPathSmoothT(object):

    # Cmd_KinPathSmoothT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.isStart = True  # type: bool
        self.eps = 0.0  # type: float
        self.prepCmds = 0  # type: int
        self.roundingType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdKinPathSmooth = Cmd_KinPathSmooth()
        cmdKinPathSmooth.Init(buf, pos)
        return cls.InitFromObj(cmdKinPathSmooth)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdKinPathSmooth):
        x = Cmd_KinPathSmoothT()
        x._UnPack(cmdKinPathSmooth)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.isStart == other.isStart and \
            self.eps == other.eps and \
            self.prepCmds == other.prepCmds and \
            self.roundingType == other.roundingType

    # Cmd_KinPathSmoothT
    def _UnPack(self, cmdKinPathSmooth):
        if cmdKinPathSmooth is None:
            return
        if cmdKinPathSmooth.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdKinPathSmooth.Base())
        self.isStart = cmdKinPathSmooth.IsStart()
        self.eps = cmdKinPathSmooth.Eps()
        self.prepCmds = cmdKinPathSmooth.PrepCmds()
        self.roundingType = cmdKinPathSmooth.RoundingType()

    # Cmd_KinPathSmoothT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        Cmd_KinPathSmoothStart(builder)
        if self.base is not None:
            Cmd_KinPathSmoothAddBase(builder, base)
        Cmd_KinPathSmoothAddIsStart(builder, self.isStart)
        Cmd_KinPathSmoothAddEps(builder, self.eps)
        Cmd_KinPathSmoothAddPrepCmds(builder, self.prepCmds)
        Cmd_KinPathSmoothAddRoundingType(builder, self.roundingType)
        cmdKinPathSmooth = Cmd_KinPathSmoothEnd(builder)
        return cmdKinPathSmooth
