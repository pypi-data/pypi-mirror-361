# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FileType

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReadOutput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReadOutput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReadOutput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ReadOutput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReadOutput
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.ByteString import ByteString
            obj = ByteString()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ReadOutputStart(builder): builder.StartObject(1)
def Start(builder):
    return ReadOutputStart(builder)
def ReadOutputAddData(builder, data): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return ReadOutputAddData(builder, data)
def ReadOutputEnd(builder): return builder.EndObject()
def End(builder):
    return ReadOutputEnd(builder)
import comm.opcua.builtin.ByteString
try:
    from typing import Optional
except:
    pass

class ReadOutputT(object):

    # ReadOutputT
    def __init__(self):
        self.data = None  # type: Optional[comm.opcua.builtin.ByteString.ByteStringT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        readOutput = ReadOutput()
        readOutput.Init(buf, pos)
        return cls.InitFromObj(readOutput)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, readOutput):
        x = ReadOutputT()
        x._UnPack(readOutput)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.data == other.data

    # ReadOutputT
    def _UnPack(self, readOutput):
        if readOutput is None:
            return
        if readOutput.Data() is not None:
            self.data = comm.opcua.builtin.ByteString.ByteStringT.InitFromObj(readOutput.Data())

    # ReadOutputT
    def Pack(self, builder):
        if self.data is not None:
            data = self.data.Pack(builder)
        ReadOutputStart(builder)
        if self.data is not None:
            ReadOutputAddData(builder, data)
        readOutput = ReadOutputEnd(builder)
        return readOutput
