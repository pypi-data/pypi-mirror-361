# automatically generated by the FlatBuffers compiler, do not modify

# namespace: companion

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Companion model mapping description
class MirrorMapping(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MirrorMapping()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMirrorMapping(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MirrorMapping
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the mapping
    # MirrorMapping
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mapping with mirror of the source NodeIds into datalayer address space
    # MirrorMapping
    def MirrorMappingTable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.server.companion.NodeIdDlAddressMapping import NodeIdDlAddressMapping
            obj = NodeIdDlAddressMapping()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MirrorMapping
    def MirrorMappingTableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MirrorMapping
    def MirrorMappingTableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def MirrorMappingStart(builder): builder.StartObject(2)
def Start(builder):
    return MirrorMappingStart(builder)
def MirrorMappingAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return MirrorMappingAddName(builder, name)
def MirrorMappingAddMirrorMappingTable(builder, mirrorMappingTable): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mirrorMappingTable), 0)
def AddMirrorMappingTable(builder, mirrorMappingTable):
    return MirrorMappingAddMirrorMappingTable(builder, mirrorMappingTable)
def MirrorMappingStartMirrorMappingTableVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMirrorMappingTableVector(builder, numElems):
    return MirrorMappingStartMirrorMappingTableVector(builder, numElems)
def MirrorMappingEnd(builder): return builder.EndObject()
def End(builder):
    return MirrorMappingEnd(builder)
import comm.opcua.server.companion.NodeIdDlAddressMapping
try:
    from typing import List
except:
    pass

class MirrorMappingT(object):

    # MirrorMappingT
    def __init__(self):
        self.name = None  # type: str
        self.mirrorMappingTable = None  # type: List[comm.opcua.server.companion.NodeIdDlAddressMapping.NodeIdDlAddressMappingT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mirrorMapping = MirrorMapping()
        mirrorMapping.Init(buf, pos)
        return cls.InitFromObj(mirrorMapping)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mirrorMapping):
        x = MirrorMappingT()
        x._UnPack(mirrorMapping)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.mirrorMappingTable == other.mirrorMappingTable

    # MirrorMappingT
    def _UnPack(self, mirrorMapping):
        if mirrorMapping is None:
            return
        self.name = mirrorMapping.Name()
        if not mirrorMapping.MirrorMappingTableIsNone():
            self.mirrorMappingTable = []
            for i in range(mirrorMapping.MirrorMappingTableLength()):
                if mirrorMapping.MirrorMappingTable(i) is None:
                    self.mirrorMappingTable.append(None)
                else:
                    nodeIdDlAddressMapping_ = comm.opcua.server.companion.NodeIdDlAddressMapping.NodeIdDlAddressMappingT.InitFromObj(mirrorMapping.MirrorMappingTable(i))
                    self.mirrorMappingTable.append(nodeIdDlAddressMapping_)

    # MirrorMappingT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.mirrorMappingTable is not None:
            mirrorMappingTablelist = []
            for i in range(len(self.mirrorMappingTable)):
                mirrorMappingTablelist.append(self.mirrorMappingTable[i].Pack(builder))
            MirrorMappingStartMirrorMappingTableVector(builder, len(self.mirrorMappingTable))
            for i in reversed(range(len(self.mirrorMappingTable))):
                builder.PrependUOffsetTRelative(mirrorMappingTablelist[i])
            mirrorMappingTable = builder.EndVector()
        MirrorMappingStart(builder)
        if self.name is not None:
            MirrorMappingAddName(builder, name)
        if self.mirrorMappingTable is not None:
            MirrorMappingAddMirrorMappingTable(builder, mirrorMappingTable)
        mirrorMapping = MirrorMappingEnd(builder)
        return mirrorMapping
