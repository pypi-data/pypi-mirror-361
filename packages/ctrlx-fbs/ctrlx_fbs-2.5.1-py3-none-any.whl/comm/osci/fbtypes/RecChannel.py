# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RecChannel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RecChannel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRecChannel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RecChannel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RecChannel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RecChannel
    def Slices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.osci.fbtypes.RecSlice import RecSlice
            obj = RecSlice()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecChannel
    def SlicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecChannel
    def SlicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def RecChannelStart(builder): builder.StartObject(2)
def Start(builder):
    return RecChannelStart(builder)
def RecChannelAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return RecChannelAddName(builder, name)
def RecChannelAddSlices(builder, slices): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(slices), 0)
def AddSlices(builder, slices):
    return RecChannelAddSlices(builder, slices)
def RecChannelStartSlicesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSlicesVector(builder, numElems):
    return RecChannelStartSlicesVector(builder, numElems)
def RecChannelEnd(builder): return builder.EndObject()
def End(builder):
    return RecChannelEnd(builder)
import comm.osci.fbtypes.RecSlice
try:
    from typing import List
except:
    pass

class RecChannelT(object):

    # RecChannelT
    def __init__(self):
        self.name = None  # type: str
        self.slices = None  # type: List[comm.osci.fbtypes.RecSlice.RecSliceT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        recChannel = RecChannel()
        recChannel.Init(buf, pos)
        return cls.InitFromObj(recChannel)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, recChannel):
        x = RecChannelT()
        x._UnPack(recChannel)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.slices == other.slices

    # RecChannelT
    def _UnPack(self, recChannel):
        if recChannel is None:
            return
        self.name = recChannel.Name()
        if not recChannel.SlicesIsNone():
            self.slices = []
            for i in range(recChannel.SlicesLength()):
                if recChannel.Slices(i) is None:
                    self.slices.append(None)
                else:
                    recSlice_ = comm.osci.fbtypes.RecSlice.RecSliceT.InitFromObj(recChannel.Slices(i))
                    self.slices.append(recSlice_)

    # RecChannelT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.slices is not None:
            sliceslist = []
            for i in range(len(self.slices)):
                sliceslist.append(self.slices[i].Pack(builder))
            RecChannelStartSlicesVector(builder, len(self.slices))
            for i in reversed(range(len(self.slices))):
                builder.PrependUOffsetTRelative(sliceslist[i])
            slices = builder.EndVector()
        RecChannelStart(builder)
        if self.name is not None:
            RecChannelAddName(builder, name)
        if self.slices is not None:
            RecChannelAddSlices(builder, slices)
        recChannel = RecChannelEnd(builder)
        return recChannel
