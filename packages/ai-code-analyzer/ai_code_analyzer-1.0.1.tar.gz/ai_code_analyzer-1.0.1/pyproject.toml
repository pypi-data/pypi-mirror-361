[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-code-analyzer"
version = "1.0.1"
description = "AI-powered code analysis tool for CI/CD pipelines with GitHub Actions integration"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "AI Code Analysis Team", email = "team@ai-code-analyzer.com"}
]
maintainers = [
    {name = "AI Code Analysis Team", email = "team@ai-code-analyzer.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
keywords = ["ai", "code-analysis", "ci-cd", "github-actions", "testing", "security", "performance"]
requires-python = ">=3.8"
dependencies = [
    "openai>=1.12.0",
    "anthropic>=0.18.1",
    "requests>=2.31.0",
    "PyYAML>=6.0.1",
    "gitpython>=3.1.41",
    "pytest>=7.4.4",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "aiohttp>=3.8.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "jinja2>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
all = [
    "pylint>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "semgrep>=1.0.0",
    "locust>=2.0.0",
    "radon>=6.0.0",
    "mccabe>=0.7.0",
    "vulture>=2.10",
]

[project.urls]
Homepage = "https://github.com/ai-code-analyzer/ai-code-analyzer"
Documentation = "https://ai-code-analyzer.readthedocs.io/"
Repository = "https://github.com/ai-code-analyzer/ai-code-analyzer"
"Bug Tracker" = "https://github.com/ai-code-analyzer/ai-code-analyzer/issues"
Changelog = "https://github.com/ai-code-analyzer/ai-code-analyzer/blob/main/CHANGELOG.md"

[project.scripts]
ai-code-analyzer = "cli:main"
aca = "cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
ai_code_analyzer = [
    "templates/*.yaml",
    "templates/*.yml",
    "config/*.yaml",
    "config/*.yml",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ai_code_analyzer"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]