# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# position and orientation of a single joint
class PoseExtern(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PoseExtern()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPoseExtern(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PoseExtern
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # array of 6 double values consisting of 3 values for the xyz position and 3 values for the orientation (euler xyz extrinsic)
    # PoseExtern
    def JointPose(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # PoseExtern
    def JointPoseAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # PoseExtern
    def JointPoseLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PoseExtern
    def JointPoseIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def PoseExternStart(builder): builder.StartObject(1)
def Start(builder):
    return PoseExternStart(builder)
def PoseExternAddJointPose(builder, jointPose): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(jointPose), 0)
def AddJointPose(builder, jointPose):
    return PoseExternAddJointPose(builder, jointPose)
def PoseExternStartJointPoseVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartJointPoseVector(builder, numElems):
    return PoseExternStartJointPoseVector(builder, numElems)
def PoseExternEnd(builder): return builder.EndObject()
def End(builder):
    return PoseExternEnd(builder)
try:
    from typing import List
except:
    pass

class PoseExternT(object):

    # PoseExternT
    def __init__(self):
        self.jointPose = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        poseExtern = PoseExtern()
        poseExtern.Init(buf, pos)
        return cls.InitFromObj(poseExtern)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, poseExtern):
        x = PoseExternT()
        x._UnPack(poseExtern)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.jointPose == other.jointPose

    # PoseExternT
    def _UnPack(self, poseExtern):
        if poseExtern is None:
            return
        if not poseExtern.JointPoseIsNone():
            if np is None:
                self.jointPose = []
                for i in range(poseExtern.JointPoseLength()):
                    self.jointPose.append(poseExtern.JointPose(i))
            else:
                self.jointPose = poseExtern.JointPoseAsNumpy()

    # PoseExternT
    def Pack(self, builder):
        if self.jointPose is not None:
            if np is not None and type(self.jointPose) is np.ndarray:
                jointPose = builder.CreateNumpyVector(self.jointPose)
            else:
                PoseExternStartJointPoseVector(builder, len(self.jointPose))
                for i in reversed(range(len(self.jointPose))):
                    builder.PrependFloat64(self.jointPose[i])
                jointPose = builder.EndVector()
        PoseExternStart(builder)
        if self.jointPose is not None:
            PoseExternAddJointPose(builder, jointPose)
        poseExtern = PoseExternEnd(builder)
        return poseExtern
