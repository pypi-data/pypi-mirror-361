# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a FlexProfile event
class CfgFlexProfileEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CfgFlexProfileEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCfgFlexProfileEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CfgFlexProfileEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The event is configured for this segment number
    # CfgFlexProfileEvent
    def SegmentNmb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Trigger condition of the event
    # CfgFlexProfileEvent
    def TriggerCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Trigger value
    # CfgFlexProfileEvent
    def TriggerValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Trigger master type (0: time master, 1: axis master)
    # CfgFlexProfileEvent
    def MasterType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Action mode of the event
    # CfgFlexProfileEvent
    def ActionMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Number of the status bit, that is set by the action
    # CfgFlexProfileEvent
    def ActionBit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Cam-Builder data: segment number for formula
    # CfgFlexProfileEvent
    def SegmentNmbFormula(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Cam-Builder data: formula string
    # CfgFlexProfileEvent
    def ValueFormula(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CfgFlexProfileEventStart(builder): builder.StartObject(8)
def Start(builder):
    return CfgFlexProfileEventStart(builder)
def CfgFlexProfileEventAddSegmentNmb(builder, segmentNmb): builder.PrependUint32Slot(0, segmentNmb, 0)
def AddSegmentNmb(builder, segmentNmb):
    return CfgFlexProfileEventAddSegmentNmb(builder, segmentNmb)
def CfgFlexProfileEventAddTriggerCondition(builder, triggerCondition): builder.PrependInt8Slot(1, triggerCondition, 0)
def AddTriggerCondition(builder, triggerCondition):
    return CfgFlexProfileEventAddTriggerCondition(builder, triggerCondition)
def CfgFlexProfileEventAddTriggerValue(builder, triggerValue): builder.PrependFloat64Slot(2, triggerValue, 0.0)
def AddTriggerValue(builder, triggerValue):
    return CfgFlexProfileEventAddTriggerValue(builder, triggerValue)
def CfgFlexProfileEventAddMasterType(builder, masterType): builder.PrependUint32Slot(3, masterType, 0)
def AddMasterType(builder, masterType):
    return CfgFlexProfileEventAddMasterType(builder, masterType)
def CfgFlexProfileEventAddActionMode(builder, actionMode): builder.PrependUint32Slot(4, actionMode, 0)
def AddActionMode(builder, actionMode):
    return CfgFlexProfileEventAddActionMode(builder, actionMode)
def CfgFlexProfileEventAddActionBit(builder, actionBit): builder.PrependUint32Slot(5, actionBit, 0)
def AddActionBit(builder, actionBit):
    return CfgFlexProfileEventAddActionBit(builder, actionBit)
def CfgFlexProfileEventAddSegmentNmbFormula(builder, segmentNmbFormula): builder.PrependUint32Slot(6, segmentNmbFormula, 0)
def AddSegmentNmbFormula(builder, segmentNmbFormula):
    return CfgFlexProfileEventAddSegmentNmbFormula(builder, segmentNmbFormula)
def CfgFlexProfileEventAddValueFormula(builder, valueFormula): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(valueFormula), 0)
def AddValueFormula(builder, valueFormula):
    return CfgFlexProfileEventAddValueFormula(builder, valueFormula)
def CfgFlexProfileEventEnd(builder): return builder.EndObject()
def End(builder):
    return CfgFlexProfileEventEnd(builder)

class CfgFlexProfileEventT(object):

    # CfgFlexProfileEventT
    def __init__(self):
        self.segmentNmb = 0  # type: int
        self.triggerCondition = 0  # type: int
        self.triggerValue = 0.0  # type: float
        self.masterType = 0  # type: int
        self.actionMode = 0  # type: int
        self.actionBit = 0  # type: int
        self.segmentNmbFormula = 0  # type: int
        self.valueFormula = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cfgFlexProfileEvent = CfgFlexProfileEvent()
        cfgFlexProfileEvent.Init(buf, pos)
        return cls.InitFromObj(cfgFlexProfileEvent)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cfgFlexProfileEvent):
        x = CfgFlexProfileEventT()
        x._UnPack(cfgFlexProfileEvent)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.segmentNmb == other.segmentNmb and \
            self.triggerCondition == other.triggerCondition and \
            self.triggerValue == other.triggerValue and \
            self.masterType == other.masterType and \
            self.actionMode == other.actionMode and \
            self.actionBit == other.actionBit and \
            self.segmentNmbFormula == other.segmentNmbFormula and \
            self.valueFormula == other.valueFormula

    # CfgFlexProfileEventT
    def _UnPack(self, cfgFlexProfileEvent):
        if cfgFlexProfileEvent is None:
            return
        self.segmentNmb = cfgFlexProfileEvent.SegmentNmb()
        self.triggerCondition = cfgFlexProfileEvent.TriggerCondition()
        self.triggerValue = cfgFlexProfileEvent.TriggerValue()
        self.masterType = cfgFlexProfileEvent.MasterType()
        self.actionMode = cfgFlexProfileEvent.ActionMode()
        self.actionBit = cfgFlexProfileEvent.ActionBit()
        self.segmentNmbFormula = cfgFlexProfileEvent.SegmentNmbFormula()
        self.valueFormula = cfgFlexProfileEvent.ValueFormula()

    # CfgFlexProfileEventT
    def Pack(self, builder):
        if self.valueFormula is not None:
            valueFormula = builder.CreateString(self.valueFormula)
        CfgFlexProfileEventStart(builder)
        CfgFlexProfileEventAddSegmentNmb(builder, self.segmentNmb)
        CfgFlexProfileEventAddTriggerCondition(builder, self.triggerCondition)
        CfgFlexProfileEventAddTriggerValue(builder, self.triggerValue)
        CfgFlexProfileEventAddMasterType(builder, self.masterType)
        CfgFlexProfileEventAddActionMode(builder, self.actionMode)
        CfgFlexProfileEventAddActionBit(builder, self.actionBit)
        CfgFlexProfileEventAddSegmentNmbFormula(builder, self.segmentNmbFormula)
        if self.valueFormula is not None:
            CfgFlexProfileEventAddValueFormula(builder, valueFormula)
        cfgFlexProfileEvent = CfgFlexProfileEventEnd(builder)
        return cfgFlexProfileEvent
