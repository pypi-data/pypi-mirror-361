# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DeviceStateResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeviceStateResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeviceStateResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DeviceStateResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DeviceStateResponse
    def CurrentState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # DeviceStateResponse
    def RequestedState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def DeviceStateResponseStart(builder): builder.StartObject(2)
def Start(builder):
    return DeviceStateResponseStart(builder)
def DeviceStateResponseAddCurrentState(builder, currentState): builder.PrependUint16Slot(0, currentState, 0)
def AddCurrentState(builder, currentState):
    return DeviceStateResponseAddCurrentState(builder, currentState)
def DeviceStateResponseAddRequestedState(builder, requestedState): builder.PrependUint16Slot(1, requestedState, 0)
def AddRequestedState(builder, requestedState):
    return DeviceStateResponseAddRequestedState(builder, requestedState)
def DeviceStateResponseEnd(builder): return builder.EndObject()
def End(builder):
    return DeviceStateResponseEnd(builder)

class DeviceStateResponseT(object):

    # DeviceStateResponseT
    def __init__(self):
        self.currentState = 0  # type: int
        self.requestedState = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        deviceStateResponse = DeviceStateResponse()
        deviceStateResponse.Init(buf, pos)
        return cls.InitFromObj(deviceStateResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, deviceStateResponse):
        x = DeviceStateResponseT()
        x._UnPack(deviceStateResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.currentState == other.currentState and \
            self.requestedState == other.requestedState

    # DeviceStateResponseT
    def _UnPack(self, deviceStateResponse):
        if deviceStateResponse is None:
            return
        self.currentState = deviceStateResponse.CurrentState()
        self.requestedState = deviceStateResponse.RequestedState()

    # DeviceStateResponseT
    def Pack(self, builder):
        DeviceStateResponseStart(builder)
        DeviceStateResponseAddCurrentState(builder, self.currentState)
        DeviceStateResponseAddRequestedState(builder, self.requestedState)
        deviceStateResponse = DeviceStateResponseEnd(builder)
        return deviceStateResponse
