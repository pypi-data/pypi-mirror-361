# This  pyproject.toml was generated using cookiecutter file.
# See https://cookiecutter.readthedocs.io/en/1.7.2/advanced/template_extensions.html
[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core >=3.8,<4"]
# -- Project metadata.
[project]
name = "ai-24sea"
license = { file = "LICENSE" }
readme = "README.md"
dynamic = ["version", "description"]
classifiers=["Development Status :: 1 - Planning",
             "Environment :: Console",
             "Intended Audience :: Science/Research",
             "Intended Audience :: Information Technology",
             "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
             "Natural Language :: English",
             "Operating System :: POSIX :: Linux",
             "Programming Language :: Python :: 3",
             "Programming Language :: Python :: 3.9",
             "Programming Language :: Python :: 3.10",
             "Programming Language :: Python :: 3.11",]
authors = [{ name = "Panagiotis Konis", email = "panagiotis.konis@24sea.eu" }]
maintainers = [{ name = "Panagiotis Konis", email = "panagiotis.konis@24sea.eu" }]
# -- Project dependencies.
requires-python = ">=3.9.0,<3.12"
dependencies = [
    "api-24sea>=1.5.4",
    "prefect==3.3.6",
    "pandas==2.2.3",
    "numpy==2.0.1",
    "mlflow==2.22.0",
    "psycopg2-binary",
    "azure-storage-blob>=12.23.1",
    "tabulate",
    "markdown",
    "omegaconf>=2.3.0"
]

[project.urls]
"Documentation" = "https://dev.azure.com/24sea/DataDevOps/_git/24sea_ai_modeler_cookiecutter"
"Homepage" = "https://www.24sea.eu/"
"Repository" = "https://dev.azure.com/24sea/DataDevOps/_git/24sea_ai_modeler_cookiecutter"

[dependency-groups]
ci    = [ "mypy==1.*", "pycln==2.4.*",
         "ruff==0.*", "commitizen==3.*", "pre-commit==3.*", "pylint==3.*",
         "types-PyYAML", "types-pytz", "types-requests", "jupytext"]
basic_ci = ["black==24.*", "isort==5.*","pytest==8.3.2"]
test  = ["pytest-mock==3.14.0", "hypothesis==6.111.2",
         "pytest-cov==5.0.0", "pytest-randomly==3.15.0", "tox", "tox-uv"]
docs  = ["sphinx","sphinx_design", "autoclasstoc", "myst-parser",
         "pydata-sphinx-theme", "sphinx-autoapi", "sphinx-copybutton",
          "sphinx-autobuild==2021.03.14"]
nb    = ["notebook<7.0"]
conf  = ["python-dotenv"]

[tool.uv]
default-groups = ["conf", "nb", "docs"]

# ** Black **
# Black is the codeformatter used by Ruff. It is configured to use the same
# line length as Ruff, 80 characters, and to use double quotes for strings.
[tool.black]
line-length = 80 # Code length
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | docs
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

# ** Pycln **
# Pycln is a tool for removing unused imports and unused variables. It is
# configured to remove unused imports and unused variables, and to remove
# unused variables from the global scope.
[tool.pycln]
all = true
exclude = ["__init__.py", "conftest.py", "*.notebooks.*", "*.docs.*",
           "*.database.*", "*.docker.*", "*.__frontend.*", "*.templates.*",
           "*.static.*", "*.staticfiles.*", "*.sql.*", "*.migrations.*"]

# ** Isort **
# Isort is a tool for sorting imports. It is configured to use the same line
# length as Ruff, 80 characters, and to use a multi-line output of 3.
[tool.isort]
line_length = 80
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# ** Ruff **
# Ruff is a tool for linting Python code. It is configured to use the same
# line length as Black, 80 characters, and to ignore a variety of commonly
# ignored directories.
[tool.ruff]
line-length = 80
indent-width = 4
target-version = "py312"
# -- Exclude a variety of commonly ignored directories.
exclude = [".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg",
           ".mypy_cache", ".nox", ".pants.d", ".pytype", ".ruff_cache",
           ".svn", ".tox", ".venv", "__pypackages__", "_build", "buck-out",
           "build", "dist", "node_modules", "venv", "api", "docs", "notebooks",
           "scripts", "test", "config", "docker", "logs"] # -- Allow unused variables when underscore-prefixed.
# -- Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.

[tool.ruff.lint]
select = ["E", "F"]
ignore = ["E501"]
# -- Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W",
           "ANN","ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT",
           "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH",
           "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP",
           "YTT"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# ** Ruff: McCabe **
# McCabe is a tool for measuring cyclomatic complexity. It is configured to
# use a complexity level of 15. The complexity level is the amount of
# different paths through a function, for example, a function with a single
# if statement has a complexity level of 2.
[tool.ruff.lint.mccabe]
# -- Unlike Flake8, default to a complexity level of 15.
max-complexity = 15

# ** Mypy **
# Mypy is a tool for type checking Python code. It is configured to use
# Python 3.8, to disallow untyped definitions, to show error codes, to
# disallow implicit optionals, to warn on any return type, to warn on unused
# ignores, and to exclude a variety of commonly ignored directories from being
# type checked.
[tool.mypy]
python_version = "3.9"
disallow_untyped_defs = false
show_error_codes = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true
follow_imports = "silent"
strict_optional = false
# exclude = ["*.notebooks.*", "*.docs.*", "*.database.*", "*.docker.*",
#            "*.__frontend.*", "*.templates.*", "*.static.*", "*.staticfiles.*",
#            "*.sql.*", "*.migrations.*"]
exclude = '*.notebooks.*|*.docs.*|*.database.*|*.docker.*|*.__frontend.*|*.templates.*|*.static.*|*.staticfiles.*|*.sql.*|*.migrations.*'
ignore_missing_imports = true
ignore_errors = false

# ** Pylint **
# Pylint is a tool for linting Python code. It is configured to use the same
# line length as Black, 80 characters, to use the same complexity level as
# McCabe, 15, to use the same list of ignored directories as Ruff, and to
# exclude a variety of commonly ignored directories from being linted.
[tool.pylint."MAIN"]
ignore-paths = [".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg",
                ".mypy_cache", ".nox", ".pants.d", ".pytype", ".ruff_cache",
                ".svn", ".tox", ".venv", "__pypackages__", "_build", "buck-out",
                "build", "dist", "node_modules", "venv", "docs",
                "notebooks", "scripts", "test", "config", "docker", "logs"]
[tool.pylint."FORMAT"]
max-line-length = 80
# [tool.pylint."DESIGN"]
# max-args=15
# max-locals=25
# max-positional-arguments=10
[tool.pylint."MISCELLANEOUS"]
# List of note tags to take in consideration, separated by a comma.
notes = "FIXME,XXX,TODO,NOTE"

# ** Jupytext **
# Jupytext is a tool for converting Jupyter Notebooks to Python scripts. It is
# configured to use the same list of ignored directories as Ruff, and to exclude
# a variety of commonly ignored directories from being converted.
[tool.jupytext.formats]
"notebooks/" = "ipynb"
# "scripts/" = "py:percent"

# ** Pytest **
# Pytest is a tool for testing Python code. It is configured to use the same
# list of ignored directories as Ruff, and to exclude a variety of commonly
# ignored directories from being tested.
[tool.pytest.ini_options]
norecursedirs = [".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg",
                 ".mypy_cache", ".nox", ".pants.d", ".pytype", ".ruff_cache",
                 ".svn", ".tox", ".venv", "__pypackages__", "_build",
                 "buck-out", "build", "dist", "node_modules", "venv", "api",
                 "docs", "notebooks", "scripts", "test", "config", "docker",
                 "logs"]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "test",
    "tests",
]

# ** Commitizen **
# Commitizen is a tool for creating commit messages. It is configured to use
# the cz_conventional_commits adapter, to use the same list of ignored
# directories as Ruff, and to exclude a variety of commonly ignored
# directories from being committed.
[tool.commitizen]
name = "cz_conventional_commits"
version = "3.13.0"
bump_message = "bump(version): {current_version} â†’ {new_version}"
update_changelog_on_bump = true
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]
