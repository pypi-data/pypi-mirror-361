# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# current state of a single calculation pipeline of a single axis
class AxsStateCalcSinglePipeline(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsStateCalcSinglePipeline()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsStateCalcSinglePipeline(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsStateCalcSinglePipeline
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the calculation pipeline
    # AxsStateCalcSinglePipeline
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # state of the calculation pipeline
    # AxsStateCalcSinglePipeline
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # validation on the calculation pipeline (multiple errors can occur)
    # AxsStateCalcSinglePipeline
    def Validation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.PipelineValidation import PipelineValidation
            obj = PipelineValidation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # if the pipeline is a built-in pipeline (which is read-only)
    # AxsStateCalcSinglePipeline
    def IsBuiltIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # result obtained after running calculation pipeline 
    # AxsStateCalcSinglePipeline
    def RunCalculationPipeline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def AxsStateCalcSinglePipelineStart(builder): builder.StartObject(5)
def Start(builder):
    return AxsStateCalcSinglePipelineStart(builder)
def AxsStateCalcSinglePipelineAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return AxsStateCalcSinglePipelineAddName(builder, name)
def AxsStateCalcSinglePipelineAddState(builder, state): builder.PrependInt32Slot(1, state, 0)
def AddState(builder, state):
    return AxsStateCalcSinglePipelineAddState(builder, state)
def AxsStateCalcSinglePipelineAddValidation(builder, validation): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(validation), 0)
def AddValidation(builder, validation):
    return AxsStateCalcSinglePipelineAddValidation(builder, validation)
def AxsStateCalcSinglePipelineAddIsBuiltIn(builder, isBuiltIn): builder.PrependBoolSlot(3, isBuiltIn, 0)
def AddIsBuiltIn(builder, isBuiltIn):
    return AxsStateCalcSinglePipelineAddIsBuiltIn(builder, isBuiltIn)
def AxsStateCalcSinglePipelineAddRunCalculationPipeline(builder, runCalculationPipeline): builder.PrependFloat64Slot(4, runCalculationPipeline, 0.0)
def AddRunCalculationPipeline(builder, runCalculationPipeline):
    return AxsStateCalcSinglePipelineAddRunCalculationPipeline(builder, runCalculationPipeline)
def AxsStateCalcSinglePipelineEnd(builder): return builder.EndObject()
def End(builder):
    return AxsStateCalcSinglePipelineEnd(builder)
import motion.sync.fbtypes.PipelineValidation
try:
    from typing import Optional
except:
    pass

class AxsStateCalcSinglePipelineT(object):

    # AxsStateCalcSinglePipelineT
    def __init__(self):
        self.name = None  # type: str
        self.state = 0  # type: int
        self.validation = None  # type: Optional[motion.sync.fbtypes.PipelineValidation.PipelineValidationT]
        self.isBuiltIn = False  # type: bool
        self.runCalculationPipeline = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsStateCalcSinglePipeline = AxsStateCalcSinglePipeline()
        axsStateCalcSinglePipeline.Init(buf, pos)
        return cls.InitFromObj(axsStateCalcSinglePipeline)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsStateCalcSinglePipeline):
        x = AxsStateCalcSinglePipelineT()
        x._UnPack(axsStateCalcSinglePipeline)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.state == other.state and \
            self.validation == other.validation and \
            self.isBuiltIn == other.isBuiltIn and \
            self.runCalculationPipeline == other.runCalculationPipeline

    # AxsStateCalcSinglePipelineT
    def _UnPack(self, axsStateCalcSinglePipeline):
        if axsStateCalcSinglePipeline is None:
            return
        self.name = axsStateCalcSinglePipeline.Name()
        self.state = axsStateCalcSinglePipeline.State()
        if axsStateCalcSinglePipeline.Validation() is not None:
            self.validation = motion.sync.fbtypes.PipelineValidation.PipelineValidationT.InitFromObj(axsStateCalcSinglePipeline.Validation())
        self.isBuiltIn = axsStateCalcSinglePipeline.IsBuiltIn()
        self.runCalculationPipeline = axsStateCalcSinglePipeline.RunCalculationPipeline()

    # AxsStateCalcSinglePipelineT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.validation is not None:
            validation = self.validation.Pack(builder)
        AxsStateCalcSinglePipelineStart(builder)
        if self.name is not None:
            AxsStateCalcSinglePipelineAddName(builder, name)
        AxsStateCalcSinglePipelineAddState(builder, self.state)
        if self.validation is not None:
            AxsStateCalcSinglePipelineAddValidation(builder, validation)
        AxsStateCalcSinglePipelineAddIsBuiltIn(builder, self.isBuiltIn)
        AxsStateCalcSinglePipelineAddRunCalculationPipeline(builder, self.runCalculationPipeline)
        axsStateCalcSinglePipeline = AxsStateCalcSinglePipelineEnd(builder)
        return axsStateCalcSinglePipeline
