# automatically generated by the FlatBuffers compiler, do not modify

# namespace: client

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DlResultToUaStatusCode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DlResultToUaStatusCode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDlResultToUaStatusCode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DlResultToUaStatusCode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DlResultToUaStatusCode
    def DlResult(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DlResultToUaStatusCode
    def UaStatusCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DlResultToUaStatusCode
    def UaStatusCodeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DlResultToUaStatusCode
    def UaStatusCodeDescr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DlResultToUaStatusCodeStart(builder): builder.StartObject(4)
def Start(builder):
    return DlResultToUaStatusCodeStart(builder)
def DlResultToUaStatusCodeAddDlResult(builder, dlResult): builder.PrependUint32Slot(0, dlResult, 0)
def AddDlResult(builder, dlResult):
    return DlResultToUaStatusCodeAddDlResult(builder, dlResult)
def DlResultToUaStatusCodeAddUaStatusCode(builder, uaStatusCode): builder.PrependUint32Slot(1, uaStatusCode, 0)
def AddUaStatusCode(builder, uaStatusCode):
    return DlResultToUaStatusCodeAddUaStatusCode(builder, uaStatusCode)
def DlResultToUaStatusCodeAddUaStatusCodeName(builder, uaStatusCodeName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(uaStatusCodeName), 0)
def AddUaStatusCodeName(builder, uaStatusCodeName):
    return DlResultToUaStatusCodeAddUaStatusCodeName(builder, uaStatusCodeName)
def DlResultToUaStatusCodeAddUaStatusCodeDescr(builder, uaStatusCodeDescr): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(uaStatusCodeDescr), 0)
def AddUaStatusCodeDescr(builder, uaStatusCodeDescr):
    return DlResultToUaStatusCodeAddUaStatusCodeDescr(builder, uaStatusCodeDescr)
def DlResultToUaStatusCodeEnd(builder): return builder.EndObject()
def End(builder):
    return DlResultToUaStatusCodeEnd(builder)

class DlResultToUaStatusCodeT(object):

    # DlResultToUaStatusCodeT
    def __init__(self):
        self.dlResult = 0  # type: int
        self.uaStatusCode = 0  # type: int
        self.uaStatusCodeName = None  # type: str
        self.uaStatusCodeDescr = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dlResultToUaStatusCode = DlResultToUaStatusCode()
        dlResultToUaStatusCode.Init(buf, pos)
        return cls.InitFromObj(dlResultToUaStatusCode)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dlResultToUaStatusCode):
        x = DlResultToUaStatusCodeT()
        x._UnPack(dlResultToUaStatusCode)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dlResult == other.dlResult and \
            self.uaStatusCode == other.uaStatusCode and \
            self.uaStatusCodeName == other.uaStatusCodeName and \
            self.uaStatusCodeDescr == other.uaStatusCodeDescr

    # DlResultToUaStatusCodeT
    def _UnPack(self, dlResultToUaStatusCode):
        if dlResultToUaStatusCode is None:
            return
        self.dlResult = dlResultToUaStatusCode.DlResult()
        self.uaStatusCode = dlResultToUaStatusCode.UaStatusCode()
        self.uaStatusCodeName = dlResultToUaStatusCode.UaStatusCodeName()
        self.uaStatusCodeDescr = dlResultToUaStatusCode.UaStatusCodeDescr()

    # DlResultToUaStatusCodeT
    def Pack(self, builder):
        if self.uaStatusCodeName is not None:
            uaStatusCodeName = builder.CreateString(self.uaStatusCodeName)
        if self.uaStatusCodeDescr is not None:
            uaStatusCodeDescr = builder.CreateString(self.uaStatusCodeDescr)
        DlResultToUaStatusCodeStart(builder)
        DlResultToUaStatusCodeAddDlResult(builder, self.dlResult)
        DlResultToUaStatusCodeAddUaStatusCode(builder, self.uaStatusCode)
        if self.uaStatusCodeName is not None:
            DlResultToUaStatusCodeAddUaStatusCodeName(builder, uaStatusCodeName)
        if self.uaStatusCodeDescr is not None:
            DlResultToUaStatusCodeAddUaStatusCodeDescr(builder, uaStatusCodeDescr)
        dlResultToUaStatusCode = DlResultToUaStatusCodeEnd(builder)
        return dlResultToUaStatusCode
