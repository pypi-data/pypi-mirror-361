# automatically generated by the FlatBuffers compiler, do not modify

# namespace: companion

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Companion model mapping description
class Mapping(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Mapping()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMapping(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Mapping
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the mapping
    # Mapping
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Check if sourceUaNodeId and targetUaNodeId have same datatype
    # Mapping
    def TypeSafety(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # Mapping of the OPC UA NodeIds
    # Mapping
    def MappingTable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.server.companion.NodeIdMapping import NodeIdMapping
            obj = NodeIdMapping()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Mapping
    def MappingTableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mapping
    def MappingTableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def MappingStart(builder): builder.StartObject(3)
def Start(builder):
    return MappingStart(builder)
def MappingAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return MappingAddName(builder, name)
def MappingAddTypeSafety(builder, typeSafety): builder.PrependBoolSlot(1, typeSafety, 1)
def AddTypeSafety(builder, typeSafety):
    return MappingAddTypeSafety(builder, typeSafety)
def MappingAddMappingTable(builder, mappingTable): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mappingTable), 0)
def AddMappingTable(builder, mappingTable):
    return MappingAddMappingTable(builder, mappingTable)
def MappingStartMappingTableVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMappingTableVector(builder, numElems):
    return MappingStartMappingTableVector(builder, numElems)
def MappingEnd(builder): return builder.EndObject()
def End(builder):
    return MappingEnd(builder)
import comm.opcua.server.companion.NodeIdMapping
try:
    from typing import List
except:
    pass

class MappingT(object):

    # MappingT
    def __init__(self):
        self.name = None  # type: str
        self.typeSafety = True  # type: bool
        self.mappingTable = None  # type: List[comm.opcua.server.companion.NodeIdMapping.NodeIdMappingT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mapping = Mapping()
        mapping.Init(buf, pos)
        return cls.InitFromObj(mapping)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mapping):
        x = MappingT()
        x._UnPack(mapping)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.typeSafety == other.typeSafety and \
            self.mappingTable == other.mappingTable

    # MappingT
    def _UnPack(self, mapping):
        if mapping is None:
            return
        self.name = mapping.Name()
        self.typeSafety = mapping.TypeSafety()
        if not mapping.MappingTableIsNone():
            self.mappingTable = []
            for i in range(mapping.MappingTableLength()):
                if mapping.MappingTable(i) is None:
                    self.mappingTable.append(None)
                else:
                    nodeIdMapping_ = comm.opcua.server.companion.NodeIdMapping.NodeIdMappingT.InitFromObj(mapping.MappingTable(i))
                    self.mappingTable.append(nodeIdMapping_)

    # MappingT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.mappingTable is not None:
            mappingTablelist = []
            for i in range(len(self.mappingTable)):
                mappingTablelist.append(self.mappingTable[i].Pack(builder))
            MappingStartMappingTableVector(builder, len(self.mappingTable))
            for i in reversed(range(len(self.mappingTable))):
                builder.PrependUOffsetTRelative(mappingTablelist[i])
            mappingTable = builder.EndVector()
        MappingStart(builder)
        if self.name is not None:
            MappingAddName(builder, name)
        MappingAddTypeSafety(builder, self.typeSafety)
        if self.mappingTable is not None:
            MappingAddMappingTable(builder, mappingTable)
        mapping = MappingEnd(builder)
        return mapping
