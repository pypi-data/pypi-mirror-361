# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StructureDescription(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StructureDescription()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStructureDescription(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StructureDescription
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StructureDescription
    def DataTypeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.NodeId import NodeId
            obj = NodeId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StructureDescription
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.QualifiedName import QualifiedName
            obj = QualifiedName()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StructureDescription
    def StructureDefinition_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.structure.StructureDefinition import StructureDefinition
            obj = StructureDefinition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def StructureDescriptionStart(builder): builder.StartObject(3)
def Start(builder):
    return StructureDescriptionStart(builder)
def StructureDescriptionAddDataTypeId(builder, dataTypeId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dataTypeId), 0)
def AddDataTypeId(builder, dataTypeId):
    return StructureDescriptionAddDataTypeId(builder, dataTypeId)
def StructureDescriptionAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return StructureDescriptionAddName(builder, name)
def StructureDescriptionAddStructureDefinition_(builder, structureDefinition_): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(structureDefinition_), 0)
def AddStructureDefinition_(builder, structureDefinition_):
    return StructureDescriptionAddStructureDefinition_(builder, structureDefinition_)
def StructureDescriptionEnd(builder): return builder.EndObject()
def End(builder):
    return StructureDescriptionEnd(builder)
import comm.opcua.builtin.NodeId
import comm.opcua.builtin.QualifiedName
import comm.opcua.structure.StructureDefinition
try:
    from typing import Optional
except:
    pass

class StructureDescriptionT(object):

    # StructureDescriptionT
    def __init__(self):
        self.dataTypeId = None  # type: Optional[comm.opcua.builtin.NodeId.NodeIdT]
        self.name = None  # type: Optional[comm.opcua.builtin.QualifiedName.QualifiedNameT]
        self.structureDefinition_ = None  # type: Optional[comm.opcua.structure.StructureDefinition.StructureDefinitionT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        structureDescription = StructureDescription()
        structureDescription.Init(buf, pos)
        return cls.InitFromObj(structureDescription)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, structureDescription):
        x = StructureDescriptionT()
        x._UnPack(structureDescription)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dataTypeId == other.dataTypeId and \
            self.name == other.name and \
            self.structureDefinition_ == other.structureDefinition_

    # StructureDescriptionT
    def _UnPack(self, structureDescription):
        if structureDescription is None:
            return
        if structureDescription.DataTypeId() is not None:
            self.dataTypeId = comm.opcua.builtin.NodeId.NodeIdT.InitFromObj(structureDescription.DataTypeId())
        if structureDescription.Name() is not None:
            self.name = comm.opcua.builtin.QualifiedName.QualifiedNameT.InitFromObj(structureDescription.Name())
        if structureDescription.StructureDefinition_() is not None:
            self.structureDefinition_ = comm.opcua.structure.StructureDefinition.StructureDefinitionT.InitFromObj(structureDescription.StructureDefinition_())

    # StructureDescriptionT
    def Pack(self, builder):
        if self.dataTypeId is not None:
            dataTypeId = self.dataTypeId.Pack(builder)
        if self.name is not None:
            name = self.name.Pack(builder)
        if self.structureDefinition_ is not None:
            structureDefinition_ = self.structureDefinition_.Pack(builder)
        StructureDescriptionStart(builder)
        if self.dataTypeId is not None:
            StructureDescriptionAddDataTypeId(builder, dataTypeId)
        if self.name is not None:
            StructureDescriptionAddName(builder, name)
        if self.structureDefinition_ is not None:
            StructureDescriptionAddStructureDefinition_(builder, structureDefinition_)
        structureDescription = StructureDescriptionEnd(builder)
        return structureDescription
