# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CmdOptionSwitchOnPath(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CmdOptionSwitchOnPath()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmdOptionSwitchOnPath(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CmdOptionSwitchOnPath
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # permanent type (e.g. "Once", "PermOn", "PermOff")
    # CmdOptionSwitchOnPath
    def PermType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # switch on path mode
    # CmdOptionSwitchOnPath
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # signal id
    # CmdOptionSwitchOnPath
    def SignalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # switch on path action
    # CmdOptionSwitchOnPath
    def Action(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # target position
    # CmdOptionSwitchOnPath
    def TargetPosition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CmdOptionSwitchOnPath
    def TargetPositionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # CmdOptionSwitchOnPath
    def TargetPositionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CmdOptionSwitchOnPath
    def TargetPositionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # radius
    # CmdOptionSwitchOnPath
    def Radius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # pre trigger time
    # CmdOptionSwitchOnPath
    def PreTriggerTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def CmdOptionSwitchOnPathStart(builder): builder.StartObject(7)
def Start(builder):
    return CmdOptionSwitchOnPathStart(builder)
def CmdOptionSwitchOnPathAddPermType(builder, permType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(permType), 0)
def AddPermType(builder, permType):
    return CmdOptionSwitchOnPathAddPermType(builder, permType)
def CmdOptionSwitchOnPathAddMode(builder, mode): builder.PrependInt8Slot(1, mode, 0)
def AddMode(builder, mode):
    return CmdOptionSwitchOnPathAddMode(builder, mode)
def CmdOptionSwitchOnPathAddSignalId(builder, signalId): builder.PrependUint32Slot(2, signalId, 0)
def AddSignalId(builder, signalId):
    return CmdOptionSwitchOnPathAddSignalId(builder, signalId)
def CmdOptionSwitchOnPathAddAction(builder, action): builder.PrependInt8Slot(3, action, 0)
def AddAction(builder, action):
    return CmdOptionSwitchOnPathAddAction(builder, action)
def CmdOptionSwitchOnPathAddTargetPosition(builder, targetPosition): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(targetPosition), 0)
def AddTargetPosition(builder, targetPosition):
    return CmdOptionSwitchOnPathAddTargetPosition(builder, targetPosition)
def CmdOptionSwitchOnPathStartTargetPositionVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartTargetPositionVector(builder, numElems):
    return CmdOptionSwitchOnPathStartTargetPositionVector(builder, numElems)
def CmdOptionSwitchOnPathAddRadius(builder, radius): builder.PrependFloat64Slot(5, radius, 0.0)
def AddRadius(builder, radius):
    return CmdOptionSwitchOnPathAddRadius(builder, radius)
def CmdOptionSwitchOnPathAddPreTriggerTime(builder, preTriggerTime): builder.PrependFloat64Slot(6, preTriggerTime, 0.0)
def AddPreTriggerTime(builder, preTriggerTime):
    return CmdOptionSwitchOnPathAddPreTriggerTime(builder, preTriggerTime)
def CmdOptionSwitchOnPathEnd(builder): return builder.EndObject()
def End(builder):
    return CmdOptionSwitchOnPathEnd(builder)
try:
    from typing import List
except:
    pass

class CmdOptionSwitchOnPathT(object):

    # CmdOptionSwitchOnPathT
    def __init__(self):
        self.permType = None  # type: str
        self.mode = 0  # type: int
        self.signalId = 0  # type: int
        self.action = 0  # type: int
        self.targetPosition = None  # type: List[float]
        self.radius = 0.0  # type: float
        self.preTriggerTime = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdOptionSwitchOnPath = CmdOptionSwitchOnPath()
        cmdOptionSwitchOnPath.Init(buf, pos)
        return cls.InitFromObj(cmdOptionSwitchOnPath)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdOptionSwitchOnPath):
        x = CmdOptionSwitchOnPathT()
        x._UnPack(cmdOptionSwitchOnPath)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.permType == other.permType and \
            self.mode == other.mode and \
            self.signalId == other.signalId and \
            self.action == other.action and \
            self.targetPosition == other.targetPosition and \
            self.radius == other.radius and \
            self.preTriggerTime == other.preTriggerTime

    # CmdOptionSwitchOnPathT
    def _UnPack(self, cmdOptionSwitchOnPath):
        if cmdOptionSwitchOnPath is None:
            return
        self.permType = cmdOptionSwitchOnPath.PermType()
        self.mode = cmdOptionSwitchOnPath.Mode()
        self.signalId = cmdOptionSwitchOnPath.SignalId()
        self.action = cmdOptionSwitchOnPath.Action()
        if not cmdOptionSwitchOnPath.TargetPositionIsNone():
            if np is None:
                self.targetPosition = []
                for i in range(cmdOptionSwitchOnPath.TargetPositionLength()):
                    self.targetPosition.append(cmdOptionSwitchOnPath.TargetPosition(i))
            else:
                self.targetPosition = cmdOptionSwitchOnPath.TargetPositionAsNumpy()
        self.radius = cmdOptionSwitchOnPath.Radius()
        self.preTriggerTime = cmdOptionSwitchOnPath.PreTriggerTime()

    # CmdOptionSwitchOnPathT
    def Pack(self, builder):
        if self.permType is not None:
            permType = builder.CreateString(self.permType)
        if self.targetPosition is not None:
            if np is not None and type(self.targetPosition) is np.ndarray:
                targetPosition = builder.CreateNumpyVector(self.targetPosition)
            else:
                CmdOptionSwitchOnPathStartTargetPositionVector(builder, len(self.targetPosition))
                for i in reversed(range(len(self.targetPosition))):
                    builder.PrependFloat64(self.targetPosition[i])
                targetPosition = builder.EndVector()
        CmdOptionSwitchOnPathStart(builder)
        if self.permType is not None:
            CmdOptionSwitchOnPathAddPermType(builder, permType)
        CmdOptionSwitchOnPathAddMode(builder, self.mode)
        CmdOptionSwitchOnPathAddSignalId(builder, self.signalId)
        CmdOptionSwitchOnPathAddAction(builder, self.action)
        if self.targetPosition is not None:
            CmdOptionSwitchOnPathAddTargetPosition(builder, targetPosition)
        CmdOptionSwitchOnPathAddRadius(builder, self.radius)
        CmdOptionSwitchOnPathAddPreTriggerTime(builder, self.preTriggerTime)
        cmdOptionSwitchOnPath = CmdOptionSwitchOnPathEnd(builder)
        return cmdOptionSwitchOnPath
