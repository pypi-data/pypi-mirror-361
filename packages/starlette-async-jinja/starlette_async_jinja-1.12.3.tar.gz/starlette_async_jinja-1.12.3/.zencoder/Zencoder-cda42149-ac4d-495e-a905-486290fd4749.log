[1m========================================================================= test session starts =========================================================================[0m
platform darwin -- Python 3.13.5, pytest-8.4.1, pluggy-1.6.0 -- /Users/les/Projects/starlette-async-jinja/.venv/bin/python
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /Users/les/Projects/starlette-async-jinja
configfile: pyproject.toml
testpaths: tests, starlette_async_jinja
plugins: xdist-3.7.0, anyio-4.9.0, timeout-2.4.0, cov-6.2.1, mock-3.14.1, benchmark-5.1.0, asyncio-1.0.0
timeout: 300.0s
timeout method: thread
timeout func_only: False
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
[1mcollecting ... [0m[1mcollected 46 items / 42 deselected / 4 selected                                                                                                                       [0m

tests/test_benchmarks.py::test_benchmark_json_response [32mPASSED[0m[32m                                                                                                   [ 25%][0m
tests/test_benchmarks.py::test_benchmark_template_response [32mPASSED[0m[32m                                                                                               [ 50%][0m
tests/test_benchmarks.py::test_benchmark_render_fragment [31mFAILED[0m[31m                                                                                                 [ 75%][0m
tests/test_benchmarks.py::test_benchmark_context_processors [32mPASSED[0m[31m                                                                                              [100%][0m[31m[1m
ERROR: Coverage failure: total of 38 is less than fail-under=42
[0m

============================================================================== FAILURES ===============================================================================
[31m[1m___________________________________________________________________ test_benchmark_render_fragment ____________________________________________________________________[0m

benchmark = <pytest_benchmark.fixture.BenchmarkFixture object at 0x10d744cd0>

    [0m[37m@pytest[39;49;00m.mark.benchmark[90m[39;49;00m
    [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mtest_benchmark_render_fragment[39;49;00m(benchmark: BenchmarkFixture) -> [94mNone[39;49;00m:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Benchmark the render_fragment method performance."""[39;49;00m[90m[39;49;00m
        [90m# Create mock template with blocks[39;49;00m[90m[39;49;00m
        mock_template = MagicMock(spec=Template)[90m[39;49;00m
        mock_template.blocks = {[33m"[39;49;00m[33mtest_block[39;49;00m[33m"[39;49;00m: MagicMock()}[90m[39;49;00m
        mock_template.new_context = MagicMock(return_value=MagicMock())[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create templates instance[39;49;00m[90m[39;49;00m
        templates = AsyncJinja2Templates(directory=AsyncPath([33m"[39;49;00m[33mtemplates[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        templates.get_template_async = AsyncMock(return_value=mock_template)[90m[39;49;00m
        templates.env = MagicMock()[90m[39;49;00m
        templates.env.concat = MagicMock(return_value=[33m"[39;49;00m[33m<div>Fragment content</div>[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Mock the async generator in block_render_func[39;49;00m[90m[39;49;00m
        [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mmock_generator[39;49;00m() -> t.AsyncGenerator[[96mstr[39;49;00m, [94mNone[39;49;00m]:[90m[39;49;00m
            [94myield[39;49;00m [33m"[39;49;00m[33mFragment content[39;49;00m[33m"[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set up the mock to return our generator[39;49;00m[90m[39;49;00m
        mock_template.blocks[[90m[39;49;00m
            [33m"[39;49;00m[33mtest_block[39;49;00m[33m"[39;49;00m[90m[39;49;00m
        ].return_value.[92m__aiter__[39;49;00m.return_value = mock_generator()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create benchmark wrapper[39;49;00m[90m[39;49;00m
        [94masync[39;49;00m [94mdef[39;49;00m[90m [39;49;00m[92mrender_fragment[39;49;00m() -> [96mstr[39;49;00m:[90m[39;49;00m
            [94mreturn[39;49;00m [94mawait[39;49;00m templates.render_fragment([90m[39;49;00m
                [33m"[39;49;00m[33mtest.html[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtest_block[39;49;00m[33m"[39;49;00m, {[33m"[39;49;00m[33mparam1[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mvalue1[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
            )[90m[39;49;00m
    [90m[39;49;00m
        [90m# Run benchmark[39;49;00m[90m[39;49;00m
        result = benchmark.pedantic(render_fragment, iterations=[94m10[39;49;00m, rounds=[94m5[39;49;00m)[90m[39;49;00m
        [94massert[39;49;00m result [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m[90m[39;49;00m
>       [94massert[39;49;00m [96misinstance[39;49;00m(result, [96mstr[39;49;00m)[90m[39;49;00m
[1m[31mE       assert False[0m
[1m[31mE        +  where False = isinstance(<coroutine object test_benchmark_render_fragment.<locals>.render_fragment at 0x10d6a9b60>, str)[0m

[1m[31mtests/test_benchmarks.py[0m:89: AssertionError
[33m========================================================================== warnings summary ===========================================================================[0m
tests/test_benchmarks.py::test_benchmark_template_response
  /Users/les/Projects/starlette-async-jinja/.venv/lib/python3.13/site-packages/pytest_benchmark/fixture.py:109: RuntimeWarning: coroutine 'test_benchmark_template_response.<locals>.get_template_response' was never awaited
    function_to_benchmark(*args, **kwargs)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/test_benchmarks.py::test_benchmark_template_response
  /usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/asyncio/events.py:89: RuntimeWarning: coroutine 'test_benchmark_template_response.<locals>.get_template_response' was never awaited
    self._context.run(self._callback, *self._args)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/test_benchmarks.py::test_benchmark_render_fragment
  /Users/les/Projects/starlette-async-jinja/.venv/lib/python3.13/site-packages/pytest_benchmark/fixture.py:109: RuntimeWarning: coroutine 'test_benchmark_render_fragment.<locals>.render_fragment' was never awaited
    function_to_benchmark(*args, **kwargs)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/test_benchmarks.py::test_benchmark_context_processors
  /Users/les/Projects/starlette-async-jinja/.venv/lib/python3.13/site-packages/pytest_benchmark/fixture.py:109: RuntimeWarning: coroutine 'test_benchmark_context_processors.<locals>.template_with_processors' was never awaited
    function_to_benchmark(*args, **kwargs)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/test_benchmarks.py::test_benchmark_context_processors
  /usr/local/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/asyncio/events.py:89: RuntimeWarning: coroutine 'test_benchmark_context_processors.<locals>.template_with_processors' was never awaited
    self._context.run(self._callback, *self._args)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================================================================== tests coverage ============================================================================
__________________________________________________________ coverage: platform darwin, python 3.13.5-final-0 ___________________________________________________________

Name                                 Stmts   Miss  Cover
--------------------------------------------------------
starlette_async_jinja/responses.py     115     71    38%
--------------------------------------------------------
TOTAL                                  115     71    38%
[31m[1mFAIL Required test coverage of 42% not reached. Total coverage: 38.26%
[0m
[33m-------------------------------------------------------------------------------------------- benchmark: 4 tests --------------------------------------------------------------------------------------------[0m
Name (time in us)                         Min                 Max               Mean             StdDev             Median               IQR            Outliers  OPS (Kops/s)            Rounds  Iterations
[33m------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------[0m
test_benchmark_context_processors   [32m[1m   1.7429 (1.0)    [0m[1m    4.1804 (1.01)   [0m[1m   2.2513 (1.00)   [0m[1m   1.0788 (1.02)   [0m[32m[1m   1.7639 (1.0)    [0m[1m  0.6547 (1.01)   [0m       1;1[1m      444.1878 (1.00)   [0m       5          10
test_benchmark_render_fragment      [1m   1.7488 (1.00)   [0m[32m[1m    4.1495 (1.0)    [0m[32m[1m   2.2505 (1.0)    [0m[32m[1m   1.0619 (1.0)    [0m[1m   1.7745 (1.01)   [0m[32m[1m  0.6500 (1.0)    [0m       1;1[32m[1m      444.3378 (1.0)    [0m       5          10
test_benchmark_template_response    [1m   1.7529 (1.01)   [0m[1m    6.5755 (1.58)   [0m[1m   2.7320 (1.21)   [0m[1m   2.1487 (2.02)   [0m[1m   1.7681 (1.00)   [0m[1m  1.2429 (1.91)   [0m       1;1[1m      366.0322 (0.82)   [0m       5          10
test_benchmark_json_response        [31m[1m  19.1340 (10.98)  [0m[31m[1m  208.9160 (50.35)  [0m[31m[1m  23.9589 (10.65)  [0m[31m[1m  13.1038 (12.34)  [0m[31m[1m  20.4760 (11.61)  [0m[31m[1m  1.5522 (2.39)   [0m    53;143[31m[1m       41.7382 (0.09)   [0m     913           1
[33m------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------[0m

Legend:
  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.
  OPS: Operations Per Second, computed as 1 / Mean
[36m[1m======================================================================= short test summary info =======================================================================[0m
[31mFAILED[0m tests/test_benchmarks.py::[1mtest_benchmark_render_fragment[0m - assert False
[31m======================================================= [31m[1m1 failed[0m, [32m3 passed[0m, [33m42 deselected[0m, [33m5 warnings[0m[31m in 1.34s[0m[31m ========================================================[0m
/Users/les/Projects/starlette-async-jinja/.venv/lib/python3.13/site-packages/_pytest/unraisableexception.py:33: RuntimeWarning: coroutine 'test_benchmark_render_fragment.<locals>.render_fragment' was never awaited
  gc.collect()
RuntimeWarning: Enable tracemalloc to get the object allocation traceback
