/*
    grep [OPTION...] PATTERNS [FILE...]
    grep [OPTION...] -e PATTERNS ... [FILE...]
    grep [OPTION...] -f PATTERN_FILE ... [FILE...]
*/
@cmd(rule: "grep [FLAG]* ($PATTERNS | -e $PATTERNS | -f $PATTERNS) [ARGUMENT]")
pub class grep: base_cmd {
    @argument
    files: str[]

    @var(alias: "PATTERNS")
    pattern: str

// pattern syntax

    // Interpret PATTERNS as extended regular expressions (EREs, see below).
    @flag(alias: ["-E", "--extended-regexp"])
    extended_regexp: bool

    // Interpret PATTERNS as fixed strings, not regular expressions.
    @flag(alias: ["-F", "--fixed-strings"])
    fixed_strings: bool

    // Interpret PATTERNS as basic regular expressions (BREs, see below). This is the default.
    @flag(alias: ["-G", "--basic-regexp"])
    basic_regexp: bool

    // Interpret PATTERNS as Perl-compatible regular expressions (PCREs). This option is experimental when combined with the -z (--null-data) option, and grep -P may warn of unimplemented features.
    @flag(alias: ["-P", "--perl-regexp"])
    perl_regexp: bool

// matching control

    /* 
        // Use PATTERNS as the patterns. If this option is used multiple times or is combined with the -f (--file) option, search for all patterns given. 
        @flag(alias: ["-e", "--regexp"])
        regexp_patterns: str[]

        // Obtain patterns from FILE, one per line. If this option is used multiple times or is combined with the -e (--regexp) option, search for all patterns given. 
        @flag(alias: ["-f", "--file"])
        file_patterns: str
    */

    // Ignore case distinctions in patterns and input data, so that characters that differ only in case match each other.
    @flag(alias: ["-i", "--ignore-case"])
    ignore_case: bool

    // Do not ignore case distinctions in patterns and input data. This is the default.
    @flag(alias: "--no-ignore-case")
    no_ignore_case: bool

    // Invert the sense of matching, to select non-matching lines.
    @flag(alias: ["-v", "--invert-match"])
    invert_match: bool

    // Select only those lines containing matches that form whole words.
    @flag(alias: ["-w", "--word-regexp"])
    word_regexp: bool

    // Select only those matches that exactly match the whole line.
    @flag(alias: ["-x", "--line-regexp"])
    line_regexp: bool

// general output control 

    // Suppress normal output; instead print a count of matching lines for each input file.
    @flag(alias: ["-c", "--count"])
    count: bool

    // Surround the matched (non-empty) strings, matching lines, context lines, file names, line numbers, byte offsets, and separators with escape sequences to display them in color on the terminal. WHEN is never, always, or auto.
    @flag(alias: ["--color", "--colour"])
    color_when: 'never' | 'always' | 'auto'

    // Suppress normal output; instead print the name of each input file from which no output would normally have been printed.
    @flag(alias: ["-L", "--files-without-match"])
    files_without_match: bool

    // Suppress normal output; instead print the name of each input file from which output would normally have been printed.
    @flag(alias: ["-l", "--files-with-matches"])
    files_with_matches: bool

    // Stop reading a file after NUM matching lines. A NUM of -1 is treated as infinity.
    @flag(alias: ["-m", "--max-count"])
    max_count: num

    // Print only the matched (non-empty) parts of a matching line, with each part on a separate output line.
    @flag(alias: ["-o", "--only-matching"])
    only_matching: bool

    // Quiet; do not write anything to standard output. Exit immediately with zero status if any match is found.
    @flag(alias: ["-q", "--quiet", "--silent"])
    quiet: bool

    // Suppress error messages about nonexistent or unreadable files.
    @flag(alias: ["-s", "--no-messages"])
    no_messages: bool

// output line prefix control

    // Print the 0-based byte offset within the input file before each line of output. If -o (--only-matching) is specified, print the offset of the matching part itself.
    @flag(alias: ["-b", "--byte-offset"])
    byte_offset: bool

    // Print the file name for each match. This is the default when there is more than one file to search.
    @flag(alias: ["-H", "--with-filename"])
    with_filename: bool

    // Suppress the prefixing of file names on output. This is the default when there is only one file (or only standard input) to search.
    @flag(alias: ["-h", "--no-filename"])
    no_filename: bool

    // Display input actually coming from standard input as input coming from file LABEL.
    @flag(alias: ["--label"])
    label: str

    // Prefix each line of output with the 1-based line number within its input file.
    @flag(alias: ["-n", "--line-number"])
    line_number: bool

    // Make sure that the first character of actual line content lies on a tab stop, so that the alignment of tabs looks normal.
    @flag(alias: ["-T", "--initial-tab"])
    initial_tab: bool

    // Output a zero byte (the ASCII NUL character) instead of the character that normally follows a file name.
    @flag(alias: ["-Z", "--null"])
    null_output: bool

// context line control
    
    // Print NUM lines of trailing context after matching lines. 
    @flag(alias: ["-A", "--after-context"])
    after_context: num

    // Print NUM lines of leading context before matching lines. 
    @flag(alias: ["-B", "--before-context"])
    before_context: num

    // Print NUM lines of output context. 
    @flag(alias: ["-C", "-$num", "--context"])
    context: num

    // When -A, -B, or -C are in use, print SEP instead of -- between groups of lines.
    @flag(alias: ["--group-separator"])
    group_separator: str

    // When -A, -B, or -C are in use, do not print a separator between groups of lines.
    @flag(alias: ["--no-group-separator"])
    no_group_separator: bool

// file and directory selection

    // Process a binary file as if it were text; this is equivalent to the --binary-files=text option.
    @flag(alias: ["-a", "--text"])
    text: bool

    // If a file's data or metadata indicate that the file contains binary data, assume that the file is of type TYPE.
    @flag(alias: ["--binary-files"])
    binary_files: 'binary' | 'text' | 'without-match'

    // If an input file is a device, FIFO or socket, use ACTION to process it. By default, ACTION is read.
    @flag(alias: ["-D", "--devices"])
    devices_action: 'read' | 'skip'

    // If an input file is a directory, use ACTION to process it. By default, ACTION is read.
    @flag(alias: ["-d", "--directories"])
    directories_action: 'read' | 'skip' | 'recurse'

    // Skip any command-line file with a name suffix that matches the pattern GLOB, using wildcard matching.
    @flag(alias: ["--exclude"])
    exclude_glob: str

    // Skip files whose base name matches any of the file-name globs read from FILE.
    @flag(alias: ["--exclude-from"])
    exclude_from_file: str

    // Skip any command-line directory with a name suffix that matches the pattern GLOB.
    @flag(alias: ["--exclude-dir"])
    exclude_dir_glob: str

    // Process a binary file as if it did not contain matching data; this is equivalent to the --binary-files=without-match option.
    @flag(alias: ["-I"])
    binary_files_without_match: bool

    // Search only files whose base name matches GLOB.
    @flag(alias: ["--include"])
    include_glob: str

    // Read all files under each directory, recursively, following symbolic links only if they are on the command line.
    @flag(alias: ["-r", "--recursive"])
    recursive: bool

    // Read all files under each directory, recursively. Follow all symbolic links, unlike -r.
    @flag(alias: ["-R", "--dereference-recursive"])
    dereference_recursive: bool

// other options

    // Use line buffering on output. This can cause a performance penalty.
    @flag(alias: ["--line-buffered"])
    line_buffered: bool

    // Treat the file(s) as binary. Overrules the automatic guessing of file type on MS-DOS and MS-Windows.
    @flag(alias: ["-U", "--binary"])
    binary: bool

    // Treat input and output data as sequences of lines, each terminated by a zero byte (ASCII NUL) instead of a newline.
    @flag(alias: ["-z", "--null-data"])
    null_data: bool
}