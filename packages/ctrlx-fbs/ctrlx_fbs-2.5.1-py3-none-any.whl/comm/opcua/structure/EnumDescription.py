# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EnumDescription(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EnumDescription()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEnumDescription(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EnumDescription
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EnumDescription
    def DataTypeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.NodeId import NodeId
            obj = NodeId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EnumDescription
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.QualifiedName import QualifiedName
            obj = QualifiedName()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EnumDescription
    def EnumDefinition_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.structure.EnumDefinition import EnumDefinition
            obj = EnumDefinition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EnumDescription
    def BuiltInType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def EnumDescriptionStart(builder): builder.StartObject(4)
def Start(builder):
    return EnumDescriptionStart(builder)
def EnumDescriptionAddDataTypeId(builder, dataTypeId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dataTypeId), 0)
def AddDataTypeId(builder, dataTypeId):
    return EnumDescriptionAddDataTypeId(builder, dataTypeId)
def EnumDescriptionAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return EnumDescriptionAddName(builder, name)
def EnumDescriptionAddEnumDefinition_(builder, enumDefinition_): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(enumDefinition_), 0)
def AddEnumDefinition_(builder, enumDefinition_):
    return EnumDescriptionAddEnumDefinition_(builder, enumDefinition_)
def EnumDescriptionAddBuiltInType(builder, builtInType): builder.PrependUint8Slot(3, builtInType, 0)
def AddBuiltInType(builder, builtInType):
    return EnumDescriptionAddBuiltInType(builder, builtInType)
def EnumDescriptionEnd(builder): return builder.EndObject()
def End(builder):
    return EnumDescriptionEnd(builder)
import comm.opcua.builtin.NodeId
import comm.opcua.builtin.QualifiedName
import comm.opcua.structure.EnumDefinition
try:
    from typing import Optional
except:
    pass

class EnumDescriptionT(object):

    # EnumDescriptionT
    def __init__(self):
        self.dataTypeId = None  # type: Optional[comm.opcua.builtin.NodeId.NodeIdT]
        self.name = None  # type: Optional[comm.opcua.builtin.QualifiedName.QualifiedNameT]
        self.enumDefinition_ = None  # type: Optional[comm.opcua.structure.EnumDefinition.EnumDefinitionT]
        self.builtInType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        enumDescription = EnumDescription()
        enumDescription.Init(buf, pos)
        return cls.InitFromObj(enumDescription)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, enumDescription):
        x = EnumDescriptionT()
        x._UnPack(enumDescription)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dataTypeId == other.dataTypeId and \
            self.name == other.name and \
            self.enumDefinition_ == other.enumDefinition_ and \
            self.builtInType == other.builtInType

    # EnumDescriptionT
    def _UnPack(self, enumDescription):
        if enumDescription is None:
            return
        if enumDescription.DataTypeId() is not None:
            self.dataTypeId = comm.opcua.builtin.NodeId.NodeIdT.InitFromObj(enumDescription.DataTypeId())
        if enumDescription.Name() is not None:
            self.name = comm.opcua.builtin.QualifiedName.QualifiedNameT.InitFromObj(enumDescription.Name())
        if enumDescription.EnumDefinition_() is not None:
            self.enumDefinition_ = comm.opcua.structure.EnumDefinition.EnumDefinitionT.InitFromObj(enumDescription.EnumDefinition_())
        self.builtInType = enumDescription.BuiltInType()

    # EnumDescriptionT
    def Pack(self, builder):
        if self.dataTypeId is not None:
            dataTypeId = self.dataTypeId.Pack(builder)
        if self.name is not None:
            name = self.name.Pack(builder)
        if self.enumDefinition_ is not None:
            enumDefinition_ = self.enumDefinition_.Pack(builder)
        EnumDescriptionStart(builder)
        if self.dataTypeId is not None:
            EnumDescriptionAddDataTypeId(builder, dataTypeId)
        if self.name is not None:
            EnumDescriptionAddName(builder, name)
        if self.enumDefinition_ is not None:
            EnumDescriptionAddEnumDefinition_(builder, enumDefinition_)
        EnumDescriptionAddBuiltInType(builder, self.builtInType)
        enumDescription = EnumDescriptionEnd(builder)
        return enumDescription
