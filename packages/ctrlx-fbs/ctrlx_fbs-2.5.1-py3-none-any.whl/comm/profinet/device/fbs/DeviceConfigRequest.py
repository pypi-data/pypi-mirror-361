# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DeviceConfigRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeviceConfigRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeviceConfigRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DeviceConfigRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DeviceConfigRequest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DeviceConfigRequest
    def Configuration(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # DeviceConfigRequest
    def ConfigurationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # DeviceConfigRequest
    def ConfigurationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DeviceConfigRequest
    def ConfigurationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def DeviceConfigRequestStart(builder): builder.StartObject(2)
def Start(builder):
    return DeviceConfigRequestStart(builder)
def DeviceConfigRequestAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return DeviceConfigRequestAddName(builder, name)
def DeviceConfigRequestAddConfiguration(builder, configuration): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(configuration), 0)
def AddConfiguration(builder, configuration):
    return DeviceConfigRequestAddConfiguration(builder, configuration)
def DeviceConfigRequestStartConfigurationVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartConfigurationVector(builder, numElems):
    return DeviceConfigRequestStartConfigurationVector(builder, numElems)
def DeviceConfigRequestEnd(builder): return builder.EndObject()
def End(builder):
    return DeviceConfigRequestEnd(builder)
try:
    from typing import List
except:
    pass

class DeviceConfigRequestT(object):

    # DeviceConfigRequestT
    def __init__(self):
        self.name = None  # type: str
        self.configuration = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        deviceConfigRequest = DeviceConfigRequest()
        deviceConfigRequest.Init(buf, pos)
        return cls.InitFromObj(deviceConfigRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, deviceConfigRequest):
        x = DeviceConfigRequestT()
        x._UnPack(deviceConfigRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.configuration == other.configuration

    # DeviceConfigRequestT
    def _UnPack(self, deviceConfigRequest):
        if deviceConfigRequest is None:
            return
        self.name = deviceConfigRequest.Name()
        if not deviceConfigRequest.ConfigurationIsNone():
            if np is None:
                self.configuration = []
                for i in range(deviceConfigRequest.ConfigurationLength()):
                    self.configuration.append(deviceConfigRequest.Configuration(i))
            else:
                self.configuration = deviceConfigRequest.ConfigurationAsNumpy()

    # DeviceConfigRequestT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.configuration is not None:
            if np is not None and type(self.configuration) is np.ndarray:
                configuration = builder.CreateNumpyVector(self.configuration)
            else:
                DeviceConfigRequestStartConfigurationVector(builder, len(self.configuration))
                for i in reversed(range(len(self.configuration))):
                    builder.PrependUint8(self.configuration[i])
                configuration = builder.EndVector()
        DeviceConfigRequestStart(builder)
        if self.name is not None:
            DeviceConfigRequestAddName(builder, name)
        if self.configuration is not None:
            DeviceConfigRequestAddConfiguration(builder, configuration)
        deviceConfigRequest = DeviceConfigRequestEnd(builder)
        return deviceConfigRequest
