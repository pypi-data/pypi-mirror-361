# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#DC slave configuration response
class DcSlaveOnlineInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DcSlaveOnlineInfoResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDcSlaveOnlineInfoResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DcSlaveOnlineInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Slave supports DC (Distributed Clock)
    # DcSlaveOnlineInfoResponse
    def DcSupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #Slave supports 64 bit DC
    # DcSlaveOnlineInfoResponse
    def Dc64Support(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #Slave is reference clock
    # DcSlaveOnlineInfoResponse
    def DcReferenceClock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #Cycle time of Sync0 event (as defined in ETG.2100) in nanoseconds
    # DcSlaveOnlineInfoResponse
    def CycleTime0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Cycle time of Sync1 (calculated value as defined in ETG.2100) event in nanoseconds
    # DcSlaveOnlineInfoResponse
    def CycleTime1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Shift time of Sync 0 event (as defined in ETG.2100) in nanoseconds
    # DcSlaveOnlineInfoResponse
    def ShiftTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    #System time difference in nanoseconds (only if DC is configured) (ESC register 0x092C)
    # DcSlaveOnlineInfoResponse
    def SystemTimeDifference(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Time delay "behind" slave in nanoseconds (only if DC is configured)
    # DcSlaveOnlineInfoResponse
    def SlaveDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Propagation delay in nanoseconds (only if DC is configured) (ESC register 0x0928)
    # DcSlaveOnlineInfoResponse
    def PropagationDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def DcSlaveOnlineInfoResponseStart(builder): builder.StartObject(9)
def Start(builder):
    return DcSlaveOnlineInfoResponseStart(builder)
def DcSlaveOnlineInfoResponseAddDcSupport(builder, dcSupport): builder.PrependBoolSlot(0, dcSupport, 0)
def AddDcSupport(builder, dcSupport):
    return DcSlaveOnlineInfoResponseAddDcSupport(builder, dcSupport)
def DcSlaveOnlineInfoResponseAddDc64Support(builder, dc64Support): builder.PrependBoolSlot(1, dc64Support, 0)
def AddDc64Support(builder, dc64Support):
    return DcSlaveOnlineInfoResponseAddDc64Support(builder, dc64Support)
def DcSlaveOnlineInfoResponseAddDcReferenceClock(builder, dcReferenceClock): builder.PrependBoolSlot(2, dcReferenceClock, 0)
def AddDcReferenceClock(builder, dcReferenceClock):
    return DcSlaveOnlineInfoResponseAddDcReferenceClock(builder, dcReferenceClock)
def DcSlaveOnlineInfoResponseAddCycleTime0(builder, cycleTime0): builder.PrependUint32Slot(3, cycleTime0, 0)
def AddCycleTime0(builder, cycleTime0):
    return DcSlaveOnlineInfoResponseAddCycleTime0(builder, cycleTime0)
def DcSlaveOnlineInfoResponseAddCycleTime1(builder, cycleTime1): builder.PrependUint32Slot(4, cycleTime1, 0)
def AddCycleTime1(builder, cycleTime1):
    return DcSlaveOnlineInfoResponseAddCycleTime1(builder, cycleTime1)
def DcSlaveOnlineInfoResponseAddShiftTime(builder, shiftTime): builder.PrependInt32Slot(5, shiftTime, 0)
def AddShiftTime(builder, shiftTime):
    return DcSlaveOnlineInfoResponseAddShiftTime(builder, shiftTime)
def DcSlaveOnlineInfoResponseAddSystemTimeDifference(builder, systemTimeDifference): builder.PrependUint32Slot(6, systemTimeDifference, 0)
def AddSystemTimeDifference(builder, systemTimeDifference):
    return DcSlaveOnlineInfoResponseAddSystemTimeDifference(builder, systemTimeDifference)
def DcSlaveOnlineInfoResponseAddSlaveDelay(builder, slaveDelay): builder.PrependUint32Slot(7, slaveDelay, 0)
def AddSlaveDelay(builder, slaveDelay):
    return DcSlaveOnlineInfoResponseAddSlaveDelay(builder, slaveDelay)
def DcSlaveOnlineInfoResponseAddPropagationDelay(builder, propagationDelay): builder.PrependUint32Slot(8, propagationDelay, 0)
def AddPropagationDelay(builder, propagationDelay):
    return DcSlaveOnlineInfoResponseAddPropagationDelay(builder, propagationDelay)
def DcSlaveOnlineInfoResponseEnd(builder): return builder.EndObject()
def End(builder):
    return DcSlaveOnlineInfoResponseEnd(builder)

class DcSlaveOnlineInfoResponseT(object):

    # DcSlaveOnlineInfoResponseT
    def __init__(self):
        self.dcSupport = False  # type: bool
        self.dc64Support = False  # type: bool
        self.dcReferenceClock = False  # type: bool
        self.cycleTime0 = 0  # type: int
        self.cycleTime1 = 0  # type: int
        self.shiftTime = 0  # type: int
        self.systemTimeDifference = 0  # type: int
        self.slaveDelay = 0  # type: int
        self.propagationDelay = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dcSlaveOnlineInfoResponse = DcSlaveOnlineInfoResponse()
        dcSlaveOnlineInfoResponse.Init(buf, pos)
        return cls.InitFromObj(dcSlaveOnlineInfoResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dcSlaveOnlineInfoResponse):
        x = DcSlaveOnlineInfoResponseT()
        x._UnPack(dcSlaveOnlineInfoResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dcSupport == other.dcSupport and \
            self.dc64Support == other.dc64Support and \
            self.dcReferenceClock == other.dcReferenceClock and \
            self.cycleTime0 == other.cycleTime0 and \
            self.cycleTime1 == other.cycleTime1 and \
            self.shiftTime == other.shiftTime and \
            self.systemTimeDifference == other.systemTimeDifference and \
            self.slaveDelay == other.slaveDelay and \
            self.propagationDelay == other.propagationDelay

    # DcSlaveOnlineInfoResponseT
    def _UnPack(self, dcSlaveOnlineInfoResponse):
        if dcSlaveOnlineInfoResponse is None:
            return
        self.dcSupport = dcSlaveOnlineInfoResponse.DcSupport()
        self.dc64Support = dcSlaveOnlineInfoResponse.Dc64Support()
        self.dcReferenceClock = dcSlaveOnlineInfoResponse.DcReferenceClock()
        self.cycleTime0 = dcSlaveOnlineInfoResponse.CycleTime0()
        self.cycleTime1 = dcSlaveOnlineInfoResponse.CycleTime1()
        self.shiftTime = dcSlaveOnlineInfoResponse.ShiftTime()
        self.systemTimeDifference = dcSlaveOnlineInfoResponse.SystemTimeDifference()
        self.slaveDelay = dcSlaveOnlineInfoResponse.SlaveDelay()
        self.propagationDelay = dcSlaveOnlineInfoResponse.PropagationDelay()

    # DcSlaveOnlineInfoResponseT
    def Pack(self, builder):
        DcSlaveOnlineInfoResponseStart(builder)
        DcSlaveOnlineInfoResponseAddDcSupport(builder, self.dcSupport)
        DcSlaveOnlineInfoResponseAddDc64Support(builder, self.dc64Support)
        DcSlaveOnlineInfoResponseAddDcReferenceClock(builder, self.dcReferenceClock)
        DcSlaveOnlineInfoResponseAddCycleTime0(builder, self.cycleTime0)
        DcSlaveOnlineInfoResponseAddCycleTime1(builder, self.cycleTime1)
        DcSlaveOnlineInfoResponseAddShiftTime(builder, self.shiftTime)
        DcSlaveOnlineInfoResponseAddSystemTimeDifference(builder, self.systemTimeDifference)
        DcSlaveOnlineInfoResponseAddSlaveDelay(builder, self.slaveDelay)
        DcSlaveOnlineInfoResponseAddPropagationDelay(builder, self.propagationDelay)
        dcSlaveOnlineInfoResponse = DcSlaveOnlineInfoResponseEnd(builder)
        return dcSlaveOnlineInfoResponse
