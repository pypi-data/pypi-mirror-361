[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling" ]

[project]
name = "docstringify"
version = "1.1.0"
description = "Flag missing docstrings and, optionally, generate them from signatures and type annotations."
readme = "README.md"
keywords = [
  "ast",
  "docstring generation",
  "google-style docstring",
  "numpydoc-style docstring",
  "pre-commit",
]
license = "MIT"
license-files = [ "LICENSE" ]
authors = [
  { name = "Stefanie Molin", email = "docstringify@stefaniemolin.com" },
]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

dependencies = [  ]
urls.Documentation = "https://github.com/stefmolin/docstringify"
urls.Homepage = "https://github.com/stefmolin/docstringify"
urls.Source = "https://github.com/stefmolin/docstringify"
scripts.docstringify = "docstringify.cli:main"

[dependency-groups]
dev = [ "pre-commit", { include-group = "test" } ]

test = [
  "pytest>=8.3.4",
  "pytest-cov>=4.1.0",
  "pytest-randomly>=3.12.0",
]

[tool.ruff]
line-length = 88
format.indent-style = "space"
format.quote-style = "single"
format.docstring-code-format = true
lint.select = [
  "ANN",  # flake8-annotations
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "E",    # pycodestyle error
  "ERA",  # eradicate (commented out code)
  "F",    # pyflakes
  "FA",   # flake8-future-annotations
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "N",    # pep8-naming
  "PERF", # perflint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff-specific rules
  "SIM",  # flake8-simplify
  "TC",   # flake8-type-checking (performance improvements)
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle warning
]
lint.ignore = [
  "E501", # line-too-long
]

lint.extend-per-file-ignores."tests/*" = [ "ANN" ] # don't require annotations for tests
lint.isort.known-first-party = [
  "docstringify",
]

[tool.numpydoc_validation]
checks = [
  "all",  # report on all checks
  "GL08", # use Docstringify to test for docstring presence instead
  "ES01", # but don't require an extended summary
  "EX01", # or examples
  "SA01", # or a see also section
  "SS06", # and don't require the summary to fit on one line
]
exclude = [ # don't report on checks for these
  '\.__init__$',
  '\.__repr__$',
  '\.__str__$',
]
override_SS05 = [ # allow docstrings to start with these words
  '^Unambiguous ',
]
