# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DiagramCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiagramCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiagramCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DiagramCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DiagramCfg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DiagramCfg
    def Channels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.osci.fbtypes.ViewChannel import ViewChannel
            obj = ViewChannel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DiagramCfg
    def ChannelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DiagramCfg
    def ChannelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def DiagramCfgStart(builder): builder.StartObject(2)
def Start(builder):
    return DiagramCfgStart(builder)
def DiagramCfgAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return DiagramCfgAddName(builder, name)
def DiagramCfgAddChannels(builder, channels): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(channels), 0)
def AddChannels(builder, channels):
    return DiagramCfgAddChannels(builder, channels)
def DiagramCfgStartChannelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartChannelsVector(builder, numElems):
    return DiagramCfgStartChannelsVector(builder, numElems)
def DiagramCfgEnd(builder): return builder.EndObject()
def End(builder):
    return DiagramCfgEnd(builder)
import comm.osci.fbtypes.ViewChannel
try:
    from typing import List
except:
    pass

class DiagramCfgT(object):

    # DiagramCfgT
    def __init__(self):
        self.name = None  # type: str
        self.channels = None  # type: List[comm.osci.fbtypes.ViewChannel.ViewChannelT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diagramCfg = DiagramCfg()
        diagramCfg.Init(buf, pos)
        return cls.InitFromObj(diagramCfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, diagramCfg):
        x = DiagramCfgT()
        x._UnPack(diagramCfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.channels == other.channels

    # DiagramCfgT
    def _UnPack(self, diagramCfg):
        if diagramCfg is None:
            return
        self.name = diagramCfg.Name()
        if not diagramCfg.ChannelsIsNone():
            self.channels = []
            for i in range(diagramCfg.ChannelsLength()):
                if diagramCfg.Channels(i) is None:
                    self.channels.append(None)
                else:
                    viewChannel_ = comm.osci.fbtypes.ViewChannel.ViewChannelT.InitFromObj(diagramCfg.Channels(i))
                    self.channels.append(viewChannel_)

    # DiagramCfgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.channels is not None:
            channelslist = []
            for i in range(len(self.channels)):
                channelslist.append(self.channels[i].Pack(builder))
            DiagramCfgStartChannelsVector(builder, len(self.channels))
            for i in reversed(range(len(self.channels))):
                builder.PrependUOffsetTRelative(channelslist[i])
            channels = builder.EndVector()
        DiagramCfgStart(builder)
        if self.name is not None:
            DiagramCfgAddName(builder, name)
        if self.channels is not None:
            DiagramCfgAddChannels(builder, channels)
        diagramCfg = DiagramCfgEnd(builder)
        return diagramCfg
