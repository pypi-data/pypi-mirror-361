[build-system]
requires = ["setuptools>=42", "wheel", "hatchling", "hatch"]
build-backend = "setuptools.build_meta"

[project]
name = "athena-client"
version = "1.0.26"
description = "An unofficial Python SDK for interacting with the OHDSI Athena Concepts API."
readme = "README.md"
requires-python = ">=3.9,<3.13"
license = "MIT"
authors = [
    {name = "Alvaro A. Alvarez P. "}
]

# Core dependencies - only what's absolutely necessary
dependencies = [
    "orjson>=3.9.0",
    "pydantic>=2.0.0",
    "pydantic-settings",
    "httpx>=0.18.0",
    "backoff>=2.0.0",
    "requests>=2.0.0",
    "click>=8.0.0",
    "rich>=10.0.0"
]

[tool.setuptools]
packages = { find = { include = ["athena_client*"], exclude = ["output*"] } }

[project.optional-dependencies]
# Core functionality - minimal dependencies (same as main dependencies)
core = [
    "orjson>=3.9.0",
    "pydantic>=2.0.0",
    "pydantic-settings",
    "httpx>=0.18.0",
    "backoff>=2.0.0"
]

# All optional dependencies
all = [
    "athena-client[async]",
    "athena-client[pandas]",
    "athena-client[cli]",
    "athena-client[yaml]",
    "athena-client[crypto]",
    "athena-client[db]"
]

# Individual feature groups
async = ["httpx>=0.18.0", "backoff>=2.0.0"]
pandas = ["pandas>=1.3.0,<3.0.0"]
cli = ["click>=8.0.0", "rich>=10.0.0"]
yaml = ["pyyaml>=6.0"]
crypto = ["cryptography>=36.0.0"]
postgres = ["sqlalchemy>=1.4.0", "psycopg2-binary>=2.9.0"]
bigquery = ["sqlalchemy>=1.4.0", "sqlalchemy-bigquery"]
db = [
    "athena-client[postgres]",
    "athena-client[bigquery]"
]

# Convenience groups
full = [
    "athena-client[pandas]",
    "athena-client[cli]",
    "athena-client[yaml]",
    "athena-client[crypto]",
    "athena-client[db]"
]

dev = [
  "ruff>=0.4.0",
  "cyclonedx-bom>=3.15.0",
  "mypy>=1.10",
  "pip-audit>=2.6",
  "pytest>=8.2",
  "pytest-cov>=5.0",
  "pytest-asyncio[mode-auto]>=0.23",
  "hypothesis>=6.103",
  "vcrpy>=6.0",
  "rich>=13.7",
  "build>=1.2",
  "twine>=5.1",
  "pytest-benchmark>=4.0",
  "bandit>=1.7.5",
  "cyclonedx-python-lib>=5.2.0",
  "types-requests",
  "types-PyYAML",
  "pandas-stubs",
  "sqlalchemy-stubs",
  "hatch",
  "hatchling"
]


[tool.hatch.envs.default]
features = ["dev"]
dependencies = [
  "pytest-cov"
]

[project.scripts]
# CLI scripts are only available when athena-client[cli] is installed
# These will be conditionally installed based on available dependencies
athena = "athena_client.cli:main"
athena-client = "athena_client.cli:main"

[project.urls]
Homepage = "https://github.com/username/athena-client"
Documentation = "https://athena-client.readthedocs.io"
Issues = "https://github.com/username/athena-client/issues"

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]


[tool.ruff]
target-version = "py312"
line-length = 88
select = ["E", "F", "B", "I"]

[tool.mypy]
python_version = "3.12"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true

[tool.hatch.envs.default.scripts]
lint = "ruff check athena_client tests"
format = "ruff format athena_client tests"
type-check = "mypy athena_client"
test = "pytest {args}"
cov = "pytest --cov=athena_client --cov-report=term-missing {args}"
bandit-check = "bandit -c pyproject.toml -r athena_client -s B101,B404,B603"
cyclonedx = "cyclonedx-py environment --of json -o sbom.json"

quality = [
  "format",
  "lint",
  "type-check",
  "bandit-check",
]