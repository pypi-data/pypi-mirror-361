# automatically generated by the FlatBuffers compiler, do not modify

# namespace: API

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AddTimespan(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAddTimespan(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AddTimespan()
        x.Init(buf, n + offset)
        return x

    # AddTimespan
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AddTimespan
    def Timespan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from SEAScope.API.Timespan import Timespan
            obj = Timespan()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AddTimespanStart(builder): builder.StartObject(1)
def AddTimespanAddTimespan(builder, timespan): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(timespan), 0)
def AddTimespanEnd(builder): return builder.EndObject()
