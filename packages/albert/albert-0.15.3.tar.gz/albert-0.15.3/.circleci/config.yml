version: 2.1

orbs:
  python: circleci/python@3.1.0
  snyk: snyk/snyk@2.3.0

commands:
  install_uv:
    steps:
      - run:
          name: Install uv
          command: curl -LsSf https://astral.sh/uv/install.sh | sh

  deploy_docs:
    parameters:
      mode:
        type: enum
        enum: ["dev", "release"]
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "SHA256:8xP/cfKKsXJOx9XDojfxU3nx9NRtDCEVSVm0uL6qL5I"
      - install_uv
      - run:
          name: Install dependencies
          command: uv sync
      - run:
          name: Configure Git
          command: |
            git config --global user.name "CircleCI"
            git config --global user.email "circleci@users.noreply.github.com"
      - run:
          name: Build Documentation
          command: |
            uv run mkdocs build --clean
      - run:
          name: Deploy Docs with mike
          command: |
            if [ "<< parameters.mode >>" = "dev" ]; then
              echo "Deploying dev docs"
              uv run mike deploy --push --update-aliases dev
            elif [ "<< parameters.mode >>" = "release" ]; then
              if [ -z "$CIRCLE_TAG" ]; then
                echo "CIRCLE_TAG is empty. Skipping mike deploy."
                exit 0
              fi

              if [[ "$CIRCLE_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                VERSION="${CIRCLE_TAG#v}"
                echo "Stable semver tag detected. Deploying $VERSION with alias: latest"
                uv run mike deploy --push --update-aliases "$VERSION" latest
              else
                echo "Non-semver release tag. Skipping docs deployment."
                exit 0
              fi
            fi

jobs:
  snyk_app_scan:
    executor:
      name: python/default
      tag: "3.10.15"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "SHA256:8xP/cfKKsXJOx9XDojfxU3nx9NRtDCEVSVm0uL6qL5I"
      - install_uv
      - run:
          name: Export dependencies
          command: |
            uv sync
            uv export > requirements_lock.txt
            uv pip compile requirements_lock.txt > requirements.txt
            uv pip install --system -r requirements.txt
      - snyk/scan:
          fail-on-issues: true
          monitor-on-build: true
          severity-threshold: high
          token-variable: SNYK_TOKEN

  test:
    executor:
      name: python/default
      tag: "3.10.15"
    steps:
      - checkout
      - install_uv
      - run:
          name: Install dependencies
          command: uv sync
      - run:
          name: Set environment
          command: |
            echo 'export ALBERT_BASE_URL="https://app.albertinvent.com"' >> "$BASH_ENV"
      - run:
          name: Check formatting
          command: |
            uv run ruff format . --check
      - run:
          name: Check lints
          command: |
            uv run ruff check .
      - run:
          name: Run pytest
          command: |
            uv run pytest

  validate_version_bump:
    executor:
      name: python/default
      tag: "3.10.15"
    steps:
      - checkout
      - run:
          name: Validate version bump
          command: |
            if [[ -z ${CIRCLE_PULL_REQUEST} ]]; then
              echo "Not a PR, assuming base branch is main"
              BASE_BRANCH="main"
            else
              GITHUB_PR_URL=$(echo https://api.github.com/repos/${CIRCLE_PULL_REQUEST:19} | sed "s/\/pull\//\/pulls\//")
              BASE_BRANCH=$(curl -s -H "Authorization: Bearer ${GITHUB_TOKEN_ALBERT_PYTHON}" ${GITHUB_PR_URL} | jq ".base.ref" | tr -d "\042")
              if [[ -z ${BASE_BRANCH} ]]; then
                echo "Could not determine base branch from PR, defaulting to main"
                BASE_BRANCH="main"
              fi
            fi

            if [[ $BASE_BRANCH == "main" ]]; then
              echo "Validating version bump for PR into '${BASE_BRANCH}'"
              python scripts/validate_version_bump.py --base origin/${BASE_BRANCH}
            else
              echo "Skipping version bump check for non-production base branch '${BASE_BRANCH}'"
            fi

  validate_release_tag:
    executor:
      name: python/default
      tag: "3.10.15"
    steps:
      - checkout
      - run:
          name: Validate release tag
          command: python scripts/validate_release_tag.py --tag ${CIRCLE_TAG}

  publish:
    executor:
      name: python/default
      tag: "3.10.15"
    steps:
      - checkout
      - install_uv
      - run:
          name: Build package
          command: uv build
      - run:
          name: Publish to PyPI
          command: |
            uv publish --token $PYPI_TOKEN_ALBERT_PYTHON

  deploy_docs:
    parameters:
      mode:
        type: enum
        enum: ["dev", "release"]
    executor:
      name: python/default
      tag: "3.10.15"
    steps:
      - deploy_docs:
          mode: << parameters.mode >>

workflows:
  main:
    jobs:
      - snyk_app_scan:
          name: Snyk App Scan
          context: dev
      - test:
          name: Test
          context: dev
      - validate_version_bump:
          name: Validate Version Bump
          context: dev
          filters:
            branches:
              ignore: ["main"]
      - deploy_docs:
          name: Deploy Docs On Merge to Main
          mode: dev
          context: dev
          filters:
            branches:
              only: main

  release:
    jobs:
      - validate_release_tag:
          name: Validate Release Tag
          context: dev
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - publish:
          name: Publish to PyPI
          context: dev
          requires:
            - Validate Release Tag
          filters:
            tags:
              only: /^v.+$/
            branches:
              ignore: /.*/
      - deploy_docs:
          name: Deploy Docs on Github Release
          mode: release
          context: dev
          requires:
            - Validate Release Tag
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/
