[project]
name = "BO4E-CLI"
description = "CLI for developers. It contains many useful features when working on using BO4E in your own projects."
license = { text = "MIT" }
requires-python = ">=3.11"
authors = [{ name = "Leon Haffmans", email = "leon.haffmans@hochfrequenz.de" }]
keywords = ["bo4e", "cli", "development", "tools"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "typer",
    "PyGithub",
    "pydantic",
    "httpx",
    "datamodel-code-generator",
    "autoflake",
    "more_itertools",
    "sqlmodel",
    "networkx",
]     # add all the dependencies here
dynamic = ["readme", "version"]

[project.urls]
Changelog = "https://github.com/bo4e/BO4E-CLI/releases"
Homepage = "https://github.com/bo4e/BO4E-CLI"

[project.scripts]
bo4e = "bo4e_cli.__main__:main"

[tool.black]
line-length = 120
target_version = ["py311", "py312"]

[tool.isort]
line_length = 120
profile = "black"

[tool.pylint."MESSAGES CONTROL"]
max-line-length = 120

[tool.pylint.MASTER]
load-plugins= "pylint_pydantic"

[mypy]
truethy-bool = true

[tool.mypy]
disable_error_code = []

[[tool.mypy.overrides]]
module = 'unittests.*'
disable_error_code = ["union-attr"]
# union-attr will be ignored for type checking the tests because most of them are intended.
# The tests will fail if there is a problem.

[build-system]
requires = ["hatchling>=1.8.0", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"
fragments = [{ path = "README.md" }]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/_bo4e_cli_version.py"
template = '''
version = "{version}"
'''

[tool.hatch.build.targets.sdist]
exclude = ["/unittests"]

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

[tool.pytest.ini_options]
# When the mode is auto, all discovered async tests are considered asyncio-driven
# even if they have no @pytest.mark.asyncio marker.
# https://github.com/pytest-dev/pytest-asyncio#auto-mode
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
