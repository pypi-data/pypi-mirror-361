# -*- coding: utf-8 -*-

"""
cuadraai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from cuadraai.api_helper import APIHelper


class TotalUsageEx(object):

    """Implementation of the 'TotalUsageEx' model.

    Attributes:
        total_input (int): Total Input Tokens used for this month
        total_output (int): Total Ouput Tokens used for this month
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "total_input": 'totalInput',
        "total_output": 'totalOutput'
    }

    _optionals = [
        'total_input',
        'total_output',
    ]

    def __init__(self,
                 total_input=APIHelper.SKIP,
                 total_output=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the TotalUsageEx class"""

        # Initialize members of the class
        if total_input is not APIHelper.SKIP:
            self.total_input = total_input 
        if total_output is not APIHelper.SKIP:
            self.total_output = total_output 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        total_input = dictionary.get("totalInput") if dictionary.get("totalInput") else APIHelper.SKIP
        total_output = dictionary.get("totalOutput") if dictionary.get("totalOutput") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(total_input,
                   total_output,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'total_input={(self.total_input if hasattr(self, "total_input") else None)!r}, '
                f'total_output={(self.total_output if hasattr(self, "total_output") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'total_input={(self.total_input if hasattr(self, "total_input") else None)!s}, '
                f'total_output={(self.total_output if hasattr(self, "total_output") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
