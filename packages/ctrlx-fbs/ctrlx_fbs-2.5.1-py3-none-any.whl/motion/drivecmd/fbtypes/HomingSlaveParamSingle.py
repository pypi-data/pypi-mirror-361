# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#slave axes parameter of control based gantry homing 
class HomingSlaveParamSingle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HomingSlaveParamSingle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHomingSlaveParamSingle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HomingSlaveParamSingle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #the id of slave axis
    # HomingSlaveParamSingle
    def SlaveId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #commanded reference position of slave axis
    # HomingSlaveParamSingle
    def NewRefPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    #select which reference mark to set the reference position
    # HomingSlaveParamSingle
    def MarkerSel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def HomingSlaveParamSingleStart(builder): builder.StartObject(3)
def Start(builder):
    return HomingSlaveParamSingleStart(builder)
def HomingSlaveParamSingleAddSlaveId(builder, slaveId): builder.PrependUint16Slot(0, slaveId, 0)
def AddSlaveId(builder, slaveId):
    return HomingSlaveParamSingleAddSlaveId(builder, slaveId)
def HomingSlaveParamSingleAddNewRefPos(builder, newRefPos): builder.PrependFloat64Slot(1, newRefPos, 0.0)
def AddNewRefPos(builder, newRefPos):
    return HomingSlaveParamSingleAddNewRefPos(builder, newRefPos)
def HomingSlaveParamSingleAddMarkerSel(builder, markerSel): builder.PrependInt8Slot(2, markerSel, 0)
def AddMarkerSel(builder, markerSel):
    return HomingSlaveParamSingleAddMarkerSel(builder, markerSel)
def HomingSlaveParamSingleEnd(builder): return builder.EndObject()
def End(builder):
    return HomingSlaveParamSingleEnd(builder)

class HomingSlaveParamSingleT(object):

    # HomingSlaveParamSingleT
    def __init__(self):
        self.slaveId = 0  # type: int
        self.newRefPos = 0.0  # type: float
        self.markerSel = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        homingSlaveParamSingle = HomingSlaveParamSingle()
        homingSlaveParamSingle.Init(buf, pos)
        return cls.InitFromObj(homingSlaveParamSingle)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, homingSlaveParamSingle):
        x = HomingSlaveParamSingleT()
        x._UnPack(homingSlaveParamSingle)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.slaveId == other.slaveId and \
            self.newRefPos == other.newRefPos and \
            self.markerSel == other.markerSel

    # HomingSlaveParamSingleT
    def _UnPack(self, homingSlaveParamSingle):
        if homingSlaveParamSingle is None:
            return
        self.slaveId = homingSlaveParamSingle.SlaveId()
        self.newRefPos = homingSlaveParamSingle.NewRefPos()
        self.markerSel = homingSlaveParamSingle.MarkerSel()

    # HomingSlaveParamSingleT
    def Pack(self, builder):
        HomingSlaveParamSingleStart(builder)
        HomingSlaveParamSingleAddSlaveId(builder, self.slaveId)
        HomingSlaveParamSingleAddNewRefPos(builder, self.newRefPos)
        HomingSlaveParamSingleAddMarkerSel(builder, self.markerSel)
        homingSlaveParamSingle = HomingSlaveParamSingleEnd(builder)
        return homingSlaveParamSingle
