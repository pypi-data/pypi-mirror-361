name: Release

on:
  push:
    tags: ['v*']
  pull_request:
    paths: ['.github/workflows/release.yml']

env:
  CARGO_TERM_COLOR: always

jobs:
  python-wheels:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: windows-latest
            target: x86_64
          - runner: macos-latest
            target: x86_64
          - runner: macos-latest
            target: aarch64
    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --features python
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.target }}
          path: dist
          retention-days: 7

  python-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist
          retention-days: 7

  wasm-packages:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [web, nodejs, bundler]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM package
        run: |
          wasm-pack build \
            --target ${{ matrix.target }} \
            --out-dir pkg-${{ matrix.target }} \
            --features wasm 

      - name: Upload WASM package
        uses: actions/upload-artifact@v4
        with:
          name: wasm-${{ matrix.target }}
          path: pkg-${{ matrix.target }}
          retention-days: 7

  test-packages:
    needs: [python-wheels, wasm-packages]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Test Python wheel
        run: |
          pip install wheels-ubuntu-latest-x86_64/*.whl
          python -c "import bytemate_patch; print('Python wheel works!')"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

  publish-python:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [python-wheels, python-sdist, test-packages]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: .

  publish-npm:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [wasm-packages, test-packages]
    runs-on: ubuntu-latest
    environment: release
    steps:
      - uses: actions/checkout@v4

      - name: Download WASM packages
        uses: actions/download-artifact@v4
        with:
          pattern: wasm-*

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish main package (nodejs)
        run: |
          cp -r wasm-nodejs/* .
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish web package
        run: |
          cd wasm-web
          jq '.name = "bytemate-patch-web"' package.json > package.json.tmp
          mv package.json.tmp package.json
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [publish-python, publish-npm]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          make_latest: true
