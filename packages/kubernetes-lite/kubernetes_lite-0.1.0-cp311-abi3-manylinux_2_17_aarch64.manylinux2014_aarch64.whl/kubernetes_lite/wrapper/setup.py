"""
 ----------------------------------------------------------------- *
 * (C) Copyright IBM Corporation 2024.                               *
 *                                                                   *
 * The source code for this program is not published or otherwise    *
 * divested of its trade secrets, irrespective of what has been      *
 * deposited with the U.S. Copyright Office.                         *
 * -----------------------------------------------------------------

 ----------------------------------------------------------------- *
 * (C) Copyright IBM Corporation 2024.                               *
 *                                                                   *
 * The source code for this program is not published or otherwise    *
 * divested of its trade secrets, irrespective of what has been      *
 * deposited with the U.S. Copyright Office.                         *
 * -----------------------------------------------------------------

"""
# python wrapper for package github.ibm.com/Michael-Honaker/kubernetes-lite/kubernetes_lite/go_wrapper/pkg/envtest/setup within overall package wrapper
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -no-make -author=Michael Honaker -email=michael.honaker@ibm.com -name=wrapper github.ibm.com/Michael-Honaker/kubernetes-lite/kubernetes_lite/go_wrapper/pkg/client github.ibm.com/Michael-Honaker/kubernetes-lite/kubernetes_lite/go_wrapper/pkg/envtest/setup github.ibm.com/Michael-Honaker/kubernetes-lite/kubernetes_lite/go_wrapper/pkg/envtest/server

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _wrapper
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from wrapper import setup
# and then refer to everything using setup. prefix
# packages imported by this package listed below:




# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct setup.SetupEnvTestResult
class SetupEnvTestResult(go.GoClass):
	"""SetupEnvTestResult contains the various results from running the SetupEnvTest command\nincludes stdout/stderr and the serialized error message\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_wrapper.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_wrapper.IncRef(self.handle)
		else:
			self.handle = _wrapper.setup_SetupEnvTestResult_CTor()
			_wrapper.IncRef(self.handle)
	def __del__(self):
		_wrapper.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'setup.SetupEnvTestResult{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'setup.SetupEnvTestResult ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def SetupEnvTest(stdin_data, arg_data):
	"""SetupEnvTest([]int stdin_data, []int arg_data) []int, str
	
	SetupEnvTest runs the vendored main file with the provided stdin_data and json arg data
	"""
	return go.Slice_byte(handle=_wrapper.setup_SetupEnvTest(stdin_data.handle, arg_data.handle))


