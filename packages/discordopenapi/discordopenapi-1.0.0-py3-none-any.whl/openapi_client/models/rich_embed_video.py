# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RichEmbedVideo(BaseModel):
    """
    RichEmbedVideo
    """ # noqa: E501
    url: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = None
    width: Optional[StrictInt] = None
    height: Optional[StrictInt] = None
    placeholder: Optional[Annotated[str, Field(strict=True, max_length=64)]] = None
    placeholder_version: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    is_animated: Optional[StrictBool] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=4096)]] = None
    __properties: ClassVar[List[str]] = ["url", "width", "height", "placeholder", "placeholder_version", "is_animated", "description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RichEmbedVideo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if width (nullable) is None
        # and model_fields_set contains the field
        if self.width is None and "width" in self.model_fields_set:
            _dict['width'] = None

        # set to None if height (nullable) is None
        # and model_fields_set contains the field
        if self.height is None and "height" in self.model_fields_set:
            _dict['height'] = None

        # set to None if placeholder (nullable) is None
        # and model_fields_set contains the field
        if self.placeholder is None and "placeholder" in self.model_fields_set:
            _dict['placeholder'] = None

        # set to None if placeholder_version (nullable) is None
        # and model_fields_set contains the field
        if self.placeholder_version is None and "placeholder_version" in self.model_fields_set:
            _dict['placeholder_version'] = None

        # set to None if is_animated (nullable) is None
        # and model_fields_set contains the field
        if self.is_animated is None and "is_animated" in self.model_fields_set:
            _dict['is_animated'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RichEmbedVideo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "width": obj.get("width"),
            "height": obj.get("height"),
            "placeholder": obj.get("placeholder"),
            "placeholder_version": obj.get("placeholder_version"),
            "is_animated": obj.get("is_animated"),
            "description": obj.get("description")
        })
        return _obj


