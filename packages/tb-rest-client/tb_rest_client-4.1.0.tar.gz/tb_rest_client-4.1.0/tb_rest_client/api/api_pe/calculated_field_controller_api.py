# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.1.0PE
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tb_rest_client.api_client import ApiClient


class CalculatedFieldControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_calculated_field(self, calculated_field_id, **kwargs):  # noqa: E501
        """Delete Calculated Field (deleteCalculatedField)  # noqa: E501

        Deletes the calculated field. Referencing non-existing Calculated Field Id will cause an error.  Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_calculated_field(calculated_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object calculated_field_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_calculated_field_with_http_info(calculated_field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_calculated_field_with_http_info(calculated_field_id, **kwargs)  # noqa: E501
            return data

    def delete_calculated_field_with_http_info(self, calculated_field_id, **kwargs):  # noqa: E501
        """Delete Calculated Field (deleteCalculatedField)  # noqa: E501

        Deletes the calculated field. Referencing non-existing Calculated Field Id will cause an error.  Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_calculated_field_with_http_info(calculated_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object calculated_field_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['calculated_field_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_calculated_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'calculated_field_id' is set
        if ('calculated_field_id' not in params or
                params['calculated_field_id'] is None):
            raise ValueError("Missing the required parameter `calculated_field_id` when calling `delete_calculated_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'calculated_field_id' in params:
            path_params['calculatedFieldId'] = params['calculated_field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/calculatedField/{calculatedFieldId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_calculated_field_by_id(self, calculated_field_id, **kwargs):  # noqa: E501
        """Get Calculated Field (getCalculatedFieldById)  # noqa: E501

        Fetch the Calculated Field object based on the provided Calculated Field Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calculated_field_by_id(calculated_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object calculated_field_id: (required)
        :return: CalculatedField
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_calculated_field_by_id_with_http_info(calculated_field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_calculated_field_by_id_with_http_info(calculated_field_id, **kwargs)  # noqa: E501
            return data

    def get_calculated_field_by_id_with_http_info(self, calculated_field_id, **kwargs):  # noqa: E501
        """Get Calculated Field (getCalculatedFieldById)  # noqa: E501

        Fetch the Calculated Field object based on the provided Calculated Field Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calculated_field_by_id_with_http_info(calculated_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object calculated_field_id: (required)
        :return: CalculatedField
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['calculated_field_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_calculated_field_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'calculated_field_id' is set
        if ('calculated_field_id' not in params or
                params['calculated_field_id'] is None):
            raise ValueError("Missing the required parameter `calculated_field_id` when calling `get_calculated_field_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'calculated_field_id' in params:
            path_params['calculatedFieldId'] = params['calculated_field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/calculatedField/{calculatedFieldId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalculatedField',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_calculated_fields_by_entity_id(self, entity_type, entity_id, page_size, page, **kwargs):  # noqa: E501
        """Get Calculated Fields by Entity Id (getCalculatedFieldsByEntityId)  # noqa: E501

        Fetch the Calculated Fields based on the provided Entity Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calculated_fields_by_entity_id(entity_type, entity_id, page_size, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object entity_type: A string value representing the entity type. For example, 'DEVICE' (required)
        :param object entity_id: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9' (required)
        :param object page_size: Maximum amount of entities in a one page (required)
        :param object page: Sequence number of page starting from 0 (required)
        :param object text_search: The case insensitive 'substring' filter based on the calculated field name.
        :param object sort_property: Property of entity to sort by
        :param object sort_order: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
        :return: PageDataCalculatedField
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_calculated_fields_by_entity_id_with_http_info(entity_type, entity_id, page_size, page, **kwargs)  # noqa: E501
        else:
            (data) = self.get_calculated_fields_by_entity_id_with_http_info(entity_type, entity_id, page_size, page, **kwargs)  # noqa: E501
            return data

    def get_calculated_fields_by_entity_id_with_http_info(self, entity_type, entity_id, page_size, page, **kwargs):  # noqa: E501
        """Get Calculated Fields by Entity Id (getCalculatedFieldsByEntityId)  # noqa: E501

        Fetch the Calculated Fields based on the provided Entity Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calculated_fields_by_entity_id_with_http_info(entity_type, entity_id, page_size, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object entity_type: A string value representing the entity type. For example, 'DEVICE' (required)
        :param object entity_id: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9' (required)
        :param object page_size: Maximum amount of entities in a one page (required)
        :param object page: Sequence number of page starting from 0 (required)
        :param object text_search: The case insensitive 'substring' filter based on the calculated field name.
        :param object sort_property: Property of entity to sort by
        :param object sort_order: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
        :return: PageDataCalculatedField
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_type', 'entity_id', 'page_size', 'page', 'text_search', 'sort_property', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_calculated_fields_by_entity_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params or
                params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `get_calculated_fields_by_entity_id`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `get_calculated_fields_by_entity_id`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_calculated_fields_by_entity_id`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_calculated_fields_by_entity_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']  # noqa: E501
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'text_search' in params:
            query_params.append(('textSearch', params['text_search']))  # noqa: E501
        if 'sort_property' in params:
            query_params.append(('sortProperty', params['sort_property']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/{entityType}/{entityId}/calculatedFields{?pageSize,page,textSearch,sortProperty,sortOrder}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageDataCalculatedField',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_latest_calculated_field_debug_event(self, calculated_field_id, **kwargs):  # noqa: E501
        """Get latest calculated field debug event (getLatestCalculatedFieldDebugEvent)  # noqa: E501

        Gets latest calculated field debug event for specified calculated field id. Referencing non-existing calculated field id will cause an error.   Available for users with 'TENANT_ADMIN' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_calculated_field_debug_event(calculated_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object calculated_field_id: (required)
        :return: JsonNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_latest_calculated_field_debug_event_with_http_info(calculated_field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_latest_calculated_field_debug_event_with_http_info(calculated_field_id, **kwargs)  # noqa: E501
            return data

    def get_latest_calculated_field_debug_event_with_http_info(self, calculated_field_id, **kwargs):  # noqa: E501
        """Get latest calculated field debug event (getLatestCalculatedFieldDebugEvent)  # noqa: E501

        Gets latest calculated field debug event for specified calculated field id. Referencing non-existing calculated field id will cause an error.   Available for users with 'TENANT_ADMIN' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_calculated_field_debug_event_with_http_info(calculated_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object calculated_field_id: (required)
        :return: JsonNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['calculated_field_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_calculated_field_debug_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'calculated_field_id' is set
        if ('calculated_field_id' not in params or
                params['calculated_field_id'] is None):
            raise ValueError("Missing the required parameter `calculated_field_id` when calling `get_latest_calculated_field_debug_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'calculated_field_id' in params:
            path_params['calculatedFieldId'] = params['calculated_field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/calculatedField/{calculatedFieldId}/debug', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_calculated_field(self, body, **kwargs):  # noqa: E501
        """Create Or Update Calculated Field (saveCalculatedField)  # noqa: E501

        Creates or Updates the Calculated Field. When creating calculated field, platform generates Calculated Field Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Calculated Field Id will be present in the response. Specify existing Calculated Field Id to update the calculated field. Referencing non-existing Calculated Field Id will cause 'Not Found' error. Remove 'id', 'tenantId' from the request body example (below) to create new Calculated Field entity.   Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_calculated_field(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalculatedField body: A JSON value representing the calculated field. (required)
        :return: CalculatedField
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_calculated_field_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.save_calculated_field_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def save_calculated_field_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Or Update Calculated Field (saveCalculatedField)  # noqa: E501

        Creates or Updates the Calculated Field. When creating calculated field, platform generates Calculated Field Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Calculated Field Id will be present in the response. Specify existing Calculated Field Id to update the calculated field. Referencing non-existing Calculated Field Id will cause 'Not Found' error. Remove 'id', 'tenantId' from the request body example (below) to create new Calculated Field entity.   Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_calculated_field_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalculatedField body: A JSON value representing the calculated field. (required)
        :return: CalculatedField
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_calculated_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_calculated_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/calculatedField', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalculatedField',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_script1(self, body, **kwargs):  # noqa: E501
        """Test Script expression  # noqa: E501

        Execute the Script expression and return the result. The format of request:   ```json {   \"expression\": \"var temp = 0; foreach(element: temperature.values) {temp += element.value;} var avgTemperature = temp / temperature.values.size(); var adjustedTemperature = avgTemperature + 0.1 * humidity.value; return {\\\"adjustedTemperature\\\": adjustedTemperature};\",   \"arguments\": {     \"temperature\": {       \"type\": \"TS_ROLLING\",       \"timeWindow\": {         \"startTs\": 1739775630002,         \"endTs\": 65432211,         \"limit\": 5       },       \"values\": [         { \"ts\": 1739775639851, \"value\": 23 },         { \"ts\": 1739775664561, \"value\": 43 },         { \"ts\": 1739775713079, \"value\": 15 },         { \"ts\": 1739775999522, \"value\": 34 },         { \"ts\": 1739776228452, \"value\": 22 }       ]     },     \"humidity\": { \"type\": \"SINGLE_VALUE\", \"ts\": 1739776478057, \"value\": 23 }   } } ```   Expected result JSON contains \"output\" and \"error\".  Available for users with 'TENANT_ADMIN' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_script1(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Test calculated field TBEL expression. (required)
        :return: JsonNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_script1_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.test_script1_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def test_script1_with_http_info(self, body, **kwargs):  # noqa: E501
        """Test Script expression  # noqa: E501

        Execute the Script expression and return the result. The format of request:   ```json {   \"expression\": \"var temp = 0; foreach(element: temperature.values) {temp += element.value;} var avgTemperature = temp / temperature.values.size(); var adjustedTemperature = avgTemperature + 0.1 * humidity.value; return {\\\"adjustedTemperature\\\": adjustedTemperature};\",   \"arguments\": {     \"temperature\": {       \"type\": \"TS_ROLLING\",       \"timeWindow\": {         \"startTs\": 1739775630002,         \"endTs\": 65432211,         \"limit\": 5       },       \"values\": [         { \"ts\": 1739775639851, \"value\": 23 },         { \"ts\": 1739775664561, \"value\": 43 },         { \"ts\": 1739775713079, \"value\": 15 },         { \"ts\": 1739775999522, \"value\": 34 },         { \"ts\": 1739776228452, \"value\": 22 }       ]     },     \"humidity\": { \"type\": \"SINGLE_VALUE\", \"ts\": 1739776478057, \"value\": 23 }   } } ```   Expected result JSON contains \"output\" and \"error\".  Available for users with 'TENANT_ADMIN' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_script1_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Test calculated field TBEL expression. (required)
        :return: JsonNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_script1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `test_script1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/calculatedField/testScript', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_last_calculated_field_reprocessing_job(self, calculated_field_id, **kwargs):  # noqa: E501
        """getLastCalculatedFieldReprocessingJob  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_last_calculated_field_reprocessing_job(calculated_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str calculated_field_id: (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_last_calculated_field_reprocessing_job_with_http_info(calculated_field_id,
                                                                                  **kwargs)  # noqa: E501
        else:
            (data) = self.get_last_calculated_field_reprocessing_job_with_http_info(calculated_field_id,
                                                                                    **kwargs)  # noqa: E501
            return data

    def get_last_calculated_field_reprocessing_job_with_http_info(self, calculated_field_id, **kwargs):  # noqa: E501
        """getLastCalculatedFieldReprocessingJob  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_last_calculated_field_reprocessing_job_with_http_info(calculated_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str calculated_field_id: (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['calculated_field_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_last_calculated_field_reprocessing_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'calculated_field_id' is set
        if ('calculated_field_id' not in params or
                params['calculated_field_id'] is None):
            raise ValueError(
                "Missing the required parameter `calculated_field_id` when calling `get_last_calculated_field_reprocessing_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'calculated_field_id' in params:
            path_params['calculatedFieldId'] = params['calculated_field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/calculatedField/{calculatedFieldId}/reprocess/job', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reprocess_calculated_field(self, calculated_field_id, start_ts, end_ts, **kwargs):  # noqa: E501
        """Reprocess Calculated Field (reprocessCalculatedField)  # noqa: E501

        Reprocesses the calculated field.  Available for users with 'TENANT_ADMIN' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reprocess_calculated_field(calculated_field_id, start_ts, end_ts, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str calculated_field_id: (required)
        :param int start_ts: (required)
        :param int end_ts: (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reprocess_calculated_field_with_http_info(calculated_field_id, start_ts, end_ts,
                                                                  **kwargs)  # noqa: E501
        else:
            (data) = self.reprocess_calculated_field_with_http_info(calculated_field_id, start_ts, end_ts,
                                                                    **kwargs)  # noqa: E501
            return data

    def reprocess_calculated_field_with_http_info(self, calculated_field_id, start_ts, end_ts, **kwargs):  # noqa: E501
        """Reprocess Calculated Field (reprocessCalculatedField)  # noqa: E501

        Reprocesses the calculated field.  Available for users with 'TENANT_ADMIN' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reprocess_calculated_field_with_http_info(calculated_field_id, start_ts, end_ts, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str calculated_field_id: (required)
        :param int start_ts: (required)
        :param int end_ts: (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['calculated_field_id', 'start_ts', 'end_ts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reprocess_calculated_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'calculated_field_id' is set
        if ('calculated_field_id' not in params or
                params['calculated_field_id'] is None):
            raise ValueError(
                "Missing the required parameter `calculated_field_id` when calling `reprocess_calculated_field`")  # noqa: E501
        # verify the required parameter 'start_ts' is set
        if ('start_ts' not in params or
                params['start_ts'] is None):
            raise ValueError(
                "Missing the required parameter `start_ts` when calling `reprocess_calculated_field`")  # noqa: E501
        # verify the required parameter 'end_ts' is set
        if ('end_ts' not in params or
                params['end_ts'] is None):
            raise ValueError(
                "Missing the required parameter `end_ts` when calling `reprocess_calculated_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'calculated_field_id' in params:
            path_params['calculatedFieldId'] = params['calculated_field_id']  # noqa: E501

        query_params = []
        if 'start_ts' in params:
            query_params.append(('startTs', params['start_ts']))  # noqa: E501
        if 'end_ts' in params:
            query_params.append(('endTs', params['end_ts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/calculatedField/{calculatedFieldId}/reprocess{?startTs,endTs}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_calculated_field_reprocessing(self, calculated_field_id, **kwargs):  # noqa: E501
        """Validate reprocessing capability of a calculated field (validateCalculatedFieldReprocessing)  # noqa: E501

        Checks whether the specified calculated field can be reprocessed. Returns a validation result indicating if reprocessing is allowed and, if not, provides a reason.   Available for users with 'TENANT_ADMIN' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_calculated_field_reprocessing(calculated_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str calculated_field_id: (required)
        :return: CfReprocessingValidationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_calculated_field_reprocessing_with_http_info(calculated_field_id,
                                                                              **kwargs)  # noqa: E501
        else:
            (data) = self.validate_calculated_field_reprocessing_with_http_info(calculated_field_id,
                                                                                **kwargs)  # noqa: E501
            return data

    def validate_calculated_field_reprocessing_with_http_info(self, calculated_field_id, **kwargs):  # noqa: E501
        """Validate reprocessing capability of a calculated field (validateCalculatedFieldReprocessing)  # noqa: E501

        Checks whether the specified calculated field can be reprocessed. Returns a validation result indicating if reprocessing is allowed and, if not, provides a reason.   Available for users with 'TENANT_ADMIN' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_calculated_field_reprocessing_with_http_info(calculated_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str calculated_field_id: (required)
        :return: CfReprocessingValidationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['calculated_field_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_calculated_field_reprocessing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'calculated_field_id' is set
        if ('calculated_field_id' not in params or
                params['calculated_field_id'] is None):
            raise ValueError(
                "Missing the required parameter `calculated_field_id` when calling `validate_calculated_field_reprocessing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'calculated_field_id' in params:
            path_params['calculatedFieldId'] = params['calculated_field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/calculatedField/{calculatedFieldId}/reprocess/validate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CfReprocessingValidationResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
