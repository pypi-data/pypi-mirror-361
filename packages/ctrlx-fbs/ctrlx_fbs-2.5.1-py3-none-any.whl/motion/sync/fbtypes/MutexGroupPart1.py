# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# The first group of optional parameters, which mutually exclude each other
class MutexGroupPart1(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MutexGroupPart1()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMutexGroupPart1(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MutexGroupPart1
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MutexGroupPart1
    def GroupPart1(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MutexGroupPart1
    def GroupPart1Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MutexGroupPart1
    def GroupPart1IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def MutexGroupPart1Start(builder): builder.StartObject(1)
def Start(builder):
    return MutexGroupPart1Start(builder)
def MutexGroupPart1AddGroupPart1(builder, groupPart1): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupPart1), 0)
def AddGroupPart1(builder, groupPart1):
    return MutexGroupPart1AddGroupPart1(builder, groupPart1)
def MutexGroupPart1StartGroupPart1Vector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartGroupPart1Vector(builder, numElems):
    return MutexGroupPart1StartGroupPart1Vector(builder, numElems)
def MutexGroupPart1End(builder): return builder.EndObject()
def End(builder):
    return MutexGroupPart1End(builder)
try:
    from typing import List
except:
    pass

class MutexGroupPart1T(object):

    # MutexGroupPart1T
    def __init__(self):
        self.groupPart1 = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mutexGroupPart1 = MutexGroupPart1()
        mutexGroupPart1.Init(buf, pos)
        return cls.InitFromObj(mutexGroupPart1)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mutexGroupPart1):
        x = MutexGroupPart1T()
        x._UnPack(mutexGroupPart1)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.groupPart1 == other.groupPart1

    # MutexGroupPart1T
    def _UnPack(self, mutexGroupPart1):
        if mutexGroupPart1 is None:
            return
        if not mutexGroupPart1.GroupPart1IsNone():
            self.groupPart1 = []
            for i in range(mutexGroupPart1.GroupPart1Length()):
                self.groupPart1.append(mutexGroupPart1.GroupPart1(i))

    # MutexGroupPart1T
    def Pack(self, builder):
        if self.groupPart1 is not None:
            groupPart1list = []
            for i in range(len(self.groupPart1)):
                groupPart1list.append(builder.CreateString(self.groupPart1[i]))
            MutexGroupPart1StartGroupPart1Vector(builder, len(self.groupPart1))
            for i in reversed(range(len(self.groupPart1))):
                builder.PrependUOffsetTRelative(groupPart1list[i])
            groupPart1 = builder.EndVector()
        MutexGroupPart1Start(builder)
        if self.groupPart1 is not None:
            MutexGroupPart1AddGroupPart1(builder, groupPart1)
        mutexGroupPart1 = MutexGroupPart1End(builder)
        return mutexGroupPart1
