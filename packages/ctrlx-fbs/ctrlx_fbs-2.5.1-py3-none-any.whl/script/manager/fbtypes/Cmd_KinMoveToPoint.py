# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_KinMoveToPoint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_KinMoveToPoint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_KinMoveToPoint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_KinMoveToPoint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_KinMoveToPoint
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Name of the commanded target point
    # Cmd_KinMoveToPoint
    def TargetPointName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dynamic limits for the motion of this command
    # Cmd_KinMoveToPoint
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_DynLimits import Cmd_DynLimits
            obj = Cmd_DynLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # buffered or unbuffered command
    # Cmd_KinMoveToPoint
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def Cmd_KinMoveToPointStart(builder): builder.StartObject(4)
def Start(builder):
    return Cmd_KinMoveToPointStart(builder)
def Cmd_KinMoveToPointAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Cmd_KinMoveToPointAddBase(builder, base)
def Cmd_KinMoveToPointAddTargetPointName(builder, targetPointName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(targetPointName), 0)
def AddTargetPointName(builder, targetPointName):
    return Cmd_KinMoveToPointAddTargetPointName(builder, targetPointName)
def Cmd_KinMoveToPointAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return Cmd_KinMoveToPointAddLim(builder, lim)
def Cmd_KinMoveToPointAddBuffered(builder, buffered): builder.PrependBoolSlot(3, buffered, 1)
def AddBuffered(builder, buffered):
    return Cmd_KinMoveToPointAddBuffered(builder, buffered)
def Cmd_KinMoveToPointEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_KinMoveToPointEnd(builder)
import script.manager.fbtypes.Cmd_Base
import script.manager.fbtypes.Cmd_DynLimits
try:
    from typing import Optional
except:
    pass

class Cmd_KinMoveToPointT(object):

    # Cmd_KinMoveToPointT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.targetPointName = None  # type: str
        self.lim = None  # type: Optional[script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT]
        self.buffered = True  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdKinMoveToPoint = Cmd_KinMoveToPoint()
        cmdKinMoveToPoint.Init(buf, pos)
        return cls.InitFromObj(cmdKinMoveToPoint)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdKinMoveToPoint):
        x = Cmd_KinMoveToPointT()
        x._UnPack(cmdKinMoveToPoint)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.targetPointName == other.targetPointName and \
            self.lim == other.lim and \
            self.buffered == other.buffered

    # Cmd_KinMoveToPointT
    def _UnPack(self, cmdKinMoveToPoint):
        if cmdKinMoveToPoint is None:
            return
        if cmdKinMoveToPoint.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdKinMoveToPoint.Base())
        self.targetPointName = cmdKinMoveToPoint.TargetPointName()
        if cmdKinMoveToPoint.Lim() is not None:
            self.lim = script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT.InitFromObj(cmdKinMoveToPoint.Lim())
        self.buffered = cmdKinMoveToPoint.Buffered()

    # Cmd_KinMoveToPointT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.targetPointName is not None:
            targetPointName = builder.CreateString(self.targetPointName)
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        Cmd_KinMoveToPointStart(builder)
        if self.base is not None:
            Cmd_KinMoveToPointAddBase(builder, base)
        if self.targetPointName is not None:
            Cmd_KinMoveToPointAddTargetPointName(builder, targetPointName)
        if self.lim is not None:
            Cmd_KinMoveToPointAddLim(builder, lim)
        Cmd_KinMoveToPointAddBuffered(builder, self.buffered)
        cmdKinMoveToPoint = Cmd_KinMoveToPointEnd(builder)
        return cmdKinMoveToPoint
