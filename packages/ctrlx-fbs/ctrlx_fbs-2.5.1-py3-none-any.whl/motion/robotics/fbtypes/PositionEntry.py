# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PositionEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PositionEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPositionEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PositionEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PositionEntry
    def Meaning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # PositionEntry
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # PositionEntry
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PositionEntryStart(builder): builder.StartObject(3)
def Start(builder):
    return PositionEntryStart(builder)
def PositionEntryAddMeaning(builder, meaning): builder.PrependInt8Slot(0, meaning, 0)
def AddMeaning(builder, meaning):
    return PositionEntryAddMeaning(builder, meaning)
def PositionEntryAddValue(builder, value): builder.PrependFloat64Slot(1, value, 0.0)
def AddValue(builder, value):
    return PositionEntryAddValue(builder, value)
def PositionEntryAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def AddUnit(builder, unit):
    return PositionEntryAddUnit(builder, unit)
def PositionEntryEnd(builder): return builder.EndObject()
def End(builder):
    return PositionEntryEnd(builder)

class PositionEntryT(object):

    # PositionEntryT
    def __init__(self):
        self.meaning = 0  # type: int
        self.value = 0.0  # type: float
        self.unit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        positionEntry = PositionEntry()
        positionEntry.Init(buf, pos)
        return cls.InitFromObj(positionEntry)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, positionEntry):
        x = PositionEntryT()
        x._UnPack(positionEntry)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.meaning == other.meaning and \
            self.value == other.value and \
            self.unit == other.unit

    # PositionEntryT
    def _UnPack(self, positionEntry):
        if positionEntry is None:
            return
        self.meaning = positionEntry.Meaning()
        self.value = positionEntry.Value()
        self.unit = positionEntry.Unit()

    # PositionEntryT
    def Pack(self, builder):
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        PositionEntryStart(builder)
        PositionEntryAddMeaning(builder, self.meaning)
        PositionEntryAddValue(builder, self.value)
        if self.unit is not None:
            PositionEntryAddUnit(builder, unit)
        positionEntry = PositionEntryEnd(builder)
        return positionEntry
