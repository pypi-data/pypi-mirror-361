# automatically generated by the FlatBuffers compiler, do not modify

# namespace: daq

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# equidistant DAQ data
class Equidistant(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Equidistant()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEquidistant(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Equidistant
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # unique name of the equidistant data
    # Equidistant
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # array of tags for meta data
    # Equidistant
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.daq.Tag import Tag
            obj = Tag()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Equidistant
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Equidistant
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # unix epoch time (since 1.1.1970) for the 1st value in array in [ns]
    # Equidistant
    def TimestampNs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # sampling interval in [ns]
    # Equidistant
    def IntervalNs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Equidistant
    def ArrayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # array of equidistant sampled values starting at timestamp [ns] with interval [ns]
    # Equidistant
    def Array(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def EquidistantStart(builder): builder.StartObject(6)
def Start(builder):
    return EquidistantStart(builder)
def EquidistantAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return EquidistantAddName(builder, name)
def EquidistantAddTags(builder, tags): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)
def AddTags(builder, tags):
    return EquidistantAddTags(builder, tags)
def EquidistantStartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTagsVector(builder, numElems):
    return EquidistantStartTagsVector(builder, numElems)
def EquidistantAddTimestampNs(builder, timestampNs): builder.PrependUint64Slot(2, timestampNs, 0)
def AddTimestampNs(builder, timestampNs):
    return EquidistantAddTimestampNs(builder, timestampNs)
def EquidistantAddIntervalNs(builder, intervalNs): builder.PrependUint64Slot(3, intervalNs, 0)
def AddIntervalNs(builder, intervalNs):
    return EquidistantAddIntervalNs(builder, intervalNs)
def EquidistantAddArrayType(builder, arrayType): builder.PrependUint8Slot(4, arrayType, 0)
def AddArrayType(builder, arrayType):
    return EquidistantAddArrayType(builder, arrayType)
def EquidistantAddArray(builder, array): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(array), 0)
def AddArray(builder, array):
    return EquidistantAddArray(builder, array)
def EquidistantEnd(builder): return builder.EndObject()
def End(builder):
    return EquidistantEnd(builder)
import comm.datalayer.ArrayOfBool8
import comm.datalayer.ArrayOfDouble
import comm.datalayer.ArrayOfFloat32
import comm.datalayer.ArrayOfFloat64
import comm.datalayer.ArrayOfInt16
import comm.datalayer.ArrayOfInt32
import comm.datalayer.ArrayOfInt64
import comm.datalayer.ArrayOfInt8
import comm.datalayer.ArrayOfString
import comm.datalayer.ArrayOfTimestamp
import comm.datalayer.ArrayOfUInt16
import comm.datalayer.ArrayOfUInt32
import comm.datalayer.ArrayOfUInt64
import comm.datalayer.ArrayOfUInt8
import comm.datalayer.daq.Array
import comm.datalayer.daq.Tag
try:
    from typing import List, Union
except:
    pass

class EquidistantT(object):

    # EquidistantT
    def __init__(self):
        self.name = None  # type: str
        self.tags = None  # type: List[comm.datalayer.daq.Tag.TagT]
        self.timestampNs = 0  # type: int
        self.intervalNs = 0  # type: int
        self.arrayType = 0  # type: int
        self.array = None  # type: Union[None, comm.datalayer.ArrayOfBool8.ArrayOfBool8T, comm.datalayer.ArrayOfFloat32.ArrayOfFloat32T, comm.datalayer.ArrayOfFloat64.ArrayOfFloat64T, comm.datalayer.ArrayOfDouble.ArrayOfDoubleT, comm.datalayer.ArrayOfInt8.ArrayOfInt8T, comm.datalayer.ArrayOfInt16.ArrayOfInt16T, comm.datalayer.ArrayOfInt32.ArrayOfInt32T, comm.datalayer.ArrayOfInt64.ArrayOfInt64T, comm.datalayer.ArrayOfUInt8.ArrayOfUInt8T, comm.datalayer.ArrayOfUInt16.ArrayOfUInt16T, comm.datalayer.ArrayOfUInt32.ArrayOfUInt32T, comm.datalayer.ArrayOfUInt64.ArrayOfUInt64T, comm.datalayer.ArrayOfTimestamp.ArrayOfTimestampT, comm.datalayer.ArrayOfString.ArrayOfStringT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        equidistant = Equidistant()
        equidistant.Init(buf, pos)
        return cls.InitFromObj(equidistant)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, equidistant):
        x = EquidistantT()
        x._UnPack(equidistant)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.tags == other.tags and \
            self.timestampNs == other.timestampNs and \
            self.intervalNs == other.intervalNs and \
            self.arrayType == other.arrayType and \
            self.array == other.array

    # EquidistantT
    def _UnPack(self, equidistant):
        if equidistant is None:
            return
        self.name = equidistant.Name()
        if not equidistant.TagsIsNone():
            self.tags = []
            for i in range(equidistant.TagsLength()):
                if equidistant.Tags(i) is None:
                    self.tags.append(None)
                else:
                    tag_ = comm.datalayer.daq.Tag.TagT.InitFromObj(equidistant.Tags(i))
                    self.tags.append(tag_)
        self.timestampNs = equidistant.TimestampNs()
        self.intervalNs = equidistant.IntervalNs()
        self.arrayType = equidistant.ArrayType()
        self.array = comm.datalayer.daq.Array.ArrayCreator(self.arrayType, equidistant.Array())

    # EquidistantT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(self.tags[i].Pack(builder))
            EquidistantStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.array is not None:
            array = self.array.Pack(builder)
        EquidistantStart(builder)
        if self.name is not None:
            EquidistantAddName(builder, name)
        if self.tags is not None:
            EquidistantAddTags(builder, tags)
        EquidistantAddTimestampNs(builder, self.timestampNs)
        EquidistantAddIntervalNs(builder, self.intervalNs)
        EquidistantAddArrayType(builder, self.arrayType)
        if self.array is not None:
            EquidistantAddArray(builder, array)
        equidistant = EquidistantEnd(builder)
        return equidistant
