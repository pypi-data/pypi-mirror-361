# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the move 2D circular commands for a kinematics
class KinCmd2dCircleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmd2dCircleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmd2dCircleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmd2dCircleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded target position with meanings
    # KinCmd2dCircleData
    def CmdKinPose(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCmdPosePair import KinCmdPosePair
            obj = KinCmdPosePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCmd2dCircleData
    def CmdKinPoseLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCmd2dCircleData
    def CmdKinPoseIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # commanded circle data with 2d circle meanings
    # KinCmd2dCircleData
    def CmdCircleData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCmd2dCircleDataPair import KinCmd2dCircleDataPair
            obj = KinCmd2dCircleDataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCmd2dCircleData
    def CmdCircleDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCmd2dCircleData
    def CmdCircleDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # coordSys for commanded target position
    # KinCmd2dCircleData
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # dynamic limits for the motion of this command
    # KinCmd2dCircleData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCmd2dCircleDataStart(builder): builder.StartObject(4)
def Start(builder):
    return KinCmd2dCircleDataStart(builder)
def KinCmd2dCircleDataAddCmdKinPose(builder, cmdKinPose): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cmdKinPose), 0)
def AddCmdKinPose(builder, cmdKinPose):
    return KinCmd2dCircleDataAddCmdKinPose(builder, cmdKinPose)
def KinCmd2dCircleDataStartCmdKinPoseVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCmdKinPoseVector(builder, numElems):
    return KinCmd2dCircleDataStartCmdKinPoseVector(builder, numElems)
def KinCmd2dCircleDataAddCmdCircleData(builder, cmdCircleData): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cmdCircleData), 0)
def AddCmdCircleData(builder, cmdCircleData):
    return KinCmd2dCircleDataAddCmdCircleData(builder, cmdCircleData)
def KinCmd2dCircleDataStartCmdCircleDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCmdCircleDataVector(builder, numElems):
    return KinCmd2dCircleDataStartCmdCircleDataVector(builder, numElems)
def KinCmd2dCircleDataAddCoordSys(builder, coordSys): builder.PrependInt8Slot(2, coordSys, 0)
def AddCoordSys(builder, coordSys):
    return KinCmd2dCircleDataAddCoordSys(builder, coordSys)
def KinCmd2dCircleDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return KinCmd2dCircleDataAddLim(builder, lim)
def KinCmd2dCircleDataEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmd2dCircleDataEnd(builder)
import motion.core.fbtypes.DynamicLimits
import motion.core.fbtypes.KinCmd2dCircleDataPair
import motion.core.fbtypes.KinCmdPosePair
try:
    from typing import List, Optional
except:
    pass

class KinCmd2dCircleDataT(object):

    # KinCmd2dCircleDataT
    def __init__(self):
        self.cmdKinPose = None  # type: List[motion.core.fbtypes.KinCmdPosePair.KinCmdPosePairT]
        self.cmdCircleData = None  # type: List[motion.core.fbtypes.KinCmd2dCircleDataPair.KinCmd2dCircleDataPairT]
        self.coordSys = 0  # type: int
        self.lim = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmd2dCircleData = KinCmd2dCircleData()
        kinCmd2dCircleData.Init(buf, pos)
        return cls.InitFromObj(kinCmd2dCircleData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmd2dCircleData):
        x = KinCmd2dCircleDataT()
        x._UnPack(kinCmd2dCircleData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cmdKinPose == other.cmdKinPose and \
            self.cmdCircleData == other.cmdCircleData and \
            self.coordSys == other.coordSys and \
            self.lim == other.lim

    # KinCmd2dCircleDataT
    def _UnPack(self, kinCmd2dCircleData):
        if kinCmd2dCircleData is None:
            return
        if not kinCmd2dCircleData.CmdKinPoseIsNone():
            self.cmdKinPose = []
            for i in range(kinCmd2dCircleData.CmdKinPoseLength()):
                if kinCmd2dCircleData.CmdKinPose(i) is None:
                    self.cmdKinPose.append(None)
                else:
                    kinCmdPosePair_ = motion.core.fbtypes.KinCmdPosePair.KinCmdPosePairT.InitFromObj(kinCmd2dCircleData.CmdKinPose(i))
                    self.cmdKinPose.append(kinCmdPosePair_)
        if not kinCmd2dCircleData.CmdCircleDataIsNone():
            self.cmdCircleData = []
            for i in range(kinCmd2dCircleData.CmdCircleDataLength()):
                if kinCmd2dCircleData.CmdCircleData(i) is None:
                    self.cmdCircleData.append(None)
                else:
                    kinCmd2dCircleDataPair_ = motion.core.fbtypes.KinCmd2dCircleDataPair.KinCmd2dCircleDataPairT.InitFromObj(kinCmd2dCircleData.CmdCircleData(i))
                    self.cmdCircleData.append(kinCmd2dCircleDataPair_)
        self.coordSys = kinCmd2dCircleData.CoordSys()
        if kinCmd2dCircleData.Lim() is not None:
            self.lim = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(kinCmd2dCircleData.Lim())

    # KinCmd2dCircleDataT
    def Pack(self, builder):
        if self.cmdKinPose is not None:
            cmdKinPoselist = []
            for i in range(len(self.cmdKinPose)):
                cmdKinPoselist.append(self.cmdKinPose[i].Pack(builder))
            KinCmd2dCircleDataStartCmdKinPoseVector(builder, len(self.cmdKinPose))
            for i in reversed(range(len(self.cmdKinPose))):
                builder.PrependUOffsetTRelative(cmdKinPoselist[i])
            cmdKinPose = builder.EndVector()
        if self.cmdCircleData is not None:
            cmdCircleDatalist = []
            for i in range(len(self.cmdCircleData)):
                cmdCircleDatalist.append(self.cmdCircleData[i].Pack(builder))
            KinCmd2dCircleDataStartCmdCircleDataVector(builder, len(self.cmdCircleData))
            for i in reversed(range(len(self.cmdCircleData))):
                builder.PrependUOffsetTRelative(cmdCircleDatalist[i])
            cmdCircleData = builder.EndVector()
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        KinCmd2dCircleDataStart(builder)
        if self.cmdKinPose is not None:
            KinCmd2dCircleDataAddCmdKinPose(builder, cmdKinPose)
        if self.cmdCircleData is not None:
            KinCmd2dCircleDataAddCmdCircleData(builder, cmdCircleData)
        KinCmd2dCircleDataAddCoordSys(builder, self.coordSys)
        if self.lim is not None:
            KinCmd2dCircleDataAddLim(builder, lim)
        kinCmd2dCircleData = KinCmd2dCircleDataEnd(builder)
        return kinCmd2dCircleData
