# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# The second group of optional parameters, which mutually exclude each other
class MutexGroupPart2(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MutexGroupPart2()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMutexGroupPart2(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MutexGroupPart2
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MutexGroupPart2
    def GroupPart2(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.MutexGroupPart1 import MutexGroupPart1
            obj = MutexGroupPart1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MutexGroupPart2
    def GroupPart2Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MutexGroupPart2
    def GroupPart2IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def MutexGroupPart2Start(builder): builder.StartObject(1)
def Start(builder):
    return MutexGroupPart2Start(builder)
def MutexGroupPart2AddGroupPart2(builder, groupPart2): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupPart2), 0)
def AddGroupPart2(builder, groupPart2):
    return MutexGroupPart2AddGroupPart2(builder, groupPart2)
def MutexGroupPart2StartGroupPart2Vector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartGroupPart2Vector(builder, numElems):
    return MutexGroupPart2StartGroupPart2Vector(builder, numElems)
def MutexGroupPart2End(builder): return builder.EndObject()
def End(builder):
    return MutexGroupPart2End(builder)
import motion.sync.fbtypes.MutexGroupPart1
try:
    from typing import List
except:
    pass

class MutexGroupPart2T(object):

    # MutexGroupPart2T
    def __init__(self):
        self.groupPart2 = None  # type: List[motion.sync.fbtypes.MutexGroupPart1.MutexGroupPart1T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mutexGroupPart2 = MutexGroupPart2()
        mutexGroupPart2.Init(buf, pos)
        return cls.InitFromObj(mutexGroupPart2)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mutexGroupPart2):
        x = MutexGroupPart2T()
        x._UnPack(mutexGroupPart2)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.groupPart2 == other.groupPart2

    # MutexGroupPart2T
    def _UnPack(self, mutexGroupPart2):
        if mutexGroupPart2 is None:
            return
        if not mutexGroupPart2.GroupPart2IsNone():
            self.groupPart2 = []
            for i in range(mutexGroupPart2.GroupPart2Length()):
                if mutexGroupPart2.GroupPart2(i) is None:
                    self.groupPart2.append(None)
                else:
                    mutexGroupPart1_ = motion.sync.fbtypes.MutexGroupPart1.MutexGroupPart1T.InitFromObj(mutexGroupPart2.GroupPart2(i))
                    self.groupPart2.append(mutexGroupPart1_)

    # MutexGroupPart2T
    def Pack(self, builder):
        if self.groupPart2 is not None:
            groupPart2list = []
            for i in range(len(self.groupPart2)):
                groupPart2list.append(self.groupPart2[i].Pack(builder))
            MutexGroupPart2StartGroupPart2Vector(builder, len(self.groupPart2))
            for i in reversed(range(len(self.groupPart2))):
                builder.PrependUOffsetTRelative(groupPart2list[i])
            groupPart2 = builder.EndVector()
        MutexGroupPart2Start(builder)
        if self.groupPart2 is not None:
            MutexGroupPart2AddGroupPart2(builder, groupPart2)
        mutexGroupPart2 = MutexGroupPart2End(builder)
        return mutexGroupPart2
