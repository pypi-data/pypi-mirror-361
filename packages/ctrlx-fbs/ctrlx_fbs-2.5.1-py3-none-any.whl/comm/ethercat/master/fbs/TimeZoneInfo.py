# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Time zone info
class TimeZoneInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TimeZoneInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTimeZoneInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TimeZoneInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Offset
    # TimeZoneInfo
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    #Abbreviation, e.g. UTC, CET, CEST, ...
    # TimeZoneInfo
    def Abbreviation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Name, e.g. Europe/Berlin ...
    # TimeZoneInfo
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TimeZoneInfoStart(builder): builder.StartObject(3)
def Start(builder):
    return TimeZoneInfoStart(builder)
def TimeZoneInfoAddOffset(builder, offset): builder.PrependInt64Slot(0, offset, 0)
def AddOffset(builder, offset):
    return TimeZoneInfoAddOffset(builder, offset)
def TimeZoneInfoAddAbbreviation(builder, abbreviation): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(abbreviation), 0)
def AddAbbreviation(builder, abbreviation):
    return TimeZoneInfoAddAbbreviation(builder, abbreviation)
def TimeZoneInfoAddName(builder, name): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return TimeZoneInfoAddName(builder, name)
def TimeZoneInfoEnd(builder): return builder.EndObject()
def End(builder):
    return TimeZoneInfoEnd(builder)

class TimeZoneInfoT(object):

    # TimeZoneInfoT
    def __init__(self):
        self.offset = 0  # type: int
        self.abbreviation = None  # type: str
        self.name = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        timeZoneInfo = TimeZoneInfo()
        timeZoneInfo.Init(buf, pos)
        return cls.InitFromObj(timeZoneInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, timeZoneInfo):
        x = TimeZoneInfoT()
        x._UnPack(timeZoneInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.offset == other.offset and \
            self.abbreviation == other.abbreviation and \
            self.name == other.name

    # TimeZoneInfoT
    def _UnPack(self, timeZoneInfo):
        if timeZoneInfo is None:
            return
        self.offset = timeZoneInfo.Offset()
        self.abbreviation = timeZoneInfo.Abbreviation()
        self.name = timeZoneInfo.Name()

    # TimeZoneInfoT
    def Pack(self, builder):
        if self.abbreviation is not None:
            abbreviation = builder.CreateString(self.abbreviation)
        if self.name is not None:
            name = builder.CreateString(self.name)
        TimeZoneInfoStart(builder)
        TimeZoneInfoAddOffset(builder, self.offset)
        if self.abbreviation is not None:
            TimeZoneInfoAddAbbreviation(builder, abbreviation)
        if self.name is not None:
            TimeZoneInfoAddName(builder, name)
        timeZoneInfo = TimeZoneInfoEnd(builder)
        return timeZoneInfo
