# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ModuleData
    def ModuleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ModuleData
    def ModuleIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ModuleData
    def ContainerType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ModuleData
    def NumberElements(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def ModuleDataStart(builder): builder.StartObject(4)
def Start(builder):
    return ModuleDataStart(builder)
def ModuleDataAddModuleType(builder, moduleType): builder.PrependUint16Slot(0, moduleType, 0)
def AddModuleType(builder, moduleType):
    return ModuleDataAddModuleType(builder, moduleType)
def ModuleDataAddModuleIndex(builder, moduleIndex): builder.PrependUint16Slot(1, moduleIndex, 0)
def AddModuleIndex(builder, moduleIndex):
    return ModuleDataAddModuleIndex(builder, moduleIndex)
def ModuleDataAddContainerType(builder, containerType): builder.PrependUint16Slot(2, containerType, 0)
def AddContainerType(builder, containerType):
    return ModuleDataAddContainerType(builder, containerType)
def ModuleDataAddNumberElements(builder, numberElements): builder.PrependUint16Slot(3, numberElements, 0)
def AddNumberElements(builder, numberElements):
    return ModuleDataAddNumberElements(builder, numberElements)
def ModuleDataEnd(builder): return builder.EndObject()
def End(builder):
    return ModuleDataEnd(builder)

class ModuleDataT(object):

    # ModuleDataT
    def __init__(self):
        self.moduleType = 0  # type: int
        self.moduleIndex = 0  # type: int
        self.containerType = 0  # type: int
        self.numberElements = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        moduleData = ModuleData()
        moduleData.Init(buf, pos)
        return cls.InitFromObj(moduleData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, moduleData):
        x = ModuleDataT()
        x._UnPack(moduleData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.moduleType == other.moduleType and \
            self.moduleIndex == other.moduleIndex and \
            self.containerType == other.containerType and \
            self.numberElements == other.numberElements

    # ModuleDataT
    def _UnPack(self, moduleData):
        if moduleData is None:
            return
        self.moduleType = moduleData.ModuleType()
        self.moduleIndex = moduleData.ModuleIndex()
        self.containerType = moduleData.ContainerType()
        self.numberElements = moduleData.NumberElements()

    # ModuleDataT
    def Pack(self, builder):
        ModuleDataStart(builder)
        ModuleDataAddModuleType(builder, self.moduleType)
        ModuleDataAddModuleIndex(builder, self.moduleIndex)
        ModuleDataAddContainerType(builder, self.containerType)
        ModuleDataAddNumberElements(builder, self.numberElements)
        moduleData = ModuleDataEnd(builder)
        return moduleData
