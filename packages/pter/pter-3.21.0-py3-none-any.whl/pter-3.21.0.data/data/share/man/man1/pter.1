.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "PTER" "" "" ""
.SH NAME
pter \- Personal Task Entropy Reducer
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.EX
pter [\-h] [\-v] [\-u] [\-k] [\-n task] [\-s search] [\-c configuration] filename [filename ...]
.EE
.UNINDENT
.UNINDENT
.SH DESCRIPTION
.sp
pter is a tool to manage your tasks when they are stored in the todo.txt
file format. pter is targeted at users applying the Getting Things Done
method, but can be used by anyone that uses todo.txt files.
.sp
pter offers these features:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Fully compatible to the todo.txt standard
.IP \(bu 2
Support for \fIdue:\fP, \fIt:\fP (threshold date), \fIh:\fP (hide task)
.IP \(bu 2
Extensive search/filter capabilities (see Searching)
.IP \(bu 2
Save and recall search queries for quick access (see Named Searches)
.IP \(bu 2
Sort tasks through search queries (see Sorting)
.IP \(bu 2
Convenient entering of dates (see Relative Dates)
.IP \(bu 2
Task sequencing (see Task Sequences)
.IP \(bu 2
Task templates (see Task Templates)
.IP \(bu 2
Automatic identifiers (see Unique Task Identifiers)
.IP \(bu 2
Track time spent per task (see Time Tracking)
.IP \(bu 2
Support for Recurring Tasks
.IP \(bu 2
Detailed notes per task (see Task Notes)
.IP \(bu 2
Highly configurable behaviour, shortcuts, and colors (see Configuration Files)
.UNINDENT
.UNINDENT
.UNINDENT
.sp
qpter is the Qt version of pter (ie. pter with a graphical user interface)
and supports mostly the same features but sometimes looks for other
sections in the configuration. For more details, see the dedicated documentation
for qpter <doc/qpter.rst>
 or the qpter man page <man:qpter>
\&.
.SH OPTIONS
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \fB\-c configuration\fP
Path to the configuration file you wish to use. The default is
\fB$XDG_CONFIG_HOME/pter/pter.conf\fP (usually
\fB~/.config/pter/pter.conf\fP).
.TP
.B \fB\-h\fP
Show the help.
.TP
.B \fB\-v\fP
Show the version of pter/qpter.
.TP
.B \fB\-u\fP
Check whether a new version of pter is available on pypi (requires an
internet connection).
.TP
.B \fB\-k\fP
List all key bindings and exit.
.TP
.B \fB\-n task\fP
Add \fBtask\fP to the todo.txt file. The advantage of using this over
just \fBecho \(dqtask\(dq >> todo.txt\fP is that relative dates are properly
expanded (see Relative Dates).
If you provide \fB\-\fP instead of a task, the task will be read from
stdin. Multiple tasks can be added, one per line.
.sp
If you don\(aqt provide a todo.txt file on the commandline, the first file
from the \fBfiles\fP option in your configuration file will be used.
.TP
.B \fB\-s search\fP
Load this named search upon startup. If a named search by that name does
not exist, use this as a search term from the start.
.TP
.B \fB\-l\fP
Log level. Can be one of \fBDEBUG\fP, \fBINFO\fP, \fBWARNING\fP, \fBERROR\fP,
or \fBFATAL\fP\&. Defaults to \fBERROR\fP\&.
.TP
.B \fB\-\-log\-file\fP
In what file to log the messages. This is also the file where you can
find information about crashes, if you encounter any.
.TP
.B \fBfilename\fP
Path to your todo.txt file. The first file that you provide is the one
where new tasks will be created in.
You may choose to not provide any files here. In that case the files
configured in the \fB[General]\fP section (in \fBfiles\fP) will be loaded.
.UNINDENT
.UNINDENT
.UNINDENT
.SH CONFIGURATION FILES
.sp
Aside from the data files in the todo.txt format (see Conforming to),
pter\(aqs behaviour can be configured through one or more configuration files.
.sp
The configuration file\(aqs default location is at \fB~/.config/pter/pter.conf\fP\&.
.sp
For details, please refer to the help right here <doc/pter.config.rst>
 or
the man page  <pter.config(5)> \&.
.SH USER INTERFACE AND HELP
.sp
The user interface consists of three main parts:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
The top row is the currently active search (see Searching)
.IP 2. 3
The middle part is a list of all tasks
.IP 3. 3
The bottom row shows a contextual help based on what you\(aqre currently working on
.UNINDENT
.UNINDENT
.UNINDENT
.sp
There is a full list of all keybindings available when you press \fB?\fP\&.
.SH CLIPBOARD SUPPORT
.sp
In the commandline you can easily copy tasks to the clipboard (by default with
\fIY\fP). This functionality depends on the programs \fBxsel\fP (X11), \fBxclip\fP (X11),
\fBwl\-copy\fP (wayland) or \fBtmux\fP (terminal) being installed.
.sp
pter will attempt to copy the text of the selected task to all of these programs.
.sp
If you are running pter in tmux, the copied task will be available via \fBtmux saveb\fP
(default binding in tmux is \fBC\-b ]\fP).
.SH RELATIVE DATES
.sp
Instead of providing full dates for searches or for \fBdue:\fP or \fBt:\fP when
editing tasks, you may write things like \fBdue:+4d\fP, for example, to specify
a date in 4 days.
.sp
A relative date will be expanded into the actual date when editing a task
or when being used in a search.
.sp
The suffix \fBd\fP stands for days, \fBw\fP for weeks, \fBm\fP for months, \fBy\fP for years.
The leading \fB+\fP is implied when left out and if you don’t specify it, \fBd\fP is
assumed.
.sp
\fBdue\fP and \fBt\fP tags can be as simple as \fBdue:1\fP (short for \fBdue:+1d\fP, ie.
tomorrow) or as complicated as \fBdue:+15y\-2m+1w+3d\fP (two months before the date
that is in 15 years, 1 week and 3 days).
.sp
\fBdue\fP and \fBt\fP also support relative weekdays. If you specify \fBdue:sun\fP it is
understood that you mean the next Sunday. If today is Sunday, this is
equivalent to \fBdue:1w\fP or \fBdue:+7d\fP\&.
.sp
Finally there are \fBtoday\fP and \fBtomorrow\fP as shortcuts for the current day and
the day after that, respectively. These terms exist for readability only, as
they are equivalent to \fB0d\fP (or even just \fB0\fP) and \fB+1d\fP (or \fB1d\fP, or even
just \fB1\fP), respectively.
.SS Business days
.sp
You can use the \fBb\fP suffix in place of the \fBd\fP suffix to indicate that the
calculated date for \fBdue\fP, \fBt\fP, or \fBrec\fP will fall on a business day.
.sp
In this case the sign before the \fBb\fP (\fB\-\fP or \fB+\fP) will be used to find a
business day before or after the resulting date.
.sp
For example, assume today is 2024\-11\-07 (Thursday) and a new task \(dqWrite that big
document\(dq is coming up, due on 2024\-11\-15 (next week Friday). You could use
\fBt:+2b\fP to hide the task for 2 days. This would fall on a Saturday (2024\-11\-09),
but since you used the \fBb\fP suffix and not just \fBd\fP, pter will find the next
business day and use that as the \fBt\fP date: 2024\-11\-11 (Monday).
.sp
Assume you want to ensure the task is made visible before it is due, you could
construct a task like this: \fBdue:+2w t:+2w\-4b\fP\&. This would put the \fBt\fP at
least 4 business days before the due date, ensuring that you would see the task
pop up on a Friday, so it’s not sneaking up on you.
.sp
For example, if today is 2024\-11\-06 and a task is due in two weeks (Wednesday,
2024\-11\-20) you could create the task with \fBdue:+2w t:+2w\-4d\fP, which would
put the \fBt\fP on 2024\-11\-17 (a Sunday). With \fBt:+2w\-4b\fP the \fBt\fP would
instead be put on 2024\-11\-15 (Friday).
.SH SEARCHING
.sp
One of the most important parts of pter is the search. You can search for
tasks by means of search queries. These queries can become very long at
which point you can save and restore them.
.sp
Unless configured otherwise by you, the search is case\-sensitive. Note that
case\-sensitivity does not apply at all to: whether or not a task is hidden,
completion status, priority, or any date\-related searches (due date, creation
date, completion date, threshold date).
.sp
If you configured the search to be smart about case\-sensitivity, please consult
Smart case\-sensitive search below for details.
.sp
Here\(aqs a detailed explanation of search queries.
.SS Search for phrases
.sp
The easiest way to search is by phrase in tasks.
.sp
For example, you could search for \fBread\fP to find any task containing the word
\fBread\fP or \fBbread\fP or \fBreading\fP\&.
.sp
To filter out tasks that do \fInot\fP contain a certain phrase, you can search with
\fBnot:word\fP or, abbreviated, \fB\-word\fP\&.
.SS Search for tasks that are completed
.sp
By default all tasks are shown, but you can show only tasks that are not
completed by searching for \fBdone:no\fP\&.
.sp
To only show tasks that you already marked as completed, you can search for
\fBdone:yes\fP instead.
.sp
If you want to express that any state is accepted, you could search for \fBdone:any\fP\&.
.SS Hidden tasks
.sp
Even though not specified by the todotxt standard, some tools provide the
“hide” flag for tasks: \fBh:1\fP\&. pter understands this, too, and by default
hides these tasks.
.sp
To show only hidden tasks, search for \fBhidden:yes\fP (or \fBhidden:1\fP or even
just \fBh:1\fP).
.sp
To show all tasks, no matter their hidden status, you can search for \fBhidden:any\fP or \fBhidden:\fP\&.
.sp
The search phrase \fBhidden:no\fP is the default, but you can provide it if you feel like it.
.sp
Instead of searching for \fBhidden:\fP you can also search for \fBh:\fP (it’s a synonym).
.SS Projects and Contexts
.sp
To search for a specific project or context, just search using the
corresponding prefix, ie. \fB+\fP or \fB@\fP\&.
.sp
For example, to search for all tasks for project \(dqFindWaldo\(dq, you could search
for \fB+FindWaldo\fP\&.
.sp
If you want to find all tasks that you filed to the context \(dqemail\(dq, search
for \fB@email\fP\&.
.sp
Similar to the search for phrases, you can filter out contexts or projects by
search for \fBnot:@context\fP, \fBnot:+project\fP, or use the abbreviation \fB\-@context\fP
or \fB\-+project\fP respectively.
.SS Priority
.sp
Searching for priority is supported in two different ways: you can either
search for all tasks of a certain priority, eg. \fBpri:a\fP to find all tasks of
priority \fB(A)\fP\&.
Or you can search for tasks that are more important or less important than a
certain priority level.
.sp
Say you want to see all tasks that are more important than priority \fB(C)\fP, you
could search for \fBmoreimportant:c\fP\&. The keyword for “less important” is
\fBlessimportant\fP\&.
.sp
\fBmoreimportant\fP and \fBlessimportant\fP can be abbreviated with \fBmi\fP and \fBli\fP
respectively.
.SS Due date
.sp
Searching for due dates can be done in two ways: either by exact due date or
by defining “before” or “after”.
.sp
If you just want to know what tasks are due on 2018\-08\-03, you can search for
\fBdue:2018\-08\-03\fP\&.
.sp
But if you want to see all tasks that have a due date set \fIafter\fP 2018\-08\-03,
you search for \fBdueafter:2018\-08\-03\fP\&.
.sp
Similarly you can search with \fBduebefore\fP for tasks with a due date before a
certain date.
.sp
\fBdueafter\fP and \fBduebefore\fP can be abbreviated with \fBda\fP and \fBdb\fP respectively.
.sp
If you only want to see tasks that have a due date, you can search for
\fBdue:yes\fP or \fBdue:any\fP\&. \fBdue:no\fP also works if you don’t want to see any due dates.
.sp
Searching for due dates supports Relative Dates\&.
.SS Creation date
.sp
The search for task with a certain creation date is similar to the search
query for due date: \fBcreated:2017\-11\-01\fP\&.
.sp
You can also search for tasks created before a date with \fBcreatedbefore\fP (can
be abbreviated with \fBcrb\fP) and for tasks created after a date with
\fBcreatedafter\fP (or short \fBcra\fP).
.sp
To search for tasks created in the year 2008 you could search for
\fBcreatedafter:2007\-12\-31 createdbefore:2009\-01\-01\fP or short \fBcra:2007\-12\-31
crb:2009\-01\-01\fP\&.
.sp
Searching for creation dates supports Relative Dates\&.
.SS Completion date
.sp
The search for tasks with a certain completion date is pretty much identical
to the search for tasks with a certain creation date (see above), but using
the search phrases \fBcompleted\fP, \fBcompletedbefore\fP (the short version is \fBcob\fP), or
\fBcompletedafter\fP (short form is \fBcoa\fP).
.sp
Searching for completion dates supports Relative Dates\&.
.SS Threshold or Tickler search
.sp
pter understand the the non\-standard suggestion to use \fBt:\fP tags to
indicate that a task should not be active prior to the defined date.
.sp
If you still want to see all tasks, even those with a threshold in the future,
you can search for \fBthreshold:any\fP (or, short, \fBt:any\fP). \fBany\fP is the same
as search for a standalone \fBt:\fP\&.
.sp
To find all tasks that have a threshold, search for \fBt:yes\fP\&. To only show tasks that have no threshold, use \fBt:no\fP\&.
.sp
See also configuration option \fBdefault\-threshold\fP\&.
.sp
You can also pretend it’s a certain date in the future (eg. 2042\-02\-14) and
see what tasks become available then by searching for \fBthreshold:2042\-02\-14\fP\&.
.sp
\fBthreshold\fP can be abbreviated with \fBt\fP\&. \fBtickler\fP is also a synonym for
\fBthreshold\fP\&.
.sp
Searching for \fBthreshold\fP supports Relative Dates\&.
.SS Task Identifier
.sp
You can search for task IDs with \fBid:\fP\&. If you search for multiple
task IDs, all of these are searched for, not a task that has all given IDs.
.sp
You can also exclude tasks by ID from a search with \fBnot:id:\fP or
\fB\-id:\fP\&.
.SS Sequence
.sp
You can search for tasks that are supposed to follow directly or indirectly
other tasks by searching for \fBafter:taskid\fP (\fBtaskid\fP should be the
\fBid\fP of a task). Any task that is supposed to be completed after that
task, will be found.
.sp
If the configuration option \fBhide\-sequential\fP is set to \fByes\fP (the
default), tasks are hidden that have uncompleted preceding tasks.
.sp
If you want to see all tasks, disregarding their declared sequence, you can
search for \fBafter:\fP (without anything after the \fB:\fP).
.SS Task References
.sp
Tasks that refer to other tasks by any of the existing means (eg. \fBref:\fP
or \fBafter:\fP) can be found by searching for \fBref:\fP\&.
.sp
If you search using multiple references (eg. \fBref:4,5\fP or \fBref:4
ref:5\fP) the task IDs are considered a logical \fBor\fP\&.
.SS Filename
.sp
You can search for parts of a filename that a task belongs to with
\fBfile:\fP\&. \fBnot:\fP (or \fB\-\fP) can be used to exclude tasks that belong to
a certain file.
.sp
For example: \fBfile:todo.txt\fP or \fB\-file:archive\fP\&.
.SS Smart case\-sensitive search
.sp
You may set the \fBsearch\-case\-sensitive\fP configuration option to \fBsmart\fP (see  <pter.config(5)> )
to change the case\-sensitive search behaviour while pter is running.
.sp
If set to \fBsmart\fP, the search will:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
search case\-insensitive if your search only contains lower\-case characters
.IP \(bu 2
switch to case\-sensitive search for projects, contexts, phrases, ids, or filenames by group
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\(dqby group\(dq means that the smart case\-search is enabled per each of the groups.
.sp
For example, if you search for \fBSome word +project\fP, all phrases (\fBSome\fP and \fBword\fP) will be
searched for in a case\-sensitive manner, but projects will be searched for case\-insensitive.
.sp
Another example that would search for projects case\-sensitive but contexts in a case\-insensitive
manner: \fB+Project @context\fP\&.
.sp
Using inversions (\fBnot\fP or \fB\-\fP) will also affect the case\-sensitivity for that group. For example,
\fBnot:+Project +project\fP will search case\-sensitive for \fB+project\fP but will not yield \fB+Project\fP\&.
.sp
The case\-sensitivity setting for IDs is affecting all three ID\-related searches: \fBref\fP, \fBafter\fP, and \fBid\fP\&.
That means if you search for \fBref:Task1 after:task3\fP, the search for \fBtask3\fP is considered case sensitive,
because \fBTask1\fP is upper\-case.
.SH SORTING
.sp
Tasks can be sorted by passing \fBsort:\fP to the search. The properties of
tasks to sort by are separated by comma. The following properties can be
used for sorting:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \fBdue_in\fP
The number of days until the task is due, if there is a due
date given.
.TP
.B \fBcompleted\fP
Whether or not the task has been completed.
.TP
.B \fBcompleted_date\fP
Completion date of the task
.TP
.B \fBpriority\fP
The priority of the task, if any.
.TP
.B \fBlinenr\fP
The line of the task in its todo.txt file
.TP
.B \fBfile\fP
The name of the todo.txt file the task is in.
.TP
.B \fBproject\fP
The first project (alphabetically sorted) of the task.
.TP
.B \fBcontext\fP
The first context (alphabetically sorted) of the task.
.TP
.B \fBcreated\fP
Creation date of the task.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The default sorting order is \fBcompleted,due_in,priority,linenr\fP and will
be assumed if no \fBsort:\fP is provided in the search. The default sorting order
can be configured with the \fB[General]\fP section\(aqs \fBsort\-order\fP setting.
.SH NAMED SEARCHES
.sp
Search queries can become very long and it would be tedious to type them
again each time.
.sp
To get around it, you can save search queries and give each one a name. The
default keyboard shortcut to save a search is \(dqs\(dq and to load a search is
\(dql\(dq.
.sp
The named queries are stored in your configuration folder in the file
\fB~/.config/pter/searches.txt\fP\&.
.sp
Each line in that file is one saved search query in the form \fBname = search
query\fP\&.
.sp
Here are some useful example search queries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
Due this week = done:no duebefore:mon
Done today = done:yes completed:0
Open tasks = done:no
.EE
.UNINDENT
.UNINDENT
.SH TASK TEMPLATES
.SS Manual templates
.sp
When using todo.txt files for project planning it can be very tedious to type
due dates, time estimates project and context, tickler values, custom tags,
etc for every task. Another scenario is if a certain type of task comes up on
a regular basis, e.g. bugfixes.
.sp
To get around typing out the task every time, you can edit a file stored in your
configuration folder \fB~/.config/pter/templates.txt\fP\&. The syntax is identical to
the \fBsearches.txt\fP file. Alternatively an existing task can be saved as a template.
.sp
Each line in that file is one saved template in the form \fBname = task template\fP\&.
.sp
The default keyboard shortcut to load a template is \(dqL\(dq, to set no template, select
the \fBNone\fP template. To save an existing task the default key is \(dqS\(dq. Once a
template has been selected any new task created will contain the template text when
editing starts.
.sp
Here are some useful example search queries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
Paper revision = @paper +revision due:+7d estimate:
Bug fix = (A) @programming due:+2d estimate: git:
Project X = @work +projectx due:2021\-04\-11 estimate:
.EE
.UNINDENT
.UNINDENT
.SS Automatic templates
.sp
The other template mechanism is automatic template selection. You can define task templates
in the configuration file \fB~/.config/pter/auto_templates.conf\fP with trigger words and
their template texts like this:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
[template name]
trigger = @paper
template = due:+5d
.EE
.UNINDENT
.UNINDENT
.sp
So if you create a new task and add the context \fB@paper\fP, the task edit field will indicate
that the \(dqtemplate name\(dq auto template will be used. Once you create the task, it will
automatically receive the template text \fBdue:+5d\fP\&.
.sp
To trigger an auto template, you must mention all trigger words in the new task. The order of
the words is not relevant though. For example, if you set up a \fBtrigger = this is urgent\fP,
but you create a task with the phrase \fBurgent this is\fP, the auto template will still trigger.
.sp
The templates are checked in the order that they are listed in the \fBauto_templates.conf\fP
file, the first one that matches will be used.
.sp
Unless you change the \fBauto\-template\-case\-sensitive\fP option in the configuration file
to something else, it will be set to \fByes\fP, meaning that matches are case sensitive (\fB@paper\fP
will match, but if you create a new task with \fB@PAPER\fP, it won\(aqt match the auto template
shown above).
.sp
Your auto templates will also show up when you load regular templates, so you do not need to
define them twice.
.SH TIME TRACKING
.sp
pter can track the time you spend on a task. By default, type \(dqt\(dq to
start tracking. This will add a \fBtracking:\fP attribute with the current local
date and time to the task.
.sp
When you select that task again and type \(dqt\(dq, the \fBtracking:\fP tag will be
removed and the time spent will be saved in the tag \fBspent:\fP as hours and
minutes.
.sp
If you start and stop tracking multiple times, the time in \fBspent:\fP will
accumulate accordingly. The smallest amount of time tracked is one minute.
.SS Tracking Using an External Program
.sp
If you do your time tracking in an external program, you can configure pter to
use that program instead of doing it\(aqs internal tracking.
.sp
The configuration option \fBtime\-tracking\fP in the \fB[General]\fP section should
be pointed to the program that you want to use.
.sp
Please find all details in the configuration documentation  <pter.config(5)> \&.
.SH DELEGATING TASKS
.sp
The \fBdelegate\fP function (on shortcut \fB>\fP (pter) or \fBCtrl+G\fP (qpter)
by default) can be used to mark a task as delegated and trigger the
delegation action.
.sp
When delegating a task the configured marker is being added to the task
(configured by \fBdelegation\-marker\fP in the configuration file).
.sp
The delegation action is configured by setting the \fBdelegation\-action\fP in
the configuration file to \fBmail\-to\fP\&. In that case an attempt is made to
open your email program and start a new email. In case you defined a
\fBto:\fP (configurable by defining \fBdelegation\-to\fP) in your task
description, that will be used as the recipient for the email.
.SH UNIQUE TASK IDENTIFIERS
.sp
Tasks can be given an identifier with the \fBid:\fP attribute. pter can
support you in creating unique IDs by creating a task with \fBid:#auto\fP or,
shorter, \fBid:#\fP\&.
.sp
If you would like to group your tasks IDs, you can provide a prefix to the
id:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
Clean up the +garage id:clean3
.EE
.UNINDENT
.UNINDENT
.sp
If you now create a task with \fBid:clean#\fP or \fBid:clean#auto\fP, the next
task will be given \fBid:clean4\fP\&.
.sp
In case you want all your tasks to be created with a unique ID, have a look
at the configuration option \fBauto\-id\fP\&.
.sp
You can refer to other tasks using the attribute \fBref:\fP following the id
of the task that you are referring to. This may also be a comma separated
list of tasks (much like \fBafter:\fP, see Task Sequences).
.sp
You may use the \fBshow\-related\fP function (by default on the key \fBr\fP) to
show the tasks that this task is referring to by means of \fBref:\fP or
\fBafter:\fP\&.
.SH TASK SEQUENCES
.sp
You can declare that a task is supposed to be done after another task has
been completed by setting the \fBafter:\fP attribute to the preceding task.
.sp
By default, ie. with an empty search, any task that is declared to be
\fBafter:\fP some other preceding task will not be shown unless the preceding
task has been marked as done.
.sp
If you do not like this feature, you can disable it in the
\fBhide\-sequential\fP in the configuration file.
.SS Examples
.sp
These three tasks may exist:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
Buy potatoes @market id:1
Make fries @kitchen id:2 after:1
Eat fries for dinner after:2
.EE
.UNINDENT
.UNINDENT
.sp
This means that \fBMake fries\fP won’t show in the list of tasks until \fBBuy
potatoes\fP has been completed. Similarily \fBEat fries for dinner\fP will not
show up until \fBMake fries\fP has been completed.
.sp
You can declare multiple \fBafter:\fP attributes, or comma separate multiple
prerequisites to indicate that \fIall\fP preceding tasks must be completed
before a task may be shown:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
Buy oil id:1
Buy potatoes id:2
Buy plates id:3
Make fries id:4 after:1,2
Eat fries after:3 after:4
.EE
.UNINDENT
.UNINDENT
.sp
In this case \fBMake fries\fP will not show up until both \fBBuy oil\fP and
\fBBuy potatoes\fP has been completed.
.sp
Similarly \fBEat fries\fP requires both tasks, \fBMake fries\fP and \fBBuy
plates\fP, to be completed.
.SH RECURRING TASKS
.sp
Recurring (or repeating) tasks can be indicated by adding the \fBrec:\fP tag
and a Relative Dates specifier, like this:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
A weekly task rec:1w
Do this again in 3 days rec:3d
.EE
.UNINDENT
.UNINDENT
.sp
By marking such a task as done, a new task will be added with the same
description, but a new creation date.
.sp
If you’d rather not have pter create new tasks every time, you can set the
\fBreuse\-recurring\fP option in the configuration file to \fByes\fP\&.
.sp
Recurring tasks usually only have meaning when a \fBdue:\fP date is given,
but when there is no \fBdue:\fP, a \fBt:\fP will be used as a fallback if there
is any.
.sp
When completing such a task, pter can either create the follow\-up task
based on the date of completion or based on the due date of the task. This
behaviour called the \(dqrecurring mode\(dq which can be either
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
strict: the new due date is based on the old due date, or
.IP \(bu 2
normal: the new due date is based on the completion date.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
To use strict mode, add a \fB+\fP before the time interval. For example you would
write \fBrec:+2w\fP for strict mode and \fBrec:2w\fP for normal mode.
.sp
An example. Given this task (starting June, you want to rearrange your
flowers in the living room every week):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
2021\-06\-01 Rearrange flowers in the living room due:2021\-06\-05 rec:1w
.EE
.UNINDENT
.UNINDENT
.sp
In strict mode (\fBrec:+1w\fP), if you complete that task already on
2021\-06\-02, the next due date will be 2021\-06\-13 (old due date + 1 week).
But in normal mode (\fBrec:1w\fP) the new due date will be 2021\-06\-09 (date of
completion + 1 week).
.sp
If your recurring tasks has a due date and a threshold/tickler tag
(\fBt:\fP), upon completion the new task will also receive a \fBt:\fP tag with
the same relative time to the due date as the original task.
.sp
So, if you set up a due date 2021\-06\-05 and a threshold \fBt:2021\-06\-04\fP
the new task will also have a threshold in such a way that the task is
hidden until one day before the due date.
.SH TASK NOTES
.sp
This extension only works in \fBpter\fP, not in \fBqpter\fP\&.
.sp
You may provide a text file with additional notes about a task using the \fBnote:\fP tag.
.sp
The location of notes is managed via the configuration file in the \fBGeneral\fP
section with the \fBnotes\fP option.
.sp
Notes are assumed to be \fB\&.txt\fP text files, but you can overwrite that with
the \fBnote\-suffix\fP configuration option.
.sp
For example, if you define a task with \fBnote:details\fP, pter will assume you
meant a file with the name \fBdetails.txt\fP\&.
.sp
However, you can just define the full filename with extension in which case pter
will not use the \fBnote\-suffix\fP default. For example \fBSome task note:details.md\fP\&.
.sp
The function \fBedit\-note\fP (usually on shortcut \fBN\fP) will either edit the
note of this task or create a note.
.sp
Have a look at the \fBnote\-naming\fP option to change the behaviour how new notes
are created.
.sp
For editing, \fBpter\fP will use the external text editor configured with
\fBeditor\fP in the configuration file\(aqs \fBGeneral\fP section.
.SH GETTING THINGS DONE
.sp
With pter you can apply the Getting Things Done method to a single todo.txt
file by using context and project tags, avoiding multiple lists.
.sp
For example, you could have a \fB@in\fP context for the list of all tasks
that are new. Now you can just search for \fB@in\fP (and save it as a named search) to find all new tasks.
.sp
To see all tasks that are on your \(dqNext task\(dq list, a good start is to
search for \(dq\fBdone:no not:@in\fP\(dq (and save this search query, too).
.SH EXTENSIONS TO TODO.TXT
.sp
Pter is fully compatible with the standard format, but also supports
the following extra key/value tags:
.INDENT 0.0
.IP \(bu 2
\fBafter:4\fP, signifies that this entry can only be started once entry with \fBid:4\fP has been completed.
.IP \(bu 2
\fBdue:2071\-01\-01\fP, defines a due date for this task.
.IP \(bu 2
\fBh:1\fP, hides a task.
.IP \(bu 2
\fBid:3\fP, allows you to assign a unique identifier to entries in the todo.txt, like \fB3\fP\&. pter will accept when there non\-unique IDs, but of course uniquely identifying entries will be tricky.
.IP \(bu 2
\fBrec:1w\fP, indicate that this task should be recurring in 1 week intervals.
.IP \(bu 2
\fBref:6\fP, indicate that this task refers to the task with \fBid:6\fP\&.  Comma\-separated IDs are supported, like \fBref:13,9\fP\&.
.IP \(bu 2
\fBspent:5h3m\fP, pter can be used for time tracking and will store the time spent on a task in the \fBspent\fP attribute.
.IP \(bu 2
\fBt:2070\-12\-24\fP, the threshold tag can be used to hide before the given date has come.
.IP \(bu 2
\fBto:person\fP, when a task has been delegated (by using a delegation marker like \fB@delegated\fP), \fBto\fP can be used to indicate to whom the task has been delegated. The option is configurable, see \fBdelegation\-to\fP above for details.
.IP \(bu 2
\fBtracking:\fP, a technical tag used for time tracking. It indicates that you started working on the task and wanted to do time tracking. The value is the date and time when you started working. Upon stopping tracking, the spent time will be stored in the \fBspent\fP tag.
.IP \(bu 2
\fBnote:\fP, a filename with additional notes about this task
.IP \(bu 2
both \fBt:\fP and \fBdue:\fP may be full ISO 8601 date and time format, like \fB2023\-05\-01T19:31:05+00:00\fP
.UNINDENT
.SH KEYBOARD CONTROLS
.sp
pter is fully controlled by keyboard and has no mouse support.
.sp
These default keyboard controls are available in any list:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\(dq↓\(dq, \(dq↑\(dq (cursor keys): select the next or previous item in the list
.IP \(bu 2
\(dqj\(dq, \(dqk\(dq: select the next or previous item in the list
.IP \(bu 2
\(dqHome\(dq: go to the first item
.IP \(bu 2
\(dqEnd\(dq: go the last item
.IP \(bu 2
\(dq:\(dq: jump to a list item by number (works even if list numbers are not shown)
.IP \(bu 2
\(dq1\(dq..\(dq9\(dq: jump to the list item with this number
.IP \(bu 2
\(dqEsc\(dq, \(dq^C\(dq: cancel the selection (this does nothing in the list of tasks)
.UNINDENT
.UNINDENT
.UNINDENT
.sp
In the list of tasks, the following controls are also available:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\(dq?\(dq: Show help
.IP \(bu 2
\(dqm\(dq: open this manual in a browser
.IP \(bu 2
\(dqe\(dq: edit the currently selected task
.IP \(bu 2
\(dqE\(dq: edit the currently selected task in an external text editor
.IP \(bu 2
\(dqn\(dq: create a new task
.IP \(bu 2
\(dqv\(dq: duplicate the selected task
.IP \(bu 2
\(dq/\(dq: edit the search query
.IP \(bu 2
\(dq^\(dq: clear the search
.IP \(bu 2
\(dqc\(dq: search for a context of the currently selected task
.IP \(bu 2
\(dqp\(dq: search for a project of the currently selected task
.IP \(bu 2
\(dqr\(dq: search for all tasks that this task is referring to with \fBref:\fP or \fBafter:\fP
.IP \(bu 2
\(dqF6\(dq: select one project out of all used projects to search for
.IP \(bu 2
\(dqF7\(dq: select one context out of all used contexts to search for
.IP \(bu 2
\(dqq\(dq: quit the program
.IP \(bu 2
\(dql\(dq: load a named search
.IP \(bu 2
\(dqs\(dq: save the current search
.IP \(bu 2
\(dqL\(dq: load a named task template
.IP \(bu 2
\(dqS\(dq: Save a task as a named template
.IP \(bu 2
\(dqu\(dq: open a URL listed in the selected task
.IP \(bu 2
\(dqt\(dq: Start/stop time tracking of the selected task
.IP \(bu 2
\(dq>\(dq: Delegate the selected task
.IP \(bu 2
\(dqA\(dq: Set the priority of this task to \fB(A)\fP
.IP \(bu 2
\(dqB\(dq: Set the priority of this task to \fB(B)\fP
.IP \(bu 2
\(dqC\(dq: Set the priority of this task to \fB(C)\fP
.IP \(bu 2
\(dqD\(dq: Set the priority of this task to \fB(D)\fP
.IP \(bu 2
\(dq+\(dq: Increase the priority of this task
.IP \(bu 2
\(dq\-\(dq: Decrease the priority of this task
.IP \(bu 2
\(dq=\(dq: Remove the priority of this task
.IP \(bu 2
\(dq%\(dq: Move this task into the archive
.IP \(bu 2
\(dqN\(dq: Edit or create this task\(aqs note
.IP \(bu 2
\(dqY\(dq: Copy (yank) the selected task\(aqs full text to clipboard
.UNINDENT
.UNINDENT
.UNINDENT
.sp
In edit fields the following keyboard controls are available:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\(dq←\(dq, \(dq→\(dq (cursor keys): move the cursor one character to the left or right
.IP \(bu 2
\(dqCtrl+←\(dq, \(dqCtrl+→\(dq (ctrl key and cursor keys): mvoe the cursor one word to the left or right
.IP \(bu 2
\(dqHome\(dq: move the cursor to the first charater
.IP \(bu 2
\(dqEnd\(dq: move the cursor to the last character
.IP \(bu 2
\(dqBackspace\(dq, \(dq^?\(dq: delete the character to the left of the cursor
.IP \(bu 2
\(dqCtrl+Backspace\(dq, \(dq^H\(dq, \(dq^W\(dq: delete everything left of the cursor until the end of the word
.IP \(bu 2
\(dqDel\(dq: delete the character under the cursor
.IP \(bu 2
\(dqCtrl+Del\(dq: delete everything right of the cursor until the end of the word
.IP \(bu 2
\(dq^U\(dq: delete from before the cursor to the start of the line
.IP \(bu 2
\(dq^K\(dq: delete everything from the cursor to the end of the line
.IP \(bu 2
\(dqEscape\(dq, \(dq^C\(dq: cancel editing
.IP \(bu 2
\(dqEnter\(dq, \(dqReturn\(dq: accept input and submit changes
.IP \(bu 2
\(dq↓\(dq, \(dqTab\(dq, \(dq^N\(dq: next item in the completion list
.IP \(bu 2
\(dq↑\(dq, \(dq^P\(dq: previous item in the completion list
.IP \(bu 2
\(dqTab\(dq: jump to the next \fBkey:value\fP field where there is not \fBvalue\fP
.IP \(bu 2
\(dqEnter\(dq: use the selected item of the completion list
.IP \(bu 2
\(dqEsc\(dq, \(dq^C\(dq: close the completion list
.UNINDENT
.UNINDENT
.UNINDENT
.sp
While creating tasks, the following additional keyboard controls exist:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\(dq^Y\(dq: Create the task without applying the auto template
.IP \(bu 2
\(dqF6\(dq: Select the todo.txt file to save the task in (if you are using multiple files)
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Note that, as with all applications based on \fBcurses\fP, hitting the \fBEsc\fP key will only
show an effect after a short waiting time. You can either hit \fBEsc\fP twice to get the effect
at once or set the environment variable \fBESCDELAY\fP to something more to your liking,
like \fB50\fP\&. Please refer to the documentation of your terminal/shell about how to do that.
.SH CONFORMING TO
.sp
pter works with and uses the todo.txt file format and strictly adheres to the format
as described at  <http://todotxt.org/> \&. Additional special key/value tags are
described in the previous section.
.SH SEE ALSO
.sp
 <pter.config(5)> , qpter(1) <man:qpter>

.SH BUGS
.sp
Probably plenty. Please report your findings at Codeberg <https://codeberg.org/vonshednob/pter>
, Github <https://github.com/vonshednob/pter>
 or via email to the authors at  <https://vonshednob.cc/pter> \&.
.\" Generated by docutils manpage writer.
.
