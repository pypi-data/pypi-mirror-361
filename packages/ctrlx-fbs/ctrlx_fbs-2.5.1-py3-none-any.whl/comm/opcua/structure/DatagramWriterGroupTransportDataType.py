# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DatagramWriterGroupTransportDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DatagramWriterGroupTransportDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDatagramWriterGroupTransportDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DatagramWriterGroupTransportDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DatagramWriterGroupTransportDataType
    def MessageRepeatCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # DatagramWriterGroupTransportDataType
    def MessageRepeatDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def DatagramWriterGroupTransportDataTypeStart(builder): builder.StartObject(2)
def Start(builder):
    return DatagramWriterGroupTransportDataTypeStart(builder)
def DatagramWriterGroupTransportDataTypeAddMessageRepeatCount(builder, messageRepeatCount): builder.PrependUint8Slot(0, messageRepeatCount, 0)
def AddMessageRepeatCount(builder, messageRepeatCount):
    return DatagramWriterGroupTransportDataTypeAddMessageRepeatCount(builder, messageRepeatCount)
def DatagramWriterGroupTransportDataTypeAddMessageRepeatDelay(builder, messageRepeatDelay): builder.PrependFloat64Slot(1, messageRepeatDelay, 0.0)
def AddMessageRepeatDelay(builder, messageRepeatDelay):
    return DatagramWriterGroupTransportDataTypeAddMessageRepeatDelay(builder, messageRepeatDelay)
def DatagramWriterGroupTransportDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return DatagramWriterGroupTransportDataTypeEnd(builder)

class DatagramWriterGroupTransportDataTypeT(object):

    # DatagramWriterGroupTransportDataTypeT
    def __init__(self):
        self.messageRepeatCount = 0  # type: int
        self.messageRepeatDelay = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        datagramWriterGroupTransportDataType = DatagramWriterGroupTransportDataType()
        datagramWriterGroupTransportDataType.Init(buf, pos)
        return cls.InitFromObj(datagramWriterGroupTransportDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, datagramWriterGroupTransportDataType):
        x = DatagramWriterGroupTransportDataTypeT()
        x._UnPack(datagramWriterGroupTransportDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.messageRepeatCount == other.messageRepeatCount and \
            self.messageRepeatDelay == other.messageRepeatDelay

    # DatagramWriterGroupTransportDataTypeT
    def _UnPack(self, datagramWriterGroupTransportDataType):
        if datagramWriterGroupTransportDataType is None:
            return
        self.messageRepeatCount = datagramWriterGroupTransportDataType.MessageRepeatCount()
        self.messageRepeatDelay = datagramWriterGroupTransportDataType.MessageRepeatDelay()

    # DatagramWriterGroupTransportDataTypeT
    def Pack(self, builder):
        DatagramWriterGroupTransportDataTypeStart(builder)
        DatagramWriterGroupTransportDataTypeAddMessageRepeatCount(builder, self.messageRepeatCount)
        DatagramWriterGroupTransportDataTypeAddMessageRepeatDelay(builder, self.messageRepeatDelay)
        datagramWriterGroupTransportDataType = DatagramWriterGroupTransportDataTypeEnd(builder)
        return datagramWriterGroupTransportDataType
