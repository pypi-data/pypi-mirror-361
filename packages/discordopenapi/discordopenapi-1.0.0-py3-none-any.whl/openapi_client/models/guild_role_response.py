# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.guild_role_colors_response import GuildRoleColorsResponse
from openapi_client.models.guild_role_tags_response import GuildRoleTagsResponse
from typing import Optional, Set
from typing_extensions import Self

class GuildRoleResponse(BaseModel):
    """
    GuildRoleResponse
    """ # noqa: E501
    id: Annotated[str, Field(strict=True)]
    name: StrictStr
    description: Optional[StrictStr] = None
    permissions: StrictStr
    position: StrictInt
    color: StrictInt
    colors: Optional[GuildRoleColorsResponse] = None
    hoist: StrictBool
    managed: StrictBool
    mentionable: StrictBool
    icon: Optional[StrictStr] = None
    unicode_emoji: Optional[StrictStr] = None
    tags: Optional[GuildRoleTagsResponse] = None
    flags: StrictInt
    __properties: ClassVar[List[str]] = ["id", "name", "description", "permissions", "position", "color", "colors", "hoist", "managed", "mentionable", "icon", "unicode_emoji", "tags", "flags"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(0|[1-9][0-9]*)$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9][0-9]*)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuildRoleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of colors
        if self.colors:
            _dict['colors'] = self.colors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if colors (nullable) is None
        # and model_fields_set contains the field
        if self.colors is None and "colors" in self.model_fields_set:
            _dict['colors'] = None

        # set to None if icon (nullable) is None
        # and model_fields_set contains the field
        if self.icon is None and "icon" in self.model_fields_set:
            _dict['icon'] = None

        # set to None if unicode_emoji (nullable) is None
        # and model_fields_set contains the field
        if self.unicode_emoji is None and "unicode_emoji" in self.model_fields_set:
            _dict['unicode_emoji'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuildRoleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "permissions": obj.get("permissions"),
            "position": obj.get("position"),
            "color": obj.get("color"),
            "colors": GuildRoleColorsResponse.from_dict(obj["colors"]) if obj.get("colors") is not None else None,
            "hoist": obj.get("hoist"),
            "managed": obj.get("managed"),
            "mentionable": obj.get("mentionable"),
            "icon": obj.get("icon"),
            "unicode_emoji": obj.get("unicode_emoji"),
            "tags": GuildRoleTagsResponse.from_dict(obj["tags"]) if obj.get("tags") is not None else None,
            "flags": obj.get("flags")
        })
        return _obj


