# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EndpointDescription(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EndpointDescription()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEndpointDescription(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EndpointDescription
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EndpointDescription
    def EndpointUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EndpointDescription
    def Server(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.structure.ApplicationDescription import ApplicationDescription
            obj = ApplicationDescription()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EndpointDescription
    def ServerCertificate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.ByteString import ByteString
            obj = ByteString()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EndpointDescription
    def SecurityMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EndpointDescription
    def SecurityPolicyUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EndpointDescription
    def UserIdentityTokens(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.UserTokenPolicy import UserTokenPolicy
            obj = UserTokenPolicy()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EndpointDescription
    def UserIdentityTokensLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EndpointDescription
    def UserIdentityTokensIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # EndpointDescription
    def TransportProfileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EndpointDescription
    def SecurityLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def EndpointDescriptionStart(builder): builder.StartObject(8)
def Start(builder):
    return EndpointDescriptionStart(builder)
def EndpointDescriptionAddEndpointUrl(builder, endpointUrl): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(endpointUrl), 0)
def AddEndpointUrl(builder, endpointUrl):
    return EndpointDescriptionAddEndpointUrl(builder, endpointUrl)
def EndpointDescriptionAddServer(builder, server): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(server), 0)
def AddServer(builder, server):
    return EndpointDescriptionAddServer(builder, server)
def EndpointDescriptionAddServerCertificate(builder, serverCertificate): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(serverCertificate), 0)
def AddServerCertificate(builder, serverCertificate):
    return EndpointDescriptionAddServerCertificate(builder, serverCertificate)
def EndpointDescriptionAddSecurityMode(builder, securityMode): builder.PrependInt32Slot(3, securityMode, 0)
def AddSecurityMode(builder, securityMode):
    return EndpointDescriptionAddSecurityMode(builder, securityMode)
def EndpointDescriptionAddSecurityPolicyUri(builder, securityPolicyUri): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(securityPolicyUri), 0)
def AddSecurityPolicyUri(builder, securityPolicyUri):
    return EndpointDescriptionAddSecurityPolicyUri(builder, securityPolicyUri)
def EndpointDescriptionAddUserIdentityTokens(builder, userIdentityTokens): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(userIdentityTokens), 0)
def AddUserIdentityTokens(builder, userIdentityTokens):
    return EndpointDescriptionAddUserIdentityTokens(builder, userIdentityTokens)
def EndpointDescriptionStartUserIdentityTokensVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartUserIdentityTokensVector(builder, numElems):
    return EndpointDescriptionStartUserIdentityTokensVector(builder, numElems)
def EndpointDescriptionAddTransportProfileUri(builder, transportProfileUri): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(transportProfileUri), 0)
def AddTransportProfileUri(builder, transportProfileUri):
    return EndpointDescriptionAddTransportProfileUri(builder, transportProfileUri)
def EndpointDescriptionAddSecurityLevel(builder, securityLevel): builder.PrependUint8Slot(7, securityLevel, 0)
def AddSecurityLevel(builder, securityLevel):
    return EndpointDescriptionAddSecurityLevel(builder, securityLevel)
def EndpointDescriptionEnd(builder): return builder.EndObject()
def End(builder):
    return EndpointDescriptionEnd(builder)
import comm.opcua.builtin.ByteString
import comm.opcua.structure.ApplicationDescription
import comm.opcua.structure.UserTokenPolicy
try:
    from typing import List, Optional
except:
    pass

class EndpointDescriptionT(object):

    # EndpointDescriptionT
    def __init__(self):
        self.endpointUrl = None  # type: str
        self.server = None  # type: Optional[comm.opcua.structure.ApplicationDescription.ApplicationDescriptionT]
        self.serverCertificate = None  # type: Optional[comm.opcua.builtin.ByteString.ByteStringT]
        self.securityMode = 0  # type: int
        self.securityPolicyUri = None  # type: str
        self.userIdentityTokens = None  # type: List[comm.opcua.structure.UserTokenPolicy.UserTokenPolicyT]
        self.transportProfileUri = None  # type: str
        self.securityLevel = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        endpointDescription = EndpointDescription()
        endpointDescription.Init(buf, pos)
        return cls.InitFromObj(endpointDescription)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, endpointDescription):
        x = EndpointDescriptionT()
        x._UnPack(endpointDescription)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.endpointUrl == other.endpointUrl and \
            self.server == other.server and \
            self.serverCertificate == other.serverCertificate and \
            self.securityMode == other.securityMode and \
            self.securityPolicyUri == other.securityPolicyUri and \
            self.userIdentityTokens == other.userIdentityTokens and \
            self.transportProfileUri == other.transportProfileUri and \
            self.securityLevel == other.securityLevel

    # EndpointDescriptionT
    def _UnPack(self, endpointDescription):
        if endpointDescription is None:
            return
        self.endpointUrl = endpointDescription.EndpointUrl()
        if endpointDescription.Server() is not None:
            self.server = comm.opcua.structure.ApplicationDescription.ApplicationDescriptionT.InitFromObj(endpointDescription.Server())
        if endpointDescription.ServerCertificate() is not None:
            self.serverCertificate = comm.opcua.builtin.ByteString.ByteStringT.InitFromObj(endpointDescription.ServerCertificate())
        self.securityMode = endpointDescription.SecurityMode()
        self.securityPolicyUri = endpointDescription.SecurityPolicyUri()
        if not endpointDescription.UserIdentityTokensIsNone():
            self.userIdentityTokens = []
            for i in range(endpointDescription.UserIdentityTokensLength()):
                if endpointDescription.UserIdentityTokens(i) is None:
                    self.userIdentityTokens.append(None)
                else:
                    userTokenPolicy_ = comm.opcua.structure.UserTokenPolicy.UserTokenPolicyT.InitFromObj(endpointDescription.UserIdentityTokens(i))
                    self.userIdentityTokens.append(userTokenPolicy_)
        self.transportProfileUri = endpointDescription.TransportProfileUri()
        self.securityLevel = endpointDescription.SecurityLevel()

    # EndpointDescriptionT
    def Pack(self, builder):
        if self.endpointUrl is not None:
            endpointUrl = builder.CreateString(self.endpointUrl)
        if self.server is not None:
            server = self.server.Pack(builder)
        if self.serverCertificate is not None:
            serverCertificate = self.serverCertificate.Pack(builder)
        if self.securityPolicyUri is not None:
            securityPolicyUri = builder.CreateString(self.securityPolicyUri)
        if self.userIdentityTokens is not None:
            userIdentityTokenslist = []
            for i in range(len(self.userIdentityTokens)):
                userIdentityTokenslist.append(self.userIdentityTokens[i].Pack(builder))
            EndpointDescriptionStartUserIdentityTokensVector(builder, len(self.userIdentityTokens))
            for i in reversed(range(len(self.userIdentityTokens))):
                builder.PrependUOffsetTRelative(userIdentityTokenslist[i])
            userIdentityTokens = builder.EndVector()
        if self.transportProfileUri is not None:
            transportProfileUri = builder.CreateString(self.transportProfileUri)
        EndpointDescriptionStart(builder)
        if self.endpointUrl is not None:
            EndpointDescriptionAddEndpointUrl(builder, endpointUrl)
        if self.server is not None:
            EndpointDescriptionAddServer(builder, server)
        if self.serverCertificate is not None:
            EndpointDescriptionAddServerCertificate(builder, serverCertificate)
        EndpointDescriptionAddSecurityMode(builder, self.securityMode)
        if self.securityPolicyUri is not None:
            EndpointDescriptionAddSecurityPolicyUri(builder, securityPolicyUri)
        if self.userIdentityTokens is not None:
            EndpointDescriptionAddUserIdentityTokens(builder, userIdentityTokens)
        if self.transportProfileUri is not None:
            EndpointDescriptionAddTransportProfileUri(builder, transportProfileUri)
        EndpointDescriptionAddSecurityLevel(builder, self.securityLevel)
        endpointDescription = EndpointDescriptionEnd(builder)
        return endpointDescription
