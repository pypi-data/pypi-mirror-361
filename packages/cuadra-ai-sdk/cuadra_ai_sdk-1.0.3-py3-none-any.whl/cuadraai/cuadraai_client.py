# -*- coding: utf-8 -*-

"""
cuadraai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from cuadraai.configuration import Configuration
from cuadraai.controllers.base_controller import BaseController
from cuadraai.configuration import Environment
from cuadraai.http.auth.oauth_2 import Oauth2
from cuadraai.controllers.chat_controller import ChatController
from cuadraai.controllers.models_controller import ModelsController
from cuadraai.controllers.embeds_controller import EmbedsController
from cuadraai.controllers.usage_controller import UsageController
from cuadraai.controllers.oauth_authorization_controller\
    import OauthAuthorizationController


class CuadraaiClient(object):
    @LazyProperty
    def chat(self):
        return ChatController(self.global_configuration)

    @LazyProperty
    def models(self):
        return ModelsController(self.global_configuration)

    @LazyProperty
    def embeds(self):
        return EmbedsController(self.global_configuration)

    @LazyProperty
    def usage(self):
        return UsageController(self.global_configuration)

    @LazyProperty
    def oauth_authorization(self):
        return OauthAuthorizationController(self.global_configuration)

    @property
    def oauth_2(self):
        return self.auth_managers['OAuth2']

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=30, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 logging_configuration=None, environment=Environment.PRODUCTION,
                 authorization_code_auth_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            logging_configuration=logging_configuration,
            environment=environment,
            authorization_code_auth_credentials=authorization_code_auth_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['OAuth2']}
        self.auth_managers['OAuth2'] = Oauth2(
            self.config.authorization_code_auth_credentials,
            self.global_configuration)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

