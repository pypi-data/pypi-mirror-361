# coding: utf-8

"""
    Discord HTTP API (Preview)

    Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

    The version of the OpenAPI document: 10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_command_response import ApplicationCommandResponse
from openapi_client.models.audit_log_entry_response import AuditLogEntryResponse
from openapi_client.models.guild_audit_log_response_integrations_inner import GuildAuditLogResponseIntegrationsInner
from openapi_client.models.list_auto_moderation_rules200_response_inner import ListAutoModerationRules200ResponseInner
from openapi_client.models.list_channel_webhooks200_response_inner import ListChannelWebhooks200ResponseInner
from openapi_client.models.list_guild_scheduled_events200_response_inner import ListGuildScheduledEvents200ResponseInner
from openapi_client.models.thread_response import ThreadResponse
from openapi_client.models.user_response import UserResponse
from typing import Optional, Set
from typing_extensions import Self

class GuildAuditLogResponse(BaseModel):
    """
    GuildAuditLogResponse
    """ # noqa: E501
    audit_log_entries: List[AuditLogEntryResponse]
    users: List[UserResponse]
    integrations: List[GuildAuditLogResponseIntegrationsInner]
    webhooks: List[ListChannelWebhooks200ResponseInner]
    guild_scheduled_events: List[ListGuildScheduledEvents200ResponseInner]
    threads: List[ThreadResponse]
    application_commands: List[ApplicationCommandResponse]
    auto_moderation_rules: List[Optional[ListAutoModerationRules200ResponseInner]]
    __properties: ClassVar[List[str]] = ["audit_log_entries", "users", "integrations", "webhooks", "guild_scheduled_events", "threads", "application_commands", "auto_moderation_rules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuildAuditLogResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in audit_log_entries (list)
        _items = []
        if self.audit_log_entries:
            for _item_audit_log_entries in self.audit_log_entries:
                if _item_audit_log_entries:
                    _items.append(_item_audit_log_entries.to_dict())
            _dict['audit_log_entries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in integrations (list)
        _items = []
        if self.integrations:
            for _item_integrations in self.integrations:
                if _item_integrations:
                    _items.append(_item_integrations.to_dict())
            _dict['integrations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in webhooks (list)
        _items = []
        if self.webhooks:
            for _item_webhooks in self.webhooks:
                if _item_webhooks:
                    _items.append(_item_webhooks.to_dict())
            _dict['webhooks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in guild_scheduled_events (list)
        _items = []
        if self.guild_scheduled_events:
            for _item_guild_scheduled_events in self.guild_scheduled_events:
                if _item_guild_scheduled_events:
                    _items.append(_item_guild_scheduled_events.to_dict())
            _dict['guild_scheduled_events'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in threads (list)
        _items = []
        if self.threads:
            for _item_threads in self.threads:
                if _item_threads:
                    _items.append(_item_threads.to_dict())
            _dict['threads'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in application_commands (list)
        _items = []
        if self.application_commands:
            for _item_application_commands in self.application_commands:
                if _item_application_commands:
                    _items.append(_item_application_commands.to_dict())
            _dict['application_commands'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in auto_moderation_rules (list)
        _items = []
        if self.auto_moderation_rules:
            for _item_auto_moderation_rules in self.auto_moderation_rules:
                if _item_auto_moderation_rules:
                    _items.append(_item_auto_moderation_rules.to_dict())
            _dict['auto_moderation_rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuildAuditLogResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audit_log_entries": [AuditLogEntryResponse.from_dict(_item) for _item in obj["audit_log_entries"]] if obj.get("audit_log_entries") is not None else None,
            "users": [UserResponse.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None,
            "integrations": [GuildAuditLogResponseIntegrationsInner.from_dict(_item) for _item in obj["integrations"]] if obj.get("integrations") is not None else None,
            "webhooks": [ListChannelWebhooks200ResponseInner.from_dict(_item) for _item in obj["webhooks"]] if obj.get("webhooks") is not None else None,
            "guild_scheduled_events": [ListGuildScheduledEvents200ResponseInner.from_dict(_item) for _item in obj["guild_scheduled_events"]] if obj.get("guild_scheduled_events") is not None else None,
            "threads": [ThreadResponse.from_dict(_item) for _item in obj["threads"]] if obj.get("threads") is not None else None,
            "application_commands": [ApplicationCommandResponse.from_dict(_item) for _item in obj["application_commands"]] if obj.get("application_commands") is not None else None,
            "auto_moderation_rules": [ListAutoModerationRules200ResponseInner.from_dict(_item) for _item in obj["auto_moderation_rules"]] if obj.get("auto_moderation_rules") is not None else None
        })
        return _obj


