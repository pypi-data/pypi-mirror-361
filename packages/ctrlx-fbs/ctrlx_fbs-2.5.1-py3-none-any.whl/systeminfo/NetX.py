# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NetX(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NetX()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNetX(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NetX
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NetX
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NetX
    def Interfaces(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def NetXStart(builder): builder.StartObject(2)
def Start(builder):
    return NetXStart(builder)
def NetXAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return NetXAddName(builder, name)
def NetXAddInterfaces(builder, interfaces): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(interfaces), 0)
def AddInterfaces(builder, interfaces):
    return NetXAddInterfaces(builder, interfaces)
def NetXEnd(builder): return builder.EndObject()
def End(builder):
    return NetXEnd(builder)

class NetXT(object):

    # NetXT
    def __init__(self):
        self.name = None  # type: str
        self.interfaces = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        netX = NetX()
        netX.Init(buf, pos)
        return cls.InitFromObj(netX)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, netX):
        x = NetXT()
        x._UnPack(netX)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.interfaces == other.interfaces

    # NetXT
    def _UnPack(self, netX):
        if netX is None:
            return
        self.name = netX.Name()
        self.interfaces = netX.Interfaces()

    # NetXT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.interfaces is not None:
            interfaces = builder.CreateString(self.interfaces)
        NetXStart(builder)
        if self.name is not None:
            NetXAddName(builder, name)
        if self.interfaces is not None:
            NetXAddInterfaces(builder, interfaces)
        netX = NetXEnd(builder)
        return netX
