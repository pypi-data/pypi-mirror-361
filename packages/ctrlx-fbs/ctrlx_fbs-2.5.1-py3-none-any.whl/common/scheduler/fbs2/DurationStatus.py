# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs2

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Status of the duration measurements and recordings of all tasks and callables
class DurationStatus(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DurationStatus()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDurationStatus(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DurationStatus
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Status of the duration measurements and recordings of all tasks and callables
    # DurationStatus
    def DurationStatus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from common.scheduler.fbs2.durationStatusOfTask import durationStatusOfTask
            obj = durationStatusOfTask()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DurationStatus
    def DurationStatusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DurationStatus
    def DurationStatusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # At least one measurement resp. recording of any task or callable is active
    # DurationStatus
    def Active(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def DurationStatusStart(builder): builder.StartObject(2)
def Start(builder):
    return DurationStatusStart(builder)
def DurationStatusAddDurationStatus(builder, durationStatus): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(durationStatus), 0)
def AddDurationStatus(builder, durationStatus):
    return DurationStatusAddDurationStatus(builder, durationStatus)
def DurationStatusStartDurationStatusVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDurationStatusVector(builder, numElems):
    return DurationStatusStartDurationStatusVector(builder, numElems)
def DurationStatusAddActive(builder, active): builder.PrependBoolSlot(1, active, 0)
def AddActive(builder, active):
    return DurationStatusAddActive(builder, active)
def DurationStatusEnd(builder): return builder.EndObject()
def End(builder):
    return DurationStatusEnd(builder)
import common.scheduler.fbs2.durationStatusOfTask
try:
    from typing import List
except:
    pass

class DurationStatusT(object):

    # DurationStatusT
    def __init__(self):
        self.durationStatus = None  # type: List[common.scheduler.fbs2.durationStatusOfTask.durationStatusOfTaskT]
        self.active = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        durationStatus = DurationStatus()
        durationStatus.Init(buf, pos)
        return cls.InitFromObj(durationStatus)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, durationStatus):
        x = DurationStatusT()
        x._UnPack(durationStatus)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.durationStatus == other.durationStatus and \
            self.active == other.active

    # DurationStatusT
    def _UnPack(self, durationStatus):
        if durationStatus is None:
            return
        if not durationStatus.DurationStatusIsNone():
            self.durationStatus = []
            for i in range(durationStatus.DurationStatusLength()):
                if durationStatus.DurationStatus(i) is None:
                    self.durationStatus.append(None)
                else:
                    durationStatusOfTask_ = common.scheduler.fbs2.durationStatusOfTask.durationStatusOfTaskT.InitFromObj(durationStatus.DurationStatus(i))
                    self.durationStatus.append(durationStatusOfTask_)
        self.active = durationStatus.Active()

    # DurationStatusT
    def Pack(self, builder):
        if self.durationStatus is not None:
            durationStatuslist = []
            for i in range(len(self.durationStatus)):
                durationStatuslist.append(self.durationStatus[i].Pack(builder))
            DurationStatusStartDurationStatusVector(builder, len(self.durationStatus))
            for i in reversed(range(len(self.durationStatus))):
                builder.PrependUOffsetTRelative(durationStatuslist[i])
            durationStatus = builder.EndVector()
        DurationStatusStart(builder)
        if self.durationStatus is not None:
            DurationStatusAddDurationStatus(builder, durationStatus)
        DurationStatusAddActive(builder, self.active)
        durationStatus = DurationStatusEnd(builder)
        return durationStatus
