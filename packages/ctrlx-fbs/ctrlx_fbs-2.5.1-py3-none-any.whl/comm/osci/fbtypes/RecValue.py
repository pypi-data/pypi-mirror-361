# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RecValue(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RecValue()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRecValue(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RecValue
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RecValue
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.Time import Time
            obj = Time()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecValue
    def ValuesBool(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TypeBool import TypeBool
            obj = TypeBool()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecValue
    def ValuesByte(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TypeByte import TypeByte
            obj = TypeByte()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecValue
    def ValuesUbyte(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TypeUbyte import TypeUbyte
            obj = TypeUbyte()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecValue
    def ValuesShort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TypeShort import TypeShort
            obj = TypeShort()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecValue
    def ValuesUshort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TypeUshort import TypeUshort
            obj = TypeUshort()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecValue
    def ValuesInt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TypeInt import TypeInt
            obj = TypeInt()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecValue
    def ValuesUint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TypeUint import TypeUint
            obj = TypeUint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecValue
    def ValuesLong(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TypeLong import TypeLong
            obj = TypeLong()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecValue
    def ValuesUlong(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TypeUlong import TypeUlong
            obj = TypeUlong()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecValue
    def ValuesFloat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TypeFloat import TypeFloat
            obj = TypeFloat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecValue
    def ValuesDouble(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TypeDouble import TypeDouble
            obj = TypeDouble()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RecValue
    def ValuesString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.TypeString import TypeString
            obj = TypeString()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RecValueStart(builder): builder.StartObject(13)
def Start(builder):
    return RecValueStart(builder)
def RecValueAddTime(builder, time): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)
def AddTime(builder, time):
    return RecValueAddTime(builder, time)
def RecValueAddValuesBool(builder, valuesBool): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(valuesBool), 0)
def AddValuesBool(builder, valuesBool):
    return RecValueAddValuesBool(builder, valuesBool)
def RecValueAddValuesByte(builder, valuesByte): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(valuesByte), 0)
def AddValuesByte(builder, valuesByte):
    return RecValueAddValuesByte(builder, valuesByte)
def RecValueAddValuesUbyte(builder, valuesUbyte): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(valuesUbyte), 0)
def AddValuesUbyte(builder, valuesUbyte):
    return RecValueAddValuesUbyte(builder, valuesUbyte)
def RecValueAddValuesShort(builder, valuesShort): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(valuesShort), 0)
def AddValuesShort(builder, valuesShort):
    return RecValueAddValuesShort(builder, valuesShort)
def RecValueAddValuesUshort(builder, valuesUshort): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(valuesUshort), 0)
def AddValuesUshort(builder, valuesUshort):
    return RecValueAddValuesUshort(builder, valuesUshort)
def RecValueAddValuesInt(builder, valuesInt): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(valuesInt), 0)
def AddValuesInt(builder, valuesInt):
    return RecValueAddValuesInt(builder, valuesInt)
def RecValueAddValuesUint(builder, valuesUint): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(valuesUint), 0)
def AddValuesUint(builder, valuesUint):
    return RecValueAddValuesUint(builder, valuesUint)
def RecValueAddValuesLong(builder, valuesLong): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(valuesLong), 0)
def AddValuesLong(builder, valuesLong):
    return RecValueAddValuesLong(builder, valuesLong)
def RecValueAddValuesUlong(builder, valuesUlong): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(valuesUlong), 0)
def AddValuesUlong(builder, valuesUlong):
    return RecValueAddValuesUlong(builder, valuesUlong)
def RecValueAddValuesFloat(builder, valuesFloat): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(valuesFloat), 0)
def AddValuesFloat(builder, valuesFloat):
    return RecValueAddValuesFloat(builder, valuesFloat)
def RecValueAddValuesDouble(builder, valuesDouble): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(valuesDouble), 0)
def AddValuesDouble(builder, valuesDouble):
    return RecValueAddValuesDouble(builder, valuesDouble)
def RecValueAddValuesString(builder, valuesString): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(valuesString), 0)
def AddValuesString(builder, valuesString):
    return RecValueAddValuesString(builder, valuesString)
def RecValueEnd(builder): return builder.EndObject()
def End(builder):
    return RecValueEnd(builder)
import comm.osci.fbtypes.Time
import comm.osci.fbtypes.TypeBool
import comm.osci.fbtypes.TypeByte
import comm.osci.fbtypes.TypeDouble
import comm.osci.fbtypes.TypeFloat
import comm.osci.fbtypes.TypeInt
import comm.osci.fbtypes.TypeLong
import comm.osci.fbtypes.TypeShort
import comm.osci.fbtypes.TypeString
import comm.osci.fbtypes.TypeUbyte
import comm.osci.fbtypes.TypeUint
import comm.osci.fbtypes.TypeUlong
import comm.osci.fbtypes.TypeUshort
try:
    from typing import Optional
except:
    pass

class RecValueT(object):

    # RecValueT
    def __init__(self):
        self.time = None  # type: Optional[comm.osci.fbtypes.Time.TimeT]
        self.valuesBool = None  # type: Optional[comm.osci.fbtypes.TypeBool.TypeBoolT]
        self.valuesByte = None  # type: Optional[comm.osci.fbtypes.TypeByte.TypeByteT]
        self.valuesUbyte = None  # type: Optional[comm.osci.fbtypes.TypeUbyte.TypeUbyteT]
        self.valuesShort = None  # type: Optional[comm.osci.fbtypes.TypeShort.TypeShortT]
        self.valuesUshort = None  # type: Optional[comm.osci.fbtypes.TypeUshort.TypeUshortT]
        self.valuesInt = None  # type: Optional[comm.osci.fbtypes.TypeInt.TypeIntT]
        self.valuesUint = None  # type: Optional[comm.osci.fbtypes.TypeUint.TypeUintT]
        self.valuesLong = None  # type: Optional[comm.osci.fbtypes.TypeLong.TypeLongT]
        self.valuesUlong = None  # type: Optional[comm.osci.fbtypes.TypeUlong.TypeUlongT]
        self.valuesFloat = None  # type: Optional[comm.osci.fbtypes.TypeFloat.TypeFloatT]
        self.valuesDouble = None  # type: Optional[comm.osci.fbtypes.TypeDouble.TypeDoubleT]
        self.valuesString = None  # type: Optional[comm.osci.fbtypes.TypeString.TypeStringT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        recValue = RecValue()
        recValue.Init(buf, pos)
        return cls.InitFromObj(recValue)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, recValue):
        x = RecValueT()
        x._UnPack(recValue)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.time == other.time and \
            self.valuesBool == other.valuesBool and \
            self.valuesByte == other.valuesByte and \
            self.valuesUbyte == other.valuesUbyte and \
            self.valuesShort == other.valuesShort and \
            self.valuesUshort == other.valuesUshort and \
            self.valuesInt == other.valuesInt and \
            self.valuesUint == other.valuesUint and \
            self.valuesLong == other.valuesLong and \
            self.valuesUlong == other.valuesUlong and \
            self.valuesFloat == other.valuesFloat and \
            self.valuesDouble == other.valuesDouble and \
            self.valuesString == other.valuesString

    # RecValueT
    def _UnPack(self, recValue):
        if recValue is None:
            return
        if recValue.Time() is not None:
            self.time = comm.osci.fbtypes.Time.TimeT.InitFromObj(recValue.Time())
        if recValue.ValuesBool() is not None:
            self.valuesBool = comm.osci.fbtypes.TypeBool.TypeBoolT.InitFromObj(recValue.ValuesBool())
        if recValue.ValuesByte() is not None:
            self.valuesByte = comm.osci.fbtypes.TypeByte.TypeByteT.InitFromObj(recValue.ValuesByte())
        if recValue.ValuesUbyte() is not None:
            self.valuesUbyte = comm.osci.fbtypes.TypeUbyte.TypeUbyteT.InitFromObj(recValue.ValuesUbyte())
        if recValue.ValuesShort() is not None:
            self.valuesShort = comm.osci.fbtypes.TypeShort.TypeShortT.InitFromObj(recValue.ValuesShort())
        if recValue.ValuesUshort() is not None:
            self.valuesUshort = comm.osci.fbtypes.TypeUshort.TypeUshortT.InitFromObj(recValue.ValuesUshort())
        if recValue.ValuesInt() is not None:
            self.valuesInt = comm.osci.fbtypes.TypeInt.TypeIntT.InitFromObj(recValue.ValuesInt())
        if recValue.ValuesUint() is not None:
            self.valuesUint = comm.osci.fbtypes.TypeUint.TypeUintT.InitFromObj(recValue.ValuesUint())
        if recValue.ValuesLong() is not None:
            self.valuesLong = comm.osci.fbtypes.TypeLong.TypeLongT.InitFromObj(recValue.ValuesLong())
        if recValue.ValuesUlong() is not None:
            self.valuesUlong = comm.osci.fbtypes.TypeUlong.TypeUlongT.InitFromObj(recValue.ValuesUlong())
        if recValue.ValuesFloat() is not None:
            self.valuesFloat = comm.osci.fbtypes.TypeFloat.TypeFloatT.InitFromObj(recValue.ValuesFloat())
        if recValue.ValuesDouble() is not None:
            self.valuesDouble = comm.osci.fbtypes.TypeDouble.TypeDoubleT.InitFromObj(recValue.ValuesDouble())
        if recValue.ValuesString() is not None:
            self.valuesString = comm.osci.fbtypes.TypeString.TypeStringT.InitFromObj(recValue.ValuesString())

    # RecValueT
    def Pack(self, builder):
        if self.time is not None:
            time = self.time.Pack(builder)
        if self.valuesBool is not None:
            valuesBool = self.valuesBool.Pack(builder)
        if self.valuesByte is not None:
            valuesByte = self.valuesByte.Pack(builder)
        if self.valuesUbyte is not None:
            valuesUbyte = self.valuesUbyte.Pack(builder)
        if self.valuesShort is not None:
            valuesShort = self.valuesShort.Pack(builder)
        if self.valuesUshort is not None:
            valuesUshort = self.valuesUshort.Pack(builder)
        if self.valuesInt is not None:
            valuesInt = self.valuesInt.Pack(builder)
        if self.valuesUint is not None:
            valuesUint = self.valuesUint.Pack(builder)
        if self.valuesLong is not None:
            valuesLong = self.valuesLong.Pack(builder)
        if self.valuesUlong is not None:
            valuesUlong = self.valuesUlong.Pack(builder)
        if self.valuesFloat is not None:
            valuesFloat = self.valuesFloat.Pack(builder)
        if self.valuesDouble is not None:
            valuesDouble = self.valuesDouble.Pack(builder)
        if self.valuesString is not None:
            valuesString = self.valuesString.Pack(builder)
        RecValueStart(builder)
        if self.time is not None:
            RecValueAddTime(builder, time)
        if self.valuesBool is not None:
            RecValueAddValuesBool(builder, valuesBool)
        if self.valuesByte is not None:
            RecValueAddValuesByte(builder, valuesByte)
        if self.valuesUbyte is not None:
            RecValueAddValuesUbyte(builder, valuesUbyte)
        if self.valuesShort is not None:
            RecValueAddValuesShort(builder, valuesShort)
        if self.valuesUshort is not None:
            RecValueAddValuesUshort(builder, valuesUshort)
        if self.valuesInt is not None:
            RecValueAddValuesInt(builder, valuesInt)
        if self.valuesUint is not None:
            RecValueAddValuesUint(builder, valuesUint)
        if self.valuesLong is not None:
            RecValueAddValuesLong(builder, valuesLong)
        if self.valuesUlong is not None:
            RecValueAddValuesUlong(builder, valuesUlong)
        if self.valuesFloat is not None:
            RecValueAddValuesFloat(builder, valuesFloat)
        if self.valuesDouble is not None:
            RecValueAddValuesDouble(builder, valuesDouble)
        if self.valuesString is not None:
            RecValueAddValuesString(builder, valuesString)
        recValue = RecValueEnd(builder)
        return recValue
