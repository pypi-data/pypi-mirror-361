# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single calculation pipeline
class CalcPipelineCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CalcPipelineCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCalcPipelineCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CalcPipelineCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the calculation pipeline
    # CalcPipelineCfg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # is this a generic pipeline (when not, its provided by a command and is read-only)
    # CalcPipelineCfg
    def Generic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # vector of all calculation steps
    # CalcPipelineCfg
    def Steps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.CalcStepCfg import CalcStepCfg
            obj = CalcStepCfg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CalcPipelineCfg
    def StepsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CalcPipelineCfg
    def StepsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def CalcPipelineCfgStart(builder): builder.StartObject(3)
def Start(builder):
    return CalcPipelineCfgStart(builder)
def CalcPipelineCfgAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return CalcPipelineCfgAddName(builder, name)
def CalcPipelineCfgAddGeneric(builder, generic): builder.PrependBoolSlot(1, generic, 1)
def AddGeneric(builder, generic):
    return CalcPipelineCfgAddGeneric(builder, generic)
def CalcPipelineCfgAddSteps(builder, steps): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(steps), 0)
def AddSteps(builder, steps):
    return CalcPipelineCfgAddSteps(builder, steps)
def CalcPipelineCfgStartStepsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStepsVector(builder, numElems):
    return CalcPipelineCfgStartStepsVector(builder, numElems)
def CalcPipelineCfgEnd(builder): return builder.EndObject()
def End(builder):
    return CalcPipelineCfgEnd(builder)
import motion.sync.fbtypes.CalcStepCfg
try:
    from typing import List
except:
    pass

class CalcPipelineCfgT(object):

    # CalcPipelineCfgT
    def __init__(self):
        self.name = None  # type: str
        self.generic = True  # type: bool
        self.steps = None  # type: List[motion.sync.fbtypes.CalcStepCfg.CalcStepCfgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        calcPipelineCfg = CalcPipelineCfg()
        calcPipelineCfg.Init(buf, pos)
        return cls.InitFromObj(calcPipelineCfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, calcPipelineCfg):
        x = CalcPipelineCfgT()
        x._UnPack(calcPipelineCfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.generic == other.generic and \
            self.steps == other.steps

    # CalcPipelineCfgT
    def _UnPack(self, calcPipelineCfg):
        if calcPipelineCfg is None:
            return
        self.name = calcPipelineCfg.Name()
        self.generic = calcPipelineCfg.Generic()
        if not calcPipelineCfg.StepsIsNone():
            self.steps = []
            for i in range(calcPipelineCfg.StepsLength()):
                if calcPipelineCfg.Steps(i) is None:
                    self.steps.append(None)
                else:
                    calcStepCfg_ = motion.sync.fbtypes.CalcStepCfg.CalcStepCfgT.InitFromObj(calcPipelineCfg.Steps(i))
                    self.steps.append(calcStepCfg_)

    # CalcPipelineCfgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.steps is not None:
            stepslist = []
            for i in range(len(self.steps)):
                stepslist.append(self.steps[i].Pack(builder))
            CalcPipelineCfgStartStepsVector(builder, len(self.steps))
            for i in reversed(range(len(self.steps))):
                builder.PrependUOffsetTRelative(stepslist[i])
            steps = builder.EndVector()
        CalcPipelineCfgStart(builder)
        if self.name is not None:
            CalcPipelineCfgAddName(builder, name)
        CalcPipelineCfgAddGeneric(builder, self.generic)
        if self.steps is not None:
            CalcPipelineCfgAddSteps(builder, steps)
        calcPipelineCfg = CalcPipelineCfgEnd(builder)
        return calcPipelineCfg
