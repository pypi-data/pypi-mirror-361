name: Release to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.0, v1.2.3, etc.

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
    
    - name: Run tests
      run: |
        uv run python test_installation.py
    
    # - name: Run linting
    #   run: |
    #     uv run ruff check .
    #     uv run black --check .

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install build dependencies
      run: uv sync --dev
    
    - name: Build package
      run: uv run python -m build
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    environment: release
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use trusted publishing (recommended) or fallback to token
        # For trusted publishing, configure at https://pypi.org/manage/account/publishing/
        # For token-based auth, add PYPI_API_TOKEN to repository secrets
        password: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Extract release notes
      id: extract-notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Create release notes (you can customize this)
        cat > release_notes.md << EOF
        ## AUGR v$VERSION
        
        ### ðŸš€ Installation
        
        \`\`\`bash
        pip install augr==$VERSION
        \`\`\`
        
        ### ðŸ“¦ What's New
        
        - Bug fixes and improvements
        - See commit history for detailed changes
        
        ### ðŸ”§ Usage
        
        \`\`\`bash
        # Just run the tool - it will guide you through setup
        augr
        \`\`\`
        EOF
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: AUGR ${{ steps.extract-notes.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: augr-${{ steps.extract-notes.outputs.version }}-dist.zip
        asset_content_type: application/zip 