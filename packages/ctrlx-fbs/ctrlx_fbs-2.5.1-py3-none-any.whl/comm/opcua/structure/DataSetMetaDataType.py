# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DataSetMetaDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataSetMetaDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataSetMetaDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DataSetMetaDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DataSetMetaDataType
    def Namespaces(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataSetMetaDataType
    def NamespacesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataSetMetaDataType
    def NamespacesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DataSetMetaDataType
    def StructureDataTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.StructureDescription import StructureDescription
            obj = StructureDescription()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetMetaDataType
    def StructureDataTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataSetMetaDataType
    def StructureDataTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # DataSetMetaDataType
    def EnumDataTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.EnumDescription import EnumDescription
            obj = EnumDescription()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetMetaDataType
    def EnumDataTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataSetMetaDataType
    def EnumDataTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # DataSetMetaDataType
    def SimpleDataTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.SimpleTypeDescription import SimpleTypeDescription
            obj = SimpleTypeDescription()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetMetaDataType
    def SimpleDataTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataSetMetaDataType
    def SimpleDataTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # DataSetMetaDataType
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DataSetMetaDataType
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.LocalizedText import LocalizedText
            obj = LocalizedText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetMetaDataType
    def Fields(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.FieldMetaData import FieldMetaData
            obj = FieldMetaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetMetaDataType
    def FieldsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataSetMetaDataType
    def FieldsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # DataSetMetaDataType
    def DataSetClassId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.Guid import Guid
            obj = Guid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSetMetaDataType
    def ConfigurationVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.structure.ConfigurationVersionDataType import ConfigurationVersionDataType
            obj = ConfigurationVersionDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DataSetMetaDataTypeStart(builder): builder.StartObject(9)
def Start(builder):
    return DataSetMetaDataTypeStart(builder)
def DataSetMetaDataTypeAddNamespaces(builder, namespaces): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(namespaces), 0)
def AddNamespaces(builder, namespaces):
    return DataSetMetaDataTypeAddNamespaces(builder, namespaces)
def DataSetMetaDataTypeStartNamespacesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartNamespacesVector(builder, numElems):
    return DataSetMetaDataTypeStartNamespacesVector(builder, numElems)
def DataSetMetaDataTypeAddStructureDataTypes(builder, structureDataTypes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(structureDataTypes), 0)
def AddStructureDataTypes(builder, structureDataTypes):
    return DataSetMetaDataTypeAddStructureDataTypes(builder, structureDataTypes)
def DataSetMetaDataTypeStartStructureDataTypesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStructureDataTypesVector(builder, numElems):
    return DataSetMetaDataTypeStartStructureDataTypesVector(builder, numElems)
def DataSetMetaDataTypeAddEnumDataTypes(builder, enumDataTypes): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(enumDataTypes), 0)
def AddEnumDataTypes(builder, enumDataTypes):
    return DataSetMetaDataTypeAddEnumDataTypes(builder, enumDataTypes)
def DataSetMetaDataTypeStartEnumDataTypesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEnumDataTypesVector(builder, numElems):
    return DataSetMetaDataTypeStartEnumDataTypesVector(builder, numElems)
def DataSetMetaDataTypeAddSimpleDataTypes(builder, simpleDataTypes): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(simpleDataTypes), 0)
def AddSimpleDataTypes(builder, simpleDataTypes):
    return DataSetMetaDataTypeAddSimpleDataTypes(builder, simpleDataTypes)
def DataSetMetaDataTypeStartSimpleDataTypesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSimpleDataTypesVector(builder, numElems):
    return DataSetMetaDataTypeStartSimpleDataTypesVector(builder, numElems)
def DataSetMetaDataTypeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return DataSetMetaDataTypeAddName(builder, name)
def DataSetMetaDataTypeAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return DataSetMetaDataTypeAddDescription(builder, description)
def DataSetMetaDataTypeAddFields(builder, fields): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(fields), 0)
def AddFields(builder, fields):
    return DataSetMetaDataTypeAddFields(builder, fields)
def DataSetMetaDataTypeStartFieldsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartFieldsVector(builder, numElems):
    return DataSetMetaDataTypeStartFieldsVector(builder, numElems)
def DataSetMetaDataTypeAddDataSetClassId(builder, dataSetClassId): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetClassId), 0)
def AddDataSetClassId(builder, dataSetClassId):
    return DataSetMetaDataTypeAddDataSetClassId(builder, dataSetClassId)
def DataSetMetaDataTypeAddConfigurationVersion(builder, configurationVersion): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(configurationVersion), 0)
def AddConfigurationVersion(builder, configurationVersion):
    return DataSetMetaDataTypeAddConfigurationVersion(builder, configurationVersion)
def DataSetMetaDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return DataSetMetaDataTypeEnd(builder)
import comm.opcua.builtin.Guid
import comm.opcua.builtin.LocalizedText
import comm.opcua.structure.ConfigurationVersionDataType
import comm.opcua.structure.EnumDescription
import comm.opcua.structure.FieldMetaData
import comm.opcua.structure.SimpleTypeDescription
import comm.opcua.structure.StructureDescription
try:
    from typing import List, Optional
except:
    pass

class DataSetMetaDataTypeT(object):

    # DataSetMetaDataTypeT
    def __init__(self):
        self.namespaces = None  # type: List[str]
        self.structureDataTypes = None  # type: List[comm.opcua.structure.StructureDescription.StructureDescriptionT]
        self.enumDataTypes = None  # type: List[comm.opcua.structure.EnumDescription.EnumDescriptionT]
        self.simpleDataTypes = None  # type: List[comm.opcua.structure.SimpleTypeDescription.SimpleTypeDescriptionT]
        self.name = None  # type: str
        self.description = None  # type: Optional[comm.opcua.builtin.LocalizedText.LocalizedTextT]
        self.fields = None  # type: List[comm.opcua.structure.FieldMetaData.FieldMetaDataT]
        self.dataSetClassId = None  # type: Optional[comm.opcua.builtin.Guid.GuidT]
        self.configurationVersion = None  # type: Optional[comm.opcua.structure.ConfigurationVersionDataType.ConfigurationVersionDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataSetMetaDataType = DataSetMetaDataType()
        dataSetMetaDataType.Init(buf, pos)
        return cls.InitFromObj(dataSetMetaDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataSetMetaDataType):
        x = DataSetMetaDataTypeT()
        x._UnPack(dataSetMetaDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.namespaces == other.namespaces and \
            self.structureDataTypes == other.structureDataTypes and \
            self.enumDataTypes == other.enumDataTypes and \
            self.simpleDataTypes == other.simpleDataTypes and \
            self.name == other.name and \
            self.description == other.description and \
            self.fields == other.fields and \
            self.dataSetClassId == other.dataSetClassId and \
            self.configurationVersion == other.configurationVersion

    # DataSetMetaDataTypeT
    def _UnPack(self, dataSetMetaDataType):
        if dataSetMetaDataType is None:
            return
        if not dataSetMetaDataType.NamespacesIsNone():
            self.namespaces = []
            for i in range(dataSetMetaDataType.NamespacesLength()):
                self.namespaces.append(dataSetMetaDataType.Namespaces(i))
        if not dataSetMetaDataType.StructureDataTypesIsNone():
            self.structureDataTypes = []
            for i in range(dataSetMetaDataType.StructureDataTypesLength()):
                if dataSetMetaDataType.StructureDataTypes(i) is None:
                    self.structureDataTypes.append(None)
                else:
                    structureDescription_ = comm.opcua.structure.StructureDescription.StructureDescriptionT.InitFromObj(dataSetMetaDataType.StructureDataTypes(i))
                    self.structureDataTypes.append(structureDescription_)
        if not dataSetMetaDataType.EnumDataTypesIsNone():
            self.enumDataTypes = []
            for i in range(dataSetMetaDataType.EnumDataTypesLength()):
                if dataSetMetaDataType.EnumDataTypes(i) is None:
                    self.enumDataTypes.append(None)
                else:
                    enumDescription_ = comm.opcua.structure.EnumDescription.EnumDescriptionT.InitFromObj(dataSetMetaDataType.EnumDataTypes(i))
                    self.enumDataTypes.append(enumDescription_)
        if not dataSetMetaDataType.SimpleDataTypesIsNone():
            self.simpleDataTypes = []
            for i in range(dataSetMetaDataType.SimpleDataTypesLength()):
                if dataSetMetaDataType.SimpleDataTypes(i) is None:
                    self.simpleDataTypes.append(None)
                else:
                    simpleTypeDescription_ = comm.opcua.structure.SimpleTypeDescription.SimpleTypeDescriptionT.InitFromObj(dataSetMetaDataType.SimpleDataTypes(i))
                    self.simpleDataTypes.append(simpleTypeDescription_)
        self.name = dataSetMetaDataType.Name()
        if dataSetMetaDataType.Description() is not None:
            self.description = comm.opcua.builtin.LocalizedText.LocalizedTextT.InitFromObj(dataSetMetaDataType.Description())
        if not dataSetMetaDataType.FieldsIsNone():
            self.fields = []
            for i in range(dataSetMetaDataType.FieldsLength()):
                if dataSetMetaDataType.Fields(i) is None:
                    self.fields.append(None)
                else:
                    fieldMetaData_ = comm.opcua.structure.FieldMetaData.FieldMetaDataT.InitFromObj(dataSetMetaDataType.Fields(i))
                    self.fields.append(fieldMetaData_)
        if dataSetMetaDataType.DataSetClassId() is not None:
            self.dataSetClassId = comm.opcua.builtin.Guid.GuidT.InitFromObj(dataSetMetaDataType.DataSetClassId())
        if dataSetMetaDataType.ConfigurationVersion() is not None:
            self.configurationVersion = comm.opcua.structure.ConfigurationVersionDataType.ConfigurationVersionDataTypeT.InitFromObj(dataSetMetaDataType.ConfigurationVersion())

    # DataSetMetaDataTypeT
    def Pack(self, builder):
        if self.namespaces is not None:
            namespaceslist = []
            for i in range(len(self.namespaces)):
                namespaceslist.append(builder.CreateString(self.namespaces[i]))
            DataSetMetaDataTypeStartNamespacesVector(builder, len(self.namespaces))
            for i in reversed(range(len(self.namespaces))):
                builder.PrependUOffsetTRelative(namespaceslist[i])
            namespaces = builder.EndVector()
        if self.structureDataTypes is not None:
            structureDataTypeslist = []
            for i in range(len(self.structureDataTypes)):
                structureDataTypeslist.append(self.structureDataTypes[i].Pack(builder))
            DataSetMetaDataTypeStartStructureDataTypesVector(builder, len(self.structureDataTypes))
            for i in reversed(range(len(self.structureDataTypes))):
                builder.PrependUOffsetTRelative(structureDataTypeslist[i])
            structureDataTypes = builder.EndVector()
        if self.enumDataTypes is not None:
            enumDataTypeslist = []
            for i in range(len(self.enumDataTypes)):
                enumDataTypeslist.append(self.enumDataTypes[i].Pack(builder))
            DataSetMetaDataTypeStartEnumDataTypesVector(builder, len(self.enumDataTypes))
            for i in reversed(range(len(self.enumDataTypes))):
                builder.PrependUOffsetTRelative(enumDataTypeslist[i])
            enumDataTypes = builder.EndVector()
        if self.simpleDataTypes is not None:
            simpleDataTypeslist = []
            for i in range(len(self.simpleDataTypes)):
                simpleDataTypeslist.append(self.simpleDataTypes[i].Pack(builder))
            DataSetMetaDataTypeStartSimpleDataTypesVector(builder, len(self.simpleDataTypes))
            for i in reversed(range(len(self.simpleDataTypes))):
                builder.PrependUOffsetTRelative(simpleDataTypeslist[i])
            simpleDataTypes = builder.EndVector()
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = self.description.Pack(builder)
        if self.fields is not None:
            fieldslist = []
            for i in range(len(self.fields)):
                fieldslist.append(self.fields[i].Pack(builder))
            DataSetMetaDataTypeStartFieldsVector(builder, len(self.fields))
            for i in reversed(range(len(self.fields))):
                builder.PrependUOffsetTRelative(fieldslist[i])
            fields = builder.EndVector()
        if self.dataSetClassId is not None:
            dataSetClassId = self.dataSetClassId.Pack(builder)
        if self.configurationVersion is not None:
            configurationVersion = self.configurationVersion.Pack(builder)
        DataSetMetaDataTypeStart(builder)
        if self.namespaces is not None:
            DataSetMetaDataTypeAddNamespaces(builder, namespaces)
        if self.structureDataTypes is not None:
            DataSetMetaDataTypeAddStructureDataTypes(builder, structureDataTypes)
        if self.enumDataTypes is not None:
            DataSetMetaDataTypeAddEnumDataTypes(builder, enumDataTypes)
        if self.simpleDataTypes is not None:
            DataSetMetaDataTypeAddSimpleDataTypes(builder, simpleDataTypes)
        if self.name is not None:
            DataSetMetaDataTypeAddName(builder, name)
        if self.description is not None:
            DataSetMetaDataTypeAddDescription(builder, description)
        if self.fields is not None:
            DataSetMetaDataTypeAddFields(builder, fields)
        if self.dataSetClassId is not None:
            DataSetMetaDataTypeAddDataSetClassId(builder, dataSetClassId)
        if self.configurationVersion is not None:
            DataSetMetaDataTypeAddConfigurationVersion(builder, configurationVersion)
        dataSetMetaDataType = DataSetMetaDataTypeEnd(builder)
        return dataSetMetaDataType
