[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "richpyls"
dynamic = ["version"]
description = "A modern, type-annotated Python implementation of the Unix ls command with beautiful Rich formatting and color-coded file types"
readme = "README.md"
license = "MIT"
requires-python = ">=3.13"
authors = [
    { name = "Leodanis Pozo Ramos", email = "lpozor78@gmail.com" },
]
maintainers = [
    { name = "Leodanis Pozo Ramos", email = "lpozor78@gmail.com" },
]
keywords = [
    "ls",
    "unix",
    "cli",
    "file-listing",
    "directory",
    "command-line",
    "tree",
    "tree-view",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: System :: Filesystems",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    "click>=8.2.1",
    "rich>=14.0.0",
]

[project.urls]
"Homepage" = "https://github.com/lpozo/richpyls"
"Bug Reports" = "https://github.com/lpozo/richpyls/issues"
"Source" = "https://github.com/lpozo/richpyls"
"Documentation" = "https://github.com/lpozo/richpyls#readme"

[project.scripts]
richpyls = "richpyls:cli"

[dependency-groups]
dev = [
    "mypy>=1.16.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff==0.12.3",
    "pre-commit>=4.0.1",
]
publish = [
    "build>=1.0.0",
    "twine>=4.0.0",
]

[tool.hatch.version]
path = "src/richpyls/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/richpyls"]
sources = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "README.md",
    "LICENSE",
    "tests/",
]

[tool.ruff]
# Ruff configuration for code formatting and linting
line-length = 88
target-version = "py313"

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "I",      # isort
    "N",      # pep8-naming
    "D",      # pydocstyle
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "TD",     # flake8-todos
    "FIX",    # flake8-fixme
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # NumPy
    "PERF",   # Perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "RUF",    # Ruff-specific rules
]

# Ignore specific rules that may be too strict for this project
ignore = [
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D203",   # 1 blank line required before class docstring
    "D213",   # Multi-line docstring summary should start at the second line
    "S101",   # Use of assert detected
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default arg in function definition
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue link on the line following this TODO
    "FIX002", # Line contains TODO, consider resolving the issue
    "COM812", # Trailing comma missing (conflicts with formatter)
    "ISC001", # Implicitly concatenated string literals (conflicts with formatter)
    "PLR0913", # Too many arguments in function definition
    "ARG001", # Unused function argument
    "ARG005", # Unused lambda argument
    "D415",   # First line should end with a period
    "PLC0415", # Import should be at the top-level
]

[tool.ruff.lint.per-file-ignores]
# Test files can have additional ignores
"tests/**/*.py" = [
    "S101",   # Use of assert detected (OK in tests)
    "PLR2004", # Magic value used in comparison
    "D103",   # Missing docstring in public function (OK in tests)
    "D101",   # Missing docstring in public class (OK in tests)
    "D107",   # Missing docstring in __init__ (OK in tests)
    "INP001", # Part of implicit namespace package (OK in tests)
]
# Utility scripts can have relaxed rules
"bump_version.py" = [
    "T20",    # Print statements (OK in CLI scripts)
    "S602",   # Subprocess calls (OK in build scripts)
    "S603",   # Subprocess calls without shell (OK in build scripts)
    "S607",   # Starting process with partial executable path (OK in dev scripts)
    "PLR2004", # Magic value used in comparison
    "TRY300", # Consider moving statement to else block
    "TRY003", # Avoid specifying long messages outside exception class
    "F841",   # Local variable assigned but never used
    "D103",   # Missing docstring in public function
    "E501",   # Line too long
    "SIM102", # Use single if statement
    "BLE001", # Do not catch blind exception
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Indent with spaces
indent-style = "space"
# Respect magic trailing commas
skip-magic-trailing-comma = false
# Auto-detect line ending
line-ending = "auto"

[tool.bandit]
# Bandit configuration for security scanning
exclude = "tests,bump_version.py"  # Skip test directory and utility scripts
skips = ["B101"]  # Skip assert_used test
