# automatically generated by the FlatBuffers compiler, do not modify

# namespace: automation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StatsSSESubscriptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StatsSSESubscriptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStatsSSESubscriptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StatsSSESubscriptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StatsSSESubscriptions
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StatsSSESubscriptions
    def UsageCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # StatsSSESubscriptions
    def LastUsed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # StatsSSESubscriptions
    def Timeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # StatsSSESubscriptions
    def Subscription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.Subscription import Subscription
            obj = Subscription()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def StatsSSESubscriptionsStart(builder): builder.StartObject(5)
def Start(builder):
    return StatsSSESubscriptionsStart(builder)
def StatsSSESubscriptionsAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return StatsSSESubscriptionsAddName(builder, name)
def StatsSSESubscriptionsAddUsageCounter(builder, usageCounter): builder.PrependUint32Slot(1, usageCounter, 0)
def AddUsageCounter(builder, usageCounter):
    return StatsSSESubscriptionsAddUsageCounter(builder, usageCounter)
def StatsSSESubscriptionsAddLastUsed(builder, lastUsed): builder.PrependUint64Slot(2, lastUsed, 0)
def AddLastUsed(builder, lastUsed):
    return StatsSSESubscriptionsAddLastUsed(builder, lastUsed)
def StatsSSESubscriptionsAddTimeout(builder, timeout): builder.PrependUint32Slot(3, timeout, 0)
def AddTimeout(builder, timeout):
    return StatsSSESubscriptionsAddTimeout(builder, timeout)
def StatsSSESubscriptionsAddSubscription(builder, subscription): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(subscription), 0)
def AddSubscription(builder, subscription):
    return StatsSSESubscriptionsAddSubscription(builder, subscription)
def StatsSSESubscriptionsEnd(builder): return builder.EndObject()
def End(builder):
    return StatsSSESubscriptionsEnd(builder)
import comm.datalayer.Subscription
try:
    from typing import Optional
except:
    pass

class StatsSSESubscriptionsT(object):

    # StatsSSESubscriptionsT
    def __init__(self):
        self.name = None  # type: str
        self.usageCounter = 0  # type: int
        self.lastUsed = 0  # type: int
        self.timeout = 0  # type: int
        self.subscription = None  # type: Optional[comm.datalayer.Subscription.SubscriptionT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        statsSsesubscriptions = StatsSSESubscriptions()
        statsSsesubscriptions.Init(buf, pos)
        return cls.InitFromObj(statsSsesubscriptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, statsSsesubscriptions):
        x = StatsSSESubscriptionsT()
        x._UnPack(statsSsesubscriptions)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.usageCounter == other.usageCounter and \
            self.lastUsed == other.lastUsed and \
            self.timeout == other.timeout and \
            self.subscription == other.subscription

    # StatsSSESubscriptionsT
    def _UnPack(self, statsSsesubscriptions):
        if statsSsesubscriptions is None:
            return
        self.name = statsSsesubscriptions.Name()
        self.usageCounter = statsSsesubscriptions.UsageCounter()
        self.lastUsed = statsSsesubscriptions.LastUsed()
        self.timeout = statsSsesubscriptions.Timeout()
        if statsSsesubscriptions.Subscription() is not None:
            self.subscription = comm.datalayer.Subscription.SubscriptionT.InitFromObj(statsSsesubscriptions.Subscription())

    # StatsSSESubscriptionsT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.subscription is not None:
            subscription = self.subscription.Pack(builder)
        StatsSSESubscriptionsStart(builder)
        if self.name is not None:
            StatsSSESubscriptionsAddName(builder, name)
        StatsSSESubscriptionsAddUsageCounter(builder, self.usageCounter)
        StatsSSESubscriptionsAddLastUsed(builder, self.lastUsed)
        StatsSSESubscriptionsAddTimeout(builder, self.timeout)
        if self.subscription is not None:
            StatsSSESubscriptionsAddSubscription(builder, subscription)
        statsSsesubscriptions = StatsSSESubscriptionsEnd(builder)
        return statsSsesubscriptions
