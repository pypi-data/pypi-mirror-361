// This file is @generated by ptolemy <3.

pub const USER_API_KEYS_QUERY: &'static str = r###"UserApiKeys"###;

pub const USER_WORKSPACES_QUERY: &'static str = r###"UserWorkspaces"###;

pub const SEARCH_USERS_QUERY: &'static str = r###"SearchUsers"###;

pub const WORKSPACE_USERS_QUERY: &'static str = r###"WorkspaceUsers"###;

pub const WORKSPACE_SERVICE_API_KEYS_QUERY: &'static str = r###"WorkspaceServiceApiKeys"###;

pub const ME_QUERY: &'static str = r###"Me"###;

pub const CREATE_USER_API_KEY_MUTATION: &'static str = r###"CreateUserApiKey"###;

pub const UPDATE_USER_MUTATION: &'static str = r###"UpdateUser"###;

pub const CHANGE_USER_PASSWORD_MUTATION: &'static str = r###"ChangeUserPassword"###;

pub const CREATE_USER_MUTATION: &'static str = r###"CreateUser"###;

pub const DELETE_USER_API_KEY_MUTATION: &'static str = r###"DeleteUserApiKey"###;

pub const DELETE_USER_MUTATION: &'static str = r###"DeleteUser"###;

pub const ADD_USER_TO_WORKSPACE_MUTATION: &'static str = r###"AddUserToWorkspace"###;

pub const CHANGE_WORKSPACE_USER_ROLE_MUTATION: &'static str = r###"ChangeWorkspaceUserRole"###;

pub const CREATE_SERVICE_API_KEY_MUTATION: &'static str = r###"CreateServiceApiKey"###;

pub const DELETE_SERVICE_API_KEY_MUTATION: &'static str = r###"DeleteServiceApiKey"###;

pub const CREATE_WORKSPACE_MUTATION: &'static str = r###"CreateWorkspace"###;

pub const REMOVE_USER_FROM_WORKSPACE_MUTATION: &'static str = r###"RemoveUserFromWorkspace"###;

pub const DELETE_WORKSPACE_MUTATION: &'static str = r###"DeleteWorkspace"###;

pub const QUERY: &'static str = r###"query UserApiKeys($userId: UUID) {
  user(id: $userId) {
    userApiKeys {
      expiresAt
      id
      keyPreview
      name
      userId
    }
  }
}

query UserWorkspaces($userId: UUID, $username: String) {
  user(id: $userId, username: $username) {
    workspaces {
      ...ReturnsWorkspace
      users(username: $username) {
        role
      }
    }
  }
}

query SearchUsers($username: String, $userId: UUID) {
  user(username: $username, id: $userId) {
    ...ReturnsUser
  }
}

query WorkspaceUsers($workspaceId: UUID, $workspaceName: String, $userId: UUID, $username: String) {
  workspace(id: $workspaceId, name: $workspaceName) {
    users(id: $userId, username: $username) {
      role
      user {
        ...ReturnsUser
      }
    }
  }
}

query WorkspaceServiceApiKeys($workspaceId: UUID) {
  workspace(id: $workspaceId) {
    serviceApiKeys {
      id
      expiresAt
      keyPreview
      name
      permissions
      workspaceId
    }
  }
}

query Me {
  me {
    ...ReturnsUser
  }
}

fragment ReturnsUser on User {
  displayName
  id
  isAdmin
  isSysadmin
  status
  username
}

fragment ReturnsWorkspace on Workspace {
  archived
  description
  id
  name
  createdAt
  updatedAt
}
"###;

pub const MUTATION: &'static str = r###"mutation CreateUserApiKey($name: String!, $durationDays: Int) {
  user {
    createUserApiKey(name: $name, durationDays: $durationDays) {
      apiKey {
        apiKey
      }
      error {
        field
        message
      }
      success
    }
  }
}

mutation UpdateUser($userId: UUID!, $displayName: String, $status: UserStatusEnum, $isAdmin: Boolean) {
  user {
    update(userId: $userId, data: {
      displayName: $displayName,
      status: $status,
      isAdmin: $isAdmin
    }) {
      error {
        field
        message
      }
      success
      user {
        ...ReturnsUser
      }
    }
  }
}

mutation ChangeUserPassword($userId: UUID!, $currentPassword: String!, $newPassword: String!) {
  user {
    changePassword(userId: $userId, data: {
      currentPassword: $currentPassword,
      newPassword: $newPassword
    }) {
      error {
        field
        message
      }
      success
      user {
        ...ReturnsUser
      }
    }
  }
}

mutation CreateUser($username: String!, $password: String!, $isAdmin: Boolean!, $displayName: String) {
  user {
    create(
      userData: {username: $username, password: $password, isSysadmin: false, isAdmin: $isAdmin, displayName: $displayName}
    ) {
      error {
        field
        message
      }
      success
      user {
        ...ReturnsUser
      }
    }
  }
}

mutation DeleteUserApiKey($apiKeyId: UUID!) {
  user {
    deleteUserApiKey(apiKeyId: $apiKeyId) {
      error {
        field
        message
      }
      success
    }
  }
}

mutation DeleteUser($userId: UUID!) {
  user {
    delete(id: $userId) {
      error {
        field
        message
      }
      success
    }
  }
}

mutation AddUserToWorkspace($userId: UUID!, $workspaceId: UUID!, $role: WorkspaceRoleEnum!) {
  workspace {
    addUser(
      workspaceUser: {userId: $userId, workspaceId: $workspaceId, role: $role}
    ) {
      error {
        field
        message
      }
      success
    }
  }
}

mutation ChangeWorkspaceUserRole($role: WorkspaceRoleEnum!, $userId: UUID!, $workspaceId: UUID!) {
  workspace {
    changeWorkspaceUserRole(
      newRole: $role
      userId: $userId
      workspaceId: $workspaceId
    ) {
      error {
        field
        message
      }
      success
    }
  }
}

mutation CreateServiceApiKey($name: String!, $permission: ApiKeyPermissionEnum!, $workspaceId: UUID!, $durationDays: Int) {
  workspace {
    createServiceApiKey(
      name: $name
      permission: $permission
      workspaceId: $workspaceId
      durationDays: $durationDays
    ) {
      error {
        field
        message
      }
      success
      apiKey {
        apiKey
      }
    }
  }
}

mutation DeleteServiceApiKey($apiKeyId: UUID!, $workspaceId: UUID!) {
  workspace {
    deleteServiceApiKey(apiKeyId: $apiKeyId, workspaceId: $workspaceId) {
      error {
        field
        message
      }
      success
    }
  }
}

mutation CreateWorkspace($name: String!, $description: String, $adminUserId: UUID!) {
  workspace {
    create(
      workspaceData: {name: $name, description: $description}
      adminUserId: $adminUserId
    ) {
      error {
        field
        message
      }
      success
      workspace {
        ...ReturnsWorkspace
      }
    }
  }
}

mutation RemoveUserFromWorkspace($userId: UUID!, $workspaceId: UUID!) {
  workspace {
    removeUser(userId: $userId, workspaceId: $workspaceId) {
      error {
        field
        message
      }
      success
    }
  }
}

mutation DeleteWorkspace($workspaceId: UUID!) {
  workspace {
    delete(workspaceId: $workspaceId) {
      error {
        field
        message
      }
      success
    }
  }
}

fragment ReturnsUser on User {
  displayName
  id
  isAdmin
  isSysadmin
  status
  username
}

fragment ReturnsWorkspace on Workspace {
  id
  name
  description
  archived
  createdAt
  updatedAt
}
"###;

