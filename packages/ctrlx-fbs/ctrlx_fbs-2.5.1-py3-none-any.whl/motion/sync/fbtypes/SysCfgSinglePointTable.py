# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single point table
class SysCfgSinglePointTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgSinglePointTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfgSinglePointTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfgSinglePointTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the point table (filled when reading; optional for writing [content is always ignored])
    # SysCfgSinglePointTable
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # interpolation points of the point table
    # SysCfgSinglePointTable
    def Points(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SysCfgSinglePointTable
    def PointsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # SysCfgSinglePointTable
    def PointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgSinglePointTable
    def PointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # interpolation type for this point table
    # SysCfgSinglePointTable
    def Interpolation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # data of the CamBuilder
    # SysCfgSinglePointTable
    def CamBuilderData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SysCfgSinglePointTableStart(builder): builder.StartObject(4)
def Start(builder):
    return SysCfgSinglePointTableStart(builder)
def SysCfgSinglePointTableAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return SysCfgSinglePointTableAddName(builder, name)
def SysCfgSinglePointTableAddPoints(builder, points): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(points), 0)
def AddPoints(builder, points):
    return SysCfgSinglePointTableAddPoints(builder, points)
def SysCfgSinglePointTableStartPointsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartPointsVector(builder, numElems):
    return SysCfgSinglePointTableStartPointsVector(builder, numElems)
def SysCfgSinglePointTableAddInterpolation(builder, interpolation): builder.PrependInt8Slot(2, interpolation, 0)
def AddInterpolation(builder, interpolation):
    return SysCfgSinglePointTableAddInterpolation(builder, interpolation)
def SysCfgSinglePointTableAddCamBuilderData(builder, camBuilderData): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(camBuilderData), 0)
def AddCamBuilderData(builder, camBuilderData):
    return SysCfgSinglePointTableAddCamBuilderData(builder, camBuilderData)
def SysCfgSinglePointTableEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgSinglePointTableEnd(builder)
try:
    from typing import List
except:
    pass

class SysCfgSinglePointTableT(object):

    # SysCfgSinglePointTableT
    def __init__(self):
        self.name = None  # type: str
        self.points = None  # type: List[float]
        self.interpolation = 0  # type: int
        self.camBuilderData = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgSinglePointTable = SysCfgSinglePointTable()
        sysCfgSinglePointTable.Init(buf, pos)
        return cls.InitFromObj(sysCfgSinglePointTable)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfgSinglePointTable):
        x = SysCfgSinglePointTableT()
        x._UnPack(sysCfgSinglePointTable)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.points == other.points and \
            self.interpolation == other.interpolation and \
            self.camBuilderData == other.camBuilderData

    # SysCfgSinglePointTableT
    def _UnPack(self, sysCfgSinglePointTable):
        if sysCfgSinglePointTable is None:
            return
        self.name = sysCfgSinglePointTable.Name()
        if not sysCfgSinglePointTable.PointsIsNone():
            if np is None:
                self.points = []
                for i in range(sysCfgSinglePointTable.PointsLength()):
                    self.points.append(sysCfgSinglePointTable.Points(i))
            else:
                self.points = sysCfgSinglePointTable.PointsAsNumpy()
        self.interpolation = sysCfgSinglePointTable.Interpolation()
        self.camBuilderData = sysCfgSinglePointTable.CamBuilderData()

    # SysCfgSinglePointTableT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.points is not None:
            if np is not None and type(self.points) is np.ndarray:
                points = builder.CreateNumpyVector(self.points)
            else:
                SysCfgSinglePointTableStartPointsVector(builder, len(self.points))
                for i in reversed(range(len(self.points))):
                    builder.PrependFloat64(self.points[i])
                points = builder.EndVector()
        if self.camBuilderData is not None:
            camBuilderData = builder.CreateString(self.camBuilderData)
        SysCfgSinglePointTableStart(builder)
        if self.name is not None:
            SysCfgSinglePointTableAddName(builder, name)
        if self.points is not None:
            SysCfgSinglePointTableAddPoints(builder, points)
        SysCfgSinglePointTableAddInterpolation(builder, self.interpolation)
        if self.camBuilderData is not None:
            SysCfgSinglePointTableAddCamBuilderData(builder, camBuilderData)
        sysCfgSinglePointTable = SysCfgSinglePointTableEnd(builder)
        return sysCfgSinglePointTable
