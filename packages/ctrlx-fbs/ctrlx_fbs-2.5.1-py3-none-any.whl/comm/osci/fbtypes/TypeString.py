# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TypeString(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TypeString()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTypeString(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TypeString
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TypeString
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TypeStringStart(builder): builder.StartObject(1)
def Start(builder):
    return TypeStringStart(builder)
def TypeStringAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return TypeStringAddValue(builder, value)
def TypeStringEnd(builder): return builder.EndObject()
def End(builder):
    return TypeStringEnd(builder)

class TypeStringT(object):

    # TypeStringT
    def __init__(self):
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        typeString = TypeString()
        typeString.Init(buf, pos)
        return cls.InitFromObj(typeString)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, typeString):
        x = TypeStringT()
        x._UnPack(typeString)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value

    # TypeStringT
    def _UnPack(self, typeString):
        if typeString is None:
            return
        self.value = typeString.Value()

    # TypeStringT
    def Pack(self, builder):
        if self.value is not None:
            value = builder.CreateString(self.value)
        TypeStringStart(builder)
        if self.value is not None:
            TypeStringAddValue(builder, value)
        typeString = TypeStringEnd(builder)
        return typeString
