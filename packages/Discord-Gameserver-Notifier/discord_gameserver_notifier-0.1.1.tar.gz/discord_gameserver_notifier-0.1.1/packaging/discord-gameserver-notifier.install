#!/bin/bash
#
# Arch Linux install script for Discord Gameserver Notifier
#

# Configuration directory and file paths
CONFIG_DIR="/etc/dgn"
CONFIG_FILE="${CONFIG_DIR}/config.yaml"
VENV_DIR="/opt/discord-gameserver-notifier"
DOC_DIR="/usr/share/doc/discord-gameserver-notifier"

pre_install() {
    echo "Discord Gameserver Notifier: Pre-installation setup..."
    
    # Create system user and group for the service
    if ! getent group dgn >/dev/null 2>&1; then
        echo "Creating system group: dgn"
        groupadd --system dgn
    else
        echo "System group 'dgn' already exists"
    fi
    
    if ! getent passwd dgn >/dev/null 2>&1; then
        echo "Creating system user: dgn"
        useradd --system --gid dgn --home-dir /var/lib/dgn --shell /usr/sbin/nologin \
                --comment "Discord Gameserver Notifier service user" dgn
    else
        echo "System user 'dgn' already exists"
    fi
    
    # Create necessary directories
    echo "Creating service directories..."
    
    # Configuration directory
    if [ ! -d "/etc/dgn" ]; then
        mkdir -p /etc/dgn
        chmod 755 /etc/dgn
        echo "Created configuration directory: /etc/dgn"
    else
        echo "Configuration directory already exists: /etc/dgn"
    fi
    
    # Working directory for the service
    if [ ! -d "/var/lib/dgn" ]; then
        mkdir -p /var/lib/dgn
        chown dgn:dgn /var/lib/dgn
        chmod 755 /var/lib/dgn
        echo "Created working directory: /var/lib/dgn"
    else
        echo "Working directory already exists: /var/lib/dgn"
        # Ensure correct ownership
        chown dgn:dgn /var/lib/dgn 2>/dev/null || true
    fi
    
    # Log directory
    if [ ! -d "/var/log/dgn" ]; then
        mkdir -p /var/log/dgn
        chown dgn:dgn /var/log/dgn
        chmod 755 /var/log/dgn
        echo "Created log directory: /var/log/dgn"
    else
        echo "Log directory already exists: /var/log/dgn"
        # Ensure correct ownership
        chown dgn:dgn /var/log/dgn 2>/dev/null || true
    fi
    
    echo "Pre-installation setup completed!"
}

post_install() {
    echo "Discord Gameserver Notifier: Post-installation setup..."
    
    # Create configuration directory
    echo "Creating configuration directory..."
    if [ ! -d "$CONFIG_DIR" ]; then
        mkdir -p "$CONFIG_DIR"
        chmod 755 "$CONFIG_DIR"
        echo "Configuration directory created: $CONFIG_DIR"
    else
        echo "Configuration directory already exists: $CONFIG_DIR"
    fi
    
    # Create virtual environment
    echo "Creating virtual environment at $VENV_DIR..."
    if [ ! -d "$VENV_DIR" ]; then
        python -m venv "$VENV_DIR"
        chown -R root:root "$VENV_DIR"
        chmod -R 755 "$VENV_DIR"
        echo "Virtual environment created successfully"
    else
        echo "Virtual environment already exists"
    fi
    
    # Upgrade pip and install wheel package first
    echo "Upgrading pip and installing wheel package..."
    "$VENV_DIR/bin/pip" install --upgrade pip wheel
    
    # Install wheel package into venv
    echo "Installing Discord Gameserver Notifier into virtual environment..."
    
    # Find the wheel file that was installed with the package
    WHEEL_FILE=$(find /usr/lib/python*/site-packages/ -name "discord_gameserver_notifier*.whl" 2>/dev/null | head -1)
    if [ -z "$WHEEL_FILE" ]; then
        echo "Error: No wheel file found in Python site-packages"
        exit 1
    fi
    
    echo "Installing wheel file: $WHEEL_FILE"
    
    # Install the wheel package with all dependencies
    # Use --force-reinstall to ensure clean installation
    "$VENV_DIR/bin/pip" install --force-reinstall "$WHEEL_FILE"
    
    # Verify installation
    echo "Verifying installation..."
    
    # First check if the package is installed via pip
    if "$VENV_DIR/bin/pip" show discord-gameserver-notifier >/dev/null 2>&1; then
        echo "✅ Package is installed in virtual environment"
        
        # Try to import the main module
        if "$VENV_DIR/bin/python" -c "import discord_gameserver_notifier.main" >/dev/null 2>&1; then
            echo "✅ Package verification successful"
        else
            echo "⚠️ Package installed but module import failed"
            echo "This may be due to missing configuration - the package should still work"
            echo "Debug information:"
            echo "Python path:"
            "$VENV_DIR/bin/python" -c "import sys; print('\n'.join(sys.path))"
            echo "Trying to import package with detailed error:"
            "$VENV_DIR/bin/python" -c "import discord_gameserver_notifier.main" 2>&1 || true
        fi
    else
        echo "❌ Package verification failed - package not installed"
        echo "Debug information:"
        echo "Installed packages:"
        "$VENV_DIR/bin/pip" list
        exit 1
    fi
    
    # Copy example configuration if no config exists
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "No configuration file found at $CONFIG_FILE"
        
        # Versuche zunächst die Beispielkonfigurationsdateien im Dokumentationsverzeichnis
        if [ -f "$DOC_DIR/config.yaml.service-example" ]; then
            FOUND_EXAMPLE="$DOC_DIR/config.yaml.service-example"
        elif [ -f "$DOC_DIR/config.yaml.example" ]; then
            FOUND_EXAMPLE="$DOC_DIR/config.yaml.example"
        else
            # Fallback: Suche im installierten Python-Package (innerhalb des venv)
            FOUND_EXAMPLE=$(find "$VENV_DIR"/lib/python*/site-packages/config -maxdepth 1 -type f \
                             \( -name "config.yaml.service-example" -o -name "config.yaml.example" \) 2>/dev/null | head -n 1)
        fi
        
        if [ -n "$FOUND_EXAMPLE" ]; then
            echo "Copying example configuration from: $FOUND_EXAMPLE"
            cp "$FOUND_EXAMPLE" "$CONFIG_FILE"
            chmod 644 "$CONFIG_FILE"
            echo "Configuration file created: $CONFIG_FILE"
            echo ""
            echo "⚠️  IMPORTANT: Please edit $CONFIG_FILE to configure:"
            echo "   - Network scan ranges"
            echo "   - Discord webhook URL"
            echo "   - Game types to monitor"
            echo ""
        else
            echo "⚠️  Warning: Could not find example configuration file."
            echo "   Please create $CONFIG_FILE manually."
            echo ""
        fi
    else
        echo "Configuration file already exists: $CONFIG_FILE"
        echo "Skipping configuration setup."
    fi
    
    # Set appropriate ownership
    chown root:root "$CONFIG_DIR" 2>/dev/null || true
    if [ -f "$CONFIG_FILE" ]; then
        chown root:root "$CONFIG_FILE" 2>/dev/null || true
    fi
    
    # Enable and start systemd service if systemctl is available
    if command -v systemctl >/dev/null 2>&1; then
        echo "Configuring systemd service..."
        
        # Reload systemd daemon to pick up new service file
        systemctl daemon-reload 2>/dev/null || true
        
        # Enable the service to start on boot
        systemctl enable discord-gameserver-notifier.service 2>/dev/null || true
        
        echo "Service enabled to start on boot."
        echo "Note: Please configure $CONFIG_FILE before starting the service."
        echo ""
        echo "🚀 Quick Start:"
        echo "   1. Edit configuration: sudo nano $CONFIG_FILE"
        echo "   2. Start the service: sudo systemctl start discord-gameserver-notifier"
        echo "   3. Check status: sudo systemctl status discord-gameserver-notifier"
        echo "   4. View logs: sudo journalctl -u discord-gameserver-notifier -f"
        echo ""
    else
        echo "Systemctl not available - manual execution required."
        echo ""
        echo "🚀 Quick Start:"
        echo "   1. Edit configuration: sudo nano $CONFIG_FILE"
        echo "   2. Run manually: discord-gameserver-notifier"
        echo "   3. For help: discord-gameserver-notifier --help"
        echo ""
    fi
    
    echo "Discord Gameserver Notifier installation completed!"
    echo "📖 Documentation: https://github.com/lan-dot-party/Discord-Gameserver-Notifier"
    echo ""
}

post_upgrade() {
    post_install
}

pre_remove() {
    # Stop and disable service before removal
    if command -v systemctl >/dev/null 2>&1; then
        echo "Stopping and disabling discord-gameserver-notifier service..."
        systemctl stop discord-gameserver-notifier.service 2>/dev/null || true
        systemctl disable discord-gameserver-notifier.service 2>/dev/null || true
        systemctl daemon-reload 2>/dev/null || true
    fi
}

post_remove() {
    # Clean up virtual environment
    if [ -d "$VENV_DIR" ]; then
        echo "Removing virtual environment at $VENV_DIR..."
        rm -rf "$VENV_DIR"
    fi
    
    # Note: We don't remove config files automatically to preserve user settings
    echo "Note: Configuration files in $CONFIG_DIR have been preserved."
    echo "Remove manually if no longer needed: sudo rm -rf $CONFIG_DIR"
} 