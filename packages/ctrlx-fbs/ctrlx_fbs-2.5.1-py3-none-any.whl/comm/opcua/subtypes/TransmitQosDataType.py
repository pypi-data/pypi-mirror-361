# automatically generated by the FlatBuffers compiler, do not modify

# namespace: subtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TransmitQosDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TransmitQosDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTransmitQosDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TransmitQosDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TransmitQosDataType
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TransmitQosDataType
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def TransmitQosDataTypeStart(builder): builder.StartObject(2)
def Start(builder):
    return TransmitQosDataTypeStart(builder)
def TransmitQosDataTypeAddValueType(builder, valueType): builder.PrependUint8Slot(0, valueType, 0)
def AddValueType(builder, valueType):
    return TransmitQosDataTypeAddValueType(builder, valueType)
def TransmitQosDataTypeAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return TransmitQosDataTypeAddValue(builder, value)
def TransmitQosDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return TransmitQosDataTypeEnd(builder)
import comm.opcua.structure.TransmitQosPriorityDataType
import comm.opcua.subtypesunion.TransmitQosDataType
try:
    from typing import Union
except:
    pass

class TransmitQosDataTypeT(object):

    # TransmitQosDataTypeT
    def __init__(self):
        self.valueType = 0  # type: int
        self.value = None  # type: Union[None, comm.opcua.structure.TransmitQosPriorityDataType.TransmitQosPriorityDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        transmitQosDataType = TransmitQosDataType()
        transmitQosDataType.Init(buf, pos)
        return cls.InitFromObj(transmitQosDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, transmitQosDataType):
        x = TransmitQosDataTypeT()
        x._UnPack(transmitQosDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.valueType == other.valueType and \
            self.value == other.value

    # TransmitQosDataTypeT
    def _UnPack(self, transmitQosDataType):
        if transmitQosDataType is None:
            return
        self.valueType = transmitQosDataType.ValueType()
        self.value = comm.opcua.subtypesunion.TransmitQosDataType.TransmitQosDataTypeCreator(self.valueType, transmitQosDataType.Value())

    # TransmitQosDataTypeT
    def Pack(self, builder):
        if self.value is not None:
            value = self.value.Pack(builder)
        TransmitQosDataTypeStart(builder)
        TransmitQosDataTypeAddValueType(builder, self.valueType)
        if self.value is not None:
            TransmitQosDataTypeAddValue(builder, value)
        transmitQosDataType = TransmitQosDataTypeEnd(builder)
        return transmitQosDataType
