# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis GearInVel commands
class AxsCmdGearInVelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdGearInVelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdGearInVelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdGearInVelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the master axis
    # AxsCmdGearInVelData
    def Master(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # sync source (Actual/Setpoint/Actual-extrapolated)
    # AxsCmdGearInVelData
    def SyncSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # gear in vel parameters (master offset, slave offset, master ratio, slave ratio, fine adjust)
    # AxsCmdGearInVelData
    def Parameters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsCmdGearInVelParams import AxsCmdGearInVelParams
            obj = AxsCmdGearInVelParams()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # should this be a buffered command?
    # AxsCmdGearInVelData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AxsCmdGearInVelDataStart(builder): builder.StartObject(4)
def Start(builder):
    return AxsCmdGearInVelDataStart(builder)
def AxsCmdGearInVelDataAddMaster(builder, master): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(master), 0)
def AddMaster(builder, master):
    return AxsCmdGearInVelDataAddMaster(builder, master)
def AxsCmdGearInVelDataAddSyncSource(builder, syncSource): builder.PrependInt8Slot(1, syncSource, 0)
def AddSyncSource(builder, syncSource):
    return AxsCmdGearInVelDataAddSyncSource(builder, syncSource)
def AxsCmdGearInVelDataAddParameters(builder, parameters): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)
def AddParameters(builder, parameters):
    return AxsCmdGearInVelDataAddParameters(builder, parameters)
def AxsCmdGearInVelDataAddBuffered(builder, buffered): builder.PrependBoolSlot(3, buffered, 0)
def AddBuffered(builder, buffered):
    return AxsCmdGearInVelDataAddBuffered(builder, buffered)
def AxsCmdGearInVelDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdGearInVelDataEnd(builder)
import motion.sync.fbtypes.AxsCmdGearInVelParams
try:
    from typing import Optional
except:
    pass

class AxsCmdGearInVelDataT(object):

    # AxsCmdGearInVelDataT
    def __init__(self):
        self.master = None  # type: str
        self.syncSource = 0  # type: int
        self.parameters = None  # type: Optional[motion.sync.fbtypes.AxsCmdGearInVelParams.AxsCmdGearInVelParamsT]
        self.buffered = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdGearInVelData = AxsCmdGearInVelData()
        axsCmdGearInVelData.Init(buf, pos)
        return cls.InitFromObj(axsCmdGearInVelData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdGearInVelData):
        x = AxsCmdGearInVelDataT()
        x._UnPack(axsCmdGearInVelData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.master == other.master and \
            self.syncSource == other.syncSource and \
            self.parameters == other.parameters and \
            self.buffered == other.buffered

    # AxsCmdGearInVelDataT
    def _UnPack(self, axsCmdGearInVelData):
        if axsCmdGearInVelData is None:
            return
        self.master = axsCmdGearInVelData.Master()
        self.syncSource = axsCmdGearInVelData.SyncSource()
        if axsCmdGearInVelData.Parameters() is not None:
            self.parameters = motion.sync.fbtypes.AxsCmdGearInVelParams.AxsCmdGearInVelParamsT.InitFromObj(axsCmdGearInVelData.Parameters())
        self.buffered = axsCmdGearInVelData.Buffered()

    # AxsCmdGearInVelDataT
    def Pack(self, builder):
        if self.master is not None:
            master = builder.CreateString(self.master)
        if self.parameters is not None:
            parameters = self.parameters.Pack(builder)
        AxsCmdGearInVelDataStart(builder)
        if self.master is not None:
            AxsCmdGearInVelDataAddMaster(builder, master)
        AxsCmdGearInVelDataAddSyncSource(builder, self.syncSource)
        if self.parameters is not None:
            AxsCmdGearInVelDataAddParameters(builder, parameters)
        AxsCmdGearInVelDataAddBuffered(builder, self.buffered)
        axsCmdGearInVelData = AxsCmdGearInVelDataEnd(builder)
        return axsCmdGearInVelData
