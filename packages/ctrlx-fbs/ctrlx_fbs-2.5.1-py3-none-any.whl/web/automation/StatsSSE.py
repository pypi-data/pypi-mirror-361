# automatically generated by the FlatBuffers compiler, do not modify

# namespace: automation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StatsSSE(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StatsSSE()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStatsSSE(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StatsSSE
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # created subscriptions (PUT)
    # StatsSSE
    def OpenSubscriptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # open (running) SSE connections
    # StatsSSE
    def OpenSse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # open http sessions
    # StatsSSE
    def OpenSessions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # total SSE requests
    # StatsSSE
    def RequestsSse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # calls to GC
    # StatsSSE
    def CollectGarbage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def StatsSSEStart(builder): builder.StartObject(5)
def Start(builder):
    return StatsSSEStart(builder)
def StatsSSEAddOpenSubscriptions(builder, openSubscriptions): builder.PrependUint32Slot(0, openSubscriptions, 0)
def AddOpenSubscriptions(builder, openSubscriptions):
    return StatsSSEAddOpenSubscriptions(builder, openSubscriptions)
def StatsSSEAddOpenSse(builder, openSse): builder.PrependUint32Slot(1, openSse, 0)
def AddOpenSse(builder, openSse):
    return StatsSSEAddOpenSse(builder, openSse)
def StatsSSEAddOpenSessions(builder, openSessions): builder.PrependUint32Slot(2, openSessions, 0)
def AddOpenSessions(builder, openSessions):
    return StatsSSEAddOpenSessions(builder, openSessions)
def StatsSSEAddRequestsSse(builder, requestsSse): builder.PrependUint32Slot(3, requestsSse, 0)
def AddRequestsSse(builder, requestsSse):
    return StatsSSEAddRequestsSse(builder, requestsSse)
def StatsSSEAddCollectGarbage(builder, collectGarbage): builder.PrependUint32Slot(4, collectGarbage, 0)
def AddCollectGarbage(builder, collectGarbage):
    return StatsSSEAddCollectGarbage(builder, collectGarbage)
def StatsSSEEnd(builder): return builder.EndObject()
def End(builder):
    return StatsSSEEnd(builder)

class StatsSSET(object):

    # StatsSSET
    def __init__(self):
        self.openSubscriptions = 0  # type: int
        self.openSse = 0  # type: int
        self.openSessions = 0  # type: int
        self.requestsSse = 0  # type: int
        self.collectGarbage = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        statsSse = StatsSSE()
        statsSse.Init(buf, pos)
        return cls.InitFromObj(statsSse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, statsSse):
        x = StatsSSET()
        x._UnPack(statsSse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.openSubscriptions == other.openSubscriptions and \
            self.openSse == other.openSse and \
            self.openSessions == other.openSessions and \
            self.requestsSse == other.requestsSse and \
            self.collectGarbage == other.collectGarbage

    # StatsSSET
    def _UnPack(self, statsSse):
        if statsSse is None:
            return
        self.openSubscriptions = statsSse.OpenSubscriptions()
        self.openSse = statsSse.OpenSse()
        self.openSessions = statsSse.OpenSessions()
        self.requestsSse = statsSse.RequestsSse()
        self.collectGarbage = statsSse.CollectGarbage()

    # StatsSSET
    def Pack(self, builder):
        StatsSSEStart(builder)
        StatsSSEAddOpenSubscriptions(builder, self.openSubscriptions)
        StatsSSEAddOpenSse(builder, self.openSse)
        StatsSSEAddOpenSessions(builder, self.openSessions)
        StatsSSEAddRequestsSse(builder, self.requestsSse)
        StatsSSEAddCollectGarbage(builder, self.collectGarbage)
        statsSse = StatsSSEEnd(builder)
        return statsSse
