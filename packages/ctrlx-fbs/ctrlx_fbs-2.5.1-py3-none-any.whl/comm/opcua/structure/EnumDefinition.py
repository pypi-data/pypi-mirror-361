# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EnumDefinition(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EnumDefinition()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEnumDefinition(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EnumDefinition
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EnumDefinition
    def Fields(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.EnumField import EnumField
            obj = EnumField()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EnumDefinition
    def FieldsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EnumDefinition
    def FieldsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def EnumDefinitionStart(builder): builder.StartObject(1)
def Start(builder):
    return EnumDefinitionStart(builder)
def EnumDefinitionAddFields(builder, fields): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fields), 0)
def AddFields(builder, fields):
    return EnumDefinitionAddFields(builder, fields)
def EnumDefinitionStartFieldsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartFieldsVector(builder, numElems):
    return EnumDefinitionStartFieldsVector(builder, numElems)
def EnumDefinitionEnd(builder): return builder.EndObject()
def End(builder):
    return EnumDefinitionEnd(builder)
import comm.opcua.structure.EnumField
try:
    from typing import List
except:
    pass

class EnumDefinitionT(object):

    # EnumDefinitionT
    def __init__(self):
        self.fields = None  # type: List[comm.opcua.structure.EnumField.EnumFieldT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        enumDefinition = EnumDefinition()
        enumDefinition.Init(buf, pos)
        return cls.InitFromObj(enumDefinition)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, enumDefinition):
        x = EnumDefinitionT()
        x._UnPack(enumDefinition)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.fields == other.fields

    # EnumDefinitionT
    def _UnPack(self, enumDefinition):
        if enumDefinition is None:
            return
        if not enumDefinition.FieldsIsNone():
            self.fields = []
            for i in range(enumDefinition.FieldsLength()):
                if enumDefinition.Fields(i) is None:
                    self.fields.append(None)
                else:
                    enumField_ = comm.opcua.structure.EnumField.EnumFieldT.InitFromObj(enumDefinition.Fields(i))
                    self.fields.append(enumField_)

    # EnumDefinitionT
    def Pack(self, builder):
        if self.fields is not None:
            fieldslist = []
            for i in range(len(self.fields)):
                fieldslist.append(self.fields[i].Pack(builder))
            EnumDefinitionStartFieldsVector(builder, len(self.fields))
            for i in reversed(range(len(self.fields))):
                builder.PrependUOffsetTRelative(fieldslist[i])
            fields = builder.EndVector()
        EnumDefinitionStart(builder)
        if self.fields is not None:
            EnumDefinitionAddFields(builder, fields)
        enumDefinition = EnumDefinitionEnd(builder)
        return enumDefinition
