# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Oscilloscope(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Oscilloscope()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOscilloscope(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Oscilloscope
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Oscilloscope
    def Cfg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.OscilloscopeCfg import OscilloscopeCfg
            obj = OscilloscopeCfg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Oscilloscope
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.osci.fbtypes.OscilloscopeState import OscilloscopeState
            obj = OscilloscopeState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def OscilloscopeStart(builder): builder.StartObject(2)
def Start(builder):
    return OscilloscopeStart(builder)
def OscilloscopeAddCfg(builder, cfg): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cfg), 0)
def AddCfg(builder, cfg):
    return OscilloscopeAddCfg(builder, cfg)
def OscilloscopeAddState(builder, state): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(state), 0)
def AddState(builder, state):
    return OscilloscopeAddState(builder, state)
def OscilloscopeEnd(builder): return builder.EndObject()
def End(builder):
    return OscilloscopeEnd(builder)
import comm.osci.fbtypes.OscilloscopeCfg
import comm.osci.fbtypes.OscilloscopeState
try:
    from typing import Optional
except:
    pass

class OscilloscopeT(object):

    # OscilloscopeT
    def __init__(self):
        self.cfg = None  # type: Optional[comm.osci.fbtypes.OscilloscopeCfg.OscilloscopeCfgT]
        self.state = None  # type: Optional[comm.osci.fbtypes.OscilloscopeState.OscilloscopeStateT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        oscilloscope = Oscilloscope()
        oscilloscope.Init(buf, pos)
        return cls.InitFromObj(oscilloscope)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, oscilloscope):
        x = OscilloscopeT()
        x._UnPack(oscilloscope)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cfg == other.cfg and \
            self.state == other.state

    # OscilloscopeT
    def _UnPack(self, oscilloscope):
        if oscilloscope is None:
            return
        if oscilloscope.Cfg() is not None:
            self.cfg = comm.osci.fbtypes.OscilloscopeCfg.OscilloscopeCfgT.InitFromObj(oscilloscope.Cfg())
        if oscilloscope.State() is not None:
            self.state = comm.osci.fbtypes.OscilloscopeState.OscilloscopeStateT.InitFromObj(oscilloscope.State())

    # OscilloscopeT
    def Pack(self, builder):
        if self.cfg is not None:
            cfg = self.cfg.Pack(builder)
        if self.state is not None:
            state = self.state.Pack(builder)
        OscilloscopeStart(builder)
        if self.cfg is not None:
            OscilloscopeAddCfg(builder, cfg)
        if self.state is not None:
            OscilloscopeAddState(builder, state)
        oscilloscope = OscilloscopeEnd(builder)
        return oscilloscope
