# coding: utf-8

"""
    PDS Registry Search API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product). 

    The version of the OpenAPI document: 1.6.0
    Contact: pds-operator@jpl.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pds.api_client.models.summary_facet import SummaryFacet
from typing import Optional, Set
from typing_extensions import Self

class Summary(BaseModel):
    """
    Summary
    """ # noqa: E501
    facets: Optional[List[SummaryFacet]] = None
    hits: Optional[StrictInt] = Field(default=None, description="total number of matching results. -1 indicates an excessive amount of resource required to compute it")
    limit: Optional[StrictInt] = None
    properties: Optional[List[StrictStr]] = None
    q: Optional[StrictStr] = None
    search_after: Optional[List[StrictStr]] = None
    sort: Optional[List[StrictStr]] = None
    took: Optional[StrictInt] = Field(default=None, description="Number of milliseconds it \"took\" to do request")
    __properties: ClassVar[List[str]] = ["facets", "hits", "limit", "properties", "q", "search_after", "sort", "took"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Summary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in facets (list)
        _items = []
        if self.facets:
            for _item_facets in self.facets:
                if _item_facets:
                    _items.append(_item_facets.to_dict())
            _dict['facets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Summary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "facets": [SummaryFacet.from_dict(_item) for _item in obj["facets"]] if obj.get("facets") is not None else None,
            "hits": obj.get("hits"),
            "limit": obj.get("limit"),
            "properties": obj.get("properties"),
            "q": obj.get("q"),
            "search_after": obj.get("search_after"),
            "sort": obj.get("sort"),
            "took": obj.get("took")
        })
        return _obj


