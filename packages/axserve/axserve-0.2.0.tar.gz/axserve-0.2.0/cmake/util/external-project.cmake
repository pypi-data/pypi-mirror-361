cmake_minimum_required(VERSION 3.27)

include_guard(GLOBAL)
include(ExternalProject)

set(EXTERNAL_UNSETS
    GTest_DIR
    ZLIB_INCLUDE_DIR ZLIB_LIBRARY_*
    absl_DIR
    Protobuf_DIR utf8_range_DIR
    gRPC_DIR
    Qt6_DIR Qt6*_DIR
)

function(ExternalProject_AddForThisProject EXTERNAL_NAME)
    set(OPTIONS
        START_UNPARSED_ARGUMENTS
        SKIP_BUILD
    )
    set(ONE_VALUE_KEYWORDS
        PREFIX_NAME
        THIRD_PARTY_NAME
        GIT_REPOSITORY
        GIT_TAG
    )
    set(MULTI_VALUE_KEYWORDS
        CMAKE_ARGS
        CMAKE_CACHE_ARGS
        DEPENDS
    )
    cmake_parse_arguments(EXTERNAL
        "${OPTIONS}"
        "${ONE_VALUE_KEYWORDS}"
        "${MULTI_VALUE_KEYWORDS}"
        ${ARGN}
    )

    if(EXTERNAL_THIRD_PARTY_NAME)
        set(EXTERNAL_SOURCE_DIR   "${CMAKE_CURRENT_SOURCE_DIR}/third_party/${EXTERNAL_THIRD_PARTY_NAME}")
    else()
        set(EXTERNAL_SOURCE_DIR   "${CMAKE_CURRENT_SOURCE_DIR}")
    endif()

    set(EXTERNAL_PREFIX_DIR   "${CMAKE_CURRENT_BINARY_DIR}/${EXTERNAL_PREFIX_NAME}")
    set(EXTERNAL_BINARY_DIR   "${CMAKE_CURRENT_BINARY_DIR}/${EXTERNAL_PREFIX_NAME}-build")
    set(EXTERNAL_INSTALL_DIR  "${EXTERNAL_PREFIX_DIR}")
    set(EXTERNAL_TMP_DIR      "${EXTERNAL_PREFIX_DIR}/tmp")
    set(EXTERNAL_STAMP_DIR    "${EXTERNAL_TMP_DIR}/stamp")
    set(EXTERNAL_LOG_DIR      "${EXTERNAL_TMP_DIR}/log")
    set(EXTERNAL_DOWNLOAD_DIR "${EXTERNAL_TMP_DIR}/download")

    foreach(EXTERNAL_DEPEND_NAME IN LISTS EXTERNAL_DEPENDS)
        get_property(EXTERNAL_DEPEND_PREFIX_PATH_FROM_DEPEND  TARGET "${EXTERNAL_DEPEND_NAME}" PROPERTY PREFIX_PATH)
        get_property(EXTERNAL_DEPEND_PROGRAM_PATH_FROM_DEPEND TARGET "${EXTERNAL_DEPEND_NAME}" PROPERTY PROGRAM_PATH)
        if(EXTERNAL_DEPEND_PREFIX_PATH_FROM_DEPEND)
            foreach(EXTERNAL_DEPEND_PREFIX_PATH_ITEM IN LISTS EXTERNAL_DEPEND_PREFIX_PATH_FROM_DEPEND)
                list(APPEND EXTERNAL_DEPEND_PREFIX_PATH "${EXTERNAL_DEPEND_PREFIX_PATH_ITEM}")
            endforeach()
        endif()
        if(EXTERNAL_DEPEND_PROGRAM_PATH_FROM_DEPEND)
            foreach(EXTERNAL_DEPEND_PROGRAM_PATH_ITEM IN LISTS EXTERNAL_DEPEND_PROGRAM_PATH_FROM_DEPEND)
                list(APPEND EXTERNAL_DEPEND_PROGRAM_PATH "${EXTERNAL_DEPEND_PROGRAM_PATH_ITEM}")
            endforeach()
        endif()
    endforeach()

    list(REMOVE_DUPLICATES EXTERNAL_DEPEND_PREFIX_PATH)
    list(REMOVE_DUPLICATES EXTERNAL_DEPEND_PROGRAM_PATH)

    set(EXTERNAL_CMAKE_CACHE_ARGS_PREFIX_FOUND FALSE)
    set(EXTERNAL_CMAKE_CACHE_ARGS_PROGRAM_FOUND FALSE)

    list(LENGTH EXTERNAL_CMAKE_CACHE_ARGS EXTERNAL_CMAKE_CACHE_ARGS_LENGTH)
    math(EXPR EXTERNAL_CMAKE_CACHE_ARGS_LAST_INDEX "${EXTERNAL_CMAKE_CACHE_ARGS_LENGTH}-1")
    foreach(EXTERNAL_CMAKE_CACHE_ARG_INDEX RANGE "${EXTERNAL_CMAKE_CACHE_ARGS_LAST_INDEX}")
        list(GET EXTERNAL_CMAKE_CACHE_ARGS "${EXTERNAL_CMAKE_CACHE_ARG_INDEX}" EXTERNAL_CMAKE_CACHE_ARG)
        if(EXTERNAL_CMAKE_CACHE_ARG MATCHES "-DCMAKE_PREFIX_PATH[:=]" AND EXTERNAL_DEPEND_PREFIX_PATH)
            list(REMOVE_AT EXTERNAL_CMAKE_CACHE_ARGS "${EXTERNAL_CMAKE_CACHE_ARG_INDEX}")
            list(JOIN EXTERNAL_DEPEND_PREFIX_PATH ";" EXTERNAL_DEPEND_PREFIX_PATH_JOINED)
            string(APPEND EXTERNAL_CMAKE_CACHE_ARG ";" "${EXTERNAL_DEPEND_PREFIX_PATH_JOINED}")
            list(INSERT EXTERNAL_CMAKE_CACHE_ARGS "${EXTERNAL_CMAKE_CACHE_ARG_INDEX}" "${EXTERNAL_CMAKE_CACHE_ARG}")
            set(EXTERNAL_CMAKE_CACHE_ARGS_PREFIX_FOUND TRUE)
        elseif(EXTERNAL_CMAKE_CACHE_ARG MATCHES "-DCMAKE_PROGRAM_PATH[:=]" AND EXTERNAL_DEPEND_PROGRAM_PATH AND FALSE)
            list(REMOVE_AT EXTERNAL_CMAKE_CACHE_ARGS "${EXTERNAL_CMAKE_CACHE_ARG_INDEX}")
            list(JOIN EXTERNAL_DEPEND_PROGRAM_PATH ";" EXTERNAL_DEPEND_PROGRAM_PATH_JOINED)
            string(APPEND EXTERNAL_CMAKE_CACHE_ARG ";" "${EXTERNAL_DEPEND_PROGRAM_PATH_JOINED}")
            list(INSERT EXTERNAL_CMAKE_CACHE_ARGS "${EXTERNAL_CMAKE_CACHE_ARG_INDEX}" "${EXTERNAL_CMAKE_CACHE_ARG}")
            set(EXTERNAL_CMAKE_CACHE_ARGS_PROGRAM_FOUND TRUE)
        endif()
    endforeach()

    if(NOT EXTERNAL_CMAKE_CACHE_ARGS_PREFIX_FOUND AND EXTERNAL_DEPEND_PREFIX_PATH)
        list(JOIN EXTERNAL_DEPEND_PREFIX_PATH ";" EXTERNAL_DEPEND_PREFIX_PATH_JOINED)
        list(APPEND EXTERNAL_CMAKE_CACHE_ARGS "-DCMAKE_PREFIX_PATH:PATH=${EXTERNAL_DEPEND_PREFIX_PATH_JOINED}")
    endif()
    if(NOT EXTERNAL_CMAKE_CACHE_ARGS_PROGRAM_FOUND AND EXTERNAL_DEPEND_PROGRAM_PATH AND FALSE)
        list(JOIN EXTERNAL_DEPEND_PROGRAM_PATH ";" EXTERNAL_DEPEND_PROGRAM_PATH_JOINED)
        list(APPEND EXTERNAL_CMAKE_CACHE_ARGS "-DCMAKE_PROGRAM_PATH:PATH=${EXTERNAL_DEPEND_PROGRAM_PATH_JOINED}")
    endif()

    if(NOT EXTERNAL_CMAKE_COMMAND)
        set(EXTERNAL_CMAKE_COMMAND "${CMAKE_COMMAND}")
    endif()

    if(NOT EXTERNAL_CMAKE_GENERATOR)
        set(EXTERNAL_CMAKE_GENERATOR "${CMAKE_GENERATOR}")
    endif()

    if(MSVC)
        set(EXTERNAL_CMAKE_MSVC_ARGS
            "-DCMAKE_SYSTEM_NAME:STRING=${CMAKE_SYSTEM_NAME}"
            "-DCMAKE_SYSTEM_VERSION:STRING=${CMAKE_SYSTEM_VERSION}"
            "-DCMAKE_SYSTEM_PROCESSOR:STRING=${CMAKE_SYSTEM_PROCESSOR}"
            "-P" "${CMAKE_CURRENT_SOURCE_DIR}/cmake/msvc/env-msvc.cmake"
            "--" "${EXTERNAL_CMAKE_COMMAND}"
        )
    endif()

    set(EXTERNAL_CONFIGURE_COMMAND
        "${EXTERNAL_CMAKE_COMMAND}"
        ${EXTERNAL_CMAKE_MSVC_ARGS}
        ${EXTERNAL_CMAKE_ARGS}
        "-G" "${EXTERNAL_CMAKE_GENERATOR}"
        "-C" "${EXTERNAL_TMP_DIR}/${EXTERNAL_NAME}-cache$<$<BOOL:$<CONFIG>>:-$<LOWER_CASE:$<CONFIG>>>.cmake"
        "-S" "<SOURCE_DIR>"
        "-B" "<BINARY_DIR>"
        "-U" "*_DIR"
        "-U" "*_LIBRARY"
        "-U" "*_LIBRARY_*"
    )

    set(EXTERNAL_BUILD_COMMAND
        ${EXTERNAL_CONFIGURE_COMMAND}
        COMMAND
        "${EXTERNAL_CMAKE_COMMAND}"
        ${EXTERNAL_CMAKE_MSVC_ARGS}
        "--build" "<BINARY_DIR>"
        "$<$<BOOL:$<CONFIG>>:--config>" "$<CONFIG>"
    )

    set(EXTERNAL_INSTALL_COMMAND
        "${EXTERNAL_CMAKE_COMMAND}"
        ${EXTERNAL_CMAKE_MSVC_ARGS}
        "--install" "<BINARY_DIR>"
        "$<$<BOOL:$<CONFIG>>:--config>" "$<CONFIG>"
        "--prefix" "<INSTALL_DIR>$<$<BOOL:$<CONFIG>>:-$<LOWER_CASE:$<CONFIG>>>"
    )

    if(EXISTS "${EXTERNAL_SOURCE_DIR}/.git")
        execute_process(
            COMMAND git -C "${EXTERNAL_SOURCE_DIR}" tag --points-at HEAD
            OUTPUT_VARIABLE EXTERNAL_GIT_TAG_CHECKED
            OUTPUT_STRIP_TRAILING_WHITESPACE
            COMMAND_ERROR_IS_FATAL ANY
        )
    endif()

    if(NOT EXTERNAL_GIT_TAG_CHECKED)
        set(EXTERNAL_SHOULD_UPDATE TRUE)
    elseif("${EXTERNAL_GIT_TAG_CHECKED}" MATCHES "${EXTERNAL_GIT_TAG}")
        set(EXTERNAL_SHOULD_UPDATE FALSE)
    else()
        set(EXTERNAL_SHOULD_UPDATE TRUE)
    endif()

    if(EXTERNAL_SKIP_BUILD)
        set(EXTERNAL_SHOULD_BUILD FALSE)
    else()
        set(EXTERNAL_SHOULD_BUILD TRUE)
    endif()

    if(EXTERNAL_SHOULD_UPDATE AND EXTERNAL_SHOULD_BUILD)
        ExternalProject_Add("${EXTERNAL_NAME}"
            PREFIX "${EXTERNAL_PREFIX_DIR}"
            TMP_DIR "${EXTERNAL_TMP_DIR}"
            STAMP_DIR "${EXTERNAL_STAMP_DIR}"
            LOG_DIR "${EXTERNAL_LOG_DIR}"
            DOWNLOAD_DIR "${EXTERNAL_DOWNLOAD_DIR}"
            SOURCE_DIR "${EXTERNAL_SOURCE_DIR}"
            BINARY_DIR "${EXTERNAL_BINARY_DIR}"
            INSTALL_DIR "${EXTERNAL_INSTALL_DIR}"
            GIT_REPOSITORY "${EXTERNAL_GIT_REPOSITORY}"
            GIT_TAG "${EXTERNAL_GIT_TAG}"
            CMAKE_COMMAND "${EXTERNAL_CMAKE_COMMAND}"
            CMAKE_GENERATOR "${EXTERNAL_CMAKE_GENERATOR}"
            CMAKE_ARGS ${EXTERNAL_CMAKE_MSVC_ARGS} ${EXTERNAL_CMAKE_ARGS}
            CMAKE_CACHE_ARGS ${EXTERNAL_CMAKE_CACHE_ARGS}
            BUILD_COMMAND ${EXTERNAL_BUILD_COMMAND}
            INSTALL_COMMAND ${EXTERNAL_INSTALL_COMMAND}
            DEPENDS ${EXTERNAL_DEPENDS}
            DOWNLOAD_COMMAND ${EXTERNAL_DOWNLOAD_COMMAND}
            UPDATE_COMMAND ${EXTERNAL_UPDATE_COMMAND}
            ${EXTERNAL_UNPARSED_ARGUMENTS}
        )
    elseif(NOT EXTERNAL_SHOULD_UPDATE AND EXTERNAL_SHOULD_BUILD)
        ExternalProject_Add("${EXTERNAL_NAME}"
            PREFIX "${EXTERNAL_PREFIX_DIR}"
            TMP_DIR "${EXTERNAL_TMP_DIR}"
            STAMP_DIR "${EXTERNAL_STAMP_DIR}"
            LOG_DIR "${EXTERNAL_LOG_DIR}"
            DOWNLOAD_DIR "${EXTERNAL_DOWNLOAD_DIR}"
            SOURCE_DIR "${EXTERNAL_SOURCE_DIR}"
            BINARY_DIR "${EXTERNAL_BINARY_DIR}"
            INSTALL_DIR "${EXTERNAL_INSTALL_DIR}"
            GIT_REPOSITORY "${EXTERNAL_GIT_REPOSITORY}"
            GIT_TAG "${EXTERNAL_GIT_TAG}"
            CMAKE_COMMAND "${EXTERNAL_CMAKE_COMMAND}"
            CMAKE_GENERATOR "${EXTERNAL_CMAKE_GENERATOR}"
            CMAKE_ARGS ${EXTERNAL_CMAKE_MSVC_ARGS} ${EXTERNAL_CMAKE_ARGS}
            CMAKE_CACHE_ARGS ${EXTERNAL_CMAKE_CACHE_ARGS}
            BUILD_COMMAND ${EXTERNAL_BUILD_COMMAND}
            INSTALL_COMMAND ${EXTERNAL_INSTALL_COMMAND}
            DEPENDS ${EXTERNAL_DEPENDS}
            DOWNLOAD_COMMAND ""
            UPDATE_COMMAND ""
            ${EXTERNAL_UNPARSED_ARGUMENTS}
        )
    elseif(EXTERNAL_SHOULD_UPDATE AND NOT EXTERNAL_SHOULD_BUILD)
        ExternalProject_Add("${EXTERNAL_NAME}"
            PREFIX "${EXTERNAL_PREFIX_DIR}"
            TMP_DIR "${EXTERNAL_TMP_DIR}"
            STAMP_DIR "${EXTERNAL_STAMP_DIR}"
            LOG_DIR "${EXTERNAL_LOG_DIR}"
            DOWNLOAD_DIR "${EXTERNAL_DOWNLOAD_DIR}"
            SOURCE_DIR "${EXTERNAL_SOURCE_DIR}"
            BINARY_DIR "${EXTERNAL_BINARY_DIR}"
            INSTALL_DIR "${EXTERNAL_INSTALL_DIR}"
            GIT_REPOSITORY "${EXTERNAL_GIT_REPOSITORY}"
            GIT_TAG "${EXTERNAL_GIT_TAG}"
            CMAKE_COMMAND "${EXTERNAL_CMAKE_COMMAND}"
            CMAKE_GENERATOR "${EXTERNAL_CMAKE_GENERATOR}"
            CMAKE_ARGS ${EXTERNAL_CMAKE_MSVC_ARGS} ${EXTERNAL_CMAKE_ARGS}
            CMAKE_CACHE_ARGS ${EXTERNAL_CMAKE_CACHE_ARGS}
            BUILD_COMMAND ""
            INSTALL_COMMAND ${EXTERNAL_INSTALL_COMMAND}
            DEPENDS ${EXTERNAL_DEPENDS}
            DOWNLOAD_COMMAND ${EXTERNAL_DOWNLOAD_COMMAND}
            UPDATE_COMMAND ${EXTERNAL_UPDATE_COMMAND}
            ${EXTERNAL_UNPARSED_ARGUMENTS}
        )
    else()
        ExternalProject_Add("${EXTERNAL_NAME}"
            PREFIX "${EXTERNAL_PREFIX_DIR}"
            TMP_DIR "${EXTERNAL_TMP_DIR}"
            STAMP_DIR "${EXTERNAL_STAMP_DIR}"
            LOG_DIR "${EXTERNAL_LOG_DIR}"
            DOWNLOAD_DIR "${EXTERNAL_DOWNLOAD_DIR}"
            SOURCE_DIR "${EXTERNAL_SOURCE_DIR}"
            BINARY_DIR "${EXTERNAL_BINARY_DIR}"
            INSTALL_DIR "${EXTERNAL_INSTALL_DIR}"
            GIT_REPOSITORY "${EXTERNAL_GIT_REPOSITORY}"
            GIT_TAG "${EXTERNAL_GIT_TAG}"
            CMAKE_COMMAND "${EXTERNAL_CMAKE_COMMAND}"
            CMAKE_GENERATOR "${EXTERNAL_CMAKE_GENERATOR}"
            CMAKE_ARGS ${EXTERNAL_CMAKE_MSVC_ARGS} ${EXTERNAL_CMAKE_ARGS}
            CMAKE_CACHE_ARGS ${EXTERNAL_CMAKE_CACHE_ARGS}
            BUILD_COMMAND ""
            INSTALL_COMMAND ${EXTERNAL_INSTALL_COMMAND}
            DEPENDS ${EXTERNAL_DEPENDS}
            DOWNLOAD_COMMAND ""
            UPDATE_COMMAND ""
            ${EXTERNAL_UNPARSED_ARGUMENTS}
        )
    endif()

    get_property(CMAKE_GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)

    if(CMAKE_GENERATOR_IS_MULTI_CONFIG)
        list(APPEND EXTERNAL_DEPEND_PREFIX_PATH  "${EXTERNAL_INSTALL_DIR}$<$<BOOL:$<CONFIG>>:-$<LOWER_CASE:$<CONFIG>>>")
        list(APPEND EXTERNAL_DEPEND_PROGRAM_PATH "${EXTERNAL_INSTALL_DIR}$<$<BOOL:$<CONFIG>>:-release>/bin")
    else()
        list(APPEND EXTERNAL_DEPEND_PREFIX_PATH  "${EXTERNAL_INSTALL_DIR}")
        list(APPEND EXTERNAL_DEPEND_PROGRAM_PATH "${EXTERNAL_INSTALL_DIR}/bin")
    endif()

    list(REMOVE_DUPLICATES EXTERNAL_DEPEND_PREFIX_PATH)
    list(REMOVE_DUPLICATES EXTERNAL_DEPEND_PROGRAM_PATH)

    set_property(TARGET "${EXTERNAL_NAME}" PROPERTY PREFIX_PATH  "${EXTERNAL_DEPEND_PREFIX_PATH}")
    set_property(TARGET "${EXTERNAL_NAME}" PROPERTY PROGRAM_PATH "${EXTERNAL_DEPEND_PROGRAM_PATH}")

endfunction()
