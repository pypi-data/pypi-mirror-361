# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs2

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Composition of programs and available callables factories
class Programs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Programs()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPrograms(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Programs
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Composition of programs
    # Programs
    def Programs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from common.scheduler.fbs2.Program import Program
            obj = Program()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Programs
    def ProgramsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Programs
    def ProgramsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Collection of available callables factories provided by installed apps
    # Programs
    def CallablePool(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Programs
    def CallablePoolLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Programs
    def CallablePoolIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ProgramsStart(builder): builder.StartObject(2)
def Start(builder):
    return ProgramsStart(builder)
def ProgramsAddPrograms(builder, programs): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(programs), 0)
def AddPrograms(builder, programs):
    return ProgramsAddPrograms(builder, programs)
def ProgramsStartProgramsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartProgramsVector(builder, numElems):
    return ProgramsStartProgramsVector(builder, numElems)
def ProgramsAddCallablePool(builder, callablePool): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(callablePool), 0)
def AddCallablePool(builder, callablePool):
    return ProgramsAddCallablePool(builder, callablePool)
def ProgramsStartCallablePoolVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCallablePoolVector(builder, numElems):
    return ProgramsStartCallablePoolVector(builder, numElems)
def ProgramsEnd(builder): return builder.EndObject()
def End(builder):
    return ProgramsEnd(builder)
import common.scheduler.fbs2.Program
try:
    from typing import List
except:
    pass

class ProgramsT(object):

    # ProgramsT
    def __init__(self):
        self.programs = None  # type: List[common.scheduler.fbs2.Program.ProgramT]
        self.callablePool = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        programs = Programs()
        programs.Init(buf, pos)
        return cls.InitFromObj(programs)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, programs):
        x = ProgramsT()
        x._UnPack(programs)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.programs == other.programs and \
            self.callablePool == other.callablePool

    # ProgramsT
    def _UnPack(self, programs):
        if programs is None:
            return
        if not programs.ProgramsIsNone():
            self.programs = []
            for i in range(programs.ProgramsLength()):
                if programs.Programs(i) is None:
                    self.programs.append(None)
                else:
                    program_ = common.scheduler.fbs2.Program.ProgramT.InitFromObj(programs.Programs(i))
                    self.programs.append(program_)
        if not programs.CallablePoolIsNone():
            self.callablePool = []
            for i in range(programs.CallablePoolLength()):
                self.callablePool.append(programs.CallablePool(i))

    # ProgramsT
    def Pack(self, builder):
        if self.programs is not None:
            programslist = []
            for i in range(len(self.programs)):
                programslist.append(self.programs[i].Pack(builder))
            ProgramsStartProgramsVector(builder, len(self.programs))
            for i in reversed(range(len(self.programs))):
                builder.PrependUOffsetTRelative(programslist[i])
            programs = builder.EndVector()
        if self.callablePool is not None:
            callablePoollist = []
            for i in range(len(self.callablePool)):
                callablePoollist.append(builder.CreateString(self.callablePool[i]))
            ProgramsStartCallablePoolVector(builder, len(self.callablePool))
            for i in reversed(range(len(self.callablePool))):
                builder.PrependUOffsetTRelative(callablePoollist[i])
            callablePool = builder.EndVector()
        ProgramsStart(builder)
        if self.programs is not None:
            ProgramsAddPrograms(builder, programs)
        if self.callablePool is not None:
            ProgramsAddCallablePool(builder, callablePool)
        programs = ProgramsEnd(builder)
        return programs
