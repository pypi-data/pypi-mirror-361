# GNU GENERAL PUBLIC LICENSE
# Version 3, 29 June 2007
#
# Copyright (C) 2025 authors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

from pullhero.vcs.base import VCSOperations
from pullhero.utils.misc import (
    call_ai_api,
    setup_logging,
    clone_repo_with_token,
    ingest_repository,
)
import logging
import sys
from pathlib import Path


setup_logging()


def action_code(
    vcs_provider: str,
    vcs_token: str,
    vcs_repository: str,
    vcs_change_id: str,
    vcs_change_type: str,
    vcs_base_branch: str,
    vcs_head_branch: str,
    agent: str,
    agent_action: str,
    llm_api_key: str,
    llm_api_host: str,
    llm_api_model: str,
    llm_api_endpoint: str,
) -> None:

    logging.info(f"Starting code action for {vcs_repository} PR/MR {vcs_change_id}")
    local_repo_path = "/tmp/clone"
    # Validate inputs
    if not vcs_token:
        error_msg = f"{vcs_provider} token required"
        logging.error(error_msg)
        raise ValueError(error_msg)

    try:
        # Initialize provider
        logging.info(f"Initializing {vcs_provider} provider")
        provider = VCSOperations.from_provider(vcs_provider, vcs_token)

        pr_number = vcs_change_id
        pr_branch = vcs_head_branch
        base_branch = vcs_base_branch

        improvements_branch = f"{pr_branch}-pullhero-improvements"

        # current_readme_content, _ = provider.get_current_readme(f"{vcs_repository}", vcs_base_branch)

        # Clone and analyze repository
        repo_url = (
            f"https://github.com/{vcs_repository}"
            if vcs_provider == "github"
            else f"https://gitlab.com/{vcs_repository}"
        )

        logging.info(f"Cloning repository from {repo_url}")
        clone_repo_with_token(repo_url, vcs_token)

        logging.info("Analyzing repository content")
        summary, tree, content = ingest_repository(local_repo_path)
        logging.debug(
            f"Repository analysis complete - {len(content.splitlines())} lines of content"
        )
        context = content  # You might also combine tree/summary if needed.

        pr_title = f"PullHero Code Improvements for PR #{pr_number}"
        pr_body = f"""# Code Improvements for PR #{pr_number}

This pull request contains automated code improvements generated by PullHero for [PR #{pr_number}]({repo_url}/pull/{pr_number}).

## Changes include:
- Improved code readability
- Enhanced error handling
- Optimized performance
- Applied best practices and coding standards

These improvements maintain the original functionality while making the code more maintainable and robust.

If you approve these changes, you can merge this PR into your original branch.

---
*Generated automatically by PullHero*
"""

        # Create the improvements PR targeting the original PR branch
        logging.info(f"Creating the improvement branch {improvements_branch}")
        provider.create_or_update_branch(vcs_repository, improvements_branch, pr_branch)

        config_file = Path(f"{local_repo_path}/pullhero/.pullhero.yaml")
        config = {}
        if config_file.is_file():
            logging.info(f"A template exists {local_repo_path}/pullhero/.pullhero.yaml")
            with open(config_file, "r") as f:
                config = yaml.safe_load(f)

        # TODO:FIXME: This is not working so defaulting to python and go extensions
        extensions = config.get("extensions", ["py", "go"])
        extensions = [ext if ext.startswith(".") else f".{ext}" for ext in extensions]
        logging.info(f"Extensions to parse: {extensions}")
        skip = config.get("skip", [])

        files = provider.get_pr_files(
            repo_identifier=vcs_repository,  # "namespace/project" for GitLab
            pr_number=str(pr_number),  # PR number for GitHub, MR IID for GitLab
        )

        for file in files:
            logging.info(f"Parsing: {file}/")
            filename = file["filename"]

            if (Path(filename).suffix.lower() not in extensions) or (filename in skip):
                continue

            current_file_content, _ = provider.get_current_file(
                vcs_repository, pr_branch, filename
            )

            if "task" in config and config["task"]:
                # TODO:FIXME: Key does not exists
                logging.info("Task found")
                logging.info("Found local task")
                prompt_template = config["task"]

                prompt = prompt_template.format(
                    code_context=context,
                    current_code=current_file_content,
                )

            else:
                logging.info("Task not found")
                # Default prompt
                prompt = f"""Code Improvement Task:
You are a specialized code improvement agent. Your sole purpose is to optimize, fix, and enhance code files. Based on the repository context and file provided below, improve the code in the file by:
- Fixing bugs and potential errors
- Improving performance and efficiency
- Refactoring for better readability
- Implementing best practices
- Ensuring code safety and security
- Optimizing memory usage
- Removing redundant code
- Enhancing logic and structure

Context of the repository:
{context}

Current in the file:
```
{current_file_content}
```


## Instructions

1. Analyze the entire file and repository context
2. Identify areas for improvement
3. Apply all necessary changes
4. Return ONLY the complete modified file

## Requirements

- Output only the modified code file with NO explanations
- Do NOT include explanatory comments unless they are improvements to existing code comments
- Preserve the original file structure and imports
- Maintain the same function and interface signatures
- Ensure backward compatibility
- Do NOT introduce new dependencies unless absolutely necessary
- Do NOT add any markdown formatting or code blocks
- Do NOT include ANY text outside the code file itself
- The answer must use the same syntax as the file updates, for example:
  - If the file to be updated is a python file (.py) make sure the changes are syntactically correct and in python.
  - If the file to be updated is Markdown file (.md) the changes must be in markdown format.
## Response Format

Your entire response must be ONLY the improved code file, with no preamble, explanations, or formatting.
"""
            logging.info("Sending prompt to AI API to generate improved code...")
            try:
                new_content = call_ai_api(
                    llm_api_host, llm_api_key, llm_api_model, llm_api_endpoint, prompt
                )
            except Exception as e:
                logging.error("AI API call failed: %s", e)
                sys.exit(1)

            # Update the file on the branch with the LLM response
            provider.update_file(
                vcs_repository, improvements_branch, filename, new_content
            )

            # Update the current pull request
            provider.create_or_update_pr(
                vcs_repository, improvements_branch, pr_branch, pr_title, pr_body
            )

            logging.info(f"{filename} update process completed successfully.")

    except Exception as e:
        logging.error(f"Failed to complete code action: {str(e)}")
        raise
