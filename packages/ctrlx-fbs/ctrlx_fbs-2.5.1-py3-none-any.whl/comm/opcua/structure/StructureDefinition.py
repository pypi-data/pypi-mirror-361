# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StructureDefinition(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StructureDefinition()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStructureDefinition(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StructureDefinition
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StructureDefinition
    def DefaultEncodingId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.NodeId import NodeId
            obj = NodeId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StructureDefinition
    def BaseDataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.NodeId import NodeId
            obj = NodeId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StructureDefinition
    def StructureType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StructureDefinition
    def Fields(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.StructureField import StructureField
            obj = StructureField()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StructureDefinition
    def FieldsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StructureDefinition
    def FieldsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def StructureDefinitionStart(builder): builder.StartObject(4)
def Start(builder):
    return StructureDefinitionStart(builder)
def StructureDefinitionAddDefaultEncodingId(builder, defaultEncodingId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(defaultEncodingId), 0)
def AddDefaultEncodingId(builder, defaultEncodingId):
    return StructureDefinitionAddDefaultEncodingId(builder, defaultEncodingId)
def StructureDefinitionAddBaseDataType(builder, baseDataType): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(baseDataType), 0)
def AddBaseDataType(builder, baseDataType):
    return StructureDefinitionAddBaseDataType(builder, baseDataType)
def StructureDefinitionAddStructureType(builder, structureType): builder.PrependInt32Slot(2, structureType, 0)
def AddStructureType(builder, structureType):
    return StructureDefinitionAddStructureType(builder, structureType)
def StructureDefinitionAddFields(builder, fields): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fields), 0)
def AddFields(builder, fields):
    return StructureDefinitionAddFields(builder, fields)
def StructureDefinitionStartFieldsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartFieldsVector(builder, numElems):
    return StructureDefinitionStartFieldsVector(builder, numElems)
def StructureDefinitionEnd(builder): return builder.EndObject()
def End(builder):
    return StructureDefinitionEnd(builder)
import comm.opcua.builtin.NodeId
import comm.opcua.structure.StructureField
try:
    from typing import List, Optional
except:
    pass

class StructureDefinitionT(object):

    # StructureDefinitionT
    def __init__(self):
        self.defaultEncodingId = None  # type: Optional[comm.opcua.builtin.NodeId.NodeIdT]
        self.baseDataType = None  # type: Optional[comm.opcua.builtin.NodeId.NodeIdT]
        self.structureType = 0  # type: int
        self.fields = None  # type: List[comm.opcua.structure.StructureField.StructureFieldT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        structureDefinition = StructureDefinition()
        structureDefinition.Init(buf, pos)
        return cls.InitFromObj(structureDefinition)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, structureDefinition):
        x = StructureDefinitionT()
        x._UnPack(structureDefinition)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.defaultEncodingId == other.defaultEncodingId and \
            self.baseDataType == other.baseDataType and \
            self.structureType == other.structureType and \
            self.fields == other.fields

    # StructureDefinitionT
    def _UnPack(self, structureDefinition):
        if structureDefinition is None:
            return
        if structureDefinition.DefaultEncodingId() is not None:
            self.defaultEncodingId = comm.opcua.builtin.NodeId.NodeIdT.InitFromObj(structureDefinition.DefaultEncodingId())
        if structureDefinition.BaseDataType() is not None:
            self.baseDataType = comm.opcua.builtin.NodeId.NodeIdT.InitFromObj(structureDefinition.BaseDataType())
        self.structureType = structureDefinition.StructureType()
        if not structureDefinition.FieldsIsNone():
            self.fields = []
            for i in range(structureDefinition.FieldsLength()):
                if structureDefinition.Fields(i) is None:
                    self.fields.append(None)
                else:
                    structureField_ = comm.opcua.structure.StructureField.StructureFieldT.InitFromObj(structureDefinition.Fields(i))
                    self.fields.append(structureField_)

    # StructureDefinitionT
    def Pack(self, builder):
        if self.defaultEncodingId is not None:
            defaultEncodingId = self.defaultEncodingId.Pack(builder)
        if self.baseDataType is not None:
            baseDataType = self.baseDataType.Pack(builder)
        if self.fields is not None:
            fieldslist = []
            for i in range(len(self.fields)):
                fieldslist.append(self.fields[i].Pack(builder))
            StructureDefinitionStartFieldsVector(builder, len(self.fields))
            for i in reversed(range(len(self.fields))):
                builder.PrependUOffsetTRelative(fieldslist[i])
            fields = builder.EndVector()
        StructureDefinitionStart(builder)
        if self.defaultEncodingId is not None:
            StructureDefinitionAddDefaultEncodingId(builder, defaultEncodingId)
        if self.baseDataType is not None:
            StructureDefinitionAddBaseDataType(builder, baseDataType)
        StructureDefinitionAddStructureType(builder, self.structureType)
        if self.fields is not None:
            StructureDefinitionAddFields(builder, fields)
        structureDefinition = StructureDefinitionEnd(builder)
        return structureDefinition
