# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FileType

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GetPositionInput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GetPositionInput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGetPositionInput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GetPositionInput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GetPositionInput
    def FileHandle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def GetPositionInputStart(builder): builder.StartObject(1)
def Start(builder):
    return GetPositionInputStart(builder)
def GetPositionInputAddFileHandle(builder, fileHandle): builder.PrependUint32Slot(0, fileHandle, 0)
def AddFileHandle(builder, fileHandle):
    return GetPositionInputAddFileHandle(builder, fileHandle)
def GetPositionInputEnd(builder): return builder.EndObject()
def End(builder):
    return GetPositionInputEnd(builder)

class GetPositionInputT(object):

    # GetPositionInputT
    def __init__(self):
        self.fileHandle = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        getPositionInput = GetPositionInput()
        getPositionInput.Init(buf, pos)
        return cls.InitFromObj(getPositionInput)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, getPositionInput):
        x = GetPositionInputT()
        x._UnPack(getPositionInput)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.fileHandle == other.fileHandle

    # GetPositionInputT
    def _UnPack(self, getPositionInput):
        if getPositionInput is None:
            return
        self.fileHandle = getPositionInput.FileHandle()

    # GetPositionInputT
    def Pack(self, builder):
        GetPositionInputStart(builder)
        GetPositionInputAddFileHandle(builder, self.fileHandle)
        getPositionInput = GetPositionInputEnd(builder)
        return getPositionInput
