# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# state of a single FlexProfile
class AxsStateSingleFlexProfile(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsStateSingleFlexProfile()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsStateSingleFlexProfile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsStateSingleFlexProfile
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the single FlexProfile
    # AxsStateSingleFlexProfile
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # access state
    # AxsStateSingleFlexProfile
    def AccessState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsStateSingleFlexProfileStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsStateSingleFlexProfileStart(builder)
def AxsStateSingleFlexProfileAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return AxsStateSingleFlexProfileAddName(builder, name)
def AxsStateSingleFlexProfileAddAccessState(builder, accessState): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(accessState), 0)
def AddAccessState(builder, accessState):
    return AxsStateSingleFlexProfileAddAccessState(builder, accessState)
def AxsStateSingleFlexProfileEnd(builder): return builder.EndObject()
def End(builder):
    return AxsStateSingleFlexProfileEnd(builder)

class AxsStateSingleFlexProfileT(object):

    # AxsStateSingleFlexProfileT
    def __init__(self):
        self.name = None  # type: str
        self.accessState = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsStateSingleFlexProfile = AxsStateSingleFlexProfile()
        axsStateSingleFlexProfile.Init(buf, pos)
        return cls.InitFromObj(axsStateSingleFlexProfile)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsStateSingleFlexProfile):
        x = AxsStateSingleFlexProfileT()
        x._UnPack(axsStateSingleFlexProfile)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.accessState == other.accessState

    # AxsStateSingleFlexProfileT
    def _UnPack(self, axsStateSingleFlexProfile):
        if axsStateSingleFlexProfile is None:
            return
        self.name = axsStateSingleFlexProfile.Name()
        self.accessState = axsStateSingleFlexProfile.AccessState()

    # AxsStateSingleFlexProfileT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.accessState is not None:
            accessState = builder.CreateString(self.accessState)
        AxsStateSingleFlexProfileStart(builder)
        if self.name is not None:
            AxsStateSingleFlexProfileAddName(builder, name)
        if self.accessState is not None:
            AxsStateSingleFlexProfileAddAccessState(builder, accessState)
        axsStateSingleFlexProfile = AxsStateSingleFlexProfileEnd(builder)
        return axsStateSingleFlexProfile
