# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# belt synchronization configuration of all belts in the kinematics
class KinCfgBeltSyncAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgBeltSyncAll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgBeltSyncAll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgBeltSyncAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all configured belt axis synchronizations in the kinematics
    # KinCfgBeltSyncAll
    def Belts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgBeltSync import KinCfgBeltSync
            obj = KinCfgBeltSync()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgBeltSyncAll
    def BeltsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgBeltSyncAll
    def BeltsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # configuration of the error reaction in the function 'belt synchronization'
    # KinCfgBeltSyncAll
    def ErrorCfg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgBeltSyncError import KinCfgBeltSyncError
            obj = KinCfgBeltSyncError()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCfgBeltSyncAllStart(builder): builder.StartObject(2)
def Start(builder):
    return KinCfgBeltSyncAllStart(builder)
def KinCfgBeltSyncAllAddBelts(builder, belts): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(belts), 0)
def AddBelts(builder, belts):
    return KinCfgBeltSyncAllAddBelts(builder, belts)
def KinCfgBeltSyncAllStartBeltsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartBeltsVector(builder, numElems):
    return KinCfgBeltSyncAllStartBeltsVector(builder, numElems)
def KinCfgBeltSyncAllAddErrorCfg(builder, errorCfg): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(errorCfg), 0)
def AddErrorCfg(builder, errorCfg):
    return KinCfgBeltSyncAllAddErrorCfg(builder, errorCfg)
def KinCfgBeltSyncAllEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgBeltSyncAllEnd(builder)
import motion.core.fbtypes.KinCfgBeltSync
import motion.core.fbtypes.KinCfgBeltSyncError
try:
    from typing import List, Optional
except:
    pass

class KinCfgBeltSyncAllT(object):

    # KinCfgBeltSyncAllT
    def __init__(self):
        self.belts = None  # type: List[motion.core.fbtypes.KinCfgBeltSync.KinCfgBeltSyncT]
        self.errorCfg = None  # type: Optional[motion.core.fbtypes.KinCfgBeltSyncError.KinCfgBeltSyncErrorT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgBeltSyncAll = KinCfgBeltSyncAll()
        kinCfgBeltSyncAll.Init(buf, pos)
        return cls.InitFromObj(kinCfgBeltSyncAll)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgBeltSyncAll):
        x = KinCfgBeltSyncAllT()
        x._UnPack(kinCfgBeltSyncAll)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.belts == other.belts and \
            self.errorCfg == other.errorCfg

    # KinCfgBeltSyncAllT
    def _UnPack(self, kinCfgBeltSyncAll):
        if kinCfgBeltSyncAll is None:
            return
        if not kinCfgBeltSyncAll.BeltsIsNone():
            self.belts = []
            for i in range(kinCfgBeltSyncAll.BeltsLength()):
                if kinCfgBeltSyncAll.Belts(i) is None:
                    self.belts.append(None)
                else:
                    kinCfgBeltSync_ = motion.core.fbtypes.KinCfgBeltSync.KinCfgBeltSyncT.InitFromObj(kinCfgBeltSyncAll.Belts(i))
                    self.belts.append(kinCfgBeltSync_)
        if kinCfgBeltSyncAll.ErrorCfg() is not None:
            self.errorCfg = motion.core.fbtypes.KinCfgBeltSyncError.KinCfgBeltSyncErrorT.InitFromObj(kinCfgBeltSyncAll.ErrorCfg())

    # KinCfgBeltSyncAllT
    def Pack(self, builder):
        if self.belts is not None:
            beltslist = []
            for i in range(len(self.belts)):
                beltslist.append(self.belts[i].Pack(builder))
            KinCfgBeltSyncAllStartBeltsVector(builder, len(self.belts))
            for i in reversed(range(len(self.belts))):
                builder.PrependUOffsetTRelative(beltslist[i])
            belts = builder.EndVector()
        if self.errorCfg is not None:
            errorCfg = self.errorCfg.Pack(builder)
        KinCfgBeltSyncAllStart(builder)
        if self.belts is not None:
            KinCfgBeltSyncAllAddBelts(builder, belts)
        if self.errorCfg is not None:
            KinCfgBeltSyncAllAddErrorCfg(builder, errorCfg)
        kinCfgBeltSyncAll = KinCfgBeltSyncAllEnd(builder)
        return kinCfgBeltSyncAll
