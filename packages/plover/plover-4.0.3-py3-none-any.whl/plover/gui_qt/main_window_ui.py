# -*- coding: utf-8 -*-
_ = __import__(__package__.split(".", 1)[0])._

# Form implementation generated from reading ui file 'plover/gui_qt/main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(329, 427)
        MainWindow.setMinimumSize(QtCore.QSize(250, 0))
        MainWindow.setWindowTitle("Plover")
        icon = QtGui.QIcon()
        icon.addFile(":/plover.png", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QtCore.QSize(0, 0))
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.machine_state = QtWidgets.QLabel(self.groupBox)
        self.machine_state.setText("")
        self.machine_state.setObjectName("machine_state")
        self.gridLayout_2.addWidget(self.machine_state, 2, 0, 1, 1)
        self.reconnect = QtWidgets.QPushButton(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.reconnect.sizePolicy().hasHeightForWidth())
        self.reconnect.setSizePolicy(sizePolicy)
        self.reconnect.setText("")
        icon1 = QtGui.QIcon()
        icon1.addFile(":/reconnect.svg", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.reconnect.setIcon(icon1)
        self.reconnect.setObjectName("reconnect")
        self.gridLayout_2.addWidget(self.reconnect, 2, 1, 1, 1)
        self.machine_type = QtWidgets.QComboBox(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.machine_type.sizePolicy().hasHeightForWidth())
        self.machine_type.setSizePolicy(sizePolicy)
        self.machine_type.setObjectName("machine_type")
        self.gridLayout_2.addWidget(self.machine_type, 0, 0, 1, 2)
        self.gridLayout.addWidget(self.groupBox, 0, 0, 1, 1)
        self.dictionaries = DictionariesWidget(self.centralwidget)
        self.dictionaries.setObjectName("dictionaries")
        self.gridLayout.addWidget(self.dictionaries, 2, 0, 1, 3)
        self.groupBox1 = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox1.sizePolicy().hasHeightForWidth())
        self.groupBox1.setSizePolicy(sizePolicy)
        self.groupBox1.setObjectName("groupBox1")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox1)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.output_enable = QtWidgets.QRadioButton(self.groupBox1)
        self.output_enable.setObjectName("output_enable")
        self.gridLayout_3.addWidget(self.output_enable, 0, 0, 1, 1)
        self.output_disable = QtWidgets.QRadioButton(self.groupBox1)
        self.output_disable.setChecked(True)
        self.output_disable.setObjectName("output_disable")
        self.gridLayout_3.addWidget(self.output_disable, 1, 0, 1, 1)
        self.gridLayout.addWidget(self.groupBox1, 0, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 329, 25))
        self.menubar.setObjectName("menubar")
        self.menu_File = QtWidgets.QMenu(self.menubar)
        self.menu_File.setObjectName("menu_File")
        self.menu_Tools = QtWidgets.QMenu(self.menubar)
        self.menu_Tools.setObjectName("menu_Tools")
        self.menu_Help = QtWidgets.QMenu(self.menubar)
        self.menu_Help.setObjectName("menu_Help")
        self.menu_Edit = QtWidgets.QMenu(self.menubar)
        self.menu_Edit.setObjectName("menu_Edit")
        MainWindow.setMenuBar(self.menubar)
        self.toolbar = QtWidgets.QToolBar(MainWindow)
        self.toolbar.setMovable(False)
        self.toolbar.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolbar.setFloatable(False)
        self.toolbar.setObjectName("toolbar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolbar)
        self.action_Quit = QtWidgets.QAction(MainWindow)
        self.action_Quit.setObjectName("action_Quit")
        self.action_Configure = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addFile(":/settings.svg", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Configure.setIcon(icon2)
        self.action_Configure.setObjectName("action_Configure")
        self.action_OpenConfigFolder = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addFile(":/folder.svg", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_OpenConfigFolder.setIcon(icon3)
        self.action_OpenConfigFolder.setObjectName("action_OpenConfigFolder")
        self.action_About = QtWidgets.QAction(MainWindow)
        self.action_About.setObjectName("action_About")
        self.action_Reconnect = QtWidgets.QAction(MainWindow)
        self.action_Reconnect.setIcon(icon1)
        self.action_Reconnect.setObjectName("action_Reconnect")
        self.action_Show = QtWidgets.QAction(MainWindow)
        self.action_Show.setObjectName("action_Show")
        self.action_ToggleOutput = QtWidgets.QAction(MainWindow)
        self.action_ToggleOutput.setCheckable(True)
        self.action_ToggleOutput.setObjectName("action_ToggleOutput")
        self.menu_File.addAction(self.action_ToggleOutput)
        self.menu_File.addAction(self.action_Reconnect)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.action_Configure)
        self.menu_File.addAction(self.action_OpenConfigFolder)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.action_Show)
        self.menu_File.addAction(self.action_Quit)
        self.menu_Help.addAction(self.action_About)
        self.menubar.addAction(self.menu_File.menuAction())
        self.menubar.addAction(self.menu_Edit.menuAction())
        self.menubar.addAction(self.menu_Tools.menuAction())
        self.menubar.addAction(self.menu_Help.menuAction())
        self.toolbar.addAction(self.action_Configure)
        self.toolbar.addSeparator()

        self.retranslateUi(MainWindow)
        self.action_Reconnect.triggered.connect(MainWindow.on_reconnect) # type: ignore
        self.action_Configure.triggered.connect(MainWindow.on_configure) # type: ignore
        self.action_OpenConfigFolder.triggered.connect(MainWindow.on_open_config_folder) # type: ignore
        self.action_Show.triggered.connect(MainWindow.on_show) # type: ignore
        self.action_ToggleOutput.triggered['bool'].connect(MainWindow.on_toggle_output) # type: ignore
        self.action_About.triggered.connect(MainWindow.on_about) # type: ignore
        self.machine_type.activated['int'].connect(MainWindow.on_machine_changed) # type: ignore
        self.output_disable.clicked.connect(MainWindow.on_disable_output) # type: ignore
        self.output_enable.clicked.connect(MainWindow.on_enable_output) # type: ignore
        self.reconnect.clicked.connect(MainWindow.on_reconnect) # type: ignore
        MainWindow.setTabOrder(self.dictionaries, self.machine_type)
        MainWindow.setTabOrder(self.machine_type, self.reconnect)
        MainWindow.setTabOrder(self.reconnect, self.output_enable)
        MainWindow.setTabOrder(self.output_enable, self.output_disable)

    def retranslateUi(self, MainWindow):
        # i18n: Widget: “MainWindow”, title.
        self.groupBox.setTitle(_("Machine"))
        # i18n: Widget: “MainWindow”, accessible name.
        self.machine_state.setAccessibleName(_("State"))
        # i18n: Widget: “MainWindow”, accessible description.
        self.machine_state.setAccessibleDescription(_("Connection state for the current machine."))
        # i18n: Widget: “MainWindow”, tool tip.
        self.reconnect.setToolTip(_("Disconnect and reconnect the machine."))
        # i18n: Widget: “MainWindow”, accessible name.
        self.reconnect.setAccessibleName(_("Reconnect"))
        # i18n: Widget: “MainWindow”, accessible description.
        self.reconnect.setAccessibleDescription(_("Disconnect and reconnect the machine."))
        # i18n: Widget: “MainWindow”, accessible name.
        self.machine_type.setAccessibleName(_("Type"))
        # i18n: Widget: “MainWindow”, accessible description.
        self.machine_type.setAccessibleDescription(_("Change the current machine type."))
        # i18n: Widget: “MainWindow”, title.
        self.groupBox1.setTitle(_("Output"))
        # i18n: Widget: “MainWindow”, text.
        self.output_enable.setText(_("Enabled"))
        # i18n: Widget: “MainWindow”, text.
        self.output_disable.setText(_("Disabled"))
        # i18n: Widget: “MainWindow”, title.
        self.menu_File.setTitle(_("&File"))
        # i18n: Widget: “MainWindow”, title.
        self.menu_Tools.setTitle(_("&Tools"))
        # i18n: Widget: “MainWindow”, title.
        self.menu_Help.setTitle(_("&Help"))
        # i18n: Widget: “MainWindow”, title.
        self.menu_Edit.setTitle(_("&Edit"))
        # i18n: Widget: “MainWindow”, window title.
        self.toolbar.setWindowTitle(_("Plover: Toolbar"))
        # i18n: Widget: “MainWindow”, text.
        self.action_Quit.setText(_("&Quit Plover"))
        # i18n: Widget: “MainWindow”, tool tip.
        self.action_Quit.setToolTip(_("Quit the application."))
        # i18n: Widget: “MainWindow”, shortcut.
        self.action_Quit.setShortcut(_("Ctrl+Q"))
        # i18n: Widget: “MainWindow”, text.
        self.action_Configure.setText(_("&Configure"))
        # i18n: Widget: “MainWindow”, tool tip.
        self.action_Configure.setToolTip(_("Open the configuration dialog."))
        # i18n: Widget: “MainWindow”, shortcut.
        self.action_Configure.setShortcut(_("Ctrl+,"))
        # i18n: Widget: “MainWindow”, text.
        self.action_OpenConfigFolder.setText(_("Open config &folder"))
        # i18n: Widget: “MainWindow”, tool tip.
        self.action_OpenConfigFolder.setToolTip(_("Open the configuration folder."))
        # i18n: Widget: “MainWindow”, text.
        self.action_About.setText(_("&About"))
        # i18n: Widget: “MainWindow”, tool tip.
        self.action_About.setToolTip(_("Open the about dialog."))
        # i18n: Widget: “MainWindow”, text.
        self.action_Reconnect.setText(_("&Reconnect machine"))
        # i18n: Widget: “MainWindow”, tool tip.
        self.action_Reconnect.setToolTip(_("Disconnect and reconnect the machine."))
        # i18n: Widget: “MainWindow”, shortcut.
        self.action_Reconnect.setShortcut(_("Ctrl+R"))
        # i18n: Widget: “MainWindow”, text.
        self.action_Show.setText(_("&Show"))
        # i18n: Widget: “MainWindow”, tool tip.
        self.action_Show.setToolTip(_("Show the main window."))
        # i18n: Widget: “MainWindow”, text.
        self.action_ToggleOutput.setText(_("Toggle &output"))
        # i18n: Widget: “MainWindow”, tool tip.
        self.action_ToggleOutput.setToolTip(_("Toggle the output."))
        # i18n: Widget: “MainWindow”, shortcut.
        self.action_ToggleOutput.setShortcut(_("Ctrl+."))
from plover.gui_qt.dictionaries_widget import DictionariesWidget
from . import resources_rc
