# automatically generated by the FlatBuffers compiler, do not modify

# namespace: PubSubConfigurationType

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CloseAndUpdateOutput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CloseAndUpdateOutput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCloseAndUpdateOutput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CloseAndUpdateOutput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CloseAndUpdateOutput
    def ChangesApplied(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CloseAndUpdateOutput
    def ReferencesResults(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.builtin.StatusCode import StatusCode
            obj = StatusCode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CloseAndUpdateOutput
    def ReferencesResultsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CloseAndUpdateOutput
    def ReferencesResultsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CloseAndUpdateOutput
    def ConfigurationValues(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.PubSubConfigurationValueDataType import PubSubConfigurationValueDataType
            obj = PubSubConfigurationValueDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CloseAndUpdateOutput
    def ConfigurationValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CloseAndUpdateOutput
    def ConfigurationValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # CloseAndUpdateOutput
    def ConfigurationObjects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.builtin.NodeId import NodeId
            obj = NodeId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CloseAndUpdateOutput
    def ConfigurationObjectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CloseAndUpdateOutput
    def ConfigurationObjectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def CloseAndUpdateOutputStart(builder): builder.StartObject(4)
def Start(builder):
    return CloseAndUpdateOutputStart(builder)
def CloseAndUpdateOutputAddChangesApplied(builder, changesApplied): builder.PrependBoolSlot(0, changesApplied, 0)
def AddChangesApplied(builder, changesApplied):
    return CloseAndUpdateOutputAddChangesApplied(builder, changesApplied)
def CloseAndUpdateOutputAddReferencesResults(builder, referencesResults): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(referencesResults), 0)
def AddReferencesResults(builder, referencesResults):
    return CloseAndUpdateOutputAddReferencesResults(builder, referencesResults)
def CloseAndUpdateOutputStartReferencesResultsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartReferencesResultsVector(builder, numElems):
    return CloseAndUpdateOutputStartReferencesResultsVector(builder, numElems)
def CloseAndUpdateOutputAddConfigurationValues(builder, configurationValues): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(configurationValues), 0)
def AddConfigurationValues(builder, configurationValues):
    return CloseAndUpdateOutputAddConfigurationValues(builder, configurationValues)
def CloseAndUpdateOutputStartConfigurationValuesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartConfigurationValuesVector(builder, numElems):
    return CloseAndUpdateOutputStartConfigurationValuesVector(builder, numElems)
def CloseAndUpdateOutputAddConfigurationObjects(builder, configurationObjects): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(configurationObjects), 0)
def AddConfigurationObjects(builder, configurationObjects):
    return CloseAndUpdateOutputAddConfigurationObjects(builder, configurationObjects)
def CloseAndUpdateOutputStartConfigurationObjectsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartConfigurationObjectsVector(builder, numElems):
    return CloseAndUpdateOutputStartConfigurationObjectsVector(builder, numElems)
def CloseAndUpdateOutputEnd(builder): return builder.EndObject()
def End(builder):
    return CloseAndUpdateOutputEnd(builder)
import comm.opcua.builtin.NodeId
import comm.opcua.builtin.StatusCode
import comm.opcua.structure.PubSubConfigurationValueDataType
try:
    from typing import List
except:
    pass

class CloseAndUpdateOutputT(object):

    # CloseAndUpdateOutputT
    def __init__(self):
        self.changesApplied = False  # type: bool
        self.referencesResults = None  # type: List[comm.opcua.builtin.StatusCode.StatusCodeT]
        self.configurationValues = None  # type: List[comm.opcua.structure.PubSubConfigurationValueDataType.PubSubConfigurationValueDataTypeT]
        self.configurationObjects = None  # type: List[comm.opcua.builtin.NodeId.NodeIdT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        closeAndUpdateOutput = CloseAndUpdateOutput()
        closeAndUpdateOutput.Init(buf, pos)
        return cls.InitFromObj(closeAndUpdateOutput)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, closeAndUpdateOutput):
        x = CloseAndUpdateOutputT()
        x._UnPack(closeAndUpdateOutput)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.changesApplied == other.changesApplied and \
            self.referencesResults == other.referencesResults and \
            self.configurationValues == other.configurationValues and \
            self.configurationObjects == other.configurationObjects

    # CloseAndUpdateOutputT
    def _UnPack(self, closeAndUpdateOutput):
        if closeAndUpdateOutput is None:
            return
        self.changesApplied = closeAndUpdateOutput.ChangesApplied()
        if not closeAndUpdateOutput.ReferencesResultsIsNone():
            self.referencesResults = []
            for i in range(closeAndUpdateOutput.ReferencesResultsLength()):
                if closeAndUpdateOutput.ReferencesResults(i) is None:
                    self.referencesResults.append(None)
                else:
                    statusCode_ = comm.opcua.builtin.StatusCode.StatusCodeT.InitFromObj(closeAndUpdateOutput.ReferencesResults(i))
                    self.referencesResults.append(statusCode_)
        if not closeAndUpdateOutput.ConfigurationValuesIsNone():
            self.configurationValues = []
            for i in range(closeAndUpdateOutput.ConfigurationValuesLength()):
                if closeAndUpdateOutput.ConfigurationValues(i) is None:
                    self.configurationValues.append(None)
                else:
                    pubSubConfigurationValueDataType_ = comm.opcua.structure.PubSubConfigurationValueDataType.PubSubConfigurationValueDataTypeT.InitFromObj(closeAndUpdateOutput.ConfigurationValues(i))
                    self.configurationValues.append(pubSubConfigurationValueDataType_)
        if not closeAndUpdateOutput.ConfigurationObjectsIsNone():
            self.configurationObjects = []
            for i in range(closeAndUpdateOutput.ConfigurationObjectsLength()):
                if closeAndUpdateOutput.ConfigurationObjects(i) is None:
                    self.configurationObjects.append(None)
                else:
                    nodeId_ = comm.opcua.builtin.NodeId.NodeIdT.InitFromObj(closeAndUpdateOutput.ConfigurationObjects(i))
                    self.configurationObjects.append(nodeId_)

    # CloseAndUpdateOutputT
    def Pack(self, builder):
        if self.referencesResults is not None:
            referencesResultslist = []
            for i in range(len(self.referencesResults)):
                referencesResultslist.append(self.referencesResults[i].Pack(builder))
            CloseAndUpdateOutputStartReferencesResultsVector(builder, len(self.referencesResults))
            for i in reversed(range(len(self.referencesResults))):
                builder.PrependUOffsetTRelative(referencesResultslist[i])
            referencesResults = builder.EndVector()
        if self.configurationValues is not None:
            configurationValueslist = []
            for i in range(len(self.configurationValues)):
                configurationValueslist.append(self.configurationValues[i].Pack(builder))
            CloseAndUpdateOutputStartConfigurationValuesVector(builder, len(self.configurationValues))
            for i in reversed(range(len(self.configurationValues))):
                builder.PrependUOffsetTRelative(configurationValueslist[i])
            configurationValues = builder.EndVector()
        if self.configurationObjects is not None:
            configurationObjectslist = []
            for i in range(len(self.configurationObjects)):
                configurationObjectslist.append(self.configurationObjects[i].Pack(builder))
            CloseAndUpdateOutputStartConfigurationObjectsVector(builder, len(self.configurationObjects))
            for i in reversed(range(len(self.configurationObjects))):
                builder.PrependUOffsetTRelative(configurationObjectslist[i])
            configurationObjects = builder.EndVector()
        CloseAndUpdateOutputStart(builder)
        CloseAndUpdateOutputAddChangesApplied(builder, self.changesApplied)
        if self.referencesResults is not None:
            CloseAndUpdateOutputAddReferencesResults(builder, referencesResults)
        if self.configurationValues is not None:
            CloseAndUpdateOutputAddConfigurationValues(builder, configurationValues)
        if self.configurationObjects is not None:
            CloseAndUpdateOutputAddConfigurationObjects(builder, configurationObjects)
        closeAndUpdateOutput = CloseAndUpdateOutputEnd(builder)
        return closeAndUpdateOutput
