# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Table for just one single boolean value
class KVPCfgBool(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KVPCfgBool()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKVPCfgBool(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KVPCfgBool
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # the value
    # KVPCfgBool
    def BoolVal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def KVPCfgBoolStart(builder): builder.StartObject(1)
def Start(builder):
    return KVPCfgBoolStart(builder)
def KVPCfgBoolAddBoolVal(builder, boolVal): builder.PrependBoolSlot(0, boolVal, 0)
def AddBoolVal(builder, boolVal):
    return KVPCfgBoolAddBoolVal(builder, boolVal)
def KVPCfgBoolEnd(builder): return builder.EndObject()
def End(builder):
    return KVPCfgBoolEnd(builder)

class KVPCfgBoolT(object):

    # KVPCfgBoolT
    def __init__(self):
        self.boolVal = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kvpcfgBool = KVPCfgBool()
        kvpcfgBool.Init(buf, pos)
        return cls.InitFromObj(kvpcfgBool)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kvpcfgBool):
        x = KVPCfgBoolT()
        x._UnPack(kvpcfgBool)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.boolVal == other.boolVal

    # KVPCfgBoolT
    def _UnPack(self, kvpcfgBool):
        if kvpcfgBool is None:
            return
        self.boolVal = kvpcfgBool.BoolVal()

    # KVPCfgBoolT
    def Pack(self, builder):
        KVPCfgBoolStart(builder)
        KVPCfgBoolAddBoolVal(builder, self.boolVal)
        kvpcfgBool = KVPCfgBoolEnd(builder)
        return kvpcfgBool
