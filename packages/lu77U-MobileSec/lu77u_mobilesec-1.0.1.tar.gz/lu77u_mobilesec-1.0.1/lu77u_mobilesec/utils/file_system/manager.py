#!/usr/bin/env python3
"""
File System Manager

Provides utilities for file operations, saving prompts, fixes, and other file management tasks.
"""

import os
import json
import time
from pathlib import Path
from typing import Dict, List, Optional, Any, Union


class FileSystemManager:
    """Manages file system operations for the application"""
    
    def __init__(self, base_dir: Optional[str] = None):
        """Initialize file system manager"""
        self.base_dir = base_dir or os.getcwd()
    
    def save_prompt(self, content: str, filename: str, directory: Optional[str] = None) -> Optional[str]:
        """Save prompt content to file"""
        try:
            if directory:
                save_dir = directory
            else:
                save_dir = os.path.join(self.base_dir, 'prompts')
            
            os.makedirs(save_dir, exist_ok=True)
            file_path = os.path.join(save_dir, filename)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"💾 Saved prompt to: {file_path}")
            return file_path
            
        except Exception as e:
            print(f"❌ Failed to save prompt: {e}")
            return None
    
    def save_to_file(
        self, 
        content: str, 
        filename: str, 
        directory: Optional[str] = None,
        create_dirs: bool = True
    ) -> Optional[str]:
        """Save content to file"""
        try:
            if directory:
                save_dir = directory
            else:
                save_dir = self.base_dir
            
            if create_dirs:
                os.makedirs(save_dir, exist_ok=True)
            
            file_path = os.path.join(save_dir, filename)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return file_path
            
        except Exception as e:
            print(f"❌ Failed to save file: {e}")
            return None
    
    def save_fix_to_file(
        self, 
        vuln: Dict[str, Any], 
        fix_content: str, 
        index: int,
        fixes_dir: Optional[str] = None
    ) -> str:
        """Save vulnerability fix content to file"""
        try:
            if fixes_dir:
                save_dir = fixes_dir
            else:
                save_dir = os.path.join(self.base_dir, 'fixes')
            
            os.makedirs(save_dir, exist_ok=True)
            
            # Generate filename
            title = vuln.get('title', 'Unknown').replace(' ', '_').replace('/', '_')
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filename = f"fix_{index}_{title}_{timestamp}.md"
            
            # Sanitize filename
            filename = "".join(c for c in filename if c.isalnum() or c in "._-").rstrip()
            if len(filename) > 100:
                filename = filename[:97] + "..."
            
            file_path = os.path.join(save_dir, filename)
            
            # Create fix content with metadata
            fix_document = f"""# Security Fix Report

## Vulnerability Information
- **Title**: {vuln.get('title', 'Unknown')}
- **Severity**: {vuln.get('severity', 'Unknown')}
- **Location**: {vuln.get('location', 'Unknown')}
- **Fix Index**: {index}
- **Generated**: {time.strftime("%Y-%m-%d %H:%M:%S")}

## Description
{vuln.get('description', 'No description available')}

## Impact
{vuln.get('impact', 'No impact information available')}

## Recommended Fix
{fix_content}

## Implementation Notes
{vuln.get('recommendation', 'No specific recommendations provided')}

---
*Generated by lu77U-MobileSec*
"""
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(fix_document)
            
            print(f"💾 Saved fix to: {file_path}")
            return file_path
            
        except Exception as e:
            print(f"❌ Failed to save fix: {e}")
            return ""
    
    def save_json(
        self, 
        data: Union[Dict, List], 
        filename: str, 
        directory: Optional[str] = None
    ) -> Optional[str]:
        """Save data as JSON file"""
        try:
            if directory:
                save_dir = directory
            else:
                save_dir = self.base_dir
            
            os.makedirs(save_dir, exist_ok=True)
            file_path = os.path.join(save_dir, filename)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            return file_path
            
        except Exception as e:
            print(f"❌ Failed to save JSON: {e}")
            return None
    
    def load_json(self, file_path: str) -> Optional[Union[Dict, List]]:
        """Load data from JSON file"""
        try:
            if not os.path.exists(file_path):
                return None
            
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
                
        except Exception as e:
            print(f"❌ Failed to load JSON: {e}")
            return None
    
    def read_file(self, file_path: str, encoding: str = 'utf-8') -> Optional[str]:
        """Read content from file"""
        try:
            if not os.path.exists(file_path):
                return None
            
            with open(file_path, 'r', encoding=encoding) as f:
                return f.read()
                
        except Exception as e:
            print(f"❌ Failed to read file: {e}")
            return None
    
    def ensure_directory(self, directory: str) -> bool:
        """Ensure directory exists"""
        try:
            os.makedirs(directory, exist_ok=True)
            return True
        except Exception as e:
            print(f"❌ Failed to create directory: {e}")
            return False
    
    def get_file_size(self, file_path: str) -> int:
        """Get file size in bytes"""
        try:
            if os.path.exists(file_path):
                return os.path.getsize(file_path)
            return 0
        except Exception:
            return 0
    
    def list_files(self, directory: str, pattern: Optional[str] = None) -> List[str]:
        """List files in directory, optionally filtering by pattern"""
        try:
            if not os.path.exists(directory):
                return []
            
            files = []
            for file in os.listdir(directory):
                file_path = os.path.join(directory, file)
                if os.path.isfile(file_path):
                    if pattern is None or pattern in file:
                        files.append(file_path)
            
            return sorted(files)
            
        except Exception as e:
            print(f"❌ Failed to list files: {e}")
            return []
    
    def delete_file(self, file_path: str) -> bool:
        """Delete file if it exists"""
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                return True
            return False
        except Exception as e:
            print(f"❌ Failed to delete file: {e}")
            return False
    
    def create_backup(self, file_path: str) -> Optional[str]:
        """Create backup of file"""
        try:
            if not os.path.exists(file_path):
                return None
            
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            backup_path = f"{file_path}.backup_{timestamp}"
            
            import shutil
            shutil.copy2(file_path, backup_path)
            
            return backup_path
            
        except Exception as e:
            print(f"❌ Failed to create backup: {e}")
            return None


# Global instance for easy access
file_manager = FileSystemManager()


# Convenience functions
def save_prompt(content: str, filename: str, directory: Optional[str] = None) -> Optional[str]:
    """Save prompt content to file"""
    return file_manager.save_prompt(content, filename, directory)


def save_to_file(
    content: str, 
    filename: str, 
    directory: Optional[str] = None,
    create_dirs: bool = True
) -> Optional[str]:
    """Save content to file"""
    return file_manager.save_to_file(content, filename, directory, create_dirs)


def save_fix_to_file(
    vuln: Dict[str, Any], 
    fix_content: str, 
    index: int,
    fixes_dir: Optional[str] = None
) -> str:
    """Save vulnerability fix content to file"""
    return file_manager.save_fix_to_file(vuln, fix_content, index, fixes_dir)
