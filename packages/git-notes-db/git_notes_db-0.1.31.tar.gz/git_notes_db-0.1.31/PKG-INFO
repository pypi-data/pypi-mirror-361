Metadata-Version: 2.4
Name: git-notes-db
Version: 0.1.31
Summary: Store and access structured data in git-notes
Author-email: Chris Scutcher <chris@scutcher.uk>
License: This is free and unencumbered software released into the public domain.
        
        Anyone is free to copy, modify, publish, use, compile, sell, or
        distribute this software, either in source code form or as a compiled
        binary, for any purpose, commercial or non-commercial, and by any
        means.
        
        In jurisdictions that recognize copyright laws, the author or authors
        of this software dedicate any and all copyright interest in the
        software to the public domain. We make this dedication for the benefit
        of the public at large and to the detriment of our heirs and
        successors. We intend this dedication to be an overt act of
        relinquishment in perpetuity of all present and future rights to this
        software under copyright law.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
        IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
        OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
        ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
        OTHER DEALINGS IN THE SOFTWARE.
        
        For more information, please refer to <https://unlicense.org>
        
Project-URL: Homepage, https://gitlab.com/cscutcher-public/git-notes-db
Project-URL: Repository, https://gitlab.com/cscutcher-public/git-notes-db.git
Project-URL: Homepage (Mirror), https://github.com/cscutcher/git-notes-db
Project-URL: Repository (Mirror), https://github.com/cscutcher/git-notes-db.git
Keywords: git,notes,cli,json,jq
Classifier: Development Status :: 4 - Beta
Classifier: License :: Public Domain
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Software Development :: Version Control
Requires-Python: >=3.13
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: attrs>=25.3.0
Requires-Dist: gitpython>=3.1.44
Requires-Dist: jq>=1.9.1
Requires-Dist: more-itertools>=10.7.0
Requires-Dist: pydantic>=2.11.7
Requires-Dist: rich>=14.0.0
Dynamic: license-file

# git-notes-db

[![License](https://img.shields.io/badge/license-Unlicense-blue.svg)](LICENSE)

This tool helps store structured information in git-notes.
It aims to be usable manually, but also for creating other scripts.

Usage
=====

When setting value specify a name as the first argument (this will be
`refs/notes/<name>`). In this example we use `test_results`.
The second argument is the commit this data is about.
The third argument is what to store, this can be anything that `jq` accepts, including standard JSON.

All operations must be run from within a git repository.

```console
$ git-notes-db set test_results HEAD '{passed: false, older_results: []}'
```

To read the data back;

```console
$ git-notes-db get test_results HEAD
> {"passed": false, "older_results": []}
```

When updating, the jq expression gets any original value as an input (or null
if no original value is stored). This allows for selective updating, or merging
data.

```console
$ git-notes-db set test_results HEAD '{passed: true, older_results: .older_results + [.passed]}'
$ git-notes-db get test_results HEAD
> {"passed": true, "older_results": [false]}
```

Other commands
--------------

`get_all`

It's also possible to get all known results with `get_all`. This also accepts
jq expressions which modify the output results.

`match`

Return's results matching supplied jq expression.


Todo
====

- [ ] Allow limiting queries/get by git revision range.
- [ ] Add subcommand to run some executable and store result.
      See git-branchless for inspiration.
        - Could make nice tui with textual.
- [ ] Package and push to pypi.
- [ ] Nix flake.
- [ ] Add helper to `push` given notes to a remote.
- [ ] Add helper to automatically configure git to fetch notes from remote.
- [ ] Add note merge helper. Use jq expression to handle merge.
- [ ] Add ability to specify a key (e.g. message).
      When this key is present on a result that's being set, also update a
      secondary *human readable* note for including in git log output with
      `notes.displayRef`.
- [ ] Add toggle for `match` that outputs just commits newline separated.
- [ ] Add option for `match` and `get_all` that stops searching after `n`
      results are outputted.
- [ ] Add option for `match` that fails if number of results is outside
      a given range.
- [ ] githooks / ci.
- [ ] More tutorial with usage examples.
- [ ] Feel like I've reinvented the wheel with the way I've built up the cli
      commands. I've not seen the state of CLI helper libraries recently.
      Maybe try [Typer](https://typer.tiangolo.com/).
      or [felix-martel/pydanclick: Add click options from a Pydantic
      model](https://github.com/felix-martel/pydanclick)

Development Notes
=================
- Haven't decided whether I want to primarily use
  [github](https://github.com/cscutcher/git-notes-db) or
  [gitlab](https://gitlab.com/cscutcher-public/git-notes-db).
- A bit over-engineered. Trying out some stuff.
- Trying out jujutsu VCS, commits might be weird until I work it out.
- Had originally planned to use more asyncio. Right now a bunch of stuff is
  async that probably doesn't need to be.
  Will leave this behind incase I end up wanting to parallelise things in
  future.
- Ruff should be used to format code.
- Basedpyright and ruff should both be run for static testing.
- Write unit/integration tests suitable for pytest.
