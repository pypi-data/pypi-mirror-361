# automatically generated by the FlatBuffers compiler, do not modify

# namespace: builtin

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Variant(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Variant()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVariant(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Variant
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Variant
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Variant
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def VariantStart(builder): builder.StartObject(2)
def Start(builder):
    return VariantStart(builder)
def VariantAddValueType(builder, valueType): builder.PrependUint8Slot(0, valueType, 0)
def AddValueType(builder, valueType):
    return VariantAddValueType(builder, valueType)
def VariantAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return VariantAddValue(builder, value)
def VariantEnd(builder): return builder.EndObject()
def End(builder):
    return VariantEnd(builder)
import comm.opcua.builtin.BooleanVariant
import comm.opcua.builtin.ByteStringVariant
import comm.opcua.builtin.ByteVariant
import comm.opcua.builtin.DateTimeVariant
import comm.opcua.builtin.DoubleVariant
import comm.opcua.builtin.FloatVariant
import comm.opcua.builtin.GuidVariant
import comm.opcua.builtin.Int16Variant
import comm.opcua.builtin.Int32Variant
import comm.opcua.builtin.Int64Variant
import comm.opcua.builtin.SByteVariant
import comm.opcua.builtin.StringVariant
import comm.opcua.builtin.UInt16Variant
import comm.opcua.builtin.UInt32Variant
import comm.opcua.builtin.UInt64Variant
import comm.opcua.builtin.VariantUnion
try:
    from typing import Union
except:
    pass

class VariantT(object):

    # VariantT
    def __init__(self):
        self.valueType = 0  # type: int
        self.value = None  # type: Union[None, comm.opcua.builtin.BooleanVariant.BooleanVariantT, comm.opcua.builtin.SByteVariant.SByteVariantT, comm.opcua.builtin.ByteVariant.ByteVariantT, comm.opcua.builtin.Int16Variant.Int16VariantT, comm.opcua.builtin.UInt16Variant.UInt16VariantT, comm.opcua.builtin.Int32Variant.Int32VariantT, comm.opcua.builtin.UInt32Variant.UInt32VariantT, comm.opcua.builtin.Int64Variant.Int64VariantT, comm.opcua.builtin.UInt64Variant.UInt64VariantT, comm.opcua.builtin.FloatVariant.FloatVariantT, comm.opcua.builtin.DoubleVariant.DoubleVariantT, comm.opcua.builtin.StringVariant.StringVariantT, comm.opcua.builtin.DateTimeVariant.DateTimeVariantT, comm.opcua.builtin.GuidVariant.GuidVariantT, comm.opcua.builtin.ByteStringVariant.ByteStringVariantT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        variant = Variant()
        variant.Init(buf, pos)
        return cls.InitFromObj(variant)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, variant):
        x = VariantT()
        x._UnPack(variant)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.valueType == other.valueType and \
            self.value == other.value

    # VariantT
    def _UnPack(self, variant):
        if variant is None:
            return
        self.valueType = variant.ValueType()
        self.value = comm.opcua.builtin.VariantUnion.VariantUnionCreator(self.valueType, variant.Value())

    # VariantT
    def Pack(self, builder):
        if self.value is not None:
            value = self.value.Pack(builder)
        VariantStart(builder)
        VariantAddValueType(builder, self.valueType)
        if self.value is not None:
            VariantAddValue(builder, value)
        variant = VariantEnd(builder)
        return variant
