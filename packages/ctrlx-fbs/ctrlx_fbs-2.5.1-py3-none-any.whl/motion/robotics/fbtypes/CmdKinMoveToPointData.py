# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the move to point commands for a kinematic
class CmdKinMoveToPointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CmdKinMoveToPointData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmdKinMoveToPointData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CmdKinMoveToPointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # pointName
    # CmdKinMoveToPointData
    def PointName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dynamic limits for the motion of this command
    # CmdKinMoveToPointData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # should this be a buffered command?
    # CmdKinMoveToPointData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def CmdKinMoveToPointDataStart(builder): builder.StartObject(3)
def Start(builder):
    return CmdKinMoveToPointDataStart(builder)
def CmdKinMoveToPointDataAddPointName(builder, pointName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pointName), 0)
def AddPointName(builder, pointName):
    return CmdKinMoveToPointDataAddPointName(builder, pointName)
def CmdKinMoveToPointDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return CmdKinMoveToPointDataAddLim(builder, lim)
def CmdKinMoveToPointDataAddBuffered(builder, buffered): builder.PrependBoolSlot(2, buffered, 1)
def AddBuffered(builder, buffered):
    return CmdKinMoveToPointDataAddBuffered(builder, buffered)
def CmdKinMoveToPointDataEnd(builder): return builder.EndObject()
def End(builder):
    return CmdKinMoveToPointDataEnd(builder)
import motion.core.fbtypes.DynamicLimits
try:
    from typing import Optional
except:
    pass

class CmdKinMoveToPointDataT(object):

    # CmdKinMoveToPointDataT
    def __init__(self):
        self.pointName = None  # type: str
        self.lim = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]
        self.buffered = True  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdKinMoveToPointData = CmdKinMoveToPointData()
        cmdKinMoveToPointData.Init(buf, pos)
        return cls.InitFromObj(cmdKinMoveToPointData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdKinMoveToPointData):
        x = CmdKinMoveToPointDataT()
        x._UnPack(cmdKinMoveToPointData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.pointName == other.pointName and \
            self.lim == other.lim and \
            self.buffered == other.buffered

    # CmdKinMoveToPointDataT
    def _UnPack(self, cmdKinMoveToPointData):
        if cmdKinMoveToPointData is None:
            return
        self.pointName = cmdKinMoveToPointData.PointName()
        if cmdKinMoveToPointData.Lim() is not None:
            self.lim = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(cmdKinMoveToPointData.Lim())
        self.buffered = cmdKinMoveToPointData.Buffered()

    # CmdKinMoveToPointDataT
    def Pack(self, builder):
        if self.pointName is not None:
            pointName = builder.CreateString(self.pointName)
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        CmdKinMoveToPointDataStart(builder)
        if self.pointName is not None:
            CmdKinMoveToPointDataAddPointName(builder, pointName)
        if self.lim is not None:
            CmdKinMoveToPointDataAddLim(builder, lim)
        CmdKinMoveToPointDataAddBuffered(builder, self.buffered)
        cmdKinMoveToPointData = CmdKinMoveToPointDataEnd(builder)
        return cmdKinMoveToPointData
