# coding: utf-8

"""
    PDS Registry Search API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product). 

    The version of the OpenAPI document: 1.6.0
    Contact: pds-operator@jpl.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pds.api_client.models.pds4_metadata_ops_data_file import Pds4MetadataOpsDataFile
from pds.api_client.models.pds4_metadata_ops_label_file_info import Pds4MetadataOpsLabelFileInfo
from pds.api_client.models.pds4_metadata_ops_tracking_meta import Pds4MetadataOpsTrackingMeta
from typing import Optional, Set
from typing_extensions import Self

class Pds4Metadata(BaseModel):
    """
    Pds4Metadata
    """ # noqa: E501
    node_name: Optional[StrictStr] = None
    ops_data_files: Optional[List[Pds4MetadataOpsDataFile]] = Field(default=None, alias="ops:Data_Files")
    ops_label_file_info: Optional[Pds4MetadataOpsLabelFileInfo] = Field(default=None, alias="ops:Label_File_Info")
    ops_tracking_meta: Optional[Pds4MetadataOpsTrackingMeta] = Field(default=None, alias="ops:Tracking_Meta")
    __properties: ClassVar[List[str]] = ["node_name", "ops:Data_Files", "ops:Label_File_Info", "ops:Tracking_Meta"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pds4Metadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ops_data_files (list)
        _items = []
        if self.ops_data_files:
            for _item_ops_data_files in self.ops_data_files:
                if _item_ops_data_files:
                    _items.append(_item_ops_data_files.to_dict())
            _dict['ops:Data_Files'] = _items
        # override the default output from pydantic by calling `to_dict()` of ops_label_file_info
        if self.ops_label_file_info:
            _dict['ops:Label_File_Info'] = self.ops_label_file_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ops_tracking_meta
        if self.ops_tracking_meta:
            _dict['ops:Tracking_Meta'] = self.ops_tracking_meta.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pds4Metadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "node_name": obj.get("node_name"),
            "ops:Data_Files": [Pds4MetadataOpsDataFile.from_dict(_item) for _item in obj["ops:Data_Files"]] if obj.get("ops:Data_Files") is not None else None,
            "ops:Label_File_Info": Pds4MetadataOpsLabelFileInfo.from_dict(obj["ops:Label_File_Info"]) if obj.get("ops:Label_File_Info") is not None else None,
            "ops:Tracking_Meta": Pds4MetadataOpsTrackingMeta.from_dict(obj["ops:Tracking_Meta"]) if obj.get("ops:Tracking_Meta") is not None else None
        })
        return _obj


