# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Configuration of the dynamic synchronisation behavior of a single axis
class AxsCfgDynSynchronisation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgDynSynchronisation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgDynSynchronisation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgDynSynchronisation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Reference to configuration of the dynamic synchronisation limits of the axis
    # AxsCfgDynSynchronisation
    def Limits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsCfgDynSynchronisationLim import AxsCfgDynSynchronisationLim
            obj = AxsCfgDynSynchronisationLim()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Deprecated! It doesn't use anymore. The configuration should be set with the syncWindowModuloExtended only.
    # AxsCfgDynSynchronisation
    def SyncWindowModulo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Dynamic synchronisation window modulo value
    # AxsCfgDynSynchronisation
    def SyncWindowModuloExtended(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsCfgDynSynchronisationSyncWinMod import AxsCfgDynSynchronisationSyncWinMod
            obj = AxsCfgDynSynchronisationSyncWinMod()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Selected dynamic synchronisation method for sync. commands
    # AxsCfgDynSynchronisation
    def Method(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AxsCfgDynSynchronisationStart(builder): builder.StartObject(4)
def Start(builder):
    return AxsCfgDynSynchronisationStart(builder)
def AxsCfgDynSynchronisationAddLimits(builder, limits): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(limits), 0)
def AddLimits(builder, limits):
    return AxsCfgDynSynchronisationAddLimits(builder, limits)
def AxsCfgDynSynchronisationAddSyncWindowModulo(builder, syncWindowModulo): builder.PrependFloat64Slot(1, syncWindowModulo, 0.0)
def AddSyncWindowModulo(builder, syncWindowModulo):
    return AxsCfgDynSynchronisationAddSyncWindowModulo(builder, syncWindowModulo)
def AxsCfgDynSynchronisationAddSyncWindowModuloExtended(builder, syncWindowModuloExtended): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(syncWindowModuloExtended), 0)
def AddSyncWindowModuloExtended(builder, syncWindowModuloExtended):
    return AxsCfgDynSynchronisationAddSyncWindowModuloExtended(builder, syncWindowModuloExtended)
def AxsCfgDynSynchronisationAddMethod(builder, method): builder.PrependInt8Slot(3, method, 0)
def AddMethod(builder, method):
    return AxsCfgDynSynchronisationAddMethod(builder, method)
def AxsCfgDynSynchronisationEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgDynSynchronisationEnd(builder)
import motion.sync.fbtypes.AxsCfgDynSynchronisationLim
import motion.sync.fbtypes.AxsCfgDynSynchronisationSyncWinMod
try:
    from typing import Optional
except:
    pass

class AxsCfgDynSynchronisationT(object):

    # AxsCfgDynSynchronisationT
    def __init__(self):
        self.limits = None  # type: Optional[motion.sync.fbtypes.AxsCfgDynSynchronisationLim.AxsCfgDynSynchronisationLimT]
        self.syncWindowModulo = 0.0  # type: float
        self.syncWindowModuloExtended = None  # type: Optional[motion.sync.fbtypes.AxsCfgDynSynchronisationSyncWinMod.AxsCfgDynSynchronisationSyncWinModT]
        self.method = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgDynSynchronisation = AxsCfgDynSynchronisation()
        axsCfgDynSynchronisation.Init(buf, pos)
        return cls.InitFromObj(axsCfgDynSynchronisation)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgDynSynchronisation):
        x = AxsCfgDynSynchronisationT()
        x._UnPack(axsCfgDynSynchronisation)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.limits == other.limits and \
            self.syncWindowModulo == other.syncWindowModulo and \
            self.syncWindowModuloExtended == other.syncWindowModuloExtended and \
            self.method == other.method

    # AxsCfgDynSynchronisationT
    def _UnPack(self, axsCfgDynSynchronisation):
        if axsCfgDynSynchronisation is None:
            return
        if axsCfgDynSynchronisation.Limits() is not None:
            self.limits = motion.sync.fbtypes.AxsCfgDynSynchronisationLim.AxsCfgDynSynchronisationLimT.InitFromObj(axsCfgDynSynchronisation.Limits())
        self.syncWindowModulo = axsCfgDynSynchronisation.SyncWindowModulo()
        if axsCfgDynSynchronisation.SyncWindowModuloExtended() is not None:
            self.syncWindowModuloExtended = motion.sync.fbtypes.AxsCfgDynSynchronisationSyncWinMod.AxsCfgDynSynchronisationSyncWinModT.InitFromObj(axsCfgDynSynchronisation.SyncWindowModuloExtended())
        self.method = axsCfgDynSynchronisation.Method()

    # AxsCfgDynSynchronisationT
    def Pack(self, builder):
        if self.limits is not None:
            limits = self.limits.Pack(builder)
        if self.syncWindowModuloExtended is not None:
            syncWindowModuloExtended = self.syncWindowModuloExtended.Pack(builder)
        AxsCfgDynSynchronisationStart(builder)
        if self.limits is not None:
            AxsCfgDynSynchronisationAddLimits(builder, limits)
        AxsCfgDynSynchronisationAddSyncWindowModulo(builder, self.syncWindowModulo)
        if self.syncWindowModuloExtended is not None:
            AxsCfgDynSynchronisationAddSyncWindowModuloExtended(builder, syncWindowModuloExtended)
        AxsCfgDynSynchronisationAddMethod(builder, self.method)
        axsCfgDynSynchronisation = AxsCfgDynSynchronisationEnd(builder)
        return axsCfgDynSynchronisation
