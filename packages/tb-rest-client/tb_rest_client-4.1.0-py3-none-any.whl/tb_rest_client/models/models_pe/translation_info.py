# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard Professional Edition IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.1.0PE
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class TranslationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'locale_code': 'str',
        'language': 'str',
        'country': 'str',
        'progress': 'int',
        'customized': 'bool'
    }

    attribute_map = {
        'locale_code': 'localeCode',
        'language': 'language',
        'country': 'country',
        'progress': 'progress',
        'customized': 'customized'
    }

    def __init__(self, locale_code=None, language=None, country=None, progress=None, customized=None):  # noqa: E501
        """TranslationInfo - a model defined in Swagger"""  # noqa: E501
        self._locale_code = None
        self._language = None
        self._country = None
        self._progress = None
        self._customized = None
        self.discriminator = None
        if locale_code is not None:
            self.locale_code = locale_code
        if language is not None:
            self.language = language
        if country is not None:
            self.country = country
        if progress is not None:
            self.progress = progress
        if customized is not None:
            self.customized = customized

    @property
    def locale_code(self):
        """Gets the locale_code of this TranslationInfo.  # noqa: E501

        Locale code formed by combining the ISO 639-1 language code and the ISO 3166-1 region code. For example, \"en_US\"  # noqa: E501

        :return: The locale_code of this TranslationInfo.  # noqa: E501
        :rtype: str
        """
        return self._locale_code

    @locale_code.setter
    def locale_code(self, locale_code):
        """Sets the locale_code of this TranslationInfo.

        Locale code formed by combining the ISO 639-1 language code and the ISO 3166-1 region code. For example, \"en_US\"  # noqa: E501

        :param locale_code: The locale_code of this TranslationInfo.  # noqa: E501
        :type: str
        """

        self._locale_code = locale_code

    @property
    def language(self):
        """Gets the language of this TranslationInfo.  # noqa: E501

        Locale code language display name. For example, \"Polish (Polski)\"  # noqa: E501

        :return: The language of this TranslationInfo.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this TranslationInfo.

        Locale code language display name. For example, \"Polish (Polski)\"  # noqa: E501

        :param language: The language of this TranslationInfo.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def country(self):
        """Gets the country of this TranslationInfo.  # noqa: E501

        Locale code country display name. For example, \"Poland\"  # noqa: E501

        :return: The country of this TranslationInfo.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TranslationInfo.

        Locale code country display name. For example, \"Poland\"  # noqa: E501

        :param country: The country of this TranslationInfo.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def progress(self):
        """Gets the progress of this TranslationInfo.  # noqa: E501

        Number representing translation percentage progress. For example, 40 that means 40% of all keys are translated.  # noqa: E501

        :return: The progress of this TranslationInfo.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this TranslationInfo.

        Number representing translation percentage progress. For example, 40 that means 40% of all keys are translated.  # noqa: E501

        :param progress: The progress of this TranslationInfo.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def customized(self):
        """Gets the customized of this TranslationInfo.  # noqa: E501

        Boolean representing if current language has customization.  # noqa: E501

        :return: The customized of this TranslationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._customized

    @customized.setter
    def customized(self, customized):
        """Sets the customized of this TranslationInfo.

        Boolean representing if current language has customization.  # noqa: E501

        :param customized: The customized of this TranslationInfo.  # noqa: E501
        :type: bool
        """

        self._customized = customized

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TranslationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranslationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
