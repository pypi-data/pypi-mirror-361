# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Table for a vector of boolean values
class KVPCfgBoolVector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KVPCfgBoolVector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKVPCfgBoolVector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KVPCfgBoolVector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of boolean numbers
    # KVPCfgBoolVector
    def BoolVector(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # KVPCfgBoolVector
    def BoolVectorAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # KVPCfgBoolVector
    def BoolVectorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KVPCfgBoolVector
    def BoolVectorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def KVPCfgBoolVectorStart(builder): builder.StartObject(1)
def Start(builder):
    return KVPCfgBoolVectorStart(builder)
def KVPCfgBoolVectorAddBoolVector(builder, boolVector): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(boolVector), 0)
def AddBoolVector(builder, boolVector):
    return KVPCfgBoolVectorAddBoolVector(builder, boolVector)
def KVPCfgBoolVectorStartBoolVectorVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartBoolVectorVector(builder, numElems):
    return KVPCfgBoolVectorStartBoolVectorVector(builder, numElems)
def KVPCfgBoolVectorEnd(builder): return builder.EndObject()
def End(builder):
    return KVPCfgBoolVectorEnd(builder)
try:
    from typing import List
except:
    pass

class KVPCfgBoolVectorT(object):

    # KVPCfgBoolVectorT
    def __init__(self):
        self.boolVector = None  # type: List[bool]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kvpcfgBoolVector = KVPCfgBoolVector()
        kvpcfgBoolVector.Init(buf, pos)
        return cls.InitFromObj(kvpcfgBoolVector)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kvpcfgBoolVector):
        x = KVPCfgBoolVectorT()
        x._UnPack(kvpcfgBoolVector)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.boolVector == other.boolVector

    # KVPCfgBoolVectorT
    def _UnPack(self, kvpcfgBoolVector):
        if kvpcfgBoolVector is None:
            return
        if not kvpcfgBoolVector.BoolVectorIsNone():
            if np is None:
                self.boolVector = []
                for i in range(kvpcfgBoolVector.BoolVectorLength()):
                    self.boolVector.append(kvpcfgBoolVector.BoolVector(i))
            else:
                self.boolVector = kvpcfgBoolVector.BoolVectorAsNumpy()

    # KVPCfgBoolVectorT
    def Pack(self, builder):
        if self.boolVector is not None:
            if np is not None and type(self.boolVector) is np.ndarray:
                boolVector = builder.CreateNumpyVector(self.boolVector)
            else:
                KVPCfgBoolVectorStartBoolVectorVector(builder, len(self.boolVector))
                for i in reversed(range(len(self.boolVector))):
                    builder.PrependBool(self.boolVector[i])
                boolVector = builder.EndVector()
        KVPCfgBoolVectorStart(builder)
        if self.boolVector is not None:
            KVPCfgBoolVectorAddBoolVector(builder, boolVector)
        kvpcfgBoolVector = KVPCfgBoolVectorEnd(builder)
        return kvpcfgBoolVector
