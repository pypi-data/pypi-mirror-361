# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a FlexProfile object
class AxsCfgFlexProfileObj(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgFlexProfileObj()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgFlexProfileObj(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgFlexProfileObj
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # configuration of single FlexProfiles
    # AxsCfgFlexProfileObj
    def Profiles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.AxsCfgSingleFlexProfile import AxsCfgSingleFlexProfile
            obj = AxsCfgSingleFlexProfile()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AxsCfgFlexProfileObj
    def ProfilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsCfgFlexProfileObj
    def ProfilesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def AxsCfgFlexProfileObjStart(builder): builder.StartObject(1)
def Start(builder):
    return AxsCfgFlexProfileObjStart(builder)
def AxsCfgFlexProfileObjAddProfiles(builder, profiles): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(profiles), 0)
def AddProfiles(builder, profiles):
    return AxsCfgFlexProfileObjAddProfiles(builder, profiles)
def AxsCfgFlexProfileObjStartProfilesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartProfilesVector(builder, numElems):
    return AxsCfgFlexProfileObjStartProfilesVector(builder, numElems)
def AxsCfgFlexProfileObjEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgFlexProfileObjEnd(builder)
import motion.sync.fbtypes.AxsCfgSingleFlexProfile
try:
    from typing import List
except:
    pass

class AxsCfgFlexProfileObjT(object):

    # AxsCfgFlexProfileObjT
    def __init__(self):
        self.profiles = None  # type: List[motion.sync.fbtypes.AxsCfgSingleFlexProfile.AxsCfgSingleFlexProfileT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgFlexProfileObj = AxsCfgFlexProfileObj()
        axsCfgFlexProfileObj.Init(buf, pos)
        return cls.InitFromObj(axsCfgFlexProfileObj)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgFlexProfileObj):
        x = AxsCfgFlexProfileObjT()
        x._UnPack(axsCfgFlexProfileObj)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.profiles == other.profiles

    # AxsCfgFlexProfileObjT
    def _UnPack(self, axsCfgFlexProfileObj):
        if axsCfgFlexProfileObj is None:
            return
        if not axsCfgFlexProfileObj.ProfilesIsNone():
            self.profiles = []
            for i in range(axsCfgFlexProfileObj.ProfilesLength()):
                if axsCfgFlexProfileObj.Profiles(i) is None:
                    self.profiles.append(None)
                else:
                    axsCfgSingleFlexProfile_ = motion.sync.fbtypes.AxsCfgSingleFlexProfile.AxsCfgSingleFlexProfileT.InitFromObj(axsCfgFlexProfileObj.Profiles(i))
                    self.profiles.append(axsCfgSingleFlexProfile_)

    # AxsCfgFlexProfileObjT
    def Pack(self, builder):
        if self.profiles is not None:
            profileslist = []
            for i in range(len(self.profiles)):
                profileslist.append(self.profiles[i].Pack(builder))
            AxsCfgFlexProfileObjStartProfilesVector(builder, len(self.profiles))
            for i in reversed(range(len(self.profiles))):
                builder.PrependUOffsetTRelative(profileslist[i])
            profiles = builder.EndVector()
        AxsCfgFlexProfileObjStart(builder)
        if self.profiles is not None:
            AxsCfgFlexProfileObjAddProfiles(builder, profiles)
        axsCfgFlexProfileObj = AxsCfgFlexProfileObjEnd(builder)
        return axsCfgFlexProfileObj
