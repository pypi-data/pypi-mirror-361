# automatically generated by the FlatBuffers compiler, do not modify

# namespace: PubSubConfigurationType

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CloseAndUpdateInput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CloseAndUpdateInput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCloseAndUpdateInput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CloseAndUpdateInput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CloseAndUpdateInput
    def FileHandle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CloseAndUpdateInput
    def RequireCompleteUpdate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CloseAndUpdateInput
    def ConfigurationReferences(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.PubSubConfigurationRefDataType import PubSubConfigurationRefDataType
            obj = PubSubConfigurationRefDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CloseAndUpdateInput
    def ConfigurationReferencesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CloseAndUpdateInput
    def ConfigurationReferencesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def CloseAndUpdateInputStart(builder): builder.StartObject(3)
def Start(builder):
    return CloseAndUpdateInputStart(builder)
def CloseAndUpdateInputAddFileHandle(builder, fileHandle): builder.PrependUint32Slot(0, fileHandle, 0)
def AddFileHandle(builder, fileHandle):
    return CloseAndUpdateInputAddFileHandle(builder, fileHandle)
def CloseAndUpdateInputAddRequireCompleteUpdate(builder, requireCompleteUpdate): builder.PrependBoolSlot(1, requireCompleteUpdate, 0)
def AddRequireCompleteUpdate(builder, requireCompleteUpdate):
    return CloseAndUpdateInputAddRequireCompleteUpdate(builder, requireCompleteUpdate)
def CloseAndUpdateInputAddConfigurationReferences(builder, configurationReferences): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(configurationReferences), 0)
def AddConfigurationReferences(builder, configurationReferences):
    return CloseAndUpdateInputAddConfigurationReferences(builder, configurationReferences)
def CloseAndUpdateInputStartConfigurationReferencesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartConfigurationReferencesVector(builder, numElems):
    return CloseAndUpdateInputStartConfigurationReferencesVector(builder, numElems)
def CloseAndUpdateInputEnd(builder): return builder.EndObject()
def End(builder):
    return CloseAndUpdateInputEnd(builder)
import comm.opcua.structure.PubSubConfigurationRefDataType
try:
    from typing import List
except:
    pass

class CloseAndUpdateInputT(object):

    # CloseAndUpdateInputT
    def __init__(self):
        self.fileHandle = 0  # type: int
        self.requireCompleteUpdate = False  # type: bool
        self.configurationReferences = None  # type: List[comm.opcua.structure.PubSubConfigurationRefDataType.PubSubConfigurationRefDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        closeAndUpdateInput = CloseAndUpdateInput()
        closeAndUpdateInput.Init(buf, pos)
        return cls.InitFromObj(closeAndUpdateInput)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, closeAndUpdateInput):
        x = CloseAndUpdateInputT()
        x._UnPack(closeAndUpdateInput)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.fileHandle == other.fileHandle and \
            self.requireCompleteUpdate == other.requireCompleteUpdate and \
            self.configurationReferences == other.configurationReferences

    # CloseAndUpdateInputT
    def _UnPack(self, closeAndUpdateInput):
        if closeAndUpdateInput is None:
            return
        self.fileHandle = closeAndUpdateInput.FileHandle()
        self.requireCompleteUpdate = closeAndUpdateInput.RequireCompleteUpdate()
        if not closeAndUpdateInput.ConfigurationReferencesIsNone():
            self.configurationReferences = []
            for i in range(closeAndUpdateInput.ConfigurationReferencesLength()):
                if closeAndUpdateInput.ConfigurationReferences(i) is None:
                    self.configurationReferences.append(None)
                else:
                    pubSubConfigurationRefDataType_ = comm.opcua.structure.PubSubConfigurationRefDataType.PubSubConfigurationRefDataTypeT.InitFromObj(closeAndUpdateInput.ConfigurationReferences(i))
                    self.configurationReferences.append(pubSubConfigurationRefDataType_)

    # CloseAndUpdateInputT
    def Pack(self, builder):
        if self.configurationReferences is not None:
            configurationReferenceslist = []
            for i in range(len(self.configurationReferences)):
                configurationReferenceslist.append(self.configurationReferences[i].Pack(builder))
            CloseAndUpdateInputStartConfigurationReferencesVector(builder, len(self.configurationReferences))
            for i in reversed(range(len(self.configurationReferences))):
                builder.PrependUOffsetTRelative(configurationReferenceslist[i])
            configurationReferences = builder.EndVector()
        CloseAndUpdateInputStart(builder)
        CloseAndUpdateInputAddFileHandle(builder, self.fileHandle)
        CloseAndUpdateInputAddRequireCompleteUpdate(builder, self.requireCompleteUpdate)
        if self.configurationReferences is not None:
            CloseAndUpdateInputAddConfigurationReferences(builder, configurationReferences)
        closeAndUpdateInput = CloseAndUpdateInputEnd(builder)
        return closeAndUpdateInput
