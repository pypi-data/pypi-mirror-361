# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UadpWriterGroupMessageDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UadpWriterGroupMessageDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUadpWriterGroupMessageDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UadpWriterGroupMessageDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UadpWriterGroupMessageDataType
    def GroupVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UadpWriterGroupMessageDataType
    def DataSetOrdering(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UadpWriterGroupMessageDataType
    def NetworkMessageContentMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UadpWriterGroupMessageDataType
    def SamplingOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # UadpWriterGroupMessageDataType
    def PublishingOffset(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # UadpWriterGroupMessageDataType
    def PublishingOffsetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # UadpWriterGroupMessageDataType
    def PublishingOffsetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UadpWriterGroupMessageDataType
    def PublishingOffsetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def UadpWriterGroupMessageDataTypeStart(builder): builder.StartObject(5)
def Start(builder):
    return UadpWriterGroupMessageDataTypeStart(builder)
def UadpWriterGroupMessageDataTypeAddGroupVersion(builder, groupVersion): builder.PrependUint32Slot(0, groupVersion, 0)
def AddGroupVersion(builder, groupVersion):
    return UadpWriterGroupMessageDataTypeAddGroupVersion(builder, groupVersion)
def UadpWriterGroupMessageDataTypeAddDataSetOrdering(builder, dataSetOrdering): builder.PrependInt32Slot(1, dataSetOrdering, 0)
def AddDataSetOrdering(builder, dataSetOrdering):
    return UadpWriterGroupMessageDataTypeAddDataSetOrdering(builder, dataSetOrdering)
def UadpWriterGroupMessageDataTypeAddNetworkMessageContentMask(builder, networkMessageContentMask): builder.PrependUint32Slot(2, networkMessageContentMask, 0)
def AddNetworkMessageContentMask(builder, networkMessageContentMask):
    return UadpWriterGroupMessageDataTypeAddNetworkMessageContentMask(builder, networkMessageContentMask)
def UadpWriterGroupMessageDataTypeAddSamplingOffset(builder, samplingOffset): builder.PrependFloat64Slot(3, samplingOffset, 0.0)
def AddSamplingOffset(builder, samplingOffset):
    return UadpWriterGroupMessageDataTypeAddSamplingOffset(builder, samplingOffset)
def UadpWriterGroupMessageDataTypeAddPublishingOffset(builder, publishingOffset): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(publishingOffset), 0)
def AddPublishingOffset(builder, publishingOffset):
    return UadpWriterGroupMessageDataTypeAddPublishingOffset(builder, publishingOffset)
def UadpWriterGroupMessageDataTypeStartPublishingOffsetVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartPublishingOffsetVector(builder, numElems):
    return UadpWriterGroupMessageDataTypeStartPublishingOffsetVector(builder, numElems)
def UadpWriterGroupMessageDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return UadpWriterGroupMessageDataTypeEnd(builder)
try:
    from typing import List
except:
    pass

class UadpWriterGroupMessageDataTypeT(object):

    # UadpWriterGroupMessageDataTypeT
    def __init__(self):
        self.groupVersion = 0  # type: int
        self.dataSetOrdering = 0  # type: int
        self.networkMessageContentMask = 0  # type: int
        self.samplingOffset = 0.0  # type: float
        self.publishingOffset = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        uadpWriterGroupMessageDataType = UadpWriterGroupMessageDataType()
        uadpWriterGroupMessageDataType.Init(buf, pos)
        return cls.InitFromObj(uadpWriterGroupMessageDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, uadpWriterGroupMessageDataType):
        x = UadpWriterGroupMessageDataTypeT()
        x._UnPack(uadpWriterGroupMessageDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.groupVersion == other.groupVersion and \
            self.dataSetOrdering == other.dataSetOrdering and \
            self.networkMessageContentMask == other.networkMessageContentMask and \
            self.samplingOffset == other.samplingOffset and \
            self.publishingOffset == other.publishingOffset

    # UadpWriterGroupMessageDataTypeT
    def _UnPack(self, uadpWriterGroupMessageDataType):
        if uadpWriterGroupMessageDataType is None:
            return
        self.groupVersion = uadpWriterGroupMessageDataType.GroupVersion()
        self.dataSetOrdering = uadpWriterGroupMessageDataType.DataSetOrdering()
        self.networkMessageContentMask = uadpWriterGroupMessageDataType.NetworkMessageContentMask()
        self.samplingOffset = uadpWriterGroupMessageDataType.SamplingOffset()
        if not uadpWriterGroupMessageDataType.PublishingOffsetIsNone():
            if np is None:
                self.publishingOffset = []
                for i in range(uadpWriterGroupMessageDataType.PublishingOffsetLength()):
                    self.publishingOffset.append(uadpWriterGroupMessageDataType.PublishingOffset(i))
            else:
                self.publishingOffset = uadpWriterGroupMessageDataType.PublishingOffsetAsNumpy()

    # UadpWriterGroupMessageDataTypeT
    def Pack(self, builder):
        if self.publishingOffset is not None:
            if np is not None and type(self.publishingOffset) is np.ndarray:
                publishingOffset = builder.CreateNumpyVector(self.publishingOffset)
            else:
                UadpWriterGroupMessageDataTypeStartPublishingOffsetVector(builder, len(self.publishingOffset))
                for i in reversed(range(len(self.publishingOffset))):
                    builder.PrependFloat64(self.publishingOffset[i])
                publishingOffset = builder.EndVector()
        UadpWriterGroupMessageDataTypeStart(builder)
        UadpWriterGroupMessageDataTypeAddGroupVersion(builder, self.groupVersion)
        UadpWriterGroupMessageDataTypeAddDataSetOrdering(builder, self.dataSetOrdering)
        UadpWriterGroupMessageDataTypeAddNetworkMessageContentMask(builder, self.networkMessageContentMask)
        UadpWriterGroupMessageDataTypeAddSamplingOffset(builder, self.samplingOffset)
        if self.publishingOffset is not None:
            UadpWriterGroupMessageDataTypeAddPublishingOffset(builder, publishingOffset)
        uadpWriterGroupMessageDataType = UadpWriterGroupMessageDataTypeEnd(builder)
        return uadpWriterGroupMessageDataType
