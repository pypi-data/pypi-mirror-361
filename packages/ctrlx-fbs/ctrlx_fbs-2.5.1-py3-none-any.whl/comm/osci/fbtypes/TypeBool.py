# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TypeBool(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TypeBool()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTypeBool(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TypeBool
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TypeBool
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def TypeBoolStart(builder): builder.StartObject(1)
def Start(builder):
    return TypeBoolStart(builder)
def TypeBoolAddValue(builder, value): builder.PrependBoolSlot(0, value, 0)
def AddValue(builder, value):
    return TypeBoolAddValue(builder, value)
def TypeBoolEnd(builder): return builder.EndObject()
def End(builder):
    return TypeBoolEnd(builder)

class TypeBoolT(object):

    # TypeBoolT
    def __init__(self):
        self.value = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        typeBool = TypeBool()
        typeBool.Init(buf, pos)
        return cls.InitFromObj(typeBool)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, typeBool):
        x = TypeBoolT()
        x._UnPack(typeBool)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value

    # TypeBoolT
    def _UnPack(self, typeBool):
        if typeBool is None:
            return
        self.value = typeBool.Value()

    # TypeBoolT
    def Pack(self, builder):
        TypeBoolStart(builder)
        TypeBoolAddValue(builder, self.value)
        typeBool = TypeBoolEnd(builder)
        return typeBool
