# automatically generated by the FlatBuffers compiler, do not modify

# namespace: builtin

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GuidVariant(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GuidVariant()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGuidVariant(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GuidVariant
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GuidVariant
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.Guid import Guid
            obj = Guid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def GuidVariantStart(builder): builder.StartObject(1)
def Start(builder):
    return GuidVariantStart(builder)
def GuidVariantAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return GuidVariantAddValue(builder, value)
def GuidVariantEnd(builder): return builder.EndObject()
def End(builder):
    return GuidVariantEnd(builder)
import comm.opcua.builtin.Guid
try:
    from typing import Optional
except:
    pass

class GuidVariantT(object):

    # GuidVariantT
    def __init__(self):
        self.value = None  # type: Optional[comm.opcua.builtin.Guid.GuidT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        guidVariant = GuidVariant()
        guidVariant.Init(buf, pos)
        return cls.InitFromObj(guidVariant)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, guidVariant):
        x = GuidVariantT()
        x._UnPack(guidVariant)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value

    # GuidVariantT
    def _UnPack(self, guidVariant):
        if guidVariant is None:
            return
        if guidVariant.Value() is not None:
            self.value = comm.opcua.builtin.Guid.GuidT.InitFromObj(guidVariant.Value())

    # GuidVariantT
    def Pack(self, builder):
        if self.value is not None:
            value = self.value.Pack(builder)
        GuidVariantStart(builder)
        if self.value is not None:
            GuidVariantAddValue(builder, value)
        guidVariant = GuidVariantEnd(builder)
        return guidVariant
