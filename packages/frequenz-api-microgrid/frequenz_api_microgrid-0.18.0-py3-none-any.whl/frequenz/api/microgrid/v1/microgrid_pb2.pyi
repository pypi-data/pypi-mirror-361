"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz Microgrid API

Copyright:
Copyright 2022 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import builtins
import collections.abc
import frequenz.api.common.v1.metrics.bounds_pb2
import frequenz.api.common.v1.metrics.metric_sample_pb2
import frequenz.api.common.v1.microgrid.components.components_pb2
import frequenz.api.common.v1.microgrid.microgrid_pb2
import frequenz.api.common.v1.microgrid.sensors.sensors_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ComponentBoundsValidityDuration:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ComponentBoundsValidityDurationEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ComponentBoundsValidityDuration.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    COMPONENT_BOUNDS_VALIDITY_DURATION_UNSPECIFIED: _ComponentBoundsValidityDuration.ValueType  # 0
    COMPONENT_BOUNDS_VALIDITY_DURATION_5_SECONDS: _ComponentBoundsValidityDuration.ValueType  # 1
    COMPONENT_BOUNDS_VALIDITY_DURATION_1_MINUTE: _ComponentBoundsValidityDuration.ValueType  # 2
    COMPONENT_BOUNDS_VALIDITY_DURATION_5_MINUTES: _ComponentBoundsValidityDuration.ValueType  # 3
    COMPONENT_BOUNDS_VALIDITY_DURATION_15_MINUTES: _ComponentBoundsValidityDuration.ValueType  # 4

class ComponentBoundsValidityDuration(_ComponentBoundsValidityDuration, metaclass=_ComponentBoundsValidityDurationEnumTypeWrapper):
    """The duration for which a given list of bounds will stay in effect."""

COMPONENT_BOUNDS_VALIDITY_DURATION_UNSPECIFIED: ComponentBoundsValidityDuration.ValueType  # 0
COMPONENT_BOUNDS_VALIDITY_DURATION_5_SECONDS: ComponentBoundsValidityDuration.ValueType  # 1
COMPONENT_BOUNDS_VALIDITY_DURATION_1_MINUTE: ComponentBoundsValidityDuration.ValueType  # 2
COMPONENT_BOUNDS_VALIDITY_DURATION_5_MINUTES: ComponentBoundsValidityDuration.ValueType  # 3
COMPONENT_BOUNDS_VALIDITY_DURATION_15_MINUTES: ComponentBoundsValidityDuration.ValueType  # 4
global___ComponentBoundsValidityDuration = ComponentBoundsValidityDuration

@typing.final
class GetMicrogridMetadataResponse(google.protobuf.message.Message):
    """Metadata that describes a microgrid."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MICROGRID_FIELD_NUMBER: builtins.int
    @property
    def microgrid(self) -> frequenz.api.common.v1.microgrid.microgrid_pb2.Microgrid:
        """The location of the microgrid, in geographical co-ordinates."""

    def __init__(
        self,
        *,
        microgrid: frequenz.api.common.v1.microgrid.microgrid_pb2.Microgrid | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["microgrid", b"microgrid"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["microgrid", b"microgrid"]) -> None: ...

global___GetMicrogridMetadataResponse = GetMicrogridMetadataResponse

@typing.final
class ListComponentsRequest(google.protobuf.message.Message):
    """Request parameters for the RPC `ListComponents`.
    Contains filtering parameters for listing components.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_IDS_FIELD_NUMBER: builtins.int
    CATEGORIES_FIELD_NUMBER: builtins.int
    @property
    def component_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Return components that have the specified IDs only."""

    @property
    def categories(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[frequenz.api.common.v1.microgrid.components.components_pb2.ComponentCategory.ValueType]:
        """Return components that have the specified categories only."""

    def __init__(
        self,
        *,
        component_ids: collections.abc.Iterable[builtins.int] | None = ...,
        categories: collections.abc.Iterable[frequenz.api.common.v1.microgrid.components.components_pb2.ComponentCategory.ValueType] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["categories", b"categories", "component_ids", b"component_ids"]) -> None: ...

global___ListComponentsRequest = ListComponentsRequest

@typing.final
class ListComponentsResponse(google.protobuf.message.Message):
    """A message containing a list of components.
    Used as the return type in the RPC `ListComponents`.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENTS_FIELD_NUMBER: builtins.int
    @property
    def components(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[frequenz.api.common.v1.microgrid.components.components_pb2.Component]: ...
    def __init__(
        self,
        *,
        components: collections.abc.Iterable[frequenz.api.common.v1.microgrid.components.components_pb2.Component] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["components", b"components"]) -> None: ...

global___ListComponentsResponse = ListComponentsResponse

@typing.final
class ListSensorRequest(google.protobuf.message.Message):
    """Request parameters for the RPC `ListSensors`.
    Contains filtering parameters for listing sensors.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SENSOR_IDS_FIELD_NUMBER: builtins.int
    CATEGORIES_FIELD_NUMBER: builtins.int
    @property
    def sensor_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Return sensors that have the specified IDs only."""

    @property
    def categories(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[frequenz.api.common.v1.microgrid.sensors.sensors_pb2.SensorCategory.ValueType]:
        """Return sensors that have the specified categories only."""

    def __init__(
        self,
        *,
        sensor_ids: collections.abc.Iterable[builtins.int] | None = ...,
        categories: collections.abc.Iterable[frequenz.api.common.v1.microgrid.sensors.sensors_pb2.SensorCategory.ValueType] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["categories", b"categories", "sensor_ids", b"sensor_ids"]) -> None: ...

global___ListSensorRequest = ListSensorRequest

@typing.final
class ListSensorsResponse(google.protobuf.message.Message):
    """Response message for the RPC `ListSensors`.
    A message containing a list of sensors.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SENSORS_FIELD_NUMBER: builtins.int
    @property
    def sensors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[frequenz.api.common.v1.microgrid.sensors.sensors_pb2.Sensor]: ...
    def __init__(
        self,
        *,
        sensors: collections.abc.Iterable[frequenz.api.common.v1.microgrid.sensors.sensors_pb2.Sensor] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["sensors", b"sensors"]) -> None: ...

global___ListSensorsResponse = ListSensorsResponse

@typing.final
class ListConnectionsRequest(google.protobuf.message.Message):
    """Request parameters for the RPC `ListConnections`.
    Contains filtering parameters for listing connections.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STARTS_FIELD_NUMBER: builtins.int
    ENDS_FIELD_NUMBER: builtins.int
    @property
    def starts(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Only return connections that start from the specified component ID(s):
        if empty, connections with any `start` will be returned
        """

    @property
    def ends(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Only return connections that end at the specified component ID(s):
        if empty, connections with any `end` will be returned
        """

    def __init__(
        self,
        *,
        starts: collections.abc.Iterable[builtins.int] | None = ...,
        ends: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["ends", b"ends", "starts", b"starts"]) -> None: ...

global___ListConnectionsRequest = ListConnectionsRequest

@typing.final
class ListConnectionsResponse(google.protobuf.message.Message):
    """Response message for the RPC `ListConnections`.
    Contains a list of connections.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONNECTIONS_FIELD_NUMBER: builtins.int
    @property
    def connections(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[frequenz.api.common.v1.microgrid.components.components_pb2.ComponentConnection]:
        """The list of connections."""

    def __init__(
        self,
        *,
        connections: collections.abc.Iterable[frequenz.api.common.v1.microgrid.components.components_pb2.ComponentConnection] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["connections", b"connections"]) -> None: ...

global___ListConnectionsResponse = ListConnectionsResponse

@typing.final
class ReceiveComponentDataStreamRequest(google.protobuf.message.Message):
    """Request parameters for the RPC `ReceiveComponentDataStream`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ComponentDataStreamFilter(google.protobuf.message.Message):
        """A message for specifying a filter to apply to the stream."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        METRICS_FIELD_NUMBER: builtins.int
        @property
        def metrics(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[frequenz.api.common.v1.metrics.metric_sample_pb2.Metric.ValueType]:
            """List of metrics to return. Only the specified metrics will be returned.

            !!! note
                At least one metric must be specified. If no metric is specified,
                then the stream will return an error.

            !!! note
                Components may not support all metrics. If a component does not
                support a given metric, then the returned data stream will not
                contain that metric.
            """

        def __init__(
            self,
            *,
            metrics: collections.abc.Iterable[frequenz.api.common.v1.metrics.metric_sample_pb2.Metric.ValueType] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["metrics", b"metrics"]) -> None: ...

    COMPONENT_ID_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    component_id: builtins.int
    """The component ID to subscribe to."""
    @property
    def filter(self) -> global___ReceiveComponentDataStreamRequest.ComponentDataStreamFilter:
        """The filter to apply to the stream.

        This field is optional. If this is not provided, then the stream will
        return all metrics for the given component. If this is provided, then the
        stream will return only the metrics specified in the filter.
        """

    def __init__(
        self,
        *,
        component_id: builtins.int = ...,
        filter: global___ReceiveComponentDataStreamRequest.ComponentDataStreamFilter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["component_id", b"component_id", "filter", b"filter"]) -> None: ...

global___ReceiveComponentDataStreamRequest = ReceiveComponentDataStreamRequest

@typing.final
class ReceiveComponentDataStreamResponse(google.protobuf.message.Message):
    """A data sample from a component in the microgrid.
    Components belonging to all categories and types can be represented using
    this message.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    @property
    def data(self) -> frequenz.api.common.v1.microgrid.components.components_pb2.ComponentData: ...
    def __init__(
        self,
        *,
        data: frequenz.api.common.v1.microgrid.components.components_pb2.ComponentData | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["data", b"data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data", b"data"]) -> None: ...

global___ReceiveComponentDataStreamResponse = ReceiveComponentDataStreamResponse

@typing.final
class ReceiveSensorDataStreamRequest(google.protobuf.message.Message):
    """Request parameters for the RPC `ReceiveSensorDataStream`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class SensorDataStreamFilter(google.protobuf.message.Message):
        """A message for specifying a filter to apply to the stream."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        METRICS_FIELD_NUMBER: builtins.int
        @property
        def metrics(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[frequenz.api.common.v1.metrics.metric_sample_pb2.Metric.ValueType]:
            """List of metrics to return. Only the specified metrics will be returned.

            !!! note
                At least one metric must be specified. If no metric is specified,
                then the stream will return an error.

            !!! note
                Sensors may not support all metrics. If a sensor does not support a
                given metric, then the returned data stream will not contain that
                metric.
            """

        def __init__(
            self,
            *,
            metrics: collections.abc.Iterable[frequenz.api.common.v1.metrics.metric_sample_pb2.Metric.ValueType] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["metrics", b"metrics"]) -> None: ...

    SENSOR_ID_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    sensor_id: builtins.int
    """The sensor ID to subscribe to."""
    @property
    def filter(self) -> global___ReceiveSensorDataStreamRequest.SensorDataStreamFilter:
        """The filter to apply to the stream.

        This field is optional. If this is not provided, then the stream will
        return all metrics for the given component. If this is provided, then the
        stream will return only the metrics specified in the filter.
        """

    def __init__(
        self,
        *,
        sensor_id: builtins.int = ...,
        filter: global___ReceiveSensorDataStreamRequest.SensorDataStreamFilter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter", "sensor_id", b"sensor_id"]) -> None: ...

global___ReceiveSensorDataStreamRequest = ReceiveSensorDataStreamRequest

@typing.final
class ReceiveSensorDataStreamResponse(google.protobuf.message.Message):
    """A data sample from a sensor in the microgrid."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    @property
    def data(self) -> frequenz.api.common.v1.microgrid.sensors.sensors_pb2.SensorData:
        """The sensor data."""

    def __init__(
        self,
        *,
        data: frequenz.api.common.v1.microgrid.sensors.sensors_pb2.SensorData | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["data", b"data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data", b"data"]) -> None: ...

global___ReceiveSensorDataStreamResponse = ReceiveSensorDataStreamResponse

@typing.final
class AddComponentBoundsRequest(google.protobuf.message.Message):
    """Request parameters for the RPC `AddComponentBounds`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_ID_FIELD_NUMBER: builtins.int
    TARGET_METRIC_FIELD_NUMBER: builtins.int
    BOUNDS_FIELD_NUMBER: builtins.int
    VALIDITY_DURATION_FIELD_NUMBER: builtins.int
    component_id: builtins.int
    """The ID of the target component."""
    target_metric: frequenz.api.common.v1.metrics.metric_sample_pb2.Metric.ValueType
    """The target metric whose bounds have to be set."""
    validity_duration: global___ComponentBoundsValidityDuration.ValueType
    """The duration for which the given bounds will stay in effect.
    If this field is not provided, then the bounds will be removed after a
    default duration of 5 seconds.
    """
    @property
    def bounds(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[frequenz.api.common.v1.metrics.bounds_pb2.Bounds]:
        """A list of bounds for the target metric.
        While incorporating these bounds, the API will ensure that overlapping
        pairs of bounds are merged into a single pair of bounds, and
        non-overlapping ones are kept separated.
        """

    def __init__(
        self,
        *,
        component_id: builtins.int = ...,
        target_metric: frequenz.api.common.v1.metrics.metric_sample_pb2.Metric.ValueType = ...,
        bounds: collections.abc.Iterable[frequenz.api.common.v1.metrics.bounds_pb2.Bounds] | None = ...,
        validity_duration: global___ComponentBoundsValidityDuration.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["bounds", b"bounds", "component_id", b"component_id", "target_metric", b"target_metric", "validity_duration", b"validity_duration"]) -> None: ...

global___AddComponentBoundsRequest = AddComponentBoundsRequest

@typing.final
class AddComponentBoundsResponse(google.protobuf.message.Message):
    """Response message for the RPC `AddComponentBounds`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TS_FIELD_NUMBER: builtins.int
    @property
    def ts(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The timestamp until which the given bounds will stay in effect."""

    def __init__(
        self,
        *,
        ts: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ts", b"ts"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["ts", b"ts"]) -> None: ...

global___AddComponentBoundsResponse = AddComponentBoundsResponse

@typing.final
class SetComponentPowerActiveRequest(google.protobuf.message.Message):
    """Request parameters for the RPC `SetComponentPowerActive`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_ID_FIELD_NUMBER: builtins.int
    POWER_FIELD_NUMBER: builtins.int
    REQUEST_LIFETIME_FIELD_NUMBER: builtins.int
    component_id: builtins.int
    """The ID of the component to set the output active power of."""
    power: builtins.float
    """The output active power level, in watts.
    -ve values are for discharging, and +ve values are for charging.
    """
    request_lifetime: builtins.int
    """The duration, in seconds, until which the request will stay in effect.
    This duration has to be between 10 seconds and 15 minutes (including both
    limits), otherwise the request will be rejected.
    If not provided, it defaults to 60s.
    """
    def __init__(
        self,
        *,
        component_id: builtins.int = ...,
        power: builtins.float = ...,
        request_lifetime: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_request_lifetime", b"_request_lifetime", "request_lifetime", b"request_lifetime"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_request_lifetime", b"_request_lifetime", "component_id", b"component_id", "power", b"power", "request_lifetime", b"request_lifetime"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_request_lifetime", b"_request_lifetime"]) -> typing.Literal["request_lifetime"] | None: ...

global___SetComponentPowerActiveRequest = SetComponentPowerActiveRequest

@typing.final
class SetComponentPowerActiveResponse(google.protobuf.message.Message):
    """Response message for the RPC `SetComponentPowerActive`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALID_UNTIL_FIELD_NUMBER: builtins.int
    @property
    def valid_until(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The timestamp until which the given power command will stay in effect.
        After this timestamp, the component power will be set to 0, if the API
        receives no further power commands. By default, this timestamp will be set
        to the current time plus 60 seconds.
        """

    def __init__(
        self,
        *,
        valid_until: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["valid_until", b"valid_until"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["valid_until", b"valid_until"]) -> None: ...

global___SetComponentPowerActiveResponse = SetComponentPowerActiveResponse

@typing.final
class SetComponentPowerReactiveRequest(google.protobuf.message.Message):
    """Request parameters for the RPC `SetComponentPowerReactive`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_ID_FIELD_NUMBER: builtins.int
    POWER_FIELD_NUMBER: builtins.int
    REQUEST_LIFETIME_FIELD_NUMBER: builtins.int
    component_id: builtins.int
    """The ID of the component to set the output reactive power of."""
    power: builtins.float
    """The output reactive power level, in VAr.

    The standard of polarity is as per the IEEE 1459-2010 standard
    definitions:
    - positive reactive is inductive (current is lagging the voltage)
    - negative reactive is capacitive (current is leading the voltage)
    """
    request_lifetime: builtins.int
    """The duration, in seconds, until which the request will stay in effect.
    This duration has to be between 10 seconds and 15 minutes (including both
    limits), otherwise the request will be rejected.
    If not provided, it defaults to 60s.
    """
    def __init__(
        self,
        *,
        component_id: builtins.int = ...,
        power: builtins.float = ...,
        request_lifetime: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_request_lifetime", b"_request_lifetime", "request_lifetime", b"request_lifetime"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_request_lifetime", b"_request_lifetime", "component_id", b"component_id", "power", b"power", "request_lifetime", b"request_lifetime"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_request_lifetime", b"_request_lifetime"]) -> typing.Literal["request_lifetime"] | None: ...

global___SetComponentPowerReactiveRequest = SetComponentPowerReactiveRequest

@typing.final
class SetComponentPowerReactiveResponse(google.protobuf.message.Message):
    """Response message for the RPC `SetComponentPowerReactive`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALID_UNTIL_FIELD_NUMBER: builtins.int
    @property
    def valid_until(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The timestamp until which the given power command will stay in effect.
        After this timestamp, the component power will be set to 0, if the API
        receives no further power commands. By default, this timestamp will be set
        to the current time plus 60 seconds.
        """

    def __init__(
        self,
        *,
        valid_until: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["valid_until", b"valid_until"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["valid_until", b"valid_until"]) -> None: ...

global___SetComponentPowerReactiveResponse = SetComponentPowerReactiveResponse

@typing.final
class StartComponentRequest(google.protobuf.message.Message):
    """Request parameters for the RPC `StartComponent`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_ID_FIELD_NUMBER: builtins.int
    component_id: builtins.int
    """The component ID to start."""
    def __init__(
        self,
        *,
        component_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["component_id", b"component_id"]) -> None: ...

global___StartComponentRequest = StartComponentRequest

@typing.final
class PutComponentInStandbyRequest(google.protobuf.message.Message):
    """Request parameters for the RPC `PutComponentInStandby`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_ID_FIELD_NUMBER: builtins.int
    component_id: builtins.int
    """The component ID to set to standby."""
    def __init__(
        self,
        *,
        component_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["component_id", b"component_id"]) -> None: ...

global___PutComponentInStandbyRequest = PutComponentInStandbyRequest

@typing.final
class StopComponentRequest(google.protobuf.message.Message):
    """Request parameters for the RPC `StopComponent`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_ID_FIELD_NUMBER: builtins.int
    component_id: builtins.int
    """The component ID to stop."""
    def __init__(
        self,
        *,
        component_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["component_id", b"component_id"]) -> None: ...

global___StopComponentRequest = StopComponentRequest

@typing.final
class AckComponentErrorRequest(google.protobuf.message.Message):
    """Request parameters for the RPC `AckComponentError`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_ID_FIELD_NUMBER: builtins.int
    component_id: builtins.int
    """The component ID to acknowledge the error for."""
    def __init__(
        self,
        *,
        component_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["component_id", b"component_id"]) -> None: ...

global___AckComponentErrorRequest = AckComponentErrorRequest
