# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis torque command
class AxsCmdTorqueData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdTorqueData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdTorqueData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdTorqueData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded target torque (can be negative)
    # AxsCmdTorqueData
    def TargetTrq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 1.0

    # commanded target torque ramp (only positive)
    # AxsCmdTorqueData
    def TrqRamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # dynamic limits for the motion of this command
    # AxsCmdTorqueData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCmdTorqueDataStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsCmdTorqueDataStart(builder)
def AxsCmdTorqueDataAddTargetTrq(builder, targetTrq): builder.PrependFloat64Slot(0, targetTrq, 1.0)
def AddTargetTrq(builder, targetTrq):
    return AxsCmdTorqueDataAddTargetTrq(builder, targetTrq)
def AxsCmdTorqueDataAddTrqRamp(builder, trqRamp): builder.PrependFloat64Slot(1, trqRamp, 0.0)
def AddTrqRamp(builder, trqRamp):
    return AxsCmdTorqueDataAddTrqRamp(builder, trqRamp)
def AxsCmdTorqueDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return AxsCmdTorqueDataAddLim(builder, lim)
def AxsCmdTorqueDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdTorqueDataEnd(builder)
import motion.core.fbtypes.DynamicLimits
try:
    from typing import Optional
except:
    pass

class AxsCmdTorqueDataT(object):

    # AxsCmdTorqueDataT
    def __init__(self):
        self.targetTrq = 1.0  # type: float
        self.trqRamp = 0.0  # type: float
        self.lim = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdTorqueData = AxsCmdTorqueData()
        axsCmdTorqueData.Init(buf, pos)
        return cls.InitFromObj(axsCmdTorqueData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdTorqueData):
        x = AxsCmdTorqueDataT()
        x._UnPack(axsCmdTorqueData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.targetTrq == other.targetTrq and \
            self.trqRamp == other.trqRamp and \
            self.lim == other.lim

    # AxsCmdTorqueDataT
    def _UnPack(self, axsCmdTorqueData):
        if axsCmdTorqueData is None:
            return
        self.targetTrq = axsCmdTorqueData.TargetTrq()
        self.trqRamp = axsCmdTorqueData.TrqRamp()
        if axsCmdTorqueData.Lim() is not None:
            self.lim = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(axsCmdTorqueData.Lim())

    # AxsCmdTorqueDataT
    def Pack(self, builder):
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        AxsCmdTorqueDataStart(builder)
        AxsCmdTorqueDataAddTargetTrq(builder, self.targetTrq)
        AxsCmdTorqueDataAddTrqRamp(builder, self.trqRamp)
        if self.lim is not None:
            AxsCmdTorqueDataAddLim(builder, lim)
        axsCmdTorqueData = AxsCmdTorqueDataEnd(builder)
        return axsCmdTorqueData
