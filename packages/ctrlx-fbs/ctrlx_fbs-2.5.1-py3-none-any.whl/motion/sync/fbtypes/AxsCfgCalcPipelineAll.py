# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of all calculation pipelines
class AxsCfgCalcPipelineAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgCalcPipelineAll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgCalcPipelineAll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgCalcPipelineAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all pipelines
    # AxsCfgCalcPipelineAll
    def Pipelines(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.AxsCfgCalcPipeline import AxsCfgCalcPipeline
            obj = AxsCfgCalcPipeline()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AxsCfgCalcPipelineAll
    def PipelinesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsCfgCalcPipelineAll
    def PipelinesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def AxsCfgCalcPipelineAllStart(builder): builder.StartObject(1)
def Start(builder):
    return AxsCfgCalcPipelineAllStart(builder)
def AxsCfgCalcPipelineAllAddPipelines(builder, pipelines): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pipelines), 0)
def AddPipelines(builder, pipelines):
    return AxsCfgCalcPipelineAllAddPipelines(builder, pipelines)
def AxsCfgCalcPipelineAllStartPipelinesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPipelinesVector(builder, numElems):
    return AxsCfgCalcPipelineAllStartPipelinesVector(builder, numElems)
def AxsCfgCalcPipelineAllEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgCalcPipelineAllEnd(builder)
import motion.sync.fbtypes.AxsCfgCalcPipeline
try:
    from typing import List
except:
    pass

class AxsCfgCalcPipelineAllT(object):

    # AxsCfgCalcPipelineAllT
    def __init__(self):
        self.pipelines = None  # type: List[motion.sync.fbtypes.AxsCfgCalcPipeline.AxsCfgCalcPipelineT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgCalcPipelineAll = AxsCfgCalcPipelineAll()
        axsCfgCalcPipelineAll.Init(buf, pos)
        return cls.InitFromObj(axsCfgCalcPipelineAll)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgCalcPipelineAll):
        x = AxsCfgCalcPipelineAllT()
        x._UnPack(axsCfgCalcPipelineAll)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.pipelines == other.pipelines

    # AxsCfgCalcPipelineAllT
    def _UnPack(self, axsCfgCalcPipelineAll):
        if axsCfgCalcPipelineAll is None:
            return
        if not axsCfgCalcPipelineAll.PipelinesIsNone():
            self.pipelines = []
            for i in range(axsCfgCalcPipelineAll.PipelinesLength()):
                if axsCfgCalcPipelineAll.Pipelines(i) is None:
                    self.pipelines.append(None)
                else:
                    axsCfgCalcPipeline_ = motion.sync.fbtypes.AxsCfgCalcPipeline.AxsCfgCalcPipelineT.InitFromObj(axsCfgCalcPipelineAll.Pipelines(i))
                    self.pipelines.append(axsCfgCalcPipeline_)

    # AxsCfgCalcPipelineAllT
    def Pack(self, builder):
        if self.pipelines is not None:
            pipelineslist = []
            for i in range(len(self.pipelines)):
                pipelineslist.append(self.pipelines[i].Pack(builder))
            AxsCfgCalcPipelineAllStartPipelinesVector(builder, len(self.pipelines))
            for i in reversed(range(len(self.pipelines))):
                builder.PrependUOffsetTRelative(pipelineslist[i])
            pipelines = builder.EndVector()
        AxsCfgCalcPipelineAllStart(builder)
        if self.pipelines is not None:
            AxsCfgCalcPipelineAllAddPipelines(builder, pipelines)
        axsCfgCalcPipelineAll = AxsCfgCalcPipelineAllEnd(builder)
        return axsCfgCalcPipelineAll
