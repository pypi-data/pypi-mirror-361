# automatically generated by the FlatBuffers compiler, do not modify

# namespace: device

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ExportParFile(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExportParFile()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExportParFile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExportParFile
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ExportParFile
    def FileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ExportParFile
    def BackupType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def ExportParFileStart(builder): builder.StartObject(2)
def Start(builder):
    return ExportParFileStart(builder)
def ExportParFileAddFileName(builder, fileName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fileName), 0)
def AddFileName(builder, fileName):
    return ExportParFileAddFileName(builder, fileName)
def ExportParFileAddBackupType(builder, backupType): builder.PrependInt8Slot(1, backupType, 0)
def AddBackupType(builder, backupType):
    return ExportParFileAddBackupType(builder, backupType)
def ExportParFileEnd(builder): return builder.EndObject()
def End(builder):
    return ExportParFileEnd(builder)

class ExportParFileT(object):

    # ExportParFileT
    def __init__(self):
        self.fileName = None  # type: str
        self.backupType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        exportParFile = ExportParFile()
        exportParFile.Init(buf, pos)
        return cls.InitFromObj(exportParFile)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, exportParFile):
        x = ExportParFileT()
        x._UnPack(exportParFile)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.fileName == other.fileName and \
            self.backupType == other.backupType

    # ExportParFileT
    def _UnPack(self, exportParFile):
        if exportParFile is None:
            return
        self.fileName = exportParFile.FileName()
        self.backupType = exportParFile.BackupType()

    # ExportParFileT
    def Pack(self, builder):
        if self.fileName is not None:
            fileName = builder.CreateString(self.fileName)
        ExportParFileStart(builder)
        if self.fileName is not None:
            ExportParFileAddFileName(builder, fileName)
        ExportParFileAddBackupType(builder, self.backupType)
        exportParFile = ExportParFileEnd(builder)
        return exportParFile
