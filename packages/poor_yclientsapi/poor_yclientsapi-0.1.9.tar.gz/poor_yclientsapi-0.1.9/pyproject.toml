[tool.poetry]
name = "poor_yclientsapi"
version = "0.1.9"
description = "Poor collection of API methods for Yclients app"
authors = ["Maksim Kosinov <mkosinov@mail.ru>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/mkosinov/yclientsapi"
packages = [{from = "src", include = "yclientsapi"}]
package-mode = true

[tool.poetry.dependencies]
python = "^3.12"
httpx = "^0.27.2"
orjson = "^3.10.7"
python-dotenv = "^1.0.1"
pydantic = "^2.9.1"

[tool.poetry.group.tests.dependencies]
pytest = "^8.3.2"
pytest-cov = "^6.1.1"


[tool.poetry.group.dev.dependencies]
ruff = "^0.11.10"

[tool.coverage.run]
source = ["src/yclientsapi"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "raise ImportError",
]
show_missing = true
fail_under = 80

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["src/yclientsapi/tests/integration"]
markers = [
    "staff",
    "service",
    "auth",
]
addopts = "--cov=src/yclientsapi --cov-report=term-missing"

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP",  # pyupgrade
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "Q",  # flake8-quotes
    "RUF",  # ruff-specific rules
]

ignore = [
    "E501",  # line too long (handled by formatter)
]

unfixable = [
    "F401",  # unused imports
    "F841",  # unused variables
]

[tool.ruff.lint.isort]
known-first-party = ["yclientsapi"]
