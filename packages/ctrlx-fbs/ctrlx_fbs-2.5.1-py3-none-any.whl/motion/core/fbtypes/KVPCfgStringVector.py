# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Table for a vector of string values
class KVPCfgStringVector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KVPCfgStringVector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKVPCfgStringVector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KVPCfgStringVector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of strings
    # KVPCfgStringVector
    def StringVector(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KVPCfgStringVector
    def StringVectorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KVPCfgStringVector
    def StringVectorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def KVPCfgStringVectorStart(builder): builder.StartObject(1)
def Start(builder):
    return KVPCfgStringVectorStart(builder)
def KVPCfgStringVectorAddStringVector(builder, stringVector): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stringVector), 0)
def AddStringVector(builder, stringVector):
    return KVPCfgStringVectorAddStringVector(builder, stringVector)
def KVPCfgStringVectorStartStringVectorVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStringVectorVector(builder, numElems):
    return KVPCfgStringVectorStartStringVectorVector(builder, numElems)
def KVPCfgStringVectorEnd(builder): return builder.EndObject()
def End(builder):
    return KVPCfgStringVectorEnd(builder)
try:
    from typing import List
except:
    pass

class KVPCfgStringVectorT(object):

    # KVPCfgStringVectorT
    def __init__(self):
        self.stringVector = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kvpcfgStringVector = KVPCfgStringVector()
        kvpcfgStringVector.Init(buf, pos)
        return cls.InitFromObj(kvpcfgStringVector)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kvpcfgStringVector):
        x = KVPCfgStringVectorT()
        x._UnPack(kvpcfgStringVector)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.stringVector == other.stringVector

    # KVPCfgStringVectorT
    def _UnPack(self, kvpcfgStringVector):
        if kvpcfgStringVector is None:
            return
        if not kvpcfgStringVector.StringVectorIsNone():
            self.stringVector = []
            for i in range(kvpcfgStringVector.StringVectorLength()):
                self.stringVector.append(kvpcfgStringVector.StringVector(i))

    # KVPCfgStringVectorT
    def Pack(self, builder):
        if self.stringVector is not None:
            stringVectorlist = []
            for i in range(len(self.stringVector)):
                stringVectorlist.append(builder.CreateString(self.stringVector[i]))
            KVPCfgStringVectorStartStringVectorVector(builder, len(self.stringVector))
            for i in reversed(range(len(self.stringVector))):
                builder.PrependUOffsetTRelative(stringVectorlist[i])
            stringVector = builder.EndVector()
        KVPCfgStringVectorStart(builder)
        if self.stringVector is not None:
            KVPCfgStringVectorAddStringVector(builder, stringVector)
        kvpcfgStringVector = KVPCfgStringVectorEnd(builder)
        return kvpcfgStringVector
