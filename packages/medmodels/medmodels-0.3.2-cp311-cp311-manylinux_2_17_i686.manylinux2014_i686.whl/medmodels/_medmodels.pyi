from enum import Enum
from typing import (
    Callable,
    Dict,
    List,
    Optional,
    Sequence,
    TypeAlias,
    Union,
)

from medmodels.medrecord.querying import PyQueryReturnOperand, QueryResult
from medmodels.medrecord.types import (
    Attributes,
    AttributesInput,
    EdgeIndex,
    EdgeIndexInputList,
    EdgeTuple,
    Group,
    GroupInputList,
    MedRecordAttribute,
    MedRecordValue,
    NodeIndex,
    NodeIndexInputList,
    NodeTuple,
    PolarsEdgeDataFrameInput,
    PolarsNodeDataFrameInput,
)

PyDataType: TypeAlias = Union[
    PyString,
    PyInt,
    PyFloat,
    PyBool,
    PyDateTime,
    PyDuration,
    PyNull,
    PyAny,
    PyUnion,
    PyOption,
]

class PyString: ...
class PyInt: ...
class PyFloat: ...
class PyBool: ...
class PyDateTime: ...
class PyDuration: ...
class PyNull: ...
class PyAny: ...

class PyUnion:
    dtype1: PyDataType
    dtype2: PyDataType

    def __init__(self, dtype1: PyDataType, dtype2: PyDataType) -> None: ...

class PyOption:
    dtype: PyDataType

    def __init__(self, dtype: PyDataType) -> None: ...

class PyAttributeType(Enum):
    Categorical = ...
    Continuous = ...
    Temporal = ...
    Unstructured = ...

    @staticmethod
    def infer(data_type: PyDataType) -> PyAttributeType: ...

class PyAttributeDataType:
    data_type: PyDataType
    attribute_type: PyAttributeType

    def __init__(
        self, data_type: PyDataType, attribute_type: PyAttributeType
    ) -> None: ...

class PyGroupSchema:
    nodes: Dict[MedRecordAttribute, PyAttributeDataType]
    edges: Dict[MedRecordAttribute, PyAttributeDataType]

    def __init__(
        self,
        *,
        nodes: Dict[MedRecordAttribute, PyAttributeDataType],
        edges: Dict[MedRecordAttribute, PyAttributeDataType],
    ) -> None: ...
    def validate_node(self, index: NodeIndex, attributes: Attributes) -> None: ...
    def validate_edge(self, index: EdgeIndex, attributes: Attributes) -> None: ...

class PySchemaType(Enum):
    Provided = ...
    Inferred = ...

class PySchema:
    groups: List[Group]
    ungrouped: PyGroupSchema
    schema_type: PySchemaType

    def __init__(
        self,
        *,
        groups: Dict[Group, PyGroupSchema],
        ungrouped: PyGroupSchema,
        schema_type: PySchemaType = ...,
    ) -> None: ...
    @staticmethod
    def infer(medrecord: PyMedRecord) -> PySchema: ...
    def group(self, group: Group) -> PyGroupSchema: ...
    def validate_node(
        self, index: NodeIndex, attributes: Attributes, group: Optional[Group] = None
    ) -> None: ...
    def validate_edge(
        self, index: EdgeIndex, attributes: Attributes, group: Optional[Group] = None
    ) -> None: ...
    def set_node_attribute(
        self,
        attribute: MedRecordAttribute,
        data_type: PyDataType,
        attribute_type: PyAttributeType,
        group: Optional[Group] = None,
    ) -> None: ...
    def set_edge_attribute(
        self,
        attribute: MedRecordAttribute,
        data_type: PyDataType,
        attribute_type: PyAttributeType,
        group: Optional[Group] = None,
    ) -> None: ...
    def update_node_attribute(
        self,
        attribute: MedRecordAttribute,
        data_type: PyDataType,
        attribute_type: PyAttributeType,
        group: Optional[Group] = None,
    ) -> None: ...
    def update_edge_attribute(
        self,
        attribute: MedRecordAttribute,
        data_type: PyDataType,
        attribute_type: PyAttributeType,
        group: Optional[Group] = None,
    ) -> None: ...
    def remove_node_attribute(
        self, attribute: MedRecordAttribute, group: Optional[Group] = None
    ) -> None: ...
    def remove_edge_attribute(
        self, attribute: MedRecordAttribute, group: Optional[Group] = None
    ) -> None: ...
    def add_group(self, group: Group, schema: PyGroupSchema) -> None: ...
    def remove_group(self, group: Group) -> None: ...
    def freeze(self) -> None: ...
    def unfreeze(self) -> None: ...

class PyMedRecord:
    nodes: List[NodeIndex]
    edges: List[EdgeIndex]
    groups: List[Group]

    def __init__(self) -> None: ...
    @staticmethod
    def with_schema(schema: PySchema) -> PyMedRecord: ...
    @staticmethod
    def from_tuples(
        nodes: Sequence[NodeTuple],
        edges: Optional[Sequence[EdgeTuple]],
    ) -> PyMedRecord: ...
    @staticmethod
    def from_dataframes(
        nodes_dataframes: List[PolarsNodeDataFrameInput],
        edges_dataframes: List[PolarsEdgeDataFrameInput],
    ) -> PyMedRecord: ...
    @staticmethod
    def from_nodes_dataframes(
        nodes_dataframes: List[PolarsNodeDataFrameInput],
    ) -> PyMedRecord: ...
    @staticmethod
    def from_simple_example_dataset() -> PyMedRecord: ...
    @staticmethod
    def from_advanced_example_dataset() -> PyMedRecord: ...
    @staticmethod
    def from_admissions_example_dataset() -> PyMedRecord: ...
    @staticmethod
    def from_ron(path: str) -> PyMedRecord: ...
    def to_ron(self, path: str) -> None: ...
    def get_schema(self) -> PySchema: ...
    def set_schema(self, schema: PySchema) -> None: ...
    def freeze_schema(self) -> None: ...
    def unfreeze_schema(self) -> None: ...
    def node(self, node_index: NodeIndexInputList) -> Dict[NodeIndex, Attributes]: ...
    def edge(self, edge_index: EdgeIndexInputList) -> Dict[EdgeIndex, Attributes]: ...
    def outgoing_edges(
        self, node_index: NodeIndexInputList
    ) -> Dict[NodeIndex, List[EdgeIndex]]: ...
    def incoming_edges(
        self, node_index: NodeIndexInputList
    ) -> Dict[NodeIndex, List[EdgeIndex]]: ...
    def edge_endpoints(
        self, edge_index: EdgeIndexInputList
    ) -> Dict[EdgeIndex, tuple[NodeIndex, NodeIndex]]: ...
    def edges_connecting(
        self,
        source_node_indices: NodeIndexInputList,
        target_node_indices: NodeIndexInputList,
    ) -> List[EdgeIndex]: ...
    def edges_connecting_undirected(
        self,
        source_node_indices: NodeIndexInputList,
        target_node_indices: NodeIndexInputList,
    ) -> List[EdgeIndex]: ...
    def remove_nodes(
        self, node_index: NodeIndexInputList
    ) -> Dict[NodeIndex, Attributes]: ...
    def replace_node_attributes(
        self, node_index: NodeIndexInputList, attributes: AttributesInput
    ) -> None: ...
    def update_node_attribute(
        self,
        node_index: NodeIndexInputList,
        attribute: MedRecordAttribute,
        value: MedRecordValue,
    ) -> None: ...
    def remove_node_attribute(
        self, node_index: NodeIndexInputList, attribute: MedRecordAttribute
    ) -> None: ...
    def add_nodes(self, nodes: Sequence[NodeTuple]) -> None: ...
    def add_nodes_dataframes(
        self, nodes_dataframe: List[PolarsNodeDataFrameInput]
    ) -> None: ...
    def remove_edges(
        self, edge_index: EdgeIndexInputList
    ) -> Dict[EdgeIndex, Attributes]: ...
    def replace_edge_attributes(
        self, edge_index: EdgeIndexInputList, attributes: AttributesInput
    ) -> None: ...
    def update_edge_attribute(
        self,
        edge_index: EdgeIndexInputList,
        attribute: MedRecordAttribute,
        value: MedRecordValue,
    ) -> None: ...
    def remove_edge_attribute(
        self, edge_index: EdgeIndexInputList, attribute: MedRecordAttribute
    ) -> None: ...
    def add_edges(self, edges: Sequence[EdgeTuple]) -> List[EdgeIndex]: ...
    def add_edges_dataframes(
        self, edges_dataframe: List[PolarsEdgeDataFrameInput]
    ) -> List[EdgeIndex]: ...
    def add_group(
        self,
        group: Group,
        node_indices_to_add: Optional[NodeIndexInputList],
        edge_indices_to_add: Optional[EdgeIndexInputList],
    ) -> None: ...
    def remove_groups(self, group: GroupInputList) -> None: ...
    def add_nodes_to_group(
        self, group: Group, node_index: NodeIndexInputList
    ) -> None: ...
    def add_edges_to_group(
        self, group: Group, edge_index: EdgeIndexInputList
    ) -> None: ...
    def remove_nodes_from_group(
        self, group: Group, node_index: NodeIndexInputList
    ) -> None: ...
    def remove_edges_from_group(
        self, group: Group, edge_index: EdgeIndexInputList
    ) -> None: ...
    def nodes_in_group(self, group: GroupInputList) -> Dict[Group, List[NodeIndex]]: ...
    def edges_in_group(self, group: GroupInputList) -> Dict[Group, List[EdgeIndex]]: ...
    def groups_of_node(
        self, node_index: NodeIndexInputList
    ) -> Dict[NodeIndex, List[Group]]: ...
    def groups_of_edge(
        self, edge_index: EdgeIndexInputList
    ) -> Dict[EdgeIndex, List[Group]]: ...
    def node_count(self) -> int: ...
    def edge_count(self) -> int: ...
    def group_count(self) -> int: ...
    def contains_node(self, node_index: NodeIndex) -> bool: ...
    def contains_edge(self, edge_index: EdgeIndex) -> bool: ...
    def contains_group(self, group: Group) -> bool: ...
    def neighbors(
        self, node_indices: NodeIndexInputList
    ) -> Dict[NodeIndex, List[NodeIndex]]: ...
    def neighbors_undirected(
        self, node_indices: NodeIndexInputList
    ) -> Dict[NodeIndex, List[NodeIndex]]: ...
    def clear(self) -> None: ...
    def query_nodes(
        self, query: Callable[[PyNodeOperand], PyQueryReturnOperand]
    ) -> QueryResult: ...
    def query_edges(
        self, query: Callable[[PyEdgeOperand], PyQueryReturnOperand]
    ) -> QueryResult: ...
    def clone(self) -> PyMedRecord: ...

class PyEdgeDirection(Enum):
    Incoming = ...
    Outgoing = ...
    Both = ...

class NodeOperandGroupDiscriminator:
    class Attribute(NodeOperandGroupDiscriminator):
        def __init__(self, attribute: MedRecordAttribute) -> None: ...

class PyNodeOperand:
    def attribute(
        self, attribute: MedRecordAttribute
    ) -> PyNodeMultipleValuesWithIndexOperand: ...
    def attributes(self) -> PyNodeAttributesTreeOperand: ...
    def index(self) -> PyNodeIndicesOperand: ...
    def in_group(self, group: Union[Group, List[Group]]) -> None: ...
    def has_attribute(
        self, attribute: Union[MedRecordAttribute, List[MedRecordAttribute]]
    ) -> None: ...
    def edges(self, direction: PyEdgeDirection) -> PyEdgeOperand: ...
    def neighbors(self, direction: PyEdgeDirection) -> PyNodeOperand: ...
    def either_or(
        self,
        either: Callable[[PyNodeOperand], None],
        or_: Callable[[PyNodeOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyNodeOperand], None]) -> None: ...
    def group_by(
        self, discriminator: NodeOperandGroupDiscriminator
    ) -> PyNodeGroupOperand: ...
    def deep_clone(self) -> PyNodeOperand: ...

class PyNodeGroupOperand:
    def attribute(
        self, attribute: MedRecordAttribute
    ) -> PyNodeMultipleValuesWithIndexGroupOperand: ...
    def attributes(self) -> PyNodeAttributesTreeGroupOperand: ...
    def index(self) -> PyNodeIndicesGroupOperand: ...
    def in_group(self, group: Union[Group, List[Group]]) -> None: ...
    def has_attribute(
        self, attribute: Union[MedRecordAttribute, List[MedRecordAttribute]]
    ) -> None: ...
    def edges(self, direction: PyEdgeDirection) -> PyEdgeGroupOperand: ...
    def neighbors(self, direction: PyEdgeDirection) -> PyNodeGroupOperand: ...
    def either_or(
        self,
        either: Callable[[PyNodeOperand], None],
        or_: Callable[[PyNodeOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyNodeOperand], None]) -> None: ...
    def deep_clone(self) -> PyNodeGroupOperand: ...

PyNodeIndexComparisonOperand: TypeAlias = Union[NodeIndex, PyNodeIndexOperand]
PyNodeIndexArithmeticOperand: TypeAlias = PyNodeIndexComparisonOperand
PyNodeIndicesComparisonOperand: TypeAlias = Union[List[NodeIndex], PyNodeIndicesOperand]

class PyNodeIndicesOperand:
    def max(self) -> PyNodeIndexOperand: ...
    def min(self) -> PyNodeIndexOperand: ...
    def count(self) -> PyNodeIndexOperand: ...
    def sum(self) -> PyNodeIndexOperand: ...
    def random(self) -> PyNodeIndexOperand: ...
    def greater_than(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def greater_than_or_equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def less_than(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def not_equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def starts_with(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def ends_with(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def contains(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def is_in(self, indices: PyNodeIndicesComparisonOperand) -> None: ...
    def is_not_in(self, indices: PyNodeIndicesComparisonOperand) -> None: ...
    def add(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def sub(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def mul(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def pow(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def mod(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeIndicesOperand], None],
        or_: Callable[[PyNodeIndicesOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyNodeIndicesOperand], None]) -> None: ...
    def deep_clone(self) -> PyNodeIndicesOperand: ...

class PyNodeIndicesGroupOperand:
    def max(self) -> PyNodeIndexGroupOperand: ...
    def min(self) -> PyNodeIndexGroupOperand: ...
    def count(self) -> PyNodeIndexGroupOperand: ...
    def sum(self) -> PyNodeIndexGroupOperand: ...
    def random(self) -> PyNodeIndexGroupOperand: ...
    def greater_than(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def greater_than_or_equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def less_than(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def not_equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def starts_with(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def ends_with(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def contains(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def is_in(self, indices: PyNodeIndicesComparisonOperand) -> None: ...
    def is_not_in(self, indices: PyNodeIndicesComparisonOperand) -> None: ...
    def add(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def sub(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def mul(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def pow(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def mod(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeIndicesOperand], None],
        or_: Callable[[PyNodeIndicesOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyNodeIndicesOperand], None]) -> None: ...
    def ungroup(self) -> PyNodeIndicesOperand: ...
    def deep_clone(self) -> PyNodeIndicesGroupOperand: ...

class PyNodeIndexOperand:
    def greater_than(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def greater_than_or_equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def less_than(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def not_equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def starts_with(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def ends_with(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def contains(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def is_in(self, indices: PyNodeIndicesComparisonOperand) -> None: ...
    def is_not_in(self, indices: PyNodeIndicesComparisonOperand) -> None: ...
    def add(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def sub(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def mul(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def pow(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def mod(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeIndexOperand], None],
        or_: Callable[[PyNodeIndexOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyNodeIndexOperand], None]) -> None: ...
    def deep_clone(self) -> PyNodeIndexOperand: ...

class PyNodeIndexGroupOperand:
    def greater_than(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def greater_than_or_equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def less_than(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def not_equal_to(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def starts_with(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def ends_with(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def contains(self, index: PyNodeIndexComparisonOperand) -> None: ...
    def is_in(self, indices: PyNodeIndicesComparisonOperand) -> None: ...
    def is_not_in(self, indices: PyNodeIndicesComparisonOperand) -> None: ...
    def add(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def sub(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def mul(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def pow(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def mod(self, index: PyNodeIndexArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeIndexOperand], None],
        or_: Callable[[PyNodeIndexOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyNodeIndexOperand], None]) -> None: ...
    def ungroup(self) -> PyNodeIndicesOperand: ...
    def deep_clone(self) -> PyNodeIndexGroupOperand: ...

class EdgeOperandGroupDiscriminator:
    class Attribute(EdgeOperandGroupDiscriminator):
        def __init__(self, attribute: MedRecordAttribute) -> None: ...

    class SourceNode(EdgeOperandGroupDiscriminator):
        def __init__(self) -> None: ...

    class TargetNode(EdgeOperandGroupDiscriminator):
        def __init__(self) -> None: ...

    class Parallel(EdgeOperandGroupDiscriminator):
        def __init__(self) -> None: ...

class PyEdgeOperand:
    def attribute(
        self, attribute: MedRecordAttribute
    ) -> PyEdgeMultipleValuesWithIndexOperand: ...
    def attributes(self) -> PyEdgeAttributesTreeOperand: ...
    def index(self) -> PyEdgeIndicesOperand: ...
    def in_group(self, group: Union[Group, List[Group]]) -> None: ...
    def has_attribute(
        self, attribute: Union[MedRecordAttribute, List[MedRecordAttribute]]
    ) -> None: ...
    def source_node(self) -> PyNodeOperand: ...
    def target_node(self) -> PyNodeOperand: ...
    def either_or(
        self,
        either: Callable[[PyEdgeOperand], None],
        or_: Callable[[PyEdgeOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyEdgeOperand], None]) -> None: ...
    def group_by(
        self, discriminator: EdgeOperandGroupDiscriminator
    ) -> PyEdgeGroupOperand: ...
    def deep_clone(self) -> PyEdgeOperand: ...

class PyEdgeGroupOperand:
    def attribute(
        self, attribute: MedRecordAttribute
    ) -> PyEdgeMultipleValuesWithIndexGroupOperand: ...
    def attributes(self) -> PyEdgeAttributesTreeGroupOperand: ...
    def index(self) -> PyEdgeIndicesGroupOperand: ...
    def in_group(self, group: Union[Group, List[Group]]) -> None: ...
    def has_attribute(
        self, attribute: Union[MedRecordAttribute, List[MedRecordAttribute]]
    ) -> None: ...
    def source_node(self) -> PyNodeGroupOperand: ...
    def target_node(self) -> PyNodeGroupOperand: ...
    def either_or(
        self,
        either: Callable[[PyEdgeOperand], None],
        or_: Callable[[PyEdgeOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyEdgeOperand], None]) -> None: ...
    def deep_clone(self) -> PyEdgeGroupOperand: ...

PyEdgeIndexComparisonOperand: TypeAlias = Union[EdgeIndex, PyEdgeIndexOperand]
PyEdgeIndexArithmeticOperand: TypeAlias = PyEdgeIndexComparisonOperand
PyEdgeIndicesComparisonOperand: TypeAlias = Union[List[EdgeIndex], PyEdgeIndicesOperand]

class PyEdgeIndicesOperand:
    def max(self) -> PyEdgeIndexOperand: ...
    def min(self) -> PyEdgeIndexOperand: ...
    def count(self) -> PyEdgeIndexOperand: ...
    def sum(self) -> PyEdgeIndexOperand: ...
    def random(self) -> PyEdgeIndexOperand: ...
    def greater_than(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def greater_than_or_equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def less_than(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def not_equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def starts_with(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def ends_with(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def contains(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def is_in(self, indices: PyEdgeIndicesComparisonOperand) -> None: ...
    def is_not_in(self, indices: PyEdgeIndicesComparisonOperand) -> None: ...
    def add(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def sub(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def mul(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def pow(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def mod(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeIndicesOperand], None],
        or_: Callable[[PyEdgeIndicesOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyEdgeIndicesOperand], None]) -> None: ...
    def deep_clone(self) -> PyEdgeIndicesOperand: ...

class PyEdgeIndicesGroupOperand:
    def max(self) -> PyEdgeIndexGroupOperand: ...
    def min(self) -> PyEdgeIndexGroupOperand: ...
    def count(self) -> PyEdgeIndexGroupOperand: ...
    def sum(self) -> PyEdgeIndexGroupOperand: ...
    def random(self) -> PyEdgeIndexGroupOperand: ...
    def greater_than(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def greater_than_or_equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def less_than(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def not_equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def starts_with(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def ends_with(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def contains(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def is_in(self, indices: PyEdgeIndicesComparisonOperand) -> None: ...
    def is_not_in(self, indices: PyEdgeIndicesComparisonOperand) -> None: ...
    def add(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def sub(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def mul(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def pow(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def mod(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeIndicesOperand], None],
        or_: Callable[[PyEdgeIndicesOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyEdgeIndicesOperand], None]) -> None: ...
    def ungroup(self) -> PyEdgeIndicesOperand: ...
    def deep_clone(self) -> PyEdgeIndicesGroupOperand: ...

class PyEdgeIndexOperand:
    def greater_than(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def greater_than_or_equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def less_than(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def not_equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def starts_with(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def ends_with(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def contains(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def is_in(self, indices: PyEdgeIndicesComparisonOperand) -> None: ...
    def is_not_in(self, indices: PyEdgeIndicesComparisonOperand) -> None: ...
    def add(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def sub(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def mul(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def pow(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def mod(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeIndexOperand], None],
        or_: Callable[[PyEdgeIndexOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyEdgeIndexOperand], None]) -> None: ...
    def deep_clone(self) -> PyEdgeIndexOperand: ...

class PyEdgeIndexGroupOperand:
    def greater_than(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def greater_than_or_equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def less_than(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def not_equal_to(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def starts_with(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def ends_with(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def contains(self, index: PyEdgeIndexComparisonOperand) -> None: ...
    def is_in(self, indices: PyEdgeIndicesComparisonOperand) -> None: ...
    def is_not_in(self, indices: PyEdgeIndicesComparisonOperand) -> None: ...
    def add(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def sub(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def mul(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def pow(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def mod(self, index: PyEdgeIndexArithmeticOperand) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeIndexOperand], None],
        or_: Callable[[PyEdgeIndexOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyEdgeIndexOperand], None]) -> None: ...
    def ungroup(self) -> PyEdgeIndicesOperand: ...
    def deep_clone(self) -> PyEdgeIndexGroupOperand: ...

PySingleValueComparisonOperand: TypeAlias = Union[
    MedRecordValue,
    PyNodeSingleValueWithIndexOperand,
    PyNodeSingleValueWithoutIndexOperand,
    PyEdgeSingleValueWithIndexOperand,
    PyEdgeSingleValueWithoutIndexOperand,
]
PySingleValueArithmeticOperand: TypeAlias = PySingleValueComparisonOperand
PyMultipleValuesComparisonOperand: TypeAlias = Union[
    List[MedRecordValue],
    PyNodeMultipleValuesWithIndexOperand,
    PyNodeMultipleValuesWithoutIndexOperand,
    PyEdgeMultipleValuesWithIndexOperand,
    PyEdgeMultipleValuesWithoutIndexOperand,
]

class PyNodeMultipleValuesWithIndexOperand:
    def max(self) -> PyNodeSingleValueWithIndexOperand: ...
    def min(self) -> PyNodeSingleValueWithIndexOperand: ...
    def mean(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def median(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def mode(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def std(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def var(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def count(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def sum(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def random(self) -> PyNodeSingleValueWithIndexOperand: ...
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeMultipleValuesWithIndexOperand], None],
        or_: Callable[[PyNodeMultipleValuesWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeMultipleValuesWithIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyNodeMultipleValuesWithIndexOperand: ...

class PyNodeMultipleValuesWithIndexGroupOperand:
    def max(self) -> PyNodeSingleValueWithIndexGroupOperand: ...
    def min(self) -> PyNodeSingleValueWithIndexGroupOperand: ...
    def mean(self) -> PyNodeSingleValueWithoutIndexGroupOperand: ...
    def median(self) -> PyNodeSingleValueWithoutIndexGroupOperand: ...
    def mode(self) -> PyNodeSingleValueWithoutIndexGroupOperand: ...
    def std(self) -> PyNodeSingleValueWithoutIndexGroupOperand: ...
    def var(self) -> PyNodeSingleValueWithoutIndexGroupOperand: ...
    def count(self) -> PyNodeSingleValueWithoutIndexGroupOperand: ...
    def sum(self) -> PyNodeSingleValueWithoutIndexGroupOperand: ...
    def random(self) -> PyNodeSingleValueWithIndexGroupOperand: ...
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeMultipleValuesWithIndexOperand], None],
        or_: Callable[[PyNodeMultipleValuesWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeMultipleValuesWithIndexOperand], None]
    ) -> None: ...
    def ungroup(self) -> PyNodeMultipleValuesWithIndexOperand: ...
    def deep_clone(self) -> PyNodeMultipleValuesWithIndexGroupOperand: ...

class PyNodeMultipleValuesWithoutIndexOperand:
    def max(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def min(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def mean(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def median(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def mode(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def std(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def var(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def count(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def sum(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def random(self) -> PyNodeSingleValueWithoutIndexOperand: ...
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeMultipleValuesWithoutIndexOperand], None],
        or_: Callable[[PyNodeMultipleValuesWithoutIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeMultipleValuesWithoutIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyNodeMultipleValuesWithoutIndexOperand: ...

class PyEdgeMultipleValuesWithIndexOperand:
    def max(self) -> PyEdgeSingleValueWithIndexOperand: ...
    def min(self) -> PyEdgeSingleValueWithIndexOperand: ...
    def mean(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def median(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def mode(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def std(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def var(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def count(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def sum(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def random(self) -> PyEdgeSingleValueWithIndexOperand: ...
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeMultipleValuesWithIndexOperand], None],
        or_: Callable[[PyEdgeMultipleValuesWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeMultipleValuesWithIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyEdgeMultipleValuesWithIndexOperand: ...

class PyEdgeMultipleValuesWithIndexGroupOperand:
    def max(self) -> PyEdgeSingleValueWithIndexGroupOperand: ...
    def min(self) -> PyEdgeSingleValueWithIndexGroupOperand: ...
    def mean(self) -> PyEdgeSingleValueWithoutIndexGroupOperand: ...
    def median(self) -> PyEdgeSingleValueWithoutIndexGroupOperand: ...
    def mode(self) -> PyEdgeSingleValueWithoutIndexGroupOperand: ...
    def std(self) -> PyEdgeSingleValueWithoutIndexGroupOperand: ...
    def var(self) -> PyEdgeSingleValueWithoutIndexGroupOperand: ...
    def count(self) -> PyEdgeSingleValueWithoutIndexGroupOperand: ...
    def sum(self) -> PyEdgeSingleValueWithoutIndexGroupOperand: ...
    def random(self) -> PyEdgeSingleValueWithIndexGroupOperand: ...
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeMultipleValuesWithIndexOperand], None],
        or_: Callable[[PyEdgeMultipleValuesWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeMultipleValuesWithIndexOperand], None]
    ) -> None: ...
    def ungroup(self) -> PyEdgeMultipleValuesWithIndexOperand: ...
    def deep_clone(self) -> PyEdgeMultipleValuesWithIndexGroupOperand: ...

class PyEdgeMultipleValuesWithoutIndexOperand:
    def max(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def min(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def mean(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def median(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def mode(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def std(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def var(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def count(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def sum(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def random(self) -> PyEdgeSingleValueWithoutIndexOperand: ...
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeMultipleValuesWithoutIndexOperand], None],
        or_: Callable[[PyEdgeMultipleValuesWithoutIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeMultipleValuesWithoutIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyEdgeMultipleValuesWithoutIndexOperand: ...

class PyNodeSingleValueWithIndexOperand:
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeSingleValueWithIndexOperand], None],
        or_: Callable[[PyNodeSingleValueWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeSingleValueWithIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyNodeSingleValueWithIndexOperand: ...

class PyNodeSingleValueWithIndexGroupOperand:
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeSingleValueWithIndexOperand], None],
        or_: Callable[[PyNodeSingleValueWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeSingleValueWithIndexOperand], None]
    ) -> None: ...
    def ungroup(self) -> PyNodeMultipleValuesWithIndexOperand: ...
    def deep_clone(self) -> PyNodeSingleValueWithIndexGroupOperand: ...

class PyNodeSingleValueWithoutIndexOperand:
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeSingleValueWithoutIndexOperand], None],
        or_: Callable[[PyNodeSingleValueWithoutIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeSingleValueWithoutIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyNodeSingleValueWithoutIndexOperand: ...

class PyNodeSingleValueWithoutIndexGroupOperand:
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeSingleValueWithoutIndexOperand], None],
        or_: Callable[[PyNodeSingleValueWithoutIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeSingleValueWithoutIndexOperand], None]
    ) -> None: ...
    def ungroup(self) -> PyNodeMultipleValuesWithoutIndexOperand: ...
    def deep_clone(self) -> PyNodeSingleValueWithoutIndexGroupOperand: ...

class PyEdgeSingleValueWithIndexOperand:
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeSingleValueWithIndexOperand], None],
        or_: Callable[[PyEdgeSingleValueWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeSingleValueWithIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyEdgeSingleValueWithIndexOperand: ...

class PyEdgeSingleValueWithIndexGroupOperand:
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeSingleValueWithIndexOperand], None],
        or_: Callable[[PyEdgeSingleValueWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeSingleValueWithIndexOperand], None]
    ) -> None: ...
    def ungroup(self) -> PyEdgeMultipleValuesWithIndexOperand: ...
    def deep_clone(self) -> PyEdgeSingleValueWithIndexGroupOperand: ...

class PyEdgeSingleValueWithoutIndexOperand:
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeSingleValueWithoutIndexOperand], None],
        or_: Callable[[PyEdgeSingleValueWithoutIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeSingleValueWithoutIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyEdgeSingleValueWithoutIndexOperand: ...

class PyEdgeSingleValueWithoutIndexGroupOperand:
    def greater_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, value: PySingleValueComparisonOperand
    ) -> None: ...
    def less_than(self, value: PySingleValueComparisonOperand) -> None: ...
    def less_than_or_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def not_equal_to(self, value: PySingleValueComparisonOperand) -> None: ...
    def starts_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def ends_with(self, value: PySingleValueComparisonOperand) -> None: ...
    def contains(self, value: PySingleValueComparisonOperand) -> None: ...
    def is_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def is_not_in(self, values: PyMultipleValuesComparisonOperand) -> None: ...
    def add(self, value: PySingleValueArithmeticOperand) -> None: ...
    def sub(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mul(self, value: PySingleValueArithmeticOperand) -> None: ...
    def div(self, value: PySingleValueArithmeticOperand) -> None: ...
    def pow(self, value: PySingleValueArithmeticOperand) -> None: ...
    def mod(self, value: PySingleValueArithmeticOperand) -> None: ...
    def round(self) -> None: ...
    def ceil(self) -> None: ...
    def floor(self) -> None: ...
    def abs(self) -> None: ...
    def sqrt(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_float(self) -> None: ...
    def is_bool(self) -> None: ...
    def is_datetime(self) -> None: ...
    def is_duration(self) -> None: ...
    def is_null(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeSingleValueWithoutIndexOperand], None],
        or_: Callable[[PyEdgeSingleValueWithoutIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeSingleValueWithoutIndexOperand], None]
    ) -> None: ...
    def ungroup(self) -> PyEdgeMultipleValuesWithoutIndexOperand: ...
    def deep_clone(self) -> PyEdgeSingleValueWithoutIndexGroupOperand: ...

PySingleAttributeComparisonOperand: TypeAlias = Union[
    MedRecordAttribute,
    PyNodeSingleAttributeWithIndexOperand,
    PyNodeSingleAttributeWithoutIndexOperand,
    PyEdgeSingleAttributeWithIndexOperand,
    PyEdgeSingleAttributeWithoutIndexOperand,
]
PySingleAttributeArithmeticOperand: TypeAlias = PySingleAttributeComparisonOperand
PyMultipleAttributesComparisonOperand: TypeAlias = Union[
    List[MedRecordAttribute],
    PyNodeMultipleAttributesWithIndexOperand,
    PyNodeMultipleAttributesWithoutIndexOperand,
    PyEdgeMultipleAttributesWithIndexOperand,
    PyEdgeMultipleAttributesWithoutIndexOperand,
]

class PyNodeAttributesTreeOperand:
    def max(self) -> PyNodeMultipleAttributesWithIndexOperand: ...
    def min(self) -> PyNodeMultipleAttributesWithIndexOperand: ...
    def count(self) -> PyNodeMultipleAttributesWithIndexOperand: ...
    def sum(self) -> PyNodeMultipleAttributesWithIndexOperand: ...
    def random(self) -> PyNodeMultipleAttributesWithIndexOperand: ...
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeAttributesTreeOperand], None],
        or_: Callable[[PyNodeAttributesTreeOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyNodeAttributesTreeOperand], None]) -> None: ...
    def deep_clone(self) -> PyNodeAttributesTreeOperand: ...

class PyNodeAttributesTreeGroupOperand:
    def max(self) -> PyNodeMultipleAttributesWithIndexGroupOperand: ...
    def min(self) -> PyNodeMultipleAttributesWithIndexGroupOperand: ...
    def count(self) -> PyNodeMultipleAttributesWithIndexGroupOperand: ...
    def sum(self) -> PyNodeMultipleAttributesWithIndexGroupOperand: ...
    def random(self) -> PyNodeMultipleAttributesWithIndexGroupOperand: ...
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeAttributesTreeOperand], None],
        or_: Callable[[PyNodeAttributesTreeOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyNodeAttributesTreeOperand], None]) -> None: ...
    def ungroup(self) -> PyNodeAttributesTreeOperand: ...
    def deep_clone(self) -> PyNodeAttributesTreeGroupOperand: ...

class PyEdgeAttributesTreeOperand:
    def max(self) -> PyEdgeMultipleAttributesWithIndexOperand: ...
    def min(self) -> PyEdgeMultipleAttributesWithIndexOperand: ...
    def count(self) -> PyEdgeMultipleAttributesWithIndexOperand: ...
    def sum(self) -> PyEdgeMultipleAttributesWithIndexOperand: ...
    def random(self) -> PyEdgeMultipleAttributesWithIndexOperand: ...
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeAttributesTreeOperand], None],
        or_: Callable[[PyEdgeAttributesTreeOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyEdgeAttributesTreeOperand], None]) -> None: ...
    def deep_clone(self) -> PyEdgeAttributesTreeOperand: ...

class PyEdgeAttributesTreeGroupOperand:
    def max(self) -> PyEdgeMultipleAttributesWithIndexGroupOperand: ...
    def min(self) -> PyEdgeMultipleAttributesWithIndexGroupOperand: ...
    def count(self) -> PyEdgeMultipleAttributesWithIndexGroupOperand: ...
    def sum(self) -> PyEdgeMultipleAttributesWithIndexGroupOperand: ...
    def random(self) -> PyEdgeMultipleAttributesWithIndexGroupOperand: ...
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeAttributesTreeOperand], None],
        or_: Callable[[PyEdgeAttributesTreeOperand], None],
    ) -> None: ...
    def exclude(self, query: Callable[[PyEdgeAttributesTreeOperand], None]) -> None: ...
    def ungroup(self) -> PyEdgeAttributesTreeOperand: ...
    def deep_clone(self) -> PyEdgeAttributesTreeGroupOperand: ...

class PyNodeMultipleAttributesWithIndexOperand:
    def max(self) -> PyNodeSingleAttributeWithIndexOperand: ...
    def min(self) -> PyNodeSingleAttributeWithIndexOperand: ...
    def count(self) -> PyNodeSingleAttributeWithoutIndexOperand: ...
    def sum(self) -> PyNodeSingleAttributeWithoutIndexOperand: ...
    def random(self) -> PyNodeSingleAttributeWithIndexOperand: ...
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def to_values(self) -> PyNodeMultipleValuesWithIndexOperand: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeMultipleAttributesWithIndexOperand], None],
        or_: Callable[[PyNodeMultipleAttributesWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeMultipleAttributesWithIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyNodeMultipleAttributesWithIndexOperand: ...

class PyNodeMultipleAttributesWithIndexGroupOperand:
    def max(self) -> PyNodeSingleAttributeWithIndexGroupOperand: ...
    def min(self) -> PyNodeSingleAttributeWithIndexGroupOperand: ...
    def count(self) -> PyNodeSingleAttributeWithoutIndexGroupOperand: ...
    def sum(self) -> PyNodeSingleAttributeWithoutIndexGroupOperand: ...
    def random(self) -> PyNodeSingleAttributeWithIndexGroupOperand: ...
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def to_values(self) -> PyNodeMultipleValuesWithIndexGroupOperand: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeMultipleAttributesWithIndexOperand], None],
        or_: Callable[[PyNodeMultipleAttributesWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeMultipleAttributesWithIndexOperand], None]
    ) -> None: ...
    def ungroup(self) -> PyNodeMultipleAttributesWithIndexOperand: ...
    def deep_clone(self) -> PyNodeMultipleAttributesWithIndexGroupOperand: ...

class PyNodeMultipleAttributesWithoutIndexOperand:
    def max(self) -> PyNodeSingleAttributeWithoutIndexOperand: ...
    def min(self) -> PyNodeSingleAttributeWithoutIndexOperand: ...
    def count(self) -> PyNodeSingleAttributeWithoutIndexOperand: ...
    def sum(self) -> PyNodeSingleAttributeWithoutIndexOperand: ...
    def random(self) -> PyNodeSingleAttributeWithoutIndexOperand: ...
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeMultipleAttributesWithoutIndexOperand], None],
        or_: Callable[[PyNodeMultipleAttributesWithoutIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeMultipleAttributesWithoutIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyNodeMultipleAttributesWithoutIndexOperand: ...

class PyEdgeMultipleAttributesWithIndexOperand:
    def max(self) -> PyEdgeSingleAttributeWithIndexOperand: ...
    def min(self) -> PyEdgeSingleAttributeWithIndexOperand: ...
    def count(self) -> PyEdgeSingleAttributeWithoutIndexOperand: ...
    def sum(self) -> PyEdgeSingleAttributeWithoutIndexOperand: ...
    def random(self) -> PyEdgeSingleAttributeWithIndexOperand: ...
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def to_values(self) -> PyEdgeMultipleValuesWithIndexOperand: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeMultipleAttributesWithIndexOperand], None],
        or_: Callable[[PyEdgeMultipleAttributesWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeMultipleAttributesWithIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyEdgeMultipleAttributesWithIndexOperand: ...

class PyEdgeMultipleAttributesWithIndexGroupOperand:
    def max(self) -> PyEdgeSingleAttributeWithIndexGroupOperand: ...
    def min(self) -> PyEdgeSingleAttributeWithIndexGroupOperand: ...
    def count(self) -> PyEdgeSingleAttributeWithoutIndexGroupOperand: ...
    def sum(self) -> PyEdgeSingleAttributeWithoutIndexGroupOperand: ...
    def random(self) -> PyEdgeSingleAttributeWithIndexGroupOperand: ...
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def to_values(self) -> PyEdgeMultipleValuesWithIndexGroupOperand: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeMultipleAttributesWithIndexOperand], None],
        or_: Callable[[PyEdgeMultipleAttributesWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeMultipleAttributesWithIndexOperand], None]
    ) -> None: ...
    def ungroup(self) -> PyEdgeMultipleAttributesWithIndexOperand: ...
    def deep_clone(self) -> PyEdgeMultipleAttributesWithIndexGroupOperand: ...

class PyEdgeMultipleAttributesWithoutIndexOperand:
    def max(self) -> PyEdgeSingleAttributeWithoutIndexOperand: ...
    def min(self) -> PyEdgeSingleAttributeWithoutIndexOperand: ...
    def count(self) -> PyEdgeSingleAttributeWithoutIndexOperand: ...
    def sum(self) -> PyEdgeSingleAttributeWithoutIndexOperand: ...
    def random(self) -> PyEdgeSingleAttributeWithoutIndexOperand: ...
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def is_max(self) -> None: ...
    def is_min(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeMultipleAttributesWithoutIndexOperand], None],
        or_: Callable[[PyEdgeMultipleAttributesWithoutIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeMultipleAttributesWithoutIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyEdgeMultipleAttributesWithoutIndexOperand: ...

class PyNodeSingleAttributeWithIndexOperand:
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeSingleAttributeWithIndexOperand], None],
        or_: Callable[[PyNodeSingleAttributeWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeSingleAttributeWithIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyNodeSingleAttributeWithIndexOperand: ...

class PyNodeSingleAttributeWithIndexGroupOperand:
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeSingleAttributeWithIndexOperand], None],
        or_: Callable[[PyNodeSingleAttributeWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeSingleAttributeWithIndexOperand], None]
    ) -> None: ...
    def ungroup(self) -> PyNodeMultipleAttributesWithIndexOperand: ...
    def deep_clone(self) -> PyNodeSingleAttributeWithIndexGroupOperand: ...

class PyNodeSingleAttributeWithoutIndexOperand:
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeSingleAttributeWithoutIndexOperand], None],
        or_: Callable[[PyNodeSingleAttributeWithoutIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeSingleAttributeWithoutIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyNodeSingleAttributeWithoutIndexOperand: ...

class PyNodeSingleAttributeWithoutIndexGroupOperand:
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyNodeSingleAttributeWithoutIndexOperand], None],
        or_: Callable[[PyNodeSingleAttributeWithoutIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyNodeSingleAttributeWithoutIndexOperand], None]
    ) -> None: ...
    def ungroup(self) -> PyNodeMultipleAttributesWithoutIndexOperand: ...
    def deep_clone(self) -> PyNodeSingleAttributeWithoutIndexGroupOperand: ...

class PyEdgeSingleAttributeWithIndexOperand:
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeSingleAttributeWithIndexOperand], None],
        or_: Callable[[PyEdgeSingleAttributeWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeSingleAttributeWithIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyEdgeSingleAttributeWithIndexOperand: ...

class PyEdgeSingleAttributeWithIndexGroupOperand:
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeSingleAttributeWithIndexOperand], None],
        or_: Callable[[PyEdgeSingleAttributeWithIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeSingleAttributeWithIndexOperand], None]
    ) -> None: ...
    def ungroup(self) -> PyEdgeMultipleAttributesWithIndexOperand: ...
    def deep_clone(self) -> PyEdgeSingleAttributeWithIndexGroupOperand: ...

class PyEdgeSingleAttributeWithoutIndexOperand:
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeSingleAttributeWithoutIndexOperand], None],
        or_: Callable[[PyEdgeSingleAttributeWithoutIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeSingleAttributeWithoutIndexOperand], None]
    ) -> None: ...
    def deep_clone(self) -> PyEdgeSingleAttributeWithoutIndexOperand: ...

class PyEdgeSingleAttributeWithoutIndexGroupOperand:
    def greater_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def greater_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def less_than(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def less_than_or_equal_to(
        self, attribute: PySingleAttributeComparisonOperand
    ) -> None: ...
    def equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def not_equal_to(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def starts_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def ends_with(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def contains(self, attribute: PySingleAttributeComparisonOperand) -> None: ...
    def is_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def is_not_in(self, attributes: PyMultipleAttributesComparisonOperand) -> None: ...
    def add(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def sub(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mul(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def pow(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def mod(self, attribute: PySingleAttributeArithmeticOperand) -> None: ...
    def abs(self) -> None: ...
    def trim(self) -> None: ...
    def trim_start(self) -> None: ...
    def trim_end(self) -> None: ...
    def lowercase(self) -> None: ...
    def uppercase(self) -> None: ...
    def slice(self, start: int, end: int) -> None: ...
    def is_string(self) -> None: ...
    def is_int(self) -> None: ...
    def either_or(
        self,
        either: Callable[[PyEdgeSingleAttributeWithoutIndexOperand], None],
        or_: Callable[[PyEdgeSingleAttributeWithoutIndexOperand], None],
    ) -> None: ...
    def exclude(
        self, query: Callable[[PyEdgeSingleAttributeWithoutIndexOperand], None]
    ) -> None: ...
    def ungroup(self) -> PyEdgeMultipleAttributesWithoutIndexOperand: ...
    def deep_clone(self) -> PyEdgeSingleAttributeWithoutIndexGroupOperand: ...
