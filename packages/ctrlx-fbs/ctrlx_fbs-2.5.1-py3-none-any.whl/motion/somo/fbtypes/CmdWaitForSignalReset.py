# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command wait for signal reset
class CmdWaitForSignalReset(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CmdWaitForSignalReset()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmdWaitForSignalReset(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CmdWaitForSignalReset
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # signal Id
    # CmdWaitForSignalReset
    def SignalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def CmdWaitForSignalResetStart(builder): builder.StartObject(1)
def Start(builder):
    return CmdWaitForSignalResetStart(builder)
def CmdWaitForSignalResetAddSignalId(builder, signalId): builder.PrependUint32Slot(0, signalId, 0)
def AddSignalId(builder, signalId):
    return CmdWaitForSignalResetAddSignalId(builder, signalId)
def CmdWaitForSignalResetEnd(builder): return builder.EndObject()
def End(builder):
    return CmdWaitForSignalResetEnd(builder)

class CmdWaitForSignalResetT(object):

    # CmdWaitForSignalResetT
    def __init__(self):
        self.signalId = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdWaitForSignalReset = CmdWaitForSignalReset()
        cmdWaitForSignalReset.Init(buf, pos)
        return cls.InitFromObj(cmdWaitForSignalReset)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdWaitForSignalReset):
        x = CmdWaitForSignalResetT()
        x._UnPack(cmdWaitForSignalReset)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.signalId == other.signalId

    # CmdWaitForSignalResetT
    def _UnPack(self, cmdWaitForSignalReset):
        if cmdWaitForSignalReset is None:
            return
        self.signalId = cmdWaitForSignalReset.SignalId()

    # CmdWaitForSignalResetT
    def Pack(self, builder):
        CmdWaitForSignalResetStart(builder)
        CmdWaitForSignalResetAddSignalId(builder, self.signalId)
        cmdWaitForSignalReset = CmdWaitForSignalResetEnd(builder)
        return cmdWaitForSignalReset
