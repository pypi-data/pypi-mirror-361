# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VariableCustom(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VariableCustom()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVariableCustom(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VariableCustom
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the variable
    # VariableCustom
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of a variable in the memory map to reference to
    # VariableCustom
    def BitoffsetReference(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Offset (in bits) of variable in memory additional to bitoffsetReference
    # VariableCustom
    def Bitoffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Size (in bits) of variable in memory
    # VariableCustom
    def Bitsize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # type information
    # VariableCustom
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # metadata of the variable (optional)
    # VariableCustom
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.Metadata import Metadata
            obj = Metadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def VariableCustomStart(builder): builder.StartObject(6)
def Start(builder):
    return VariableCustomStart(builder)
def VariableCustomAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return VariableCustomAddName(builder, name)
def VariableCustomAddBitoffsetReference(builder, bitoffsetReference): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bitoffsetReference), 0)
def AddBitoffsetReference(builder, bitoffsetReference):
    return VariableCustomAddBitoffsetReference(builder, bitoffsetReference)
def VariableCustomAddBitoffset(builder, bitoffset): builder.PrependUint32Slot(2, bitoffset, 0)
def AddBitoffset(builder, bitoffset):
    return VariableCustomAddBitoffset(builder, bitoffset)
def VariableCustomAddBitsize(builder, bitsize): builder.PrependUint32Slot(3, bitsize, 0)
def AddBitsize(builder, bitsize):
    return VariableCustomAddBitsize(builder, bitsize)
def VariableCustomAddType(builder, type): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def AddType(builder, type):
    return VariableCustomAddType(builder, type)
def VariableCustomAddMetadata(builder, metadata): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)
def AddMetadata(builder, metadata):
    return VariableCustomAddMetadata(builder, metadata)
def VariableCustomEnd(builder): return builder.EndObject()
def End(builder):
    return VariableCustomEnd(builder)
import comm.datalayer.Metadata
try:
    from typing import Optional
except:
    pass

class VariableCustomT(object):

    # VariableCustomT
    def __init__(self):
        self.name = None  # type: str
        self.bitoffsetReference = None  # type: str
        self.bitoffset = 0  # type: int
        self.bitsize = 0  # type: int
        self.type = None  # type: str
        self.metadata = None  # type: Optional[comm.datalayer.Metadata.MetadataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        variableCustom = VariableCustom()
        variableCustom.Init(buf, pos)
        return cls.InitFromObj(variableCustom)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, variableCustom):
        x = VariableCustomT()
        x._UnPack(variableCustom)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.bitoffsetReference == other.bitoffsetReference and \
            self.bitoffset == other.bitoffset and \
            self.bitsize == other.bitsize and \
            self.type == other.type and \
            self.metadata == other.metadata

    # VariableCustomT
    def _UnPack(self, variableCustom):
        if variableCustom is None:
            return
        self.name = variableCustom.Name()
        self.bitoffsetReference = variableCustom.BitoffsetReference()
        self.bitoffset = variableCustom.Bitoffset()
        self.bitsize = variableCustom.Bitsize()
        self.type = variableCustom.Type()
        if variableCustom.Metadata() is not None:
            self.metadata = comm.datalayer.Metadata.MetadataT.InitFromObj(variableCustom.Metadata())

    # VariableCustomT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.bitoffsetReference is not None:
            bitoffsetReference = builder.CreateString(self.bitoffsetReference)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.metadata is not None:
            metadata = self.metadata.Pack(builder)
        VariableCustomStart(builder)
        if self.name is not None:
            VariableCustomAddName(builder, name)
        if self.bitoffsetReference is not None:
            VariableCustomAddBitoffsetReference(builder, bitoffsetReference)
        VariableCustomAddBitoffset(builder, self.bitoffset)
        VariableCustomAddBitsize(builder, self.bitsize)
        if self.type is not None:
            VariableCustomAddType(builder, type)
        if self.metadata is not None:
            VariableCustomAddMetadata(builder, metadata)
        variableCustom = VariableCustomEnd(builder)
        return variableCustom
