# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PublishedDataSetCustomSourceDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PublishedDataSetCustomSourceDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPublishedDataSetCustomSourceDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PublishedDataSetCustomSourceDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PublishedDataSetCustomSourceDataType
    def CyclicDataSet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def PublishedDataSetCustomSourceDataTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return PublishedDataSetCustomSourceDataTypeStart(builder)
def PublishedDataSetCustomSourceDataTypeAddCyclicDataSet(builder, cyclicDataSet): builder.PrependBoolSlot(0, cyclicDataSet, 0)
def AddCyclicDataSet(builder, cyclicDataSet):
    return PublishedDataSetCustomSourceDataTypeAddCyclicDataSet(builder, cyclicDataSet)
def PublishedDataSetCustomSourceDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return PublishedDataSetCustomSourceDataTypeEnd(builder)

class PublishedDataSetCustomSourceDataTypeT(object):

    # PublishedDataSetCustomSourceDataTypeT
    def __init__(self):
        self.cyclicDataSet = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        publishedDataSetCustomSourceDataType = PublishedDataSetCustomSourceDataType()
        publishedDataSetCustomSourceDataType.Init(buf, pos)
        return cls.InitFromObj(publishedDataSetCustomSourceDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, publishedDataSetCustomSourceDataType):
        x = PublishedDataSetCustomSourceDataTypeT()
        x._UnPack(publishedDataSetCustomSourceDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cyclicDataSet == other.cyclicDataSet

    # PublishedDataSetCustomSourceDataTypeT
    def _UnPack(self, publishedDataSetCustomSourceDataType):
        if publishedDataSetCustomSourceDataType is None:
            return
        self.cyclicDataSet = publishedDataSetCustomSourceDataType.CyclicDataSet()

    # PublishedDataSetCustomSourceDataTypeT
    def Pack(self, builder):
        PublishedDataSetCustomSourceDataTypeStart(builder)
        PublishedDataSetCustomSourceDataTypeAddCyclicDataSet(builder, self.cyclicDataSet)
        publishedDataSetCustomSourceDataType = PublishedDataSetCustomSourceDataTypeEnd(builder)
        return publishedDataSetCustomSourceDataType
