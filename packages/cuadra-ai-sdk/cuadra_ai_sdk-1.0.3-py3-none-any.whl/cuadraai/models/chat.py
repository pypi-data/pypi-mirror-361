# -*- coding: utf-8 -*-

"""
cuadraai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from cuadraai.api_helper import APIHelper
from cuadraai.models.content_ex import ContentEx


class Chat(object):

    """Implementation of the 'Chat' model.

    Attributes:
        model (str): Model name
        content (List[ContentEx]): Request content
        chat_id (str): If you want to keep context between request, otherwise
            leave it empty, you get one with every chat you create.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "model": 'model',
        "content": 'content',
        "chat_id": 'chatId'
    }

    _optionals = [
        'chat_id',
    ]

    def __init__(self,
                 model=None,
                 content=None,
                 chat_id=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the Chat class"""

        # Initialize members of the class
        self.model = model 
        self.content = content 
        if chat_id is not APIHelper.SKIP:
            self.chat_id = chat_id 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        model = dictionary.get("model") if dictionary.get("model") else None
        content = None
        if dictionary.get('content') is not None:
            content = [ContentEx.from_dictionary(x) for x in dictionary.get('content')]
        chat_id = dictionary.get("chatId") if dictionary.get("chatId") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(model,
                   content,
                   chat_id,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'model={self.model!r}, '
                f'content={self.content!r}, '
                f'chat_id={(self.chat_id if hasattr(self, "chat_id") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'model={self.model!s}, '
                f'content={self.content!s}, '
                f'chat_id={(self.chat_id if hasattr(self, "chat_id") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
