# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of all point tables for the whole motion system
class SysCfgAllPointTables(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgAllPointTables()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfgAllPointTables(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfgAllPointTables
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all configured point tables
    # SysCfgAllPointTables
    def Tables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.SysCfgSinglePointTable import SysCfgSinglePointTable
            obj = SysCfgSinglePointTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SysCfgAllPointTables
    def TablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgAllPointTables
    def TablesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def SysCfgAllPointTablesStart(builder): builder.StartObject(1)
def Start(builder):
    return SysCfgAllPointTablesStart(builder)
def SysCfgAllPointTablesAddTables(builder, tables): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tables), 0)
def AddTables(builder, tables):
    return SysCfgAllPointTablesAddTables(builder, tables)
def SysCfgAllPointTablesStartTablesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTablesVector(builder, numElems):
    return SysCfgAllPointTablesStartTablesVector(builder, numElems)
def SysCfgAllPointTablesEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgAllPointTablesEnd(builder)
import motion.sync.fbtypes.SysCfgSinglePointTable
try:
    from typing import List
except:
    pass

class SysCfgAllPointTablesT(object):

    # SysCfgAllPointTablesT
    def __init__(self):
        self.tables = None  # type: List[motion.sync.fbtypes.SysCfgSinglePointTable.SysCfgSinglePointTableT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgAllPointTables = SysCfgAllPointTables()
        sysCfgAllPointTables.Init(buf, pos)
        return cls.InitFromObj(sysCfgAllPointTables)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfgAllPointTables):
        x = SysCfgAllPointTablesT()
        x._UnPack(sysCfgAllPointTables)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.tables == other.tables

    # SysCfgAllPointTablesT
    def _UnPack(self, sysCfgAllPointTables):
        if sysCfgAllPointTables is None:
            return
        if not sysCfgAllPointTables.TablesIsNone():
            self.tables = []
            for i in range(sysCfgAllPointTables.TablesLength()):
                if sysCfgAllPointTables.Tables(i) is None:
                    self.tables.append(None)
                else:
                    sysCfgSinglePointTable_ = motion.sync.fbtypes.SysCfgSinglePointTable.SysCfgSinglePointTableT.InitFromObj(sysCfgAllPointTables.Tables(i))
                    self.tables.append(sysCfgSinglePointTable_)

    # SysCfgAllPointTablesT
    def Pack(self, builder):
        if self.tables is not None:
            tableslist = []
            for i in range(len(self.tables)):
                tableslist.append(self.tables[i].Pack(builder))
            SysCfgAllPointTablesStartTablesVector(builder, len(self.tables))
            for i in reversed(range(len(self.tables))):
                builder.PrependUOffsetTRelative(tableslist[i])
            tables = builder.EndVector()
        SysCfgAllPointTablesStart(builder)
        if self.tables is not None:
            SysCfgAllPointTablesAddTables(builder, tables)
        sysCfgAllPointTables = SysCfgAllPointTablesEnd(builder)
        return sysCfgAllPointTables
