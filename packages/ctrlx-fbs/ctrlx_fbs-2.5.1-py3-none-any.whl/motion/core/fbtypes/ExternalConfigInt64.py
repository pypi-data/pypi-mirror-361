# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Table for just one single int64 value (can be used for enums, bitfields, integer numbers)
class ExternalConfigInt64(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExternalConfigInt64()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExternalConfigInt64(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExternalConfigInt64
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # the value
    # ExternalConfigInt64
    def IntVal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ExternalConfigInt64Start(builder): builder.StartObject(1)
def Start(builder):
    return ExternalConfigInt64Start(builder)
def ExternalConfigInt64AddIntVal(builder, intVal): builder.PrependInt64Slot(0, intVal, 0)
def AddIntVal(builder, intVal):
    return ExternalConfigInt64AddIntVal(builder, intVal)
def ExternalConfigInt64End(builder): return builder.EndObject()
def End(builder):
    return ExternalConfigInt64End(builder)

class ExternalConfigInt64T(object):

    # ExternalConfigInt64T
    def __init__(self):
        self.intVal = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        externalConfigInt64 = ExternalConfigInt64()
        externalConfigInt64.Init(buf, pos)
        return cls.InitFromObj(externalConfigInt64)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, externalConfigInt64):
        x = ExternalConfigInt64T()
        x._UnPack(externalConfigInt64)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.intVal == other.intVal

    # ExternalConfigInt64T
    def _UnPack(self, externalConfigInt64):
        if externalConfigInt64 is None:
            return
        self.intVal = externalConfigInt64.IntVal()

    # ExternalConfigInt64T
    def Pack(self, builder):
        ExternalConfigInt64Start(builder)
        ExternalConfigInt64AddIntVal(builder, self.intVal)
        externalConfigInt64 = ExternalConfigInt64End(builder)
        return externalConfigInt64
