# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# validation of a calculation pipeline
class PipelineValidation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PipelineValidation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPipelineValidation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PipelineValidation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of single result validations (multiple errors can occur)
    # PipelineValidation
    def Validations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.sync.fbtypes.SinglePipelineValidation import SinglePipelineValidation
            obj = SinglePipelineValidation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PipelineValidation
    def ValidationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PipelineValidation
    def ValidationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def PipelineValidationStart(builder): builder.StartObject(1)
def Start(builder):
    return PipelineValidationStart(builder)
def PipelineValidationAddValidations(builder, validations): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(validations), 0)
def AddValidations(builder, validations):
    return PipelineValidationAddValidations(builder, validations)
def PipelineValidationStartValidationsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartValidationsVector(builder, numElems):
    return PipelineValidationStartValidationsVector(builder, numElems)
def PipelineValidationEnd(builder): return builder.EndObject()
def End(builder):
    return PipelineValidationEnd(builder)
import motion.sync.fbtypes.SinglePipelineValidation
try:
    from typing import List
except:
    pass

class PipelineValidationT(object):

    # PipelineValidationT
    def __init__(self):
        self.validations = None  # type: List[motion.sync.fbtypes.SinglePipelineValidation.SinglePipelineValidationT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pipelineValidation = PipelineValidation()
        pipelineValidation.Init(buf, pos)
        return cls.InitFromObj(pipelineValidation)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, pipelineValidation):
        x = PipelineValidationT()
        x._UnPack(pipelineValidation)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.validations == other.validations

    # PipelineValidationT
    def _UnPack(self, pipelineValidation):
        if pipelineValidation is None:
            return
        if not pipelineValidation.ValidationsIsNone():
            self.validations = []
            for i in range(pipelineValidation.ValidationsLength()):
                if pipelineValidation.Validations(i) is None:
                    self.validations.append(None)
                else:
                    singlePipelineValidation_ = motion.sync.fbtypes.SinglePipelineValidation.SinglePipelineValidationT.InitFromObj(pipelineValidation.Validations(i))
                    self.validations.append(singlePipelineValidation_)

    # PipelineValidationT
    def Pack(self, builder):
        if self.validations is not None:
            validationslist = []
            for i in range(len(self.validations)):
                validationslist.append(self.validations[i].Pack(builder))
            PipelineValidationStartValidationsVector(builder, len(self.validations))
            for i in reversed(range(len(self.validations))):
                builder.PrependUOffsetTRelative(validationslist[i])
            validations = builder.EndVector()
        PipelineValidationStart(builder)
        if self.validations is not None:
            PipelineValidationAddValidations(builder, validations)
        pipelineValidation = PipelineValidationEnd(builder)
        return pipelineValidation
