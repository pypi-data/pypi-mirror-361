"""Data models for SimplePlan project planning."""

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class ProjectStep(BaseModel):
    """Represents a single step in a project plan."""

    id: str = Field(..., description="Unique identifier for the step")
    description: str = Field(
        ..., description="Description of what this step accomplishes"
    )
    complete: bool = Field(default=False, description="Whether this step is completed")
    dependencies: List[str] = Field(
        default_factory=list,
        description="List of step IDs that must be completed first",
    )
    assigned_to: str = Field(
        default="AI", description="Who is assigned to complete this step"
    )
    step_type: str = Field(
        default="task", description="Type of step (task, refactor, testing, etc.)"
    )
    metadata: Dict[str, Any] = Field(
        default_factory=dict, description="Additional metadata for the step"
    )
    created_at: Optional[datetime] = Field(
        default_factory=datetime.now, description="When this step was created"
    )
    completed_at: Optional[datetime] = Field(
        default=None, description="When this step was completed"
    )


class ProjectMetadata(BaseModel):
    """Metadata about the project plan."""

    initiator: str = Field(..., description="Who initiated this project")
    ai_generated: bool = Field(
        default=True, description="Whether this plan was generated by AI"
    )
    tags: List[str] = Field(
        default_factory=list, description="Tags for categorizing the project"
    )
    priority: str = Field(
        default="medium", description="Priority level (low, medium, high, critical)"
    )
    estimated_duration: Optional[str] = Field(
        default=None, description="Estimated time to complete"
    )


class ProjectPlan(BaseModel):
    """Complete project plan with all steps and metadata."""

    project_id: str = Field(..., description="Unique identifier for the project")
    name: str = Field(..., description="Human-readable name for the project")
    description: Optional[str] = Field(
        default=None, description="Detailed description of the project"
    )
    created_at: datetime = Field(
        default_factory=datetime.now, description="When this project was created"
    )
    updated_at: datetime = Field(
        default_factory=datetime.now, description="When this project was last updated"
    )
    steps: List[ProjectStep] = Field(
        default_factory=list, description="List of steps in the project"
    )
    metadata: ProjectMetadata = Field(..., description="Project metadata")

    def get_completion_percentage(self) -> float:
        """Calculate the percentage of completed steps."""
        if not self.steps:
            return 0.0
        completed = sum(1 for step in self.steps if step.complete)
        return (completed / len(self.steps)) * 100

    def get_next_available_steps(self) -> List[ProjectStep]:
        """Get steps that can be worked on (dependencies satisfied)."""
        completed_step_ids = {step.id for step in self.steps if step.complete}
        available_steps = []

        for step in self.steps:
            if not step.complete and all(
                dep in completed_step_ids for dep in step.dependencies
            ):
                available_steps.append(step)

        return available_steps

    def validate_dependencies(self) -> List[str]:
        """Validate that all step dependencies exist. Returns list of errors."""
        errors = []
        step_ids = {step.id for step in self.steps}

        for step in self.steps:
            for dep in step.dependencies:
                if dep not in step_ids:
                    errors.append(f"Step {step.id} depends on non-existent step {dep}")

        return errors
