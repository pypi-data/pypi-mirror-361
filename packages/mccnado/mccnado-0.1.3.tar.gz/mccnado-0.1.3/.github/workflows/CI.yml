# This file is autogenerated by maturin v1.8.7
# To update, run
#
#    maturin generate-ci github --platform linux macos --pytest
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: i686

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: rustup toolchain install stable --profile minimal --no-self-update
      - run: rustup target add ${{ matrix.platform.target }}-unknown-linux-gnu
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "linux-${{ matrix.platform.target }}"
          cache-targets: "true"
          cache-all-crates: "true"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist
      - name: pytest
        if: ${{ startsWith(matrix.platform.target, 'x86_64') }}
        shell: bash
        run: |
          set -e
          python3 -m venv .venv
          source .venv/bin/activate
          pip install mccnado --find-links dist --force-reinstall
          pip install pytest
          pytest

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: rustup toolchain install stable --profile minimal --no-self-update
      - run: rustup target add ${{ matrix.platform.target }}-apple-darwin
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "macos-${{ matrix.platform.target }}"
          cache-targets: "true"
          cache-all-crates: "true"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist
      - name: pytest
        run: |
          set -e
          python3 -m venv .venv
          source .venv/bin/activate
          pip install mccnado --find-links dist --force-reinstall
          pip install pytest
          pytest

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: rustup toolchain install stable --profile minimal --no-self-update
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "test"
          cache-targets: "true"
          cache-all-crates: "true"
      - name: Build wheel for testing
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist --find-interpreter
      - name: Install and test
        run: |
          set -e
          python3 -m venv .venv
          source .venv/bin/activate
          pip install mccnado --find-links dist --force-reinstall
          pip install pytest
          pytest

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup toolchain install stable --profile minimal --no-self-update
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "sdist"
          cache-targets: "true"
          cache-all-crates: "true"
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, macos, sdist, test]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract version from tag
        id: get_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION from tag: $TAG"
      - name: Update version in Cargo.toml
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          sed -i.bak 's/^version = ".*"/version = "${{ steps.get_version.outputs.VERSION }}"/' Cargo.toml
          echo "Updated Cargo.toml version to ${{ steps.get_version.outputs.VERSION }}"
          echo "Before:"
          grep "^version" Cargo.toml.bak || true
          echo "After:"
          grep "^version" Cargo.toml
      - uses: actions/download-artifact@v4
      - run: rustup toolchain install stable --profile minimal --no-self-update
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release"
          cache-targets: "true"
          cache-all-crates: "true"
          save-if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: wheels-*/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
