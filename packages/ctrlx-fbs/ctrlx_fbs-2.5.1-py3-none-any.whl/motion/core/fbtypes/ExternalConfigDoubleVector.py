# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Table for a vector of double values
class ExternalConfigDoubleVector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExternalConfigDoubleVector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExternalConfigDoubleVector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExternalConfigDoubleVector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of double numbers
    # ExternalConfigDoubleVector
    def DoubleVector(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ExternalConfigDoubleVector
    def DoubleVectorAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # ExternalConfigDoubleVector
    def DoubleVectorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ExternalConfigDoubleVector
    def DoubleVectorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ExternalConfigDoubleVectorStart(builder): builder.StartObject(1)
def Start(builder):
    return ExternalConfigDoubleVectorStart(builder)
def ExternalConfigDoubleVectorAddDoubleVector(builder, doubleVector): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(doubleVector), 0)
def AddDoubleVector(builder, doubleVector):
    return ExternalConfigDoubleVectorAddDoubleVector(builder, doubleVector)
def ExternalConfigDoubleVectorStartDoubleVectorVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartDoubleVectorVector(builder, numElems):
    return ExternalConfigDoubleVectorStartDoubleVectorVector(builder, numElems)
def ExternalConfigDoubleVectorEnd(builder): return builder.EndObject()
def End(builder):
    return ExternalConfigDoubleVectorEnd(builder)
try:
    from typing import List
except:
    pass

class ExternalConfigDoubleVectorT(object):

    # ExternalConfigDoubleVectorT
    def __init__(self):
        self.doubleVector = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        externalConfigDoubleVector = ExternalConfigDoubleVector()
        externalConfigDoubleVector.Init(buf, pos)
        return cls.InitFromObj(externalConfigDoubleVector)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, externalConfigDoubleVector):
        x = ExternalConfigDoubleVectorT()
        x._UnPack(externalConfigDoubleVector)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.doubleVector == other.doubleVector

    # ExternalConfigDoubleVectorT
    def _UnPack(self, externalConfigDoubleVector):
        if externalConfigDoubleVector is None:
            return
        if not externalConfigDoubleVector.DoubleVectorIsNone():
            if np is None:
                self.doubleVector = []
                for i in range(externalConfigDoubleVector.DoubleVectorLength()):
                    self.doubleVector.append(externalConfigDoubleVector.DoubleVector(i))
            else:
                self.doubleVector = externalConfigDoubleVector.DoubleVectorAsNumpy()

    # ExternalConfigDoubleVectorT
    def Pack(self, builder):
        if self.doubleVector is not None:
            if np is not None and type(self.doubleVector) is np.ndarray:
                doubleVector = builder.CreateNumpyVector(self.doubleVector)
            else:
                ExternalConfigDoubleVectorStartDoubleVectorVector(builder, len(self.doubleVector))
                for i in reversed(range(len(self.doubleVector))):
                    builder.PrependFloat64(self.doubleVector[i])
                doubleVector = builder.EndVector()
        ExternalConfigDoubleVectorStart(builder)
        if self.doubleVector is not None:
            ExternalConfigDoubleVectorAddDoubleVector(builder, doubleVector)
        externalConfigDoubleVector = ExternalConfigDoubleVectorEnd(builder)
        return externalConfigDoubleVector
