# automatically generated by the FlatBuffers compiler, do not modify

# namespace: parameter

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ParamDetails(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ParamDetails()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsParamDetails(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ParamDetails
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ParamDetails
    def DataState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ParamDetails
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ParamDetails
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ParamDetails
    def Attribute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ParamDetails
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ParamDetails
    def MaxListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ParamDetails
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ParamDetails
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ParamDetailsStart(builder): builder.StartObject(8)
def Start(builder):
    return ParamDetailsStart(builder)
def ParamDetailsAddDataState(builder, dataState): builder.PrependUint16Slot(0, dataState, 0)
def AddDataState(builder, dataState):
    return ParamDetailsAddDataState(builder, dataState)
def ParamDetailsAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ParamDetailsAddName(builder, name)
def ParamDetailsAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def AddUnit(builder, unit):
    return ParamDetailsAddUnit(builder, unit)
def ParamDetailsAddAttribute(builder, attribute): builder.PrependUint32Slot(3, attribute, 0)
def AddAttribute(builder, attribute):
    return ParamDetailsAddAttribute(builder, attribute)
def ParamDetailsAddData(builder, data): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return ParamDetailsAddData(builder, data)
def ParamDetailsAddMaxListLength(builder, maxListLength): builder.PrependUint32Slot(5, maxListLength, 0)
def AddMaxListLength(builder, maxListLength):
    return ParamDetailsAddMaxListLength(builder, maxListLength)
def ParamDetailsAddMin(builder, min): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(min), 0)
def AddMin(builder, min):
    return ParamDetailsAddMin(builder, min)
def ParamDetailsAddMax(builder, max): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(max), 0)
def AddMax(builder, max):
    return ParamDetailsAddMax(builder, max)
def ParamDetailsEnd(builder): return builder.EndObject()
def End(builder):
    return ParamDetailsEnd(builder)

class ParamDetailsT(object):

    # ParamDetailsT
    def __init__(self):
        self.dataState = 0  # type: int
        self.name = None  # type: str
        self.unit = None  # type: str
        self.attribute = 0  # type: int
        self.data = None  # type: str
        self.maxListLength = 0  # type: int
        self.min = None  # type: str
        self.max = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        paramDetails = ParamDetails()
        paramDetails.Init(buf, pos)
        return cls.InitFromObj(paramDetails)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, paramDetails):
        x = ParamDetailsT()
        x._UnPack(paramDetails)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dataState == other.dataState and \
            self.name == other.name and \
            self.unit == other.unit and \
            self.attribute == other.attribute and \
            self.data == other.data and \
            self.maxListLength == other.maxListLength and \
            self.min == other.min and \
            self.max == other.max

    # ParamDetailsT
    def _UnPack(self, paramDetails):
        if paramDetails is None:
            return
        self.dataState = paramDetails.DataState()
        self.name = paramDetails.Name()
        self.unit = paramDetails.Unit()
        self.attribute = paramDetails.Attribute()
        self.data = paramDetails.Data()
        self.maxListLength = paramDetails.MaxListLength()
        self.min = paramDetails.Min()
        self.max = paramDetails.Max()

    # ParamDetailsT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        if self.data is not None:
            data = builder.CreateString(self.data)
        if self.min is not None:
            min = builder.CreateString(self.min)
        if self.max is not None:
            max = builder.CreateString(self.max)
        ParamDetailsStart(builder)
        ParamDetailsAddDataState(builder, self.dataState)
        if self.name is not None:
            ParamDetailsAddName(builder, name)
        if self.unit is not None:
            ParamDetailsAddUnit(builder, unit)
        ParamDetailsAddAttribute(builder, self.attribute)
        if self.data is not None:
            ParamDetailsAddData(builder, data)
        ParamDetailsAddMaxListLength(builder, self.maxListLength)
        if self.min is not None:
            ParamDetailsAddMin(builder, min)
        if self.max is not None:
            ParamDetailsAddMax(builder, max)
        paramDetails = ParamDetailsEnd(builder)
        return paramDetails
