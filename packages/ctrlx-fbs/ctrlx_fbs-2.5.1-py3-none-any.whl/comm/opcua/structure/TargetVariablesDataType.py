# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TargetVariablesDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TargetVariablesDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTargetVariablesDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TargetVariablesDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TargetVariablesDataType
    def TargetVariables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.opcua.structure.FieldTargetDataType import FieldTargetDataType
            obj = FieldTargetDataType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TargetVariablesDataType
    def TargetVariablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TargetVariablesDataType
    def TargetVariablesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def TargetVariablesDataTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return TargetVariablesDataTypeStart(builder)
def TargetVariablesDataTypeAddTargetVariables(builder, targetVariables): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(targetVariables), 0)
def AddTargetVariables(builder, targetVariables):
    return TargetVariablesDataTypeAddTargetVariables(builder, targetVariables)
def TargetVariablesDataTypeStartTargetVariablesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTargetVariablesVector(builder, numElems):
    return TargetVariablesDataTypeStartTargetVariablesVector(builder, numElems)
def TargetVariablesDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return TargetVariablesDataTypeEnd(builder)
import comm.opcua.structure.FieldTargetDataType
try:
    from typing import List
except:
    pass

class TargetVariablesDataTypeT(object):

    # TargetVariablesDataTypeT
    def __init__(self):
        self.targetVariables = None  # type: List[comm.opcua.structure.FieldTargetDataType.FieldTargetDataTypeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        targetVariablesDataType = TargetVariablesDataType()
        targetVariablesDataType.Init(buf, pos)
        return cls.InitFromObj(targetVariablesDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, targetVariablesDataType):
        x = TargetVariablesDataTypeT()
        x._UnPack(targetVariablesDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.targetVariables == other.targetVariables

    # TargetVariablesDataTypeT
    def _UnPack(self, targetVariablesDataType):
        if targetVariablesDataType is None:
            return
        if not targetVariablesDataType.TargetVariablesIsNone():
            self.targetVariables = []
            for i in range(targetVariablesDataType.TargetVariablesLength()):
                if targetVariablesDataType.TargetVariables(i) is None:
                    self.targetVariables.append(None)
                else:
                    fieldTargetDataType_ = comm.opcua.structure.FieldTargetDataType.FieldTargetDataTypeT.InitFromObj(targetVariablesDataType.TargetVariables(i))
                    self.targetVariables.append(fieldTargetDataType_)

    # TargetVariablesDataTypeT
    def Pack(self, builder):
        if self.targetVariables is not None:
            targetVariableslist = []
            for i in range(len(self.targetVariables)):
                targetVariableslist.append(self.targetVariables[i].Pack(builder))
            TargetVariablesDataTypeStartTargetVariablesVector(builder, len(self.targetVariables))
            for i in reversed(range(len(self.targetVariables))):
                builder.PrependUOffsetTRelative(targetVariableslist[i])
            targetVariables = builder.EndVector()
        TargetVariablesDataTypeStart(builder)
        if self.targetVariables is not None:
            TargetVariablesDataTypeAddTargetVariables(builder, targetVariables)
        targetVariablesDataType = TargetVariablesDataTypeEnd(builder)
        return targetVariablesDataType
