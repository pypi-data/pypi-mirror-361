# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# necessary parameters of filter
class AxsCfgFilter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgFilter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgFilter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgFilter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # filter type
    # AxsCfgFilter
    def FilterType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # parameters
    # AxsCfgFilter
    def CutoffFrq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of cutoff frequency
    # AxsCfgFilter
    def CutoffFrqUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgFilterStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsCfgFilterStart(builder)
def AxsCfgFilterAddFilterType(builder, filterType): builder.PrependInt8Slot(0, filterType, 0)
def AddFilterType(builder, filterType):
    return AxsCfgFilterAddFilterType(builder, filterType)
def AxsCfgFilterAddCutoffFrq(builder, cutoffFrq): builder.PrependFloat64Slot(1, cutoffFrq, 0.0)
def AddCutoffFrq(builder, cutoffFrq):
    return AxsCfgFilterAddCutoffFrq(builder, cutoffFrq)
def AxsCfgFilterAddCutoffFrqUnit(builder, cutoffFrqUnit): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cutoffFrqUnit), 0)
def AddCutoffFrqUnit(builder, cutoffFrqUnit):
    return AxsCfgFilterAddCutoffFrqUnit(builder, cutoffFrqUnit)
def AxsCfgFilterEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgFilterEnd(builder)

class AxsCfgFilterT(object):

    # AxsCfgFilterT
    def __init__(self):
        self.filterType = 0  # type: int
        self.cutoffFrq = 0.0  # type: float
        self.cutoffFrqUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgFilter = AxsCfgFilter()
        axsCfgFilter.Init(buf, pos)
        return cls.InitFromObj(axsCfgFilter)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgFilter):
        x = AxsCfgFilterT()
        x._UnPack(axsCfgFilter)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.filterType == other.filterType and \
            self.cutoffFrq == other.cutoffFrq and \
            self.cutoffFrqUnit == other.cutoffFrqUnit

    # AxsCfgFilterT
    def _UnPack(self, axsCfgFilter):
        if axsCfgFilter is None:
            return
        self.filterType = axsCfgFilter.FilterType()
        self.cutoffFrq = axsCfgFilter.CutoffFrq()
        self.cutoffFrqUnit = axsCfgFilter.CutoffFrqUnit()

    # AxsCfgFilterT
    def Pack(self, builder):
        if self.cutoffFrqUnit is not None:
            cutoffFrqUnit = builder.CreateString(self.cutoffFrqUnit)
        AxsCfgFilterStart(builder)
        AxsCfgFilterAddFilterType(builder, self.filterType)
        AxsCfgFilterAddCutoffFrq(builder, self.cutoffFrq)
        if self.cutoffFrqUnit is not None:
            AxsCfgFilterAddCutoffFrqUnit(builder, cutoffFrqUnit)
        axsCfgFilter = AxsCfgFilterEnd(builder)
        return axsCfgFilter
