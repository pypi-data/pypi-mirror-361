# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Table for a vector of int64 values
class ExternalConfigInt64Vector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExternalConfigInt64Vector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExternalConfigInt64Vector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExternalConfigInt64Vector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of int64 numbers
    # ExternalConfigInt64Vector
    def IntVector(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ExternalConfigInt64Vector
    def IntVectorAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ExternalConfigInt64Vector
    def IntVectorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ExternalConfigInt64Vector
    def IntVectorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ExternalConfigInt64VectorStart(builder): builder.StartObject(1)
def Start(builder):
    return ExternalConfigInt64VectorStart(builder)
def ExternalConfigInt64VectorAddIntVector(builder, intVector): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(intVector), 0)
def AddIntVector(builder, intVector):
    return ExternalConfigInt64VectorAddIntVector(builder, intVector)
def ExternalConfigInt64VectorStartIntVectorVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartIntVectorVector(builder, numElems):
    return ExternalConfigInt64VectorStartIntVectorVector(builder, numElems)
def ExternalConfigInt64VectorEnd(builder): return builder.EndObject()
def End(builder):
    return ExternalConfigInt64VectorEnd(builder)
try:
    from typing import List
except:
    pass

class ExternalConfigInt64VectorT(object):

    # ExternalConfigInt64VectorT
    def __init__(self):
        self.intVector = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        externalConfigInt64Vector = ExternalConfigInt64Vector()
        externalConfigInt64Vector.Init(buf, pos)
        return cls.InitFromObj(externalConfigInt64Vector)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, externalConfigInt64Vector):
        x = ExternalConfigInt64VectorT()
        x._UnPack(externalConfigInt64Vector)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.intVector == other.intVector

    # ExternalConfigInt64VectorT
    def _UnPack(self, externalConfigInt64Vector):
        if externalConfigInt64Vector is None:
            return
        if not externalConfigInt64Vector.IntVectorIsNone():
            if np is None:
                self.intVector = []
                for i in range(externalConfigInt64Vector.IntVectorLength()):
                    self.intVector.append(externalConfigInt64Vector.IntVector(i))
            else:
                self.intVector = externalConfigInt64Vector.IntVectorAsNumpy()

    # ExternalConfigInt64VectorT
    def Pack(self, builder):
        if self.intVector is not None:
            if np is not None and type(self.intVector) is np.ndarray:
                intVector = builder.CreateNumpyVector(self.intVector)
            else:
                ExternalConfigInt64VectorStartIntVectorVector(builder, len(self.intVector))
                for i in reversed(range(len(self.intVector))):
                    builder.PrependInt64(self.intVector[i])
                intVector = builder.EndVector()
        ExternalConfigInt64VectorStart(builder)
        if self.intVector is not None:
            ExternalConfigInt64VectorAddIntVector(builder, intVector)
        externalConfigInt64Vector = ExternalConfigInt64VectorEnd(builder)
        return externalConfigInt64Vector
