# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LosslessInterval(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LosslessInterval()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLosslessInterval(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LosslessInterval
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Time in µs to wait for new data
    # This feature is only implemented in lossless subscriptions
    # LosslessInterval
    def SamplingInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Time in µs as tolerance for samplingInterval
    # Data will be caputred: timstamp(newData) > timstamp(oldData) + (samplingInterval - tolerance)
    # This feature is only implemented in lossless subscriptions
    # LosslessInterval
    def Tolerance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def LosslessIntervalStart(builder): builder.StartObject(2)
def Start(builder):
    return LosslessIntervalStart(builder)
def LosslessIntervalAddSamplingInterval(builder, samplingInterval): builder.PrependUint64Slot(0, samplingInterval, 0)
def AddSamplingInterval(builder, samplingInterval):
    return LosslessIntervalAddSamplingInterval(builder, samplingInterval)
def LosslessIntervalAddTolerance(builder, tolerance): builder.PrependUint64Slot(1, tolerance, 0)
def AddTolerance(builder, tolerance):
    return LosslessIntervalAddTolerance(builder, tolerance)
def LosslessIntervalEnd(builder): return builder.EndObject()
def End(builder):
    return LosslessIntervalEnd(builder)

class LosslessIntervalT(object):

    # LosslessIntervalT
    def __init__(self):
        self.samplingInterval = 0  # type: int
        self.tolerance = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        losslessInterval = LosslessInterval()
        losslessInterval.Init(buf, pos)
        return cls.InitFromObj(losslessInterval)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, losslessInterval):
        x = LosslessIntervalT()
        x._UnPack(losslessInterval)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.samplingInterval == other.samplingInterval and \
            self.tolerance == other.tolerance

    # LosslessIntervalT
    def _UnPack(self, losslessInterval):
        if losslessInterval is None:
            return
        self.samplingInterval = losslessInterval.SamplingInterval()
        self.tolerance = losslessInterval.Tolerance()

    # LosslessIntervalT
    def Pack(self, builder):
        LosslessIntervalStart(builder)
        LosslessIntervalAddSamplingInterval(builder, self.samplingInterval)
        LosslessIntervalAddTolerance(builder, self.tolerance)
        losslessInterval = LosslessIntervalEnd(builder)
        return losslessInterval
