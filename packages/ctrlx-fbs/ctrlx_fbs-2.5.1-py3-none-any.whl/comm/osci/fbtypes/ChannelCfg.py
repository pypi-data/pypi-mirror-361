# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ChannelCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ChannelCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsChannelCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ChannelCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ChannelCfg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ChannelCfg
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ChannelCfg
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ChannelCfg
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ChannelCfg
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ChannelCfg
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ChannelCfgStart(builder): builder.StartObject(6)
def Start(builder):
    return ChannelCfgStart(builder)
def ChannelCfgAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ChannelCfgAddName(builder, name)
def ChannelCfgAddAlias(builder, alias): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)
def AddAlias(builder, alias):
    return ChannelCfgAddAlias(builder, alias)
def ChannelCfgAddSource(builder, source): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)
def AddSource(builder, source):
    return ChannelCfgAddSource(builder, source)
def ChannelCfgAddDataType(builder, dataType): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dataType), 0)
def AddDataType(builder, dataType):
    return ChannelCfgAddDataType(builder, dataType)
def ChannelCfgAddType(builder, type): builder.PrependInt8Slot(4, type, 0)
def AddType(builder, type):
    return ChannelCfgAddType(builder, type)
def ChannelCfgAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def AddUnit(builder, unit):
    return ChannelCfgAddUnit(builder, unit)
def ChannelCfgEnd(builder): return builder.EndObject()
def End(builder):
    return ChannelCfgEnd(builder)

class ChannelCfgT(object):

    # ChannelCfgT
    def __init__(self):
        self.name = None  # type: str
        self.alias = None  # type: str
        self.source = None  # type: str
        self.dataType = None  # type: str
        self.type = 0  # type: int
        self.unit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        channelCfg = ChannelCfg()
        channelCfg.Init(buf, pos)
        return cls.InitFromObj(channelCfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, channelCfg):
        x = ChannelCfgT()
        x._UnPack(channelCfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.alias == other.alias and \
            self.source == other.source and \
            self.dataType == other.dataType and \
            self.type == other.type and \
            self.unit == other.unit

    # ChannelCfgT
    def _UnPack(self, channelCfg):
        if channelCfg is None:
            return
        self.name = channelCfg.Name()
        self.alias = channelCfg.Alias()
        self.source = channelCfg.Source()
        self.dataType = channelCfg.DataType()
        self.type = channelCfg.Type()
        self.unit = channelCfg.Unit()

    # ChannelCfgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.alias is not None:
            alias = builder.CreateString(self.alias)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.dataType is not None:
            dataType = builder.CreateString(self.dataType)
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        ChannelCfgStart(builder)
        if self.name is not None:
            ChannelCfgAddName(builder, name)
        if self.alias is not None:
            ChannelCfgAddAlias(builder, alias)
        if self.source is not None:
            ChannelCfgAddSource(builder, source)
        if self.dataType is not None:
            ChannelCfgAddDataType(builder, dataType)
        ChannelCfgAddType(builder, self.type)
        if self.unit is not None:
            ChannelCfgAddUnit(builder, unit)
        channelCfg = ChannelCfgEnd(builder)
        return channelCfg
