# automatically generated by the FlatBuffers compiler, do not modify

# namespace: parameter

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReadEverythingDetails(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReadEverythingDetails()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReadEverythingDetails(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ReadEverythingDetails
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReadEverythingDetails
    def ValidElements(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ReadEverythingDetails
    def DataStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ReadEverythingDetails
    def NameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ReadEverythingDetails
    def Attribute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReadEverythingDetails
    def UnitLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ReadEverythingDetails
    def Min(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ReadEverythingDetails
    def MinAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ReadEverythingDetails
    def MinLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReadEverythingDetails
    def MinIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # ReadEverythingDetails
    def Max(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ReadEverythingDetails
    def MaxAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ReadEverythingDetails
    def MaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReadEverythingDetails
    def MaxIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # ReadEverythingDetails
    def MaxListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReadEverythingDetails
    def ParameterDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReadEverythingDetails
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ReadEverythingDetails
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ReadEverythingDetails
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ReadEverythingDetails
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ReadEverythingDetails
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReadEverythingDetails
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

def ReadEverythingDetailsStart(builder): builder.StartObject(12)
def Start(builder):
    return ReadEverythingDetailsStart(builder)
def ReadEverythingDetailsAddValidElements(builder, validElements): builder.PrependUint16Slot(0, validElements, 0)
def AddValidElements(builder, validElements):
    return ReadEverythingDetailsAddValidElements(builder, validElements)
def ReadEverythingDetailsAddDataStatus(builder, dataStatus): builder.PrependUint16Slot(1, dataStatus, 0)
def AddDataStatus(builder, dataStatus):
    return ReadEverythingDetailsAddDataStatus(builder, dataStatus)
def ReadEverythingDetailsAddNameLength(builder, nameLength): builder.PrependUint16Slot(2, nameLength, 0)
def AddNameLength(builder, nameLength):
    return ReadEverythingDetailsAddNameLength(builder, nameLength)
def ReadEverythingDetailsAddAttribute(builder, attribute): builder.PrependUint32Slot(3, attribute, 0)
def AddAttribute(builder, attribute):
    return ReadEverythingDetailsAddAttribute(builder, attribute)
def ReadEverythingDetailsAddUnitLength(builder, unitLength): builder.PrependUint16Slot(4, unitLength, 0)
def AddUnitLength(builder, unitLength):
    return ReadEverythingDetailsAddUnitLength(builder, unitLength)
def ReadEverythingDetailsAddMin(builder, min): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(min), 0)
def AddMin(builder, min):
    return ReadEverythingDetailsAddMin(builder, min)
def ReadEverythingDetailsStartMinVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartMinVector(builder, numElems):
    return ReadEverythingDetailsStartMinVector(builder, numElems)
def ReadEverythingDetailsAddMax(builder, max): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(max), 0)
def AddMax(builder, max):
    return ReadEverythingDetailsAddMax(builder, max)
def ReadEverythingDetailsStartMaxVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartMaxVector(builder, numElems):
    return ReadEverythingDetailsStartMaxVector(builder, numElems)
def ReadEverythingDetailsAddMaxListLength(builder, maxListLength): builder.PrependUint32Slot(7, maxListLength, 0)
def AddMaxListLength(builder, maxListLength):
    return ReadEverythingDetailsAddMaxListLength(builder, maxListLength)
def ReadEverythingDetailsAddParameterDataLength(builder, parameterDataLength): builder.PrependUint32Slot(8, parameterDataLength, 0)
def AddParameterDataLength(builder, parameterDataLength):
    return ReadEverythingDetailsAddParameterDataLength(builder, parameterDataLength)
def ReadEverythingDetailsAddName(builder, name): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ReadEverythingDetailsAddName(builder, name)
def ReadEverythingDetailsAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def AddUnit(builder, unit):
    return ReadEverythingDetailsAddUnit(builder, unit)
def ReadEverythingDetailsAddData(builder, data): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return ReadEverythingDetailsAddData(builder, data)
def ReadEverythingDetailsStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDataVector(builder, numElems):
    return ReadEverythingDetailsStartDataVector(builder, numElems)
def ReadEverythingDetailsEnd(builder): return builder.EndObject()
def End(builder):
    return ReadEverythingDetailsEnd(builder)
try:
    from typing import List
except:
    pass

class ReadEverythingDetailsT(object):

    # ReadEverythingDetailsT
    def __init__(self):
        self.validElements = 0  # type: int
        self.dataStatus = 0  # type: int
        self.nameLength = 0  # type: int
        self.attribute = 0  # type: int
        self.unitLength = 0  # type: int
        self.min = None  # type: List[int]
        self.max = None  # type: List[int]
        self.maxListLength = 0  # type: int
        self.parameterDataLength = 0  # type: int
        self.name = None  # type: str
        self.unit = None  # type: str
        self.data = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        readEverythingDetails = ReadEverythingDetails()
        readEverythingDetails.Init(buf, pos)
        return cls.InitFromObj(readEverythingDetails)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, readEverythingDetails):
        x = ReadEverythingDetailsT()
        x._UnPack(readEverythingDetails)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.validElements == other.validElements and \
            self.dataStatus == other.dataStatus and \
            self.nameLength == other.nameLength and \
            self.attribute == other.attribute and \
            self.unitLength == other.unitLength and \
            self.min == other.min and \
            self.max == other.max and \
            self.maxListLength == other.maxListLength and \
            self.parameterDataLength == other.parameterDataLength and \
            self.name == other.name and \
            self.unit == other.unit and \
            self.data == other.data

    # ReadEverythingDetailsT
    def _UnPack(self, readEverythingDetails):
        if readEverythingDetails is None:
            return
        self.validElements = readEverythingDetails.ValidElements()
        self.dataStatus = readEverythingDetails.DataStatus()
        self.nameLength = readEverythingDetails.NameLength()
        self.attribute = readEverythingDetails.Attribute()
        self.unitLength = readEverythingDetails.UnitLength()
        if not readEverythingDetails.MinIsNone():
            if np is None:
                self.min = []
                for i in range(readEverythingDetails.MinLength()):
                    self.min.append(readEverythingDetails.Min(i))
            else:
                self.min = readEverythingDetails.MinAsNumpy()
        if not readEverythingDetails.MaxIsNone():
            if np is None:
                self.max = []
                for i in range(readEverythingDetails.MaxLength()):
                    self.max.append(readEverythingDetails.Max(i))
            else:
                self.max = readEverythingDetails.MaxAsNumpy()
        self.maxListLength = readEverythingDetails.MaxListLength()
        self.parameterDataLength = readEverythingDetails.ParameterDataLength()
        self.name = readEverythingDetails.Name()
        self.unit = readEverythingDetails.Unit()
        if not readEverythingDetails.DataIsNone():
            if np is None:
                self.data = []
                for i in range(readEverythingDetails.DataLength()):
                    self.data.append(readEverythingDetails.Data(i))
            else:
                self.data = readEverythingDetails.DataAsNumpy()

    # ReadEverythingDetailsT
    def Pack(self, builder):
        if self.min is not None:
            if np is not None and type(self.min) is np.ndarray:
                min = builder.CreateNumpyVector(self.min)
            else:
                ReadEverythingDetailsStartMinVector(builder, len(self.min))
                for i in reversed(range(len(self.min))):
                    builder.PrependUint8(self.min[i])
                min = builder.EndVector()
        if self.max is not None:
            if np is not None and type(self.max) is np.ndarray:
                max = builder.CreateNumpyVector(self.max)
            else:
                ReadEverythingDetailsStartMaxVector(builder, len(self.max))
                for i in reversed(range(len(self.max))):
                    builder.PrependUint8(self.max[i])
                max = builder.EndVector()
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                ReadEverythingDetailsStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector()
        ReadEverythingDetailsStart(builder)
        ReadEverythingDetailsAddValidElements(builder, self.validElements)
        ReadEverythingDetailsAddDataStatus(builder, self.dataStatus)
        ReadEverythingDetailsAddNameLength(builder, self.nameLength)
        ReadEverythingDetailsAddAttribute(builder, self.attribute)
        ReadEverythingDetailsAddUnitLength(builder, self.unitLength)
        if self.min is not None:
            ReadEverythingDetailsAddMin(builder, min)
        if self.max is not None:
            ReadEverythingDetailsAddMax(builder, max)
        ReadEverythingDetailsAddMaxListLength(builder, self.maxListLength)
        ReadEverythingDetailsAddParameterDataLength(builder, self.parameterDataLength)
        if self.name is not None:
            ReadEverythingDetailsAddName(builder, name)
        if self.unit is not None:
            ReadEverythingDetailsAddUnit(builder, unit)
        if self.data is not None:
            ReadEverythingDetailsAddData(builder, data)
        readEverythingDetails = ReadEverythingDetailsEnd(builder)
        return readEverythingDetails
