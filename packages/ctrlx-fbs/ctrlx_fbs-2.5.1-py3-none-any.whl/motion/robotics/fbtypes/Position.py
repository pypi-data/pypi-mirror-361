# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Position(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Position()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPosition(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Position
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Position
    def Entries(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.robotics.fbtypes.PositionEntry import PositionEntry
            obj = PositionEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Position
    def EntriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Position
    def EntriesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def PositionStart(builder): builder.StartObject(1)
def Start(builder):
    return PositionStart(builder)
def PositionAddEntries(builder, entries): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(entries), 0)
def AddEntries(builder, entries):
    return PositionAddEntries(builder, entries)
def PositionStartEntriesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartEntriesVector(builder, numElems):
    return PositionStartEntriesVector(builder, numElems)
def PositionEnd(builder): return builder.EndObject()
def End(builder):
    return PositionEnd(builder)
import motion.robotics.fbtypes.PositionEntry
try:
    from typing import List
except:
    pass

class PositionT(object):

    # PositionT
    def __init__(self):
        self.entries = None  # type: List[motion.robotics.fbtypes.PositionEntry.PositionEntryT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        position = Position()
        position.Init(buf, pos)
        return cls.InitFromObj(position)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, position):
        x = PositionT()
        x._UnPack(position)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.entries == other.entries

    # PositionT
    def _UnPack(self, position):
        if position is None:
            return
        if not position.EntriesIsNone():
            self.entries = []
            for i in range(position.EntriesLength()):
                if position.Entries(i) is None:
                    self.entries.append(None)
                else:
                    positionEntry_ = motion.robotics.fbtypes.PositionEntry.PositionEntryT.InitFromObj(position.Entries(i))
                    self.entries.append(positionEntry_)

    # PositionT
    def Pack(self, builder):
        if self.entries is not None:
            entrieslist = []
            for i in range(len(self.entries)):
                entrieslist.append(self.entries[i].Pack(builder))
            PositionStartEntriesVector(builder, len(self.entries))
            for i in reversed(range(len(self.entries))):
                builder.PrependUOffsetTRelative(entrieslist[i])
            entries = builder.EndVector()
        PositionStart(builder)
        if self.entries is not None:
            PositionAddEntries(builder, entries)
        position = PositionEnd(builder)
        return position
