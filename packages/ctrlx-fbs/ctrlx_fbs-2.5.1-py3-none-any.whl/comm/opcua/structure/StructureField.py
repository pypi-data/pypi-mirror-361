# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StructureField(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StructureField()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStructureField(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StructureField
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StructureField
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StructureField
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.LocalizedText import LocalizedText
            obj = LocalizedText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StructureField
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.opcua.builtin.NodeId import NodeId
            obj = NodeId()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StructureField
    def ValueRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StructureField
    def ArrayDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # StructureField
    def ArrayDimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # StructureField
    def ArrayDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StructureField
    def ArrayDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # StructureField
    def MaxStringLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # StructureField
    def IsOptional(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def StructureFieldStart(builder): builder.StartObject(7)
def Start(builder):
    return StructureFieldStart(builder)
def StructureFieldAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return StructureFieldAddName(builder, name)
def StructureFieldAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return StructureFieldAddDescription(builder, description)
def StructureFieldAddDataType(builder, dataType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dataType), 0)
def AddDataType(builder, dataType):
    return StructureFieldAddDataType(builder, dataType)
def StructureFieldAddValueRank(builder, valueRank): builder.PrependInt32Slot(3, valueRank, 0)
def AddValueRank(builder, valueRank):
    return StructureFieldAddValueRank(builder, valueRank)
def StructureFieldAddArrayDimensions(builder, arrayDimensions): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(arrayDimensions), 0)
def AddArrayDimensions(builder, arrayDimensions):
    return StructureFieldAddArrayDimensions(builder, arrayDimensions)
def StructureFieldStartArrayDimensionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartArrayDimensionsVector(builder, numElems):
    return StructureFieldStartArrayDimensionsVector(builder, numElems)
def StructureFieldAddMaxStringLength(builder, maxStringLength): builder.PrependUint32Slot(5, maxStringLength, 0)
def AddMaxStringLength(builder, maxStringLength):
    return StructureFieldAddMaxStringLength(builder, maxStringLength)
def StructureFieldAddIsOptional(builder, isOptional): builder.PrependBoolSlot(6, isOptional, 0)
def AddIsOptional(builder, isOptional):
    return StructureFieldAddIsOptional(builder, isOptional)
def StructureFieldEnd(builder): return builder.EndObject()
def End(builder):
    return StructureFieldEnd(builder)
import comm.opcua.builtin.LocalizedText
import comm.opcua.builtin.NodeId
try:
    from typing import List, Optional
except:
    pass

class StructureFieldT(object):

    # StructureFieldT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: Optional[comm.opcua.builtin.LocalizedText.LocalizedTextT]
        self.dataType = None  # type: Optional[comm.opcua.builtin.NodeId.NodeIdT]
        self.valueRank = 0  # type: int
        self.arrayDimensions = None  # type: List[int]
        self.maxStringLength = 0  # type: int
        self.isOptional = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        structureField = StructureField()
        structureField.Init(buf, pos)
        return cls.InitFromObj(structureField)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, structureField):
        x = StructureFieldT()
        x._UnPack(structureField)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.description == other.description and \
            self.dataType == other.dataType and \
            self.valueRank == other.valueRank and \
            self.arrayDimensions == other.arrayDimensions and \
            self.maxStringLength == other.maxStringLength and \
            self.isOptional == other.isOptional

    # StructureFieldT
    def _UnPack(self, structureField):
        if structureField is None:
            return
        self.name = structureField.Name()
        if structureField.Description() is not None:
            self.description = comm.opcua.builtin.LocalizedText.LocalizedTextT.InitFromObj(structureField.Description())
        if structureField.DataType() is not None:
            self.dataType = comm.opcua.builtin.NodeId.NodeIdT.InitFromObj(structureField.DataType())
        self.valueRank = structureField.ValueRank()
        if not structureField.ArrayDimensionsIsNone():
            if np is None:
                self.arrayDimensions = []
                for i in range(structureField.ArrayDimensionsLength()):
                    self.arrayDimensions.append(structureField.ArrayDimensions(i))
            else:
                self.arrayDimensions = structureField.ArrayDimensionsAsNumpy()
        self.maxStringLength = structureField.MaxStringLength()
        self.isOptional = structureField.IsOptional()

    # StructureFieldT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = self.description.Pack(builder)
        if self.dataType is not None:
            dataType = self.dataType.Pack(builder)
        if self.arrayDimensions is not None:
            if np is not None and type(self.arrayDimensions) is np.ndarray:
                arrayDimensions = builder.CreateNumpyVector(self.arrayDimensions)
            else:
                StructureFieldStartArrayDimensionsVector(builder, len(self.arrayDimensions))
                for i in reversed(range(len(self.arrayDimensions))):
                    builder.PrependUint32(self.arrayDimensions[i])
                arrayDimensions = builder.EndVector()
        StructureFieldStart(builder)
        if self.name is not None:
            StructureFieldAddName(builder, name)
        if self.description is not None:
            StructureFieldAddDescription(builder, description)
        if self.dataType is not None:
            StructureFieldAddDataType(builder, dataType)
        StructureFieldAddValueRank(builder, self.valueRank)
        if self.arrayDimensions is not None:
            StructureFieldAddArrayDimensions(builder, arrayDimensions)
        StructureFieldAddMaxStringLength(builder, self.maxStringLength)
        StructureFieldAddIsOptional(builder, self.isOptional)
        structureField = StructureFieldEnd(builder)
        return structureField
