---
image: ubuntu:focal

stages:
  - build
  - test
  - publish

variables:
  GIT_STRATEGY: clone
  # Default Python version, for build stage(s). Should be included in test matrix.
  PYTHON_VERSION: "3.13.3"
  TWINE_WITH_VERSION: "twine>=6.1.0,<7"

.before_script_template: &setup_env
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update && apt-get upgrade -y
    - apt-get install -y --no-install-recommends --reinstall ca-certificates
    - apt-get install -y --no-install-recommends git
    - git clone https://github.com/pyenv/pyenv.git ~/.pyenv
    # Install pyenv dependencies, esp. for building python, and set up pyenv.
    - apt-get install -y --no-install-recommends build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev curl libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
    - export PYENV_ROOT="$HOME/.pyenv"
    - command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    - eval "$(pyenv init -)"
    - pyenv install ${PYTHON_VERSION}
    - pyenv global ${PYTHON_VERSION}
    - python --version
    # Install and activate venv.
    - python -m venv ../venv
    - . ../venv/bin/activate
    # Install/upgrade build tools.
    - export SETUPTOOLS_SCM_DEBUG=1
    - python -m pip install --upgrade --progress-bar off pip setuptools
    - python -m pip --version

.install_build_template: &install_build_module
  # Install package.
  - python -m pip install --progress-bar off .[dev]
  - python -m pip list
  # Build package.
  - python -m check_manifest
  - python -m build

build-branch:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH
  <<: *setup_env
  script:
    - *install_build_module
    - echo Created build artifact for branch that expires in 1 week.
  artifacts:
    name: $CI_PROJECT_NAME-$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
    when: always
    paths:
      - dist
    expire_in: 1 week

build-tag:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/' # Enforce semver in tag.
  <<: *setup_env
  script:
    - *install_build_module
    - echo Created build artifact for tag that expires never.
  artifacts:
    name: $CI_PROJECT_NAME-$CI_COMMIT_TAG
    when: always
    paths:
      - dist
    expire_in: never

docs-branch:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH
  <<: *setup_env
  script:
    - *install_build_module
    - echo Creating documentation artifact for branch that expires in 1 week.
    - apt-get install -y --no-install-recommends zip
    - cd docs
    - mkdir dist
    - mkdir dist/html
    - make clean
    - sphinx-build -W -b html source build/html
    - cd build/html
    - zip -r ../../dist/html/${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}.zip *
  artifacts:
    name: ${CI_PROJECT_NAME}-docs-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}
    when: always
    paths:
      - docs/dist
    expire_in: 1 week

docs-tag:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/' # Enforce semver in tag.
  <<: *setup_env
  script:
    - *install_build_module
    - echo Creating documentation artifact for tag that expires never.
    - apt-get install -y --no-install-recommends zip
    - cd docs
    - mkdir dist
    - mkdir dist/html
    - make clean
    - sphinx-build -W -b html source build/html
    - cd build/html
    - zip -r ../../dist/html/${CI_COMMIT_TAG}.zip *
  artifacts:
    name: ${CI_PROJECT_NAME}-docs-${CI_COMMIT_TAG}
    when: always
    paths:
      - docs/dist
    expire_in: never

code-check-semgrep:
  stage: test
  image: returntocorp/semgrep-agent:v1
  variables:
    SEMGREP_RULES: >-
      p/security-audit
      p/secrets
  script: semgrep-agent

code-check-trivy:
  stage: test
  <<: *setup_env
  script:
    - *install_build_module
    - export TRIVY_VER=$(curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - curl -L -o trivy.tgz https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VER}/trivy_${TRIVY_VER}_Linux-64bit.tar.gz
    - tar xzf trivy.tgz
    - mv trivy /usr/local/bin/
    - trivy fs --exit-code 1 .

code-check-megalinter:
  stage: test
  image: oxsecurity/megalinter:v8
  script:
    - ["/bin/bash /entrypoint.sh"]
  variables:
    DEFAULT_WORKSPACE: $CI_PROJECT_DIR
  artifacts:
    when: always
    paths:
      - megalinter-reports
    expire_in: 1 week

tests:
  stage: test
  <<: *setup_env
  script:
    # Test install from previously built wheel-file artifact.
    # Test oldest Python version using older numpy. Update this when matrix is updated.
    - |
      PYTHON_VERSION_MINOR=`awk -F. '{print $2}' <<< "$PYTHON_VERSION"`
      if [ "$PYTHON_VERSION_MINOR" = "9" ]; then
        python -m pip install --upgrade "numpy <2"
        python -m pip install $(printf "%s[dev]" `echo dist/*.whl`)
      else
        python -m pip install $(printf "%s[dev]" `echo dist/*.whl`)
      fi
    - python -m pip list
    # Do not run timing tests which are fragile in CI environment.
    # Tests require QCI_TOKEN and QCI_API_URL be set in environment.
    - python -m coverage run --source=qci_client -m pytest -v -m "not timing"
    # 100% coverage NOT yet required in pyproject.toml.
    - python -m coverage report -m
    # Python linters/autoformatters.
    - python -m pylint .
    - python -m black --check .
  parallel:
    matrix:
      - PYTHON_VERSION: ['3.9.22', '3.10.17', '3.11.12', '3.12.9', '3.13.3']

publish-branch-package-pypi-test:
  stage: publish
  when: manual  # CI can show passed without running the upload to test PyPI server.
  rules:
    - if: $CI_COMMIT_BRANCH
  <<: *setup_env
  script:
    - echo "Uploading branch build to https://test.pypi.org/project/qci-client/"
    - python -m pip install ${TWINE_WITH_VERSION}
    - python -m twine check dist/*
    - python -m twine upload --verbose --repository testpypi -u __token__ -p ${PYPI_TEST_TOKEN} dist/*

publish-tag-package-pypi:
  stage: publish
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/' # Enforce semver in tag.
      when: manual  # CI shows blocked/incomplete until upload to PyPI server is done.
  <<: *setup_env
  script:
    - echo "Uploading tag build to https://pypi.org/project/qci-client/"
    - python -m pip install ${TWINE_WITH_VERSION}
    - python -m twine check dist/*
    - python -m twine upload --verbose -u __token__ -p ${PYPI_TOKEN} dist/*
