[build-system]
requires = ["uv_build>=0.7.19,<0.8.0"]
build-backend = "uv_build"

[project]
name = "mckit-nuclides"
version = "0.4.3"
description = "Python tools to work with elements and nuclides"
authors = [{ name = "dvp2015", email = "dmitri_portnov@yahoo.com" }]
requires-python = ">=3.10,<3.14"  # connectorx==0.4.3 prevents <4
readme = "README.rst"
license = { text = "MIT" }
keywords = [
    "element",
    "nuclide",
    "isotope",
    "abundance",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Physics",
    "Programming Language :: Python :: 3",
]
dependencies = [
    "numpy (>=2.2.3)",
    "polars[all] (>=1.12.0)",
]
# dynamic = [
#     "version",
#     "classifiers",
#     "requires-python",
# ]

[project.urls]
homepage = "https://github.com/MC-kit/mckit-nuclides"
repository = "https://github.com/MC-kit/mckit-nuclides"
documentation = "https://mckit-nuclides.readthedocs.io"
"Bug Tracker" = "https://github.com/MC-kit/mckit-nuclides/issues"
Changelog = "https://github.com/MC-kit/mckit-nuclides/releases"

[dependency-groups]
dev = [
    "tomli>=2.0.1 ; python_version < '3.11'",
    { include-group = "pre_commit" },
    { include-group = "test" },
    { include-group = "coverage" },
    { include-group = "xdoctest" },
    { include-group = "typeguard" },
    { include-group = "mypy" },
    { include-group = "docs" },
    { include-group = "docs_auto" },
    { include-group = "ruff" },
    { include-group = "analyze" },
]
pre_commit = [
    "pre-commit>=2.15.0",
    "pydocstringformatter>=0.7.3",
]
test = [
    "pytest>=7.1",
    "pytest-cov>=4.0",
    "pytest-mock>=3.14.0",
    "coverage[toml]>=6.1.2",
    "xdoctest[colors]>=0.15.10",
    "pytest-durations>=1.5.2",
    "pytest-emoji>=0.2.0",
]
coverage = ["coverage[toml]>=6.1.2"]
xdoctest = ["xdoctest[colors]>=0.15.10"]
typeguard = ["typeguard>=4.1.5"]
mypy = [
    "mypy>=1.2.0",
    "pep8-naming>=0.12.1",
    "types-setuptools>=57.4.2",
]
docs = [
    "sphinx>=6.1.3",
    "sphinx-autodoc-typehints>=1.19.5",
]
docs_auto = ["sphinx-autobuild>=2021.3.14"]
ruff = ["ruff>=0.0.259"]
analyze = [
    "jupyterlab>=4.2.5",
    "jupytext>=1.16.4",
]

# [tool.uv.build.targets.sdist]
# include = [
#     "src/mckit_nuclides",
#     "noxfile.py",
#     "tests",
#     "docs",
# ]
#
# [tool.uv.build.targets.wheel]
# include = ["src/mckit_nuclides"]
#
# [tool.uv.build.targets.wheel.sources]
# "src/mckit_nuclides" = "mckit_nuclides"

[tool.pytest.ini_options]
minversion = "6.2"
cache_dir = '.cache/pytest'
norecursedirs = '''
*.egg-info
.*
build
data
dist
docs/_build
docs/examples
htmlcov
notebooks
tools
wrk
'''
python_functions = "test_*  profile_*"
addopts = '''
-ra
-q
--tb=short
--doctest-modules
--strict-markers
--ignore setup.py
--failed-first
--xdoctest
--pytest-durations-min=1
--pytest-resultlog="pytest-result.log"
'''
doctest_optionflags = "ELLIPSIS NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ALLOW_UNICODE ALLOW_BYTES NUMBER"
testpaths = ["tests", "src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
# xfail tests that pass should fail the test suite
xfail_strict = true
filterwarnings = [
    "error",
    'ignore:Implementing implicit namespace packages \(as specified in PEP 420\) is preferred to `pkg_resources.declare_namespace`',
    "ignore:.*not typechecking multipledispatch.dispatcher.*UserWarning",
    'ignore:.*io.FileIO \[closed\]',
    'ignore:.*Deprecated call to `pkg_resources.declare_namespace',
    'ignore:.*Implicit None on return values:DeprecationWarning',
    # pandas 2.1.4 at python 3.12
    'ignore:.*datetime.datetime.utcfromtimestamp\(\) is deprecated:DeprecationWarning',
    # openpyxl 3.1.2 qt python 3.12
    'ignore:.*datetime.datetime.utcnow\(\):DeprecationWarning'
]
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[tool.xdoctest]
quiet = true
options = ""

[tool.coverage.paths]
source = ["src", ".nox/*/site-packages"]

[tool.coverage.run]
branch = true
source = ["src"]
omit = ["*_tab.py", "**/__init__.py"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 100
omit = ["*_tab.py", "**/__init__.py", "**/types.py"]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
ignore_errors = true
sort = "Cover"

[tool.mypy]
python_version = "3.12"
strict = true
follow_imports = "silent"
disallow_untyped_defs = true
files = "src/**/*.py"

[[tool.mypy.overrides]]
module = [
    "IPython.core.magic",
    "IPython.core.magic_arguments",
    "click",
    "click.testing",
    "loguru",
    "multipledispatch",
    "nox",
    "numpy",
    "numpy.testing",
    "pandas",
    "polars",
    "pytest",
    "scipy.constants",
    "scipy.sparse",
    "tomli",
    "tomllib",
    "xdoctest",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tomllib",
    "tomli",
]
allow_redefinition = true
disable_error_code = "no-redef"

[tool.check-manifest]
ignore = [
    "tests/*",
    "tools/*",
    "*.yaml",
    "noxfile.py",
]

[tool.jupytext]
# https://jupytext.readthedocs.io/en/latest/config.html
# Pair ipynb notebooks to py:percent text notebooks
formats = "ipynb,py:percent"

[tool.creosote]
paths = ["src"]
deps-file = "pyproject.toml"
sections = ["project.dependencies"]
