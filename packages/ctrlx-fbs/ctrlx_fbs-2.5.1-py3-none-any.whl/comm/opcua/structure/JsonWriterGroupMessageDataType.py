# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class JsonWriterGroupMessageDataType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JsonWriterGroupMessageDataType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsJsonWriterGroupMessageDataType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # JsonWriterGroupMessageDataType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # JsonWriterGroupMessageDataType
    def NetworkMessageContentMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def JsonWriterGroupMessageDataTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return JsonWriterGroupMessageDataTypeStart(builder)
def JsonWriterGroupMessageDataTypeAddNetworkMessageContentMask(builder, networkMessageContentMask): builder.PrependUint32Slot(0, networkMessageContentMask, 0)
def AddNetworkMessageContentMask(builder, networkMessageContentMask):
    return JsonWriterGroupMessageDataTypeAddNetworkMessageContentMask(builder, networkMessageContentMask)
def JsonWriterGroupMessageDataTypeEnd(builder): return builder.EndObject()
def End(builder):
    return JsonWriterGroupMessageDataTypeEnd(builder)

class JsonWriterGroupMessageDataTypeT(object):

    # JsonWriterGroupMessageDataTypeT
    def __init__(self):
        self.networkMessageContentMask = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        jsonWriterGroupMessageDataType = JsonWriterGroupMessageDataType()
        jsonWriterGroupMessageDataType.Init(buf, pos)
        return cls.InitFromObj(jsonWriterGroupMessageDataType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, jsonWriterGroupMessageDataType):
        x = JsonWriterGroupMessageDataTypeT()
        x._UnPack(jsonWriterGroupMessageDataType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.networkMessageContentMask == other.networkMessageContentMask

    # JsonWriterGroupMessageDataTypeT
    def _UnPack(self, jsonWriterGroupMessageDataType):
        if jsonWriterGroupMessageDataType is None:
            return
        self.networkMessageContentMask = jsonWriterGroupMessageDataType.NetworkMessageContentMask()

    # JsonWriterGroupMessageDataTypeT
    def Pack(self, builder):
        JsonWriterGroupMessageDataTypeStart(builder)
        JsonWriterGroupMessageDataTypeAddNetworkMessageContentMask(builder, self.networkMessageContentMask)
        jsonWriterGroupMessageDataType = JsonWriterGroupMessageDataTypeEnd(builder)
        return jsonWriterGroupMessageDataType
