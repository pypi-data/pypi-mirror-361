
[project]
name = "clearml-mcp"
version = "v0.2.0"
description = "lightweight MCP server that interacts with the ClearML API"
authors = [{ name = "Prass, The Nomadic Coder", email = "me@prassanna.io" }]
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["python"]
requires-python = ">=3.10,<4"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
dependencies = [
    "fastmcp>=0.1.0",
    "clearml>=1.16.0",
    "pydantic>=2.0.0"
]

[dependency-groups]
dev = [
    "ty>=0.0.1a11",

    "pytest>=8.4.1",
    "pytest-asyncio>=0.23.0",
    "coverage>=7.8.2",
    "ruff>=0.12.0",
    "taskipy>=1.14.1",
    "portray>=1.8.0",
    "legacy-cgi>=2.6.3",
    "setuptools>=80.9.0",
    "pre-commit>=4.2.0",
    "twine>=6.0.0",
]
examples = [
    "smolagents[openai,mcp]>=1.20.0",
    "rich>=10.0.0",
]

[project.scripts]
clearml-mcp = "clearml_mcp.clearml_mcp:main"

[project.urls]
homepage = "https://github.com/prassanna-ravishankar/clearml-mcp"
repository = "https://github.com/prassanna-ravishankar/clearml-mcp.git"
documentation = "https://prassanna-ravishankar.github.io/clearml-mcp"
issues = "https://github.com/prassanna-ravishankar/clearml-mcp/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/clearml_mcp"]

[tool.taskipy.tasks]
format = { cmd = "ruff format ./src/", help = "Format code using ruff" }
lint = { cmd = "ruff check --fix ./src/", help = "Lint code using ruff" }
type = { cmd = "ty check", help = "Typecheck code using ty" }
docs = { cmd = "portray in_browser", help = "Serve documentation in browser" }
serve = { cmd = "portray server", help = "Serve documentation" }
html = { cmd = "portray as_html", help = "Build HTML documentation" }
publish = { cmd = "portray on_github_pages", help = "Publish documentation on GitHub Pages" }
tests = { cmd = "pytest --verbose --color=yes tests", help = "Run all tests using pytest" }
coverage = { cmd = "coverage run -m pytest tests && coverage report", help = "Generate coverage report" }
run = { cmd = "uv run ./src/clearml_mcp/clearml_mcp.py", help = "Run main application" }
consolidated-debug = { cmd = "uv run --group examples examples/consolidated_debugger.py", help = "Run complete ML debugging analysis (recommended)" }
demo = { cmd = "DEMO_MODE=1 uv run --group examples examples/consolidated_debugger.py", help = "Run optimized demo for screen recording" }
example-simple = { cmd = "uv run --group examples examples/01_simple_example.py", help = "Basic MCP + smolagents integration" }
example = { cmd = "uv run --group examples examples/02_openai_compatible_example.py", help = "Gemini via OpenAI API example" }
find-experiments = { cmd = "uv run --group examples examples/03_find_real_experiments.py", help = "Discover real experiments in ClearML" }
quick-scalar = { cmd = "uv run --group examples examples/04_quick_scalar_demo.py", help = "Quick scalar convergence analysis" }

[tool.ruff]
line-length = 100
indent-width = 4
format.indent-style = "space"
target-version = "py313"
src = ["src", "tests"]

[tool.ruff.lint]
pydocstyle.convention = "google"
fixable = ["ALL"]
select = ["ALL"]
ignore = [
    # Global style choices - apply to entire project
    "FA102", # Flake8-future-annotations
    "TRY003", # long-exception-messages - project style choice
    "TRY300", # try-else - project style choice
    "TRY301", # abstract raise
    "EM101", # string literal in exception - project style choice
    "EM102", # f-string-exception - project style choice
    "B904", # Allow raising exceptions without from e - project style choice
    "BLE001", # Catch-all exceptions - needed for API wrapper
    "CPY", # Flake8-copyright
    "ERA", # Eradicate â€“ detects commented-out code
    "COM812", # conflicts with formatter
    "UP035", # typing.Dict is deprecated - global consistency
    "RUF013", # PEP 484 prohibits implicit Optional - global consistency
    "W293", # blank line contains whitespace - should be handled by formatter
    "INP001", # implicit namespace package - we use implicit packages intentionally
    # Docstring formatting - global consistency
    "D203", # incorrect-blank-line-before-class
    "D205", # line-between-summary-and-description
    "D212", # multi-line-summary-first-line
    "D400", # missing-trailing-period
    "D407", # missing-dashed-underline-after-section
    "D415", # first line should end with period, question mark, or exclamation point
]

[tool.ruff.lint.per-file-ignores]
# Test files
"tests/**/*.py" = [
    "S101", # use of assert (required in tests)
    "ANN001", # missing type annotation for function argument
    "ANN201", # missing return type annotation
    "ANN202", # missing return type annotation for private function
    "ANN204", # missing return type annotation for special method
    "PLR2004", # magic value in comparison (test values are acceptable)
    "SIM103", # return condition directly (test helpers can be verbose for clarity)
    "B007", # loop control variable not used within loop body
    "ARG001", # unused function argument (test helpers need to match expected signatures)
    "ARG002", # unused method argument
    "TRY002", # create your own exception (generic exceptions are fine in tests)
    "D104", # missing docstring in public package
]

# Examples and demo files
"examples/**/*.py" = [
    "T201", # print statements (examples need output)
    "E402", # module level import not at top of file (examples need flexibility)
    "E501", # line too long (some example lines are unavoidably long)
    "F401", # unused imports (examples may import for demonstration)
    "EXE001", # shebang present but file not executable
    "ANN001", # missing type annotations (examples don't need strict typing)
    "ANN201", # missing return type annotation
    "ANN202", # missing return type annotation for private function
    "ANN204", # missing return type annotation for special method
    "D100", # missing docstring in public module
    "D104", # missing docstring in public package
    "D105", # undocumented magic method
    "D107", # undocumented public init
    "ARG002", # unused method argument (examples may have unused parameters)
    "BLE001", # examples can use broad exception handling
    "B007", # loop control variable not used within loop body
]

# Main source files - specific violations
"src/clearml_mcp/clearml_mcp.py" = [
    "C901", # function is too complex (compare_tasks function)
    "PERF401", # use list comprehension (specific instances)
    "C401", # unnecessary generator (specific instances)
    "PLR0913", # too many arguments (specific functions)
    "S110", # try-except-pass (legitimate for skipping inaccessible tasks)
]

[tool.ty]
src.root = "./src"
environment.python = "./.venv"
terminal.output-format = "concise"

[tool.coverage.report]
skip_empty = true
show_missing = true
fail_under = 65

[tool.coverage.run]
branch = true
source = ["src"]
omit = ["_*.py", "__*.py"]

[tool.portray.mkdocs]
site_name = "clearml-mcp"

[tool.portray.mkdocs.theme]
name = "material"
custom_dir = "docs"
palette = {scheme= "slate", primary="deep purple", accent="purple"}
