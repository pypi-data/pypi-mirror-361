{"version":3,"file":"lib_index_js.a9f545c43e2779839fb4.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,0DAA0D,gBAAgB,IAAI,QAAQ;AACtF;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACzBiD;AACsB;AAC7B;AACD;AACzC;AACA;AACA,8BAA8B,qBAAqB,aAAa,SAAS,mBAAmB;AAC5F;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB,aAAa,IAAI;AACjB,yBAAyB,YAAY,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS,EAAE,iEAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAU;AACpC;AACA;AACA;AACA;AACA,oCAAoC,mDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA,mCAAmC,gEAAc,GAAG,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,SAAS,EAAC","sources":["webpack://jupyterlab-firefox-launcher/./lib/handler.js","webpack://jupyterlab-firefox-launcher/./lib/index.js"],"sourcesContent":["// src/handler.ts\n/**\n * Make a request to the backend of the JupyterLab Firefox launcher extension.\n *\n * This helper wraps a `fetch` call to a Jupyter server extension API endpoint.\n *\n * @param endpoint - The endpoint to call (e.g., 'launch')\n * @param init - The fetch initialization parameters\n * @returns A promise resolving to the response JSON\n */\nexport async function requestAPI(endpoint = '', init = {}) {\n    const url = `/jupyterhub-firefox-launcher/${endpoint}`;\n    const response = await fetch(url, {\n        method: 'GET',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        ...init\n    });\n    if (!response.ok) {\n        const message = await response.text();\n        throw new Error(`API request failed with status ${response.status}: ${message}`);\n    }\n    return response.json();\n}\n","import { ILauncher } from '@jupyterlab/launcher';\nimport { ICommandPalette, MainAreaWidget } from '@jupyterlab/apputils';\nimport { requestAPI } from './handler.js';\nimport { Widget } from '@lumino/widgets';\nconst buildFirefoxHTML = (iframeId, url) => {\n    return `\n    <div style=\"display:flex; justify-content:end; padding:4px; gap:8px; background:#f5f5f5;\">\n      <button id=\"ff-refresh\">üîÑ Refresh</button>\n      <button id=\"ff-fullscreen\">‚õ∂ Fullscreen</button>\n      <button id=\"ff-close\">‚ùå Close</button>\n    </div>\n    <iframe \n      id=\"${iframeId}\"\n      src=\"${url}\" \n      style=\"width:100%; height:90%; border:none;\"\n      allowfullscreen\n    ></iframe>`;\n};\nconst requestFullscreen = (element) => {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    }\n    else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen();\n    }\n    else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    }\n    else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n    }\n};\nconst handleFullscreenChange = () => {\n    if (!document.fullscreenElement &&\n        !document.webkitFullscreenElement &&\n        !document.mozFullScreenElement &&\n        !document.msFullscreenElement) {\n        console.log('Exited fullscreen mode');\n    }\n};\nconst extension = {\n    id: 'jupyterlab-firefox-launcher:plugin',\n    description: 'JupyterLab extension to launch Firefox in a tab',\n    autoStart: true,\n    requires: [ILauncher, ICommandPalette],\n    activate: async (app, launcher, palette) => {\n        const command = 'firefox:open';\n        const label = 'Firefox Browser';\n        const url = 'http://localhost:6080';\n        app.commands.addCommand(command, {\n            label,\n            execute: async () => {\n                var _a, _b, _c;\n                // Request the backend to launch Firefox\n                try {\n                    await requestAPI('launch');\n                }\n                catch (e) {\n                    console.error('Failed to launch Firefox:', e);\n                }\n                const content = new Widget();\n                content.node.style.height = '100%';\n                content.node.style.width = '100%';\n                content.node.style.overflow = 'hidden';\n                const iframeId = 'firefox-iframe';\n                content.node.innerHTML = buildFirefoxHTML(iframeId, url);\n                const widget = new MainAreaWidget({ content });\n                widget.id = 'firefox-browser';\n                widget.title.label = label;\n                widget.title.closable = true;\n                widget.node.style.height = '100%';\n                app.shell.add(widget, 'main');\n                app.shell.activateById(widget.id);\n                const iframe = content.node.querySelector(`#${iframeId}`);\n                if (!iframe) {\n                    console.error('Firefox iframe not found');\n                    return;\n                }\n                (_a = content.node.querySelector('#ff-refresh')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', () => {\n                    iframe.src = iframe.src;\n                });\n                (_b = content.node.querySelector('#ff-close')) === null || _b === void 0 ? void 0 : _b.addEventListener('click', () => {\n                    widget.close();\n                });\n                (_c = content.node.querySelector('#ff-fullscreen')) === null || _c === void 0 ? void 0 : _c.addEventListener('click', () => {\n                    requestFullscreen(iframe);\n                });\n                // Auto exit fullscreen on ESC key\n                document.addEventListener('fullscreenchange', handleFullscreenChange);\n                document.addEventListener('webkitfullscreenchange', handleFullscreenChange);\n                document.addEventListener('mozfullscreenchange', handleFullscreenChange);\n                document.addEventListener('MSFullscreenChange', handleFullscreenChange);\n            }\n        });\n        launcher.add({\n            command,\n            category: 'Other',\n            rank: 1\n        });\n        palette.addItem({\n            command,\n            category: 'Firefox'\n        });\n    }\n};\nexport default extension;\n"],"names":[],"sourceRoot":""}