# automatically generated by the FlatBuffers compiler, do not modify

# namespace: companion

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Mapping of one sourceUaNodeId to targetDlAddress
class NodeIdDlAddressMapping(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NodeIdDlAddressMapping()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNodeIdDlAddressMapping(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NodeIdDlAddressMapping
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The original OPC UA NodeId which will be mapped into the datalayer address space, e.g. ns=2;s=plc/app/Appl/...
    # NodeIdDlAddressMapping
    def SourceUaNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The target datalayer address in the datalayer address space, e.g. mydlnode/foo/bar/...
    # NodeIdDlAddressMapping
    def TargetDlAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Verification of the mapping, used as output parameter
    # NodeIdDlAddressMapping
    def MappingResult(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # NodeIdDlAddressMapping
    def MappingResultAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # NodeIdDlAddressMapping
    def MappingResultLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeIdDlAddressMapping
    def MappingResultIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def NodeIdDlAddressMappingStart(builder): builder.StartObject(3)
def Start(builder):
    return NodeIdDlAddressMappingStart(builder)
def NodeIdDlAddressMappingAddSourceUaNodeId(builder, sourceUaNodeId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sourceUaNodeId), 0)
def AddSourceUaNodeId(builder, sourceUaNodeId):
    return NodeIdDlAddressMappingAddSourceUaNodeId(builder, sourceUaNodeId)
def NodeIdDlAddressMappingAddTargetDlAddress(builder, targetDlAddress): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(targetDlAddress), 0)
def AddTargetDlAddress(builder, targetDlAddress):
    return NodeIdDlAddressMappingAddTargetDlAddress(builder, targetDlAddress)
def NodeIdDlAddressMappingAddMappingResult(builder, mappingResult): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mappingResult), 0)
def AddMappingResult(builder, mappingResult):
    return NodeIdDlAddressMappingAddMappingResult(builder, mappingResult)
def NodeIdDlAddressMappingStartMappingResultVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartMappingResultVector(builder, numElems):
    return NodeIdDlAddressMappingStartMappingResultVector(builder, numElems)
def NodeIdDlAddressMappingEnd(builder): return builder.EndObject()
def End(builder):
    return NodeIdDlAddressMappingEnd(builder)
try:
    from typing import List
except:
    pass

class NodeIdDlAddressMappingT(object):

    # NodeIdDlAddressMappingT
    def __init__(self):
        self.sourceUaNodeId = None  # type: str
        self.targetDlAddress = None  # type: str
        self.mappingResult = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        nodeIdDlAddressMapping = NodeIdDlAddressMapping()
        nodeIdDlAddressMapping.Init(buf, pos)
        return cls.InitFromObj(nodeIdDlAddressMapping)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, nodeIdDlAddressMapping):
        x = NodeIdDlAddressMappingT()
        x._UnPack(nodeIdDlAddressMapping)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.sourceUaNodeId == other.sourceUaNodeId and \
            self.targetDlAddress == other.targetDlAddress and \
            self.mappingResult == other.mappingResult

    # NodeIdDlAddressMappingT
    def _UnPack(self, nodeIdDlAddressMapping):
        if nodeIdDlAddressMapping is None:
            return
        self.sourceUaNodeId = nodeIdDlAddressMapping.SourceUaNodeId()
        self.targetDlAddress = nodeIdDlAddressMapping.TargetDlAddress()
        if not nodeIdDlAddressMapping.MappingResultIsNone():
            if np is None:
                self.mappingResult = []
                for i in range(nodeIdDlAddressMapping.MappingResultLength()):
                    self.mappingResult.append(nodeIdDlAddressMapping.MappingResult(i))
            else:
                self.mappingResult = nodeIdDlAddressMapping.MappingResultAsNumpy()

    # NodeIdDlAddressMappingT
    def Pack(self, builder):
        if self.sourceUaNodeId is not None:
            sourceUaNodeId = builder.CreateString(self.sourceUaNodeId)
        if self.targetDlAddress is not None:
            targetDlAddress = builder.CreateString(self.targetDlAddress)
        if self.mappingResult is not None:
            if np is not None and type(self.mappingResult) is np.ndarray:
                mappingResult = builder.CreateNumpyVector(self.mappingResult)
            else:
                NodeIdDlAddressMappingStartMappingResultVector(builder, len(self.mappingResult))
                for i in reversed(range(len(self.mappingResult))):
                    builder.PrependByte(self.mappingResult[i])
                mappingResult = builder.EndVector()
        NodeIdDlAddressMappingStart(builder)
        if self.sourceUaNodeId is not None:
            NodeIdDlAddressMappingAddSourceUaNodeId(builder, sourceUaNodeId)
        if self.targetDlAddress is not None:
            NodeIdDlAddressMappingAddTargetDlAddress(builder, targetDlAddress)
        if self.mappingResult is not None:
            NodeIdDlAddressMappingAddMappingResult(builder, mappingResult)
        nodeIdDlAddressMapping = NodeIdDlAddressMappingEnd(builder)
        return nodeIdDlAddressMapping
