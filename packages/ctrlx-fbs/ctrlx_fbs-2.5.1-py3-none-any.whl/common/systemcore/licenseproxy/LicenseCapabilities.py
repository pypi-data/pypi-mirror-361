# automatically generated by the FlatBuffers compiler, do not modify

# namespace: licenseproxy

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LicenseCapabilities(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LicenseCapabilities()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLicenseCapabilities(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LicenseCapabilities
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LicenseCapabilities
    def Capabilities(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from common.systemcore.licenseproxy.LicenseCapability import LicenseCapability
            obj = LicenseCapability()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LicenseCapabilities
    def CapabilitiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LicenseCapabilities
    def CapabilitiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def LicenseCapabilitiesStart(builder): builder.StartObject(1)
def Start(builder):
    return LicenseCapabilitiesStart(builder)
def LicenseCapabilitiesAddCapabilities(builder, capabilities): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(capabilities), 0)
def AddCapabilities(builder, capabilities):
    return LicenseCapabilitiesAddCapabilities(builder, capabilities)
def LicenseCapabilitiesStartCapabilitiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCapabilitiesVector(builder, numElems):
    return LicenseCapabilitiesStartCapabilitiesVector(builder, numElems)
def LicenseCapabilitiesEnd(builder): return builder.EndObject()
def End(builder):
    return LicenseCapabilitiesEnd(builder)
import common.systemcore.licenseproxy.LicenseCapability
try:
    from typing import List
except:
    pass

class LicenseCapabilitiesT(object):

    # LicenseCapabilitiesT
    def __init__(self):
        self.capabilities = None  # type: List[common.systemcore.licenseproxy.LicenseCapability.LicenseCapabilityT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        licenseCapabilities = LicenseCapabilities()
        licenseCapabilities.Init(buf, pos)
        return cls.InitFromObj(licenseCapabilities)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, licenseCapabilities):
        x = LicenseCapabilitiesT()
        x._UnPack(licenseCapabilities)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.capabilities == other.capabilities

    # LicenseCapabilitiesT
    def _UnPack(self, licenseCapabilities):
        if licenseCapabilities is None:
            return
        if not licenseCapabilities.CapabilitiesIsNone():
            self.capabilities = []
            for i in range(licenseCapabilities.CapabilitiesLength()):
                if licenseCapabilities.Capabilities(i) is None:
                    self.capabilities.append(None)
                else:
                    licenseCapability_ = common.systemcore.licenseproxy.LicenseCapability.LicenseCapabilityT.InitFromObj(licenseCapabilities.Capabilities(i))
                    self.capabilities.append(licenseCapability_)

    # LicenseCapabilitiesT
    def Pack(self, builder):
        if self.capabilities is not None:
            capabilitieslist = []
            for i in range(len(self.capabilities)):
                capabilitieslist.append(self.capabilities[i].Pack(builder))
            LicenseCapabilitiesStartCapabilitiesVector(builder, len(self.capabilities))
            for i in reversed(range(len(self.capabilities))):
                builder.PrependUOffsetTRelative(capabilitieslist[i])
            capabilities = builder.EndVector()
        LicenseCapabilitiesStart(builder)
        if self.capabilities is not None:
            LicenseCapabilitiesAddCapabilities(builder, capabilities)
        licenseCapabilities = LicenseCapabilitiesEnd(builder)
        return licenseCapabilities
