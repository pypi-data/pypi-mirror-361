# automatically generated by the FlatBuffers compiler, do not modify

# namespace: client

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MessageSecurityMode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MessageSecurityMode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMessageSecurityMode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MessageSecurityMode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # default is BESTAVAILABLE this determines and uses the most secure method automatically
    # MessageSecurityMode
    def MessageSecurityMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def MessageSecurityModeStart(builder): builder.StartObject(1)
def Start(builder):
    return MessageSecurityModeStart(builder)
def MessageSecurityModeAddMessageSecurityMode(builder, messageSecurityMode): builder.PrependInt8Slot(0, messageSecurityMode, 0)
def AddMessageSecurityMode(builder, messageSecurityMode):
    return MessageSecurityModeAddMessageSecurityMode(builder, messageSecurityMode)
def MessageSecurityModeEnd(builder): return builder.EndObject()
def End(builder):
    return MessageSecurityModeEnd(builder)

class MessageSecurityModeT(object):

    # MessageSecurityModeT
    def __init__(self):
        self.messageSecurityMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        messageSecurityMode = MessageSecurityMode()
        messageSecurityMode.Init(buf, pos)
        return cls.InitFromObj(messageSecurityMode)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, messageSecurityMode):
        x = MessageSecurityModeT()
        x._UnPack(messageSecurityMode)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.messageSecurityMode == other.messageSecurityMode

    # MessageSecurityModeT
    def _UnPack(self, messageSecurityMode):
        if messageSecurityMode is None:
            return
        self.messageSecurityMode = messageSecurityMode.MessageSecurityMode()

    # MessageSecurityModeT
    def Pack(self, builder):
        MessageSecurityModeStart(builder)
        MessageSecurityModeAddMessageSecurityMode(builder, self.messageSecurityMode)
        messageSecurityMode = MessageSecurityModeEnd(builder)
        return messageSecurityMode
