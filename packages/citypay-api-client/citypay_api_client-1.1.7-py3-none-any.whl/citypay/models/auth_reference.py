# coding: utf-8

"""
    CityPay Payment API

     Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 

    Contact: support@citypay.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime as DateTime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AuthReference(BaseModel):
    """
    AuthReference
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="The address of the card holder.")
    amount: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="The amount of the transaction in decimal currency format.")
    amount_value: Optional[Annotated[int, Field(strict=True)]] = Field(default=None, description="The amount of the transaction in integer/request format.")
    atrn: Optional[StrictStr] = Field(default=None, description="A reference number provided by the acquiring services.")
    authcode: Optional[StrictStr] = Field(default=None, description="The authorisation code of the transaction returned by the acquirer or card issuer.")
    authen_result: Optional[StrictStr] = Field(default=None, description="The authentication result if an ecommerce transaction. 'Y'. Authentication Successful, 'N'. Authentication Failed, 'A'. Attempts Processing Performed, 'U'. Authentication Could Not Be Performed, 'C'. Challenge Required.")
    batchno: Optional[StrictStr] = Field(default=None, description="A batch number which the transaction has been end of day batched towards.")
    bin_commercial: Optional[StrictBool] = Field(default=None, description="Whether the card is a commercial card.")
    bin_consumer: Optional[StrictBool] = Field(default=None, description="Whether the card is a consumer card.")
    bin_corporate: Optional[StrictBool] = Field(default=None, description="Whether the card is a corporate card.")
    bin_credit: Optional[StrictBool] = Field(default=None, description="Whether the card is a credit card.")
    bin_debit: Optional[StrictBool] = Field(default=None, description="Whether the card is a debit card.")
    cardholder_agreement: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Merchant-initiated transactions (MITs) are payments you trigger, where the cardholder has previously consented to you carrying out such payments. These may be scheduled (such as recurring payments and installments) or unscheduled (like account top-ups triggered by balance thresholds and no-show charges).  Scheduled These are regular payments using stored card details, like installments or a monthly subscription fee.  - `I` Instalment - A single purchase of goods or services billed to a cardholder in multiple transactions, over a period of time agreed by the cardholder and you.  - `R` Recurring - Transactions processed at fixed, regular intervals not to exceed one year between transactions, representing an agreement between a cardholder and you to purchase goods or services provided over a period of time.  Unscheduled These are payments using stored card details that do not occur on a regular schedule, like top-ups for a digital wallet triggered by the balance falling below a certain threshold.  - `A` Reauthorisation - a purchase made after the original purchase. A common scenario is delayed/split shipments.  - `C` Unscheduled Payment - A transaction using a stored credential for a fixed or variable amount that does not occur on a scheduled or regularly occurring transaction date. This includes account top-ups triggered by balance thresholds.  - `D` Delayed Charge - A delayed charge is typically used in hotel, cruise lines and vehicle rental environments to perform a supplemental account charge after original services are rendered.  - `L` Incremental - An incremental authorisation is typically found in hotel and car rental environments, where the cardholder has agreed to pay for any service incurred during the duration of the contract. An incremental authorisation is where you need to seek authorisation of further funds in addition to what you have originally requested. A common scenario is additional services charged to the contract, such as extending a stay in a hotel.  - `S` Resubmission - When the original purchase occurred, but you were not able to get authorisation at the time the goods or services were provided. It should be only used where the goods or services have already been provided, but the authorisation request is declined for insufficient funds.  - `X` No-show - A no-show is a transaction where you are enabled to charge for services which the cardholder entered into an agreement to purchase, but the cardholder did not meet the terms of the agreement.  - `N` Not Applicable - For all other transactions the value will be not applicable. ")
    currency: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="The currency of the transaction in ISO 4217 code format.")
    datetime: Optional[DateTime] = Field(default=None, description="The date and time of the transaction.")
    eci: Optional[StrictStr] = Field(default=None, description="The ECI if an ecommerce transaction.")
    email: Optional[Annotated[str, Field(strict=True, max_length=254)]] = Field(default=None, description="The email address of the card holder.")
    env: Optional[StrictStr] = Field(default=None, description="The environment that the transaction is process within based on the transaction type.")
    identifier: Optional[Annotated[str, Field(min_length=4, strict=True, max_length=50)]] = Field(default=None, description="The identifier of the transaction used to process the transaction.")
    initiation: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="The initiation of the payment. The value will be C for Card holder initiated and M for a merchant initiated transaction.")
    instrument: Optional[StrictStr] = Field(default=None, description="The payment instrument used such as Card, Cash, Bank, Crypto, ApplePay, GooglePay, Click2Pay, PayPal, OpenBankingPayment.")
    maskedpan: Optional[StrictStr] = Field(default=None, description="A masking of the card number which was used to process the tranasction.")
    merchantid: Optional[StrictInt] = Field(default=None, description="The merchant id of the transaction result.")
    meta: Optional[Dict[str, StrictStr]] = None
    name_on_card: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=45)]] = Field(default=None, description="The name of the card holder.")
    postcode: Optional[Annotated[str, Field(strict=True, max_length=16)]] = Field(default=None, description="The postcode of the card holder.")
    result: Optional[StrictStr] = Field(default=None, description="The result of the transaction.")
    result_id: Optional[StrictStr] = Field(default=None, description="The id of the result of the transaction.")
    scheme: Optional[StrictStr] = Field(default=None, description="The card scheme of any card used.")
    scheme_logo: Optional[StrictStr] = Field(default=None, description="The card scheme logo of any card used.")
    trans_status: Optional[StrictStr] = Field(default=None, description="The current status of the transaction through it's lifecycle.")
    trans_type: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="The type code of transaction that was processed.")
    transno: Optional[StrictInt] = Field(default=None, description="The transaction number of the transaction.")
    type: Optional[StrictStr] = Field(default=None, description="Defines whether the transaction is a sale, refund or verification.")
    utc: Optional[StrictInt] = Field(default=None, description="The date and time of the transaction in UTC milli seconds since the epoc.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["address", "amount", "amount_value", "atrn", "authcode", "authen_result", "batchno", "bin_commercial", "bin_consumer", "bin_corporate", "bin_credit", "bin_debit", "cardholder_agreement", "currency", "datetime", "eci", "email", "env", "identifier", "initiation", "instrument", "maskedpan", "merchantid", "meta", "name_on_card", "postcode", "result", "result_id", "scheme", "scheme_logo", "trans_status", "trans_type", "transno", "type", "utc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "amount": obj.get("amount"),
            "amount_value": obj.get("amount_value"),
            "atrn": obj.get("atrn"),
            "authcode": obj.get("authcode"),
            "authen_result": obj.get("authen_result"),
            "batchno": obj.get("batchno"),
            "bin_commercial": obj.get("bin_commercial"),
            "bin_consumer": obj.get("bin_consumer"),
            "bin_corporate": obj.get("bin_corporate"),
            "bin_credit": obj.get("bin_credit"),
            "bin_debit": obj.get("bin_debit"),
            "cardholder_agreement": obj.get("cardholder_agreement"),
            "currency": obj.get("currency"),
            "datetime": obj.get("datetime"),
            "eci": obj.get("eci"),
            "email": obj.get("email"),
            "env": obj.get("env"),
            "identifier": obj.get("identifier"),
            "initiation": obj.get("initiation"),
            "instrument": obj.get("instrument"),
            "maskedpan": obj.get("maskedpan"),
            "merchantid": obj.get("merchantid"),
            "meta": obj.get("meta"),
            "name_on_card": obj.get("name_on_card"),
            "postcode": obj.get("postcode"),
            "result": obj.get("result"),
            "result_id": obj.get("result_id"),
            "scheme": obj.get("scheme"),
            "scheme_logo": obj.get("scheme_logo"),
            "trans_status": obj.get("trans_status"),
            "trans_type": obj.get("trans_type"),
            "transno": obj.get("transno"),
            "type": obj.get("type"),
            "utc": obj.get("utc")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


