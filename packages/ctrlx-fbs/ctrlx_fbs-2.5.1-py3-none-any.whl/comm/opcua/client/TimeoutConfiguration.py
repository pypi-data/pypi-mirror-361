# automatically generated by the FlatBuffers compiler, do not modify

# namespace: client

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TimeoutConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TimeoutConfiguration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTimeoutConfiguration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TimeoutConfiguration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The browse service timeout in milliseconds
    # TimeoutConfiguration
    def BrowseCallTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 10000

    # The discovery service timeout in milliseconds
    # TimeoutConfiguration
    def DiscoveryTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 60000

    # The publish service timeout in milliseconds
    # TimeoutConfiguration
    def PublishTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 60000

    # The read service timeout in milliseconds
    # TimeoutConfiguration
    def ReadCallTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 10000

    # The requested session timeout in milliseconds
    # TimeoutConfiguration
    def SessionTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 1200000.0

    # The discovery service timeout in milliseconds
    # If the response of the “Watchdog-Read” does not return within the watchdog-timeout,
    # the client assumes that the connection to the server was interrupted or closed
    # TimeoutConfiguration
    def WatchdogTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 5000

    # the write service timeout in milliseconds
    # TimeoutConfiguration
    def WriteCallTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 10000

    # The call service timeout in milliseconds
    # TimeoutConfiguration
    def CallCallTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 10000

    # The delay between automatic reconnects in milliseconds
    # TimeoutConfiguration
    def ReconnectDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 5000

def TimeoutConfigurationStart(builder): builder.StartObject(9)
def Start(builder):
    return TimeoutConfigurationStart(builder)
def TimeoutConfigurationAddBrowseCallTimeout(builder, browseCallTimeout): builder.PrependUint32Slot(0, browseCallTimeout, 10000)
def AddBrowseCallTimeout(builder, browseCallTimeout):
    return TimeoutConfigurationAddBrowseCallTimeout(builder, browseCallTimeout)
def TimeoutConfigurationAddDiscoveryTimeout(builder, discoveryTimeout): builder.PrependUint32Slot(1, discoveryTimeout, 60000)
def AddDiscoveryTimeout(builder, discoveryTimeout):
    return TimeoutConfigurationAddDiscoveryTimeout(builder, discoveryTimeout)
def TimeoutConfigurationAddPublishTimeout(builder, publishTimeout): builder.PrependUint32Slot(2, publishTimeout, 60000)
def AddPublishTimeout(builder, publishTimeout):
    return TimeoutConfigurationAddPublishTimeout(builder, publishTimeout)
def TimeoutConfigurationAddReadCallTimeout(builder, readCallTimeout): builder.PrependUint32Slot(3, readCallTimeout, 10000)
def AddReadCallTimeout(builder, readCallTimeout):
    return TimeoutConfigurationAddReadCallTimeout(builder, readCallTimeout)
def TimeoutConfigurationAddSessionTimeout(builder, sessionTimeout): builder.PrependFloat64Slot(4, sessionTimeout, 1200000.0)
def AddSessionTimeout(builder, sessionTimeout):
    return TimeoutConfigurationAddSessionTimeout(builder, sessionTimeout)
def TimeoutConfigurationAddWatchdogTimeout(builder, watchdogTimeout): builder.PrependUint32Slot(5, watchdogTimeout, 5000)
def AddWatchdogTimeout(builder, watchdogTimeout):
    return TimeoutConfigurationAddWatchdogTimeout(builder, watchdogTimeout)
def TimeoutConfigurationAddWriteCallTimeout(builder, writeCallTimeout): builder.PrependUint32Slot(6, writeCallTimeout, 10000)
def AddWriteCallTimeout(builder, writeCallTimeout):
    return TimeoutConfigurationAddWriteCallTimeout(builder, writeCallTimeout)
def TimeoutConfigurationAddCallCallTimeout(builder, callCallTimeout): builder.PrependUint32Slot(7, callCallTimeout, 10000)
def AddCallCallTimeout(builder, callCallTimeout):
    return TimeoutConfigurationAddCallCallTimeout(builder, callCallTimeout)
def TimeoutConfigurationAddReconnectDelay(builder, reconnectDelay): builder.PrependUint32Slot(8, reconnectDelay, 5000)
def AddReconnectDelay(builder, reconnectDelay):
    return TimeoutConfigurationAddReconnectDelay(builder, reconnectDelay)
def TimeoutConfigurationEnd(builder): return builder.EndObject()
def End(builder):
    return TimeoutConfigurationEnd(builder)

class TimeoutConfigurationT(object):

    # TimeoutConfigurationT
    def __init__(self):
        self.browseCallTimeout = 10000  # type: int
        self.discoveryTimeout = 60000  # type: int
        self.publishTimeout = 60000  # type: int
        self.readCallTimeout = 10000  # type: int
        self.sessionTimeout = 1200000.0  # type: float
        self.watchdogTimeout = 5000  # type: int
        self.writeCallTimeout = 10000  # type: int
        self.callCallTimeout = 10000  # type: int
        self.reconnectDelay = 5000  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        timeoutConfiguration = TimeoutConfiguration()
        timeoutConfiguration.Init(buf, pos)
        return cls.InitFromObj(timeoutConfiguration)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, timeoutConfiguration):
        x = TimeoutConfigurationT()
        x._UnPack(timeoutConfiguration)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.browseCallTimeout == other.browseCallTimeout and \
            self.discoveryTimeout == other.discoveryTimeout and \
            self.publishTimeout == other.publishTimeout and \
            self.readCallTimeout == other.readCallTimeout and \
            self.sessionTimeout == other.sessionTimeout and \
            self.watchdogTimeout == other.watchdogTimeout and \
            self.writeCallTimeout == other.writeCallTimeout and \
            self.callCallTimeout == other.callCallTimeout and \
            self.reconnectDelay == other.reconnectDelay

    # TimeoutConfigurationT
    def _UnPack(self, timeoutConfiguration):
        if timeoutConfiguration is None:
            return
        self.browseCallTimeout = timeoutConfiguration.BrowseCallTimeout()
        self.discoveryTimeout = timeoutConfiguration.DiscoveryTimeout()
        self.publishTimeout = timeoutConfiguration.PublishTimeout()
        self.readCallTimeout = timeoutConfiguration.ReadCallTimeout()
        self.sessionTimeout = timeoutConfiguration.SessionTimeout()
        self.watchdogTimeout = timeoutConfiguration.WatchdogTimeout()
        self.writeCallTimeout = timeoutConfiguration.WriteCallTimeout()
        self.callCallTimeout = timeoutConfiguration.CallCallTimeout()
        self.reconnectDelay = timeoutConfiguration.ReconnectDelay()

    # TimeoutConfigurationT
    def Pack(self, builder):
        TimeoutConfigurationStart(builder)
        TimeoutConfigurationAddBrowseCallTimeout(builder, self.browseCallTimeout)
        TimeoutConfigurationAddDiscoveryTimeout(builder, self.discoveryTimeout)
        TimeoutConfigurationAddPublishTimeout(builder, self.publishTimeout)
        TimeoutConfigurationAddReadCallTimeout(builder, self.readCallTimeout)
        TimeoutConfigurationAddSessionTimeout(builder, self.sessionTimeout)
        TimeoutConfigurationAddWatchdogTimeout(builder, self.watchdogTimeout)
        TimeoutConfigurationAddWriteCallTimeout(builder, self.writeCallTimeout)
        TimeoutConfigurationAddCallCallTimeout(builder, self.callCallTimeout)
        TimeoutConfigurationAddReconnectDelay(builder, self.reconnectDelay)
        timeoutConfiguration = TimeoutConfigurationEnd(builder)
        return timeoutConfiguration
