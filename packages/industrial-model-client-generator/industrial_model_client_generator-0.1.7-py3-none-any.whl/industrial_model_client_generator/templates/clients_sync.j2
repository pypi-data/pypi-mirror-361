from __future__ import annotations
import datetime
from typing import Annotated

from pydantic import Field

from industrial_model import  InstanceId, ViewInstance, ViewInstanceConfig, WritableViewInstance, AsyncEngine, Engine, PaginatedResult
from industrial_model.queries import BasePaginatedQuery, BaseSearchQuery, NestedQueryParam, QueryParam

{% for view_definition in view_definitions %}
from .requests.aggregation import Aggregation{{ view_definition.view_name }}Request
from .requests.query import Query{{ view_definition.view_name }}Request
from .requests.search import Search{{ view_definition.view_name }}Request

from .models.aggregation import {{ view_definition.view_name }}Aggregation
from .models.entity_complete import {{ view_definition.view_name }}Complete
from .models.entity import {{ view_definition.view_name }}
from .models.search import {{ view_definition.view_name }}Search

{%- endfor %}

{% for view_definition in view_definitions %}
class {{ view_definition.view_name }}Client:
    def __init__(self, engine: Engine):
        self._engine = engine

    def aggregate(
        self,
        request: Aggregation{{ view_definition.view_name }}Request
    ) -> list[{{ view_definition.view_name }}Aggregation]:
        return self._engine.aggregate(request.to_statement({{ view_definition.view_name }}Aggregation))

    def search(
        self,
        request: Search{{ view_definition.view_name }}Request
    ) -> list[{{ view_definition.view_name }}Search]:
        return self._engine.search(request.to_statement({{ view_definition.view_name }}Search))


    def query(
        self,
         request: Query{{ view_definition.view_name }}Request
    ) -> PaginatedResult[{{ view_definition.view_name }}]:
        return self._engine.query(request.to_statement({{ view_definition.view_name }}))

    def query_all_pages(
        self,
         request: Query{{ view_definition.view_name }}Request
    ) -> list[{{ view_definition.view_name }}]:
        return self._engine.query_all_pages(request.to_statement({{ view_definition.view_name }}))

    def query_complete(
        self,
         request: Query{{ view_definition.view_name }}Request
    ) -> PaginatedResult[{{ view_definition.view_name }}Complete]:
        return self._engine.query(request.to_statement({{ view_definition.view_name }}Complete))

    def query_all_pages_complete(
        self,
         request: Query{{ view_definition.view_name }}Request
    ) -> list[{{ view_definition.view_name }}Complete]:
        return self._engine.query_all_pages(request.to_statement({{ view_definition.view_name }}Complete))

    def upsert(
        self, entries: list[{{ view_definition.view_name }}], replace: bool = False
    ) -> None:
        return self._engine.upsert(entries, replace)

    def delete(self, nodes: list[{{ view_definition.view_name }}]) -> None:
        return self._engine.delete(nodes)

{%- endfor %}

