import * from "type"

comptime fn abs(x: num) -> num {
    if $x < 0 { -$x }
    $x
}

comptime fn sign(x: num) -> 1 | 0 | -1 {
    if $x > 0 { 1 } 
    else if $x == 0 { 0 } 
    else { -1 }
}

comptime fn clamp(x: num, min: num, max: num) -> num {
    assert($min <= $max)
    if $x < $min { $min } 
    else if $x > $max { $max } else { $x }
}

comptime fn min(a: num, b: num) -> num {
    if $a < $b { $a } 
    else { $b }
}

comptime fn max(a: num, b: num) -> num {
    if $a > $b { $a }
    else { $b }
}

comptime fn round(x: num) -> num {
    let fract = $x - trunc($x)
    if $fract.abs() >= 0.5 {
        if $x > 0 { trunc($x) + 1 }
        else { trunc($x) - 1 }
    } else {
        trunc($x)
    }
}

comptime fn floor(x: num) -> num {
    let t = trunc($x)
    if $x >= 0 || $x == $t { $t }
    else { $t -1 }
}

comptime fn ceil(x: num) -> num {
    let t = trunc($x)
    if $x <= 0 || $x == $t { $t }
    else { $t + 1 }
}

comptime fn trunc(x: num) -> num {
    if $x >= 0 { $x as Integer as num }
    else { -(-$x as Integer as num) }
}

comptime fn fract(x: num) -> num {
    $x - trunc($x)
}

comptime fn mod(a: num, b: num) -> num {
    let r = rem($a, $b)
    if $r < 0 { $r + abs($b) }
    else { $r }
}

comptime fn rem(a: num, b: num) -> num {
    $a - (trunc($a / $b) * $b)
}