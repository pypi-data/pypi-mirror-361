cd /Users/les/Projects/jinja2-async-environment && pdm run pytest tests/test_template_rendering.py -v
direnv: loading ~/Projects/jinja2-async-environment/.envrc                      
direnv: export +PDM_ACTIVE ~PATH
(jinja2-async-environment) [jinja2-async-environment] cd /Users/les/Projects/jinja2-async-environment && pdm run pytest tests/test_template_rendering.py -v
========================================================================= test session starts =========================================================================
platform darwin -- Python 3.13.3, pytest-8.3.5, pluggy-1.5.0 -- /Users/les/Projects/jinja2-async-environment/.venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/les/Projects/jinja2-async-environment
configfile: pyproject.toml
plugins: anyio-4.9.0, timeout-2.4.0, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
collected 7 items                                                                                                                                                     

tests/test_template_rendering.py::TestTemplateRendering::test_render_simple_template PASSED                                                                     [ 14%]
tests/test_template_rendering.py::TestTemplateRendering::test_render_template_with_inheritance FAILED                                                           [ 28%]
tests/test_template_rendering.py::TestTemplateRendering::test_render_template_with_include PASSED                                                               [ 42%]
tests/test_template_rendering.py::TestTemplateRendering::test_render_async_block FAILED                                                                         [ 57%]
tests/test_template_rendering.py::TestTemplateRendering::test_render_async_include FAILED                                                                       [ 71%]
tests/test_template_rendering.py::TestTemplateRendering::test_render_async_extends FAILED                                                                       [ 85%]
tests/test_template_rendering.py::TestTemplateRendering::test_performance_with_large_template FAILED                                                            [100%]

============================================================================== FAILURES ===============================================================================
_____________________________________________________ TestTemplateRendering.test_render_template_with_inheritance _____________________________________________________

self = <tests.test_template_rendering.TestTemplateRendering object at 0x1040f7c50>
environment = <jinja2_async_environment.environment.AsyncEnvironment object at 0x1041fc7d0>

    @pytest.mark.asyncio
    async def test_render_template_with_inheritance(
        self, environment: AsyncEnvironment
    ) -> None:
>       template = await environment.get_template_async("child.html")

tests/test_template_rendering.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
jinja2_async_environment/environment.py:54: in get_template_async
    return await self._load_template_async(name, globals)
jinja2_async_environment/environment.py:120: in _load_template_async
    return await self._get_template_async(name, globals)
jinja2_async_environment/environment.py:147: in _get_template_async
    template = await self.loader.load_async(self, name, self.make_globals(globals))
jinja2_async_environment/loaders.py:86: in load_async
    code = environment.compile(source_str, name)
.venv/lib/python3.13/site-packages/jinja2/environment.py:769: in compile
    return self._compile(source, filename)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <jinja2_async_environment.environment.AsyncEnvironment object at 0x1041fc7d0>
source = "from jinja2.runtime import LoopContext, Macro, Markup, Namespace, TemplateNotFound, TemplateReference, TemplateRuntim..._0_message is missing else l_0_message))\n    yield '</p>'\n\nblocks = {'content': block_content}\ndebug_info = '1=12'"
filename = '<template>'

    def _compile(self, source: str, filename: str) -> t.Any:
        """Override the compile method to use our AsyncCodeGenerator."""
        # Add async function wrapper to the source
        if 'async def root' not in source:
            # This is a hack to make the template compile with async/await
            source = source.replace('def root', 'async def root')
            source = source.replace('def block_', 'async def block_')
    
>       return compile(source, filename, "exec")
E         File "<template>", line 15
E       SyntaxError: 'yield from' inside async function

jinja2_async_environment/environment.py:32: SyntaxError
____________________________________________________________ TestTemplateRendering.test_render_async_block ____________________________________________________________

render_func = <function root at 0x10423d080>
context = <Context {'range': <class 'range'>, 'dict': <class 'dict'>, 'lipsum': <function generate_lorem_ipsum at 0x103ec8540>, ...r object TestTemplateRendering.test_render_async_block.<locals>.async_generator at 0x1041ee2c0>} of 'async_block.html'>

    async def render_template(render_func: t.Any, context: t.Any) -> str:
        """Render a template using either async or regular generators."""
        result = []
        try:
            # Try to use the function as an async generator
>           async for event in render_func(context):

tests/test_template_rendering.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

context = <Context {'range': <class 'range'>, 'dict': <class 'dict'>, 'lipsum': <function generate_lorem_ipsum at 0x103ec8540>, ...r object TestTemplateRendering.test_render_async_block.<locals>.async_generator at 0x1041ee2c0>} of 'async_block.html'>
missing = missing, environment = <jinja2_async_environment.environment.AsyncEnvironment object at 0x1041fdd10>

>   ???
E   TypeError: 'async_generator' object is not iterable

<template>:11: TypeError

During handling of the above exception, another exception occurred:

self = <tests.test_template_rendering.TestTemplateRendering object at 0x10410f6f0>
environment = <jinja2_async_environment.environment.AsyncEnvironment object at 0x1041fdd10>

    @pytest.mark.asyncio
    async def test_render_async_block(self, environment: AsyncEnvironment) -> None:
        template = await environment.get_template_async("async_block.html")
    
        async def async_generator() -> AsyncIterator[str]:
            for item in ("Item1", "Item2", "Item3"):
                yield item
    
        context = template.new_context({"items": async_generator()})
>       rendered = await render_template(template.root_render_func, context)

tests/test_template_rendering.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

render_func = <function root at 0x10423d080>
context = <Context {'range': <class 'range'>, 'dict': <class 'dict'>, 'lipsum': <function generate_lorem_ipsum at 0x103ec8540>, ...r object TestTemplateRendering.test_render_async_block.<locals>.async_generator at 0x1041ee2c0>} of 'async_block.html'>

    async def render_template(render_func: t.Any, context: t.Any) -> str:
        """Render a template using either async or regular generators."""
        result = []
        try:
            # Try to use the function as an async generator
            async for event in render_func(context):
                result.append(event)
        except TypeError:
            # If it's a regular generator, iterate normally
>           for event in render_func(context):
E           TypeError: 'async_generator' object is not iterable

tests/test_template_rendering.py:19: TypeError
___________________________________________________________ TestTemplateRendering.test_render_async_include ___________________________________________________________

self = <tests.test_template_rendering.TestTemplateRendering object at 0x10417e330>
environment = <jinja2_async_environment.environment.AsyncEnvironment object at 0x1041fd810>

    @pytest.mark.asyncio
    async def test_render_async_include(self, environment: AsyncEnvironment) -> None:
        template = await environment.get_template_async("async_include.html")
    
        async def async_generator() -> AsyncIterator[str]:
            for item in ("Item1", "Item2", "Item3"):
                yield item
    
        context = template.new_context({"async_items": async_generator()})
>       rendered = await render_template(template.root_render_func, context)

tests/test_template_rendering.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_template_rendering.py:15: in render_template
    async for event in render_func(context):
<template>:13: in root
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

context = <Context {'range': <class 'range'>, 'dict': <class 'dict'>, 'lipsum': <function generate_lorem_ipsum at 0x103ec8540>, ...ject TestTemplateRendering.test_render_async_include.<locals>.async_generator at 0x1041ee980>} of 'async_partial.html'>
missing = missing, environment = <jinja2_async_environment.environment.AsyncEnvironment object at 0x1041fd810>

>   ???
E   NameError: name 'l_0_item' is not defined

<template>:17: NameError
___________________________________________________________ TestTemplateRendering.test_render_async_extends ___________________________________________________________

self = <tests.test_template_rendering.TestTemplateRendering object at 0x1041e1150>
environment = <jinja2_async_environment.environment.AsyncEnvironment object at 0x1041fe5d0>

    @pytest.mark.asyncio
    async def test_render_async_extends(self, environment: AsyncEnvironment) -> None:
>       template = await environment.get_template_async("async_extends.html")

tests/test_template_rendering.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
jinja2_async_environment/environment.py:54: in get_template_async
    return await self._load_template_async(name, globals)
jinja2_async_environment/environment.py:120: in _load_template_async
    return await self._get_template_async(name, globals)
jinja2_async_environment/environment.py:147: in _get_template_async
    template = await self.loader.load_async(self, name, self.make_globals(globals))
jinja2_async_environment/loaders.py:86: in load_async
    code = environment.compile(source_str, name)
.venv/lib/python3.13/site-packages/jinja2/environment.py:769: in compile
    return self._compile(source, filename)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <jinja2_async_environment.environment.AsyncEnvironment object at 0x1041fe5d0>
source = "from jinja2.runtime import LoopContext, Macro, Markup, Namespace, TemplateNotFound, TemplateReference, TemplateRuntim...efined(name='item') if l_0_item is missing else l_0_item))\n\nblocks = {'content': block_content}\ndebug_info = '1=12'"
filename = '<template>'

    def _compile(self, source: str, filename: str) -> t.Any:
        """Override the compile method to use our AsyncCodeGenerator."""
        # Add async function wrapper to the source
        if 'async def root' not in source:
            # This is a hack to make the template compile with async/await
            source = source.replace('def root', 'async def root')
            source = source.replace('def block_', 'async def block_')
    
>       return compile(source, filename, "exec")
E         File "<template>", line 15
E       SyntaxError: 'yield from' inside async function

jinja2_async_environment/environment.py:32: SyntaxError
_____________________________________________________ TestTemplateRendering.test_performance_with_large_template ______________________________________________________

context = <Context {'range': <class 'range'>, 'dict': <class 'dict'>, 'lipsum': <function generate_lorem_ipsum at 0x103ec8540>, ...tils.Cycler'>, 'joiner': <class 'jinja2.utils.Joiner'>, 'namespace': <class 'jinja2.utils.Namespace'>} of 'large.html'>
missing = missing, environment = <jinja2_async_environment.environment.AsyncEnvironment object at 0x1041fefd0>

>   ???
E   TypeError: 'async for' requires an object with __aiter__ method, got range

<template>:14: TypeError

During handling of the above exception, another exception occurred:

self = <tests.test_template_rendering.TestTemplateRendering object at 0x1041e1370>
environment = <jinja2_async_environment.environment.AsyncEnvironment object at 0x1041fefd0>

    @pytest.mark.asyncio
    async def test_performance_with_large_template(
        self, environment: AsyncEnvironment
    ) -> None:
        large_template = "{% for i in range(1000) %}{{ i }}{% endfor %}"
    
        environment.loader.mapping["large.html"] = large_template  # type: ignore
    
        template = await environment.get_template_async("large.html")
        context = template.new_context({})
    
        import time
    
        start_time = time.time()
>       rendered = await render_template(template.root_render_func, context)

tests/test_template_rendering.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_template_rendering.py:15: in render_template
    async for event in render_func(context):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

context = <Context {'range': <class 'range'>, 'dict': <class 'dict'>, 'lipsum': <function generate_lorem_ipsum at 0x103ec8540>, ...tils.Cycler'>, 'joiner': <class 'jinja2.utils.Joiner'>, 'namespace': <class 'jinja2.utils.Namespace'>} of 'large.html'>
missing = missing, environment = <jinja2_async_environment.environment.AsyncEnvironment object at 0x1041fefd0>

>   ???
E   NameError: name 'l_0_i' is not defined

<template>:22: NameError
=========================================================================== tests coverage ============================================================================
__________________________________________________________ coverage: platform darwin, python 3.13.3-final-0 ___________________________________________________________

Name                                      Stmts   Miss  Cover
-------------------------------------------------------------
jinja2_async_environment/bccache.py          45     20    56%
jinja2_async_environment/compiler.py        185     72    61%
jinja2_async_environment/environment.py      91     37    59%
jinja2_async_environment/loaders.py         218    141    35%
-------------------------------------------------------------
TOTAL                                       539    270    50%
======================================================================= short test summary info =======================================================================
FAILED tests/test_template_rendering.py::TestTemplateRendering::test_render_template_with_inheritance -   File "<template>", line 15
FAILED tests/test_template_rendering.py::TestTemplateRendering::test_render_async_block - TypeError: 'async_generator' object is not iterable
FAILED tests/test_template_rendering.py::TestTemplateRendering::test_render_async_include - NameError: name 'l_0_item' is not defined
FAILED tests/test_template_rendering.py::TestTemplateRendering::test_render_async_extends -   File "<template>", line 15
FAILED tests/test_template_rendering.py::TestTemplateRendering::test_performance_with_large_template - NameError: name 'l_0_i' is not defined
===================================================================== 5 failed, 2 passed in 0.98s =====================================================================
(jinja2-async-environment) [jinja2-async-environment]                                                                                                        main  ✭ ✱
