build_and_store_wheels: &BUILD_AND_STORE_WHEELS
  install_cibuildwheel_script:
    - python -m pip install cibuildwheel==2.15.0
  cibuildwheel_script:
    - cibuildwheel
  wheels_artifacts:
    path: "wheelhouse/*"

cirrus_wheels_macos_arm64_task:
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-xcode:14
  matrix:
    - env:
       # building all four wheels in a single task takes ~45 mins
       CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
  env:
    PATH: /opt/homebrew/opt/python@3.10/bin:$PATH
    CIBW_PRERELEASE_PYTHONS: True
    CIBW_ENVIRONMENT: >
      MACOSX_DEPLOYMENT_TARGET=12.0
      _PYTHON_HOST_PLATFORM="macosx-12.0-arm64"             
      PIP_PRE=1
      PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
      PIP_NO_BUILD_ISOLATION=false
    # TODO remove the following line once there are numpy2.0 wheels available on PyPI.
    # Also remove PIP_NO_BUILD_ISOLATION, PIP_EXTRA_INDEX_URL flags.
    CIBW_BEFORE_BUILD_MACOS: "pip install numpy>=2.0.0.dev0 meson-python ninja;bash {project}/tools/wheels/cibw_before_build_macos.sh {project}"
    PKG_CONFIG_PATH: /opt/arm64-builds/lib/pkgconfig
    # assumes that the cmake config is in /usr/local/lib/cmake
    CMAKE_PREFIX_PATH: /opt/arm64-builds/
    REPAIR_PATH: /usr/local/gfortran/lib:/opt/arm64-builds/lib
    CIBW_TEST_REQUIRES: pytest
    CIBW_TEST_COMMAND: "pytest {project}/tests"
    CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
      DYLD_LIBRARY_PATH=/usr/local/gfortran/lib:/opt/arm64-builds/lib delocate-listdeps {wheel} &&
      DYLD_LIBRARY_PATH=/usr/local/gfortran/lib:/opt/arm64-builds/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}

  install_pre_requirements_script:
    - brew install python@3.10
    - ln -s python3 /opt/homebrew/opt/python@3.10/bin/python

  build_script:
    - which python
    # needed for submodules
    - git submodule update --init
    - uname -m
    - python -c "import platform;print(platform.python_version());print(platform.system());print(platform.machine())"
    - clang --version
  <<: *BUILD_AND_STORE_WHEELS


publish_task:
  name: publish (Linux - 3.10)
  container: {image: "python:3.10-bullseye"}
  depends_on: [cirrus_wheels_macos_arm64]
  env:
    GITHUB_TOKEN: ENCRYPTED[!7402ef8e4fad6fc90238717d2f9069b896e0bf13906b7d8057ccbfa27ec4badce78765bcae2f02e3d08f061589ccb895!]
    TWINE_REPOSITORY: pypi
    TWINE_USERNAME: __token__
    TWINE_PASSWORD: ENCRYPTED[737b9fd994f87702c0c4cfe32f5b839ab4cbd719f62dbb7725aec0a6ffb070d1054a013374f2d3901cba30ccf336fc60]
  publish_script: |
    echo "Publishing wheels..."
    curl https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/wheels.zip --output wheels.zip
    unzip wheels.zip
    ls -l
    echo "CIRRUS_RELEASE: $CIRRUS_RELEASE"
    echo "CIRRUS_REPO_FULL_NAME: $CIRRUS_REPO_FULL_NAME"
    echo "Current wheels"
    ls -l wheelhouse/*

    if [[ "$CIRRUS_RELEASE" == "" ]]; then
      echo "Not a release. No need to deploy!"
      exit 0
    fi

    if [[ "$GITHUB_TOKEN" == "" ]]; then
      echo "Please provide GitHub access token via GITHUB_TOKEN environment variable!"
      exit 1
    fi
    pip install twine
    mkdir dist
    cp wheelhouse/* dist/

    python -m twine upload dist/*


    file_content_type="application/octet-stream"


    for fpath in dist/*;
    do
      echo "Uploading $fpath..."
      name=$(basename "$fpath")
      url_to_upload="https://uploads.github.com/repos/$CIRRUS_REPO_FULL_NAME/releases/$CIRRUS_RELEASE/assets?name=$name"
      curl -X POST \
        --data-binary @$fpath \
        --header "Authorization: token $GITHUB_TOKEN" \
        --header "Content-Type: $file_content_type" \
        $url_to_upload
    done